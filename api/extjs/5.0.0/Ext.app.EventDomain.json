{"tagname":"class","name":"Ext.app.EventDomain","autodetected":{"aliases":true,"alternateClassNames":true,"extends":true,"mixins":true,"requires":true,"uses":true,"members":true,"code_type":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":1}],"doc":"<p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>\n\n<p>Matching selectors to the firer of an event is one key aspect that defines an event\ndomain. All event domain instances must provide a <code>match</code> method that tests selectors\nagainst the event firer.</p>\n\n<p>When an event domain instance is created (typically as a <code>singleton</code>), its <code>type</code>\nproperty is used to catalog the domain in the\n<a href=\"#!/api/Ext.app.EventDomain-static-property-instances\" rel=\"Ext.app.EventDomain-static-property-instances\" class=\"docClass\">Ext.app.EventDomain.instances</a> map.</p>\n\n<p>There are five event domains provided by default:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.app.domain.Component\" rel=\"Ext.app.domain.Component\" class=\"docClass\">Component domain</a>. This is the primary event domain that\nhas been available since Ext JS MVC was introduced. This domain is defined as any class that\nextends <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>, where the selectors use\nExt.ComponentQuery.</li>\n<li><a href=\"#!/api/Ext.app.domain.Global\" rel=\"Ext.app.domain.Global\" class=\"docClass\">Global domain</a>. This domain provides Controllers with access\nto events fired from Ext.GlobalEvents Observable instance. These events represent\nthe state of the application as a whole, and are always anonymous. Because of this, Global\ndomain does not provide selectors at all.</li>\n<li><a href=\"#!/api/Ext.app.domain.Controller\" rel=\"Ext.app.domain.Controller\" class=\"docClass\">Controller domain</a>. This domain includes all classes\nthat extend <a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>. Events fired by Controllers will be available\nwithin this domain; selectors are either Controller's <a href=\"#!/api/Ext.app.Controller-cfg-id\" rel=\"Ext.app.Controller-cfg-id\" class=\"docClass\">id</a> or\n'*' wildcard for any Controller.</li>\n<li><a href=\"#!/api/Ext.app.domain.Store\" rel=\"Ext.app.domain.Store\" class=\"docClass\">Store domain</a>. This domain is for classes extending\nExt.data.AbstractStore. Selectors are either Store's\nstoreId or '*' wildcard for any Store.</li>\n<li><a href=\"#!/api/Ext.app.domain.Direct\" rel=\"Ext.app.domain.Direct\" class=\"docClass\">Direct domain</a>. This domain includes all classes that extend\nExt.direct.Provider. Selectors are either Provider's id\nor '*' wildcard for any Provider. This domain is optional and will be loaded only if\nExt.direct.Manager singleton is required in your application.</li>\n</ul>\n\n","aliases":{},"alternateClassNames":[],"extends":"Ext.Base","mixins":[],"requires":["Ext.util.Event"],"uses":[],"members":[{"tagname":"cfg","name":"idProperty","autodetected":{},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":50}],"doc":"<p>Name of the identifier property for this event domain.</p>\n","type":"String","default":null,"properties":null,"id":"cfg-idProperty","owner":"Ext.app.EventDomain","html_type":"String"},{"tagname":"property","name":"isInstance","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":55}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":55,"type":"Boolean","default":"false","readonly":null,"id":"property-isInstance","owner":"Ext.app.EventDomain","short_doc":" ...","html_type":"Boolean"},{"tagname":"property","name":"instances","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":43}],"doc":"<p>An object map containing <code><a href=\"#!/api/Ext.app.EventDomain\" rel=\"Ext.app.EventDomain\" class=\"docClass\">Ext.app.EventDomain</a></code> instances keyed by the value\nof their <code>type</code> property.</p>\n","inheritdoc":null,"static":true,"private":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"static-property-instances","owner":"Ext.app.EventDomain","short_doc":"An object map containing Ext.app.EventDomain instances keyed by the value\nof their type property. ...","html_type":"Object"},{"tagname":"method","name":"constructor","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":57}],"doc":"\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":57,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-constructor","owner":"Ext.app.EventDomain","return":{"type":"Ext.app.EventDomain","doc":"\n","html_type":"<a href=\"#!/api/Ext.app.EventDomain\" rel=\"Ext.app.EventDomain\" class=\"docClass\">Ext.app.EventDomain</a>"},"short_doc":" ..."},{"tagname":"method","name":"destroy","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":332}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":332,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-destroy","owner":"Ext.app.EventDomain","short_doc":" ..."},{"tagname":"method","name":"dispatch","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":68}],"doc":"<p>This method dispatches an event fired by an object monitored by this domain. This\nis not called directly but is called by interceptors injected by the <code>monitor</code> method.</p>\n","params":[{"tagname":"params","type":"Object","name":"target","doc":"<p>The firer of the event.</p>\n\n","html_type":"Object"},{"tagname":"params","type":"String","name":"ev","doc":"<p>The event being fired.</p>\n\n","html_type":"String"},{"tagname":"params","type":"Array","name":"args","doc":"<p>The arguments for the event. This array <strong>does not</strong> include the event name.\nThat has already been sliced off because this class intercepts the fireEventArgs\nmethod which takes an array as the event's argument list.</p>\n\n","html_type":"Array"}],"return":{"type":"Boolean","name":"return","doc":"<p><code>false</code> if any listener returned <code>false</code>, otherwise <code>true</code>.</p>\n\n","properties":null,"html_type":"Boolean"},"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["match"],"id":"method-dispatch","owner":"Ext.app.EventDomain","short_doc":"This method dispatches an event fired by an object monitored by this domain. ..."},{"tagname":"method","name":"listen","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":127}],"doc":"<p>This method adds listeners on behalf of a controller. This method is passed an\nobject that is keyed by selectors. The value of these is also an object but now\nkeyed by event name. For example:</p>\n\n<pre><code> domain.listen({\n     'some[selector]': {\n         click: function() { ... }\n     },\n\n     'other selector': {\n         change: {\n             fn: function() { ... },\n             delay: 10\n         }\n     }\n\n }, controller);\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"selectors","doc":"<p>Config object containing selectors and listeners.</p>\n","html_type":"Object"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-listen","owner":"Ext.app.EventDomain","short_doc":"This method adds listeners on behalf of a controller. ..."},{"tagname":"method","name":"match","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":228}],"doc":"<p>This method matches the firer of the event (the <code>target</code>) to the given <code>selector</code>.\nDefault matching is very simple: a match is true when selector equals target's\n<a href=\"#!/api/Ext.app.EventDomain-cfg-idProperty\" rel=\"Ext.app.EventDomain-cfg-idProperty\" class=\"docClass\">idProperty</a>, or when selector is '*' wildcard to match any\ntarget.</p>\n","params":[{"tagname":"params","type":"Object","name":"target","doc":"<p>The firer of the event.</p>\n","html_type":"Object"},{"tagname":"params","type":"String","name":"selector","doc":"<p>The selector to which to match the <code>target</code>.</p>\n","html_type":"String"}],"return":{"type":"Boolean","name":"return","doc":"<p><code>true</code> if the <code>target</code> matches the <code>selector</code>.</p>\n\n\n\n","properties":null,"html_type":"Boolean"},"protected":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-match","owner":"Ext.app.EventDomain","short_doc":"This method matches the firer of the event (the target) to the given selector. ..."},{"tagname":"method","name":"monitor","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":251}],"doc":"<p>This method is called by the derived class to monitor <code>fireEvent</code> calls. Any call\nto <code>fireEvent</code> on the target Observable will be intercepted and dispatched to any\nlistening Controllers. Assuming the original <code>fireEvent</code> method does not return\n<code>false</code>, the event is passed to the <code>dispatch</code> method of this object.</p>\n\n<p>This is typically called in the <code>constructor</code> of derived classes.</p>\n","params":[{"tagname":"params","type":"Ext.Class","name":"observable","doc":"<p>The Observable to monitor for events.</p>\n","html_type":"Ext.Class"}],"protected":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["dispatch","isSuspended"],"id":"method-monitor","owner":"Ext.app.EventDomain","short_doc":"This method is called by the derived class to monitor fireEvent calls. ..."},{"tagname":"method","name":"unlisten","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"D:/_Projects/Personal/ExtJS/ext-5.0.0/src/app/EventDomain.js","linenr":281}],"doc":"<p>Removes all of a controller's attached listeners.</p>\n","params":[{"tagname":"params","type":"String","name":"controllerId","doc":"<p>The id of the controller.</p>\n","html_type":"String"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-unlisten","owner":"Ext.app.EventDomain","short_doc":"Removes all of a controller's attached listeners. ..."}],"code_type":"ext_define","id":"class-Ext.app.EventDomain","short_doc":"This class is a base class for an event domain. ..."}