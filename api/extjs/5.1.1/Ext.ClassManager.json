{"tagname":"class","name":"Ext.ClassManager","autodetected":{},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":2}],"doc":"<p><a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> manages all classes and handles mapping from string class name to\nactual class objects throughout the whole framework. It is not generally accessed directly, rather through\nthese convenient shorthands:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a></li>\n<li><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a></li>\n<li><a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a></li>\n<li><a href=\"#!/api/Ext-method-getClass\" rel=\"Ext-method-getClass\" class=\"docClass\">Ext.getClass</a></li>\n<li><a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a></li>\n</ul>\n\n\n<h1>Basic syntax:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(className, properties);\n</code></pre>\n\n<p>in which <code>properties</code> is an object represent a collection of properties that apply to the class. See\n<a href=\"#!/api/Ext.ClassManager-method-create\" rel=\"Ext.ClassManager-method-create\" class=\"docClass\">create</a> for more detailed instructions.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n     name: 'Unknown',\n\n     constructor: function(name) {\n         if (name) {\n             this.name = name;\n         }\n     },\n\n     eat: function(foodType) {\n         alert(\"I'm eating: \" + foodType);\n\n         return this;\n     }\n});\n\nvar aaron = new Person(\"Aaron\");\naaron.eat(\"Sandwich\"); // alert(\"I'm eating: Sandwich\");\n</code></pre>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> has a powerful set of extensible <a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">pre-processors</a> which takes care of\neverything related to class creation, including but not limited to inheritance, mixins, configuration, statics, etc.</p>\n\n<h1>Inheritance:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n     extend: 'Person',\n\n     constructor: function(name, isGeek) {\n         this.isGeek = isGeek;\n\n         // Apply a method from the parent class' prototype\n         this.callParent([name]);\n     },\n\n     code: function(language) {\n         alert(\"I'm coding in: \" + language);\n\n         this.eat(\"Bugs\");\n\n         return this;\n     }\n});\n\nvar jacky = new Developer(\"Jacky\", true);\njacky.code(\"JavaScript\"); // alert(\"I'm coding in: JavaScript\");\n                          // alert(\"I'm eating: Bugs\");\n</code></pre>\n\n<p>See <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">Ext.Base.callParent</a> for more details on calling superclass' methods</p>\n\n<h1>Mixins:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanPlayGuitar', {\n     playGuitar: function() {\n        alert(\"F#...G...D...A\");\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanComposeSongs', {\n     composeSongs: function() { ... }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"For he's a jolly good fellow...\")\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     extend: 'Person',\n\n     mixins: {\n         canPlayGuitar: 'CanPlayGuitar',\n         canComposeSongs: 'CanComposeSongs',\n         canSing: 'CanSing'\n     }\n})\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CoolPerson', {\n     extend: 'Person',\n\n     mixins: {\n         canPlayGuitar: 'CanPlayGuitar',\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         alert(\"Ahem....\");\n\n         this.mixins.canSing.sing.call(this);\n\n         alert(\"[Playing guitar at the same time...]\");\n\n         this.playGuitar();\n     }\n});\n\nvar me = new CoolPerson(\"Jacky\");\n\nme.sing(); // alert(\"Ahem...\");\n           // alert(\"For he's a jolly good fellow...\");\n           // alert(\"[Playing guitar at the same time...]\");\n           // alert(\"F#...G...D...A\");\n</code></pre>\n\n<h1>Config:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('SmartPhone', {\n     config: {\n         hasTouchScreen: false,\n         operatingSystem: 'Other',\n         price: 500\n     },\n\n     isExpensive: false,\n\n     constructor: function(config) {\n         this.initConfig(config);\n     },\n\n     applyPrice: function(price) {\n         this.isExpensive = (price &gt; 500);\n\n         return price;\n     },\n\n     applyOperatingSystem: function(operatingSystem) {\n         if (!(/^(iOS|Android|BlackBerry)$/i).test(operatingSystem)) {\n             return 'Other';\n         }\n\n         return operatingSystem;\n     }\n});\n\nvar iPhone = new SmartPhone({\n     hasTouchScreen: true,\n     operatingSystem: 'iOS'\n});\n\niPhone.getPrice(); // 500;\niPhone.getOperatingSystem(); // 'iOS'\niPhone.getHasTouchScreen(); // true;\n\niPhone.isExpensive; // false;\niPhone.setPrice(600);\niPhone.getPrice(); // 600\niPhone.isExpensive; // true;\n\niPhone.setOperatingSystem('AlienOS');\niPhone.getOperatingSystem(); // 'Other'\n</code></pre>\n\n<h1>Statics:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n            // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n\n<p>Also see <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">Ext.Base.statics</a> and <a href=\"#!/api/Ext.Base-property-self\" rel=\"Ext.Base-property-self\" class=\"docClass\">Ext.Base.self</a> for more details on accessing\nstatic properties within class methods</p>\n","singleton":true,"members":[{"tagname":"cfg","name":"debugHooks","autodetected":{},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":1159}],"doc":"<p>A collection of diagnostic methods to decorate the real methods of the class. These\nmethods are applied as an <code>override</code> if this class has debug enabled as defined by\n<code><a href=\"#!/api/Ext-method-isDebugEnabled\" rel=\"Ext-method-isDebugEnabled\" class=\"docClass\">Ext.isDebugEnabled</a></code>.</p>\n\n<p>These will be automatically removed by the Sencha Cmd compiler for production builds.</p>\n\n<p>Example usage:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Foo.bar.Class', {\n     foo: function (a, b, c) {\n         ...\n     },\n\n     bar: function (a, b) {\n         ...\n         return 42;\n     },\n\n     debugHooks: {\n         foo: function (a, b, c) {\n             // check arguments...\n             return this.callParent(arguments);\n         }\n     }\n });\n</code></pre>\n\n<p>If you specify a <code>$enabled</code> property in the <code>debugHooks</code> object that will be used\nas the default enabled state for the hooks. If the <code><a href=\"#!/api/Ext-cfg-manifest\" rel=\"Ext-cfg-manifest\" class=\"docClass\">Ext.manifest</a></code> contains\na <code>debug</code> object of if <code><a href=\"#!/api/Ext-cfg-debugConfig\" rel=\"Ext-cfg-debugConfig\" class=\"docClass\">Ext.debugConfig</a></code> is specified, the <code>$enabled</code> flag\nwill override its \"*\" value.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-debugHooks","owner":"Ext.ClassManager","short_doc":"A collection of diagnostic methods to decorate the real methods of the class. ...","html_type":"Object"},{"tagname":"cfg","name":"deprecated","autodetected":{},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":1208}],"doc":"<p>The object given has properties that describe the versions at which the deprecations\napply.</p>\n\n<p>The purpose of the <code>deprecated</code> declaration is to enable development mode to give\nsuitable error messages when deprecated methods or properties are used. Methods can\nalways be injected to provide this feedback, but properties can only be handled on\nsome browsers (those that support <code>Object.defineProperty</code>).</p>\n\n<p>In some cases, deprecated methods can be restored to their previous behavior or\nadded back if they have been removed.</p>\n\n<p>The structure of a <code>deprecated</code> declaration is this:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Foo.bar.Class', {\n     ...\n\n     deprecated: {\n         // Optional package name - default is the framework (ext or touch)\n         name: 'foobar',\n\n         '5.0': {\n             methods: {\n                 // Throws: '\"removedMethod\" is deprecated.'\n                 removedMethod: null,\n\n                 // Throws: '\"oldMethod\" is deprecated. Please use \"newMethod\" instead.'\n                 oldMethod: 'newMethod',\n\n                 // When this block is enabled, this method is applied as an\n                 // override. Otherwise you get same as \"removeMethod\".\n                 method: function () {\n                     // Do what v5 \"method\" did. If \"method\" exists in newer\n                     // versions callParent can call it. If 5.1 has \"method\"\n                     // then it would be next in line, otherwise 5.2 and last\n                     // would be the current class.\n                 },\n\n                 moreHelpful: {\n                     message: 'Something helpful to do instead.',\n                     fn: function () {\n                         // The v5 \"moreHelpful\" method to use when enabled.\n                     }\n                 }\n             },\n             properties: {\n                 // Throws: '\"removedProp\" is deprecated.'\n                 removedProp: null,\n\n                 // Throws: '\"oldProp\" is deprecated. Please use \"newProp\" instead.'\n                 oldProp: 'newProp',\n\n                 helpful: {\n                     message: 'Something helpful message about what to do.'\n                 }\n                 ...\n             },\n             statics: {\n                 methods: {\n                     ...\n                 },\n                 properties: {\n                     ...\n                 },\n             }\n         },\n\n         '5.1': {\n             ...\n         },\n\n         '5.2': {\n             ...\n         }\n     }\n });\n</code></pre>\n\n<p>The primary content of <code>deprecated</code> are the version number keys. These indicate\na version number where methods or properties were deprecated. These versions are\ncompared to the version reported by <code><a href=\"#!/api/Ext-method-getCompatVersion\" rel=\"Ext-method-getCompatVersion\" class=\"docClass\">Ext.getCompatVersion</a></code> to determine the action\nto take for each \"block\".</p>\n\n<p>When the compatibility version is set to a value less than a version number key,\nthat block is said to be \"enabled\". For example, if a method was deprecated in\nversion 5.0 but the desired compatibility level is 4.2 then the block is used to\npatch methods and (to some degree) restore pre-5.0 compatibility.</p>\n\n<p>When multiple active blocks have the same method name, each method is applied as\nan override in reverse order of version. In the above example, if a method appears\nin the \"5.0\", \"5.1\" and \"5.2\" blocks then the \"5.2\" method is applied as an override\nfirst, followed by the \"5.1\" method and finally the \"5.0\" method. This means that\nthe <code>callParent</code> from the \"5.0\" method calls the \"5.1\" method which calls the\n\"5.2\" method which can (if applicable) call the current version.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-deprecated","owner":"Ext.ClassManager","short_doc":"The object given has properties that describe the versions at which the deprecations\napply. ...","html_type":"Object"},{"tagname":"property","name":"classes","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":205}],"doc":"<p>All classes which were defined through the ClassManager. Keys are the\nname of the classes and the values are references to the classes.</p>\n","type":"Object","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-classes","owner":"Ext.ClassManager","short_doc":"All classes which were defined through the ClassManager. ...","html_type":"Object"},{"tagname":"property","name":"createdListeners","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":290}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"property-createdListeners","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Array"},{"tagname":"property","name":"defaultPostprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":923}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"property-defaultPostprocessors","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Array"},{"tagname":"property","name":"enableNamespaceParseCache","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":240}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Boolean","default":"true","readonly":null,"id":"property-enableNamespaceParseCache","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Boolean"},{"tagname":"property","name":"existCache","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":227}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-existCache","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"existsListeners","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":300}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"property-existsListeners","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Array"},{"tagname":"property","name":"instantiators","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":246}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"property-instantiators","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Array"},{"tagname":"property","name":"nameCreatedListeners","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":295}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-nameCreatedListeners","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"nameExistsListeners","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":305}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-nameExistsListeners","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"namespaceParseCache","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":243}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-namespaceParseCache","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"namespaceRewrites","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":232}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":null,"readonly":null,"id":"property-namespaceRewrites","owner":"Ext.ClassManager","html_type":"Object"},{"tagname":"property","name":"overrideMap","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":310}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-overrideMap","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"postprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":918}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-postprocessors","owner":"Ext.ClassManager","short_doc":" ...","html_type":"Object"},{"tagname":"method","name":"addListener","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":363}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"fn","type":"Object","html_type":"Object"},{"name":"scope","type":"Object","html_type":"Object"},{"name":"className","type":"Object","html_type":"Object"},{"name":"listeners","type":"Object","html_type":"Object"},{"name":"nameListeners","type":"Object","html_type":"Object"}],"chainable":false,"fires":[],"method_calls":["addListener","isCreated"],"id":"method-addListener","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"addNameAliasMappings","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":576}],"doc":"<p>Adds a batch of class name to alias mappings.</p>\n","params":[{"tagname":"params","type":"Object","name":"aliases","doc":"<p>The set of mappings of the form.\nclassName : [values...]</p>\n","html_type":"Object"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["addAlias"],"id":"method-addNameAliasMappings","owner":"Ext.ClassManager","short_doc":"Adds a batch of class name to alias mappings. ..."},{"tagname":"method","name":"addNameAlternateMappings","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":585}],"doc":"\n","params":[{"tagname":"params","type":"Object","name":"alternates","doc":"<p>The set of mappings of the form\nclassName : [values...]</p>\n","html_type":"Object"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["addAlternate"],"id":"method-addNameAlternateMappings","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"create","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":633}],"doc":"<p>Defines a class.</p>\n","deprecated":{"text":"<p>Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> instead, as that also supports creating overrides.</p>\n"},"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"className","type":"Object","html_type":"Object"},{"name":"data","type":"Object","html_type":"Object"},{"name":"createdFn","type":"Object","html_type":"Object"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-create","owner":"Ext.ClassManager","short_doc":"Defines a class. ..."},{"tagname":"method","name":"createNamespaces","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":491}],"doc":"<p>The new <a href=\"#!/api/Ext-method-ns\" rel=\"Ext-method-ns\" class=\"docClass\">Ext.ns</a>, supports namespace rewriting.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["parseNamespace"],"id":"method-createNamespaces","owner":"Ext.ClassManager","short_doc":"The new Ext.ns, supports namespace rewriting. ..."},{"tagname":"method","name":"dynInstantiate","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":877}],"doc":"\n","private":true,"params":[{"tagname":"params","name":"name","doc":"\n","type":"Object","html_type":"Object"},{"tagname":"params","name":"args","doc":"\n","type":"Object","html_type":"Object"}],"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-dynInstantiate","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"get","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":540}],"doc":"<p>Retrieve a class by its name.</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"String"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>class</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["parseNamespace"],"id":"method-get","owner":"Ext.ClassManager","short_doc":"Retrieve a class by its name. ..."},{"tagname":"method","name":"getByAlias","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":594}],"doc":"<p>Get a reference to the class by its alias.</p>\n","params":[{"tagname":"params","type":"String","name":"alias","doc":"\n","html_type":"String"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>class</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["get","getNameByAlias"],"id":"method-getByAlias","owner":"Ext.ClassManager","short_doc":"Get a reference to the class by its alias. ..."},{"tagname":"method","name":"getClass","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":617}],"doc":"<p>Get the class of the provided object; returns null if it's not an instance\nof any class created with <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>. This is usually invoked by the\nshorthand <a href=\"#!/api/Ext-method-getClass\" rel=\"Ext-method-getClass\" class=\"docClass\">Ext.getClass</a>.</p>\n\n<pre><code>var component = new <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>();\n\n<a href=\"#!/api/Ext-method-getClass\" rel=\"Ext-method-getClass\" class=\"docClass\">Ext.getClass</a>(component); // returns <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"object","doc":"\n","html_type":"Object"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>class</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getClass","owner":"Ext.ClassManager","short_doc":"Get the class of the provided object; returns null if it's not an instance\nof any class created with Ext.define. ..."},{"tagname":"method","name":"getDisplayName","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":1814}],"doc":"<p>Returns the displayName property or className or object. When all else fails, returns \"Anonymous\".</p>\n","params":[{"tagname":"params","type":"Object","name":"object","doc":"\n","html_type":"Object"}],"return":{"type":"String","name":"return","doc":"\n","properties":null,"html_type":"String"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getDisplayName","owner":"Ext.ClassManager","short_doc":"Returns the displayName property or className or object. ..."},{"tagname":"method","name":"getInstantiator","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":889}],"doc":"\n","private":true,"params":[{"tagname":"params","name":"length","doc":"\n","type":"Object","html_type":"Object"}],"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getInstantiator","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"getName","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":604}],"doc":"<p>Get the name of the class by its reference or its instance. This is\nusually invoked by the shorthand <a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>.</p>\n\n<pre><code><a href=\"#!/api/Ext.ClassManager-method-getName\" rel=\"Ext.ClassManager-method-getName\" class=\"docClass\">Ext.ClassManager.getName</a>(<a href=\"#!/api/Ext.Action\" rel=\"Ext.Action\" class=\"docClass\">Ext.Action</a>); // returns \"<a href=\"#!/api/Ext.Action\" rel=\"Ext.Action\" class=\"docClass\">Ext.Action</a>\"\n</code></pre>\n","params":[{"tagname":"params","type":"Ext.Class/Object","name":"object","doc":"\n","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>/Object"}],"return":{"type":"String","name":"return","doc":"<p>className</p>\n","properties":null,"html_type":"String"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getName","owner":"Ext.ClassManager","short_doc":"Get the name of the class by its reference or its instance. ..."},{"tagname":"method","name":"instantiate","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":862}],"doc":"<p>Instantiate a class by either full name, alias or alternate name</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"String"},{"tagname":"params","type":"Mixed","name":"args","doc":"<p>Additional arguments after the name will be passed to the class' constructor.</p>\n","html_type":"Mixed"}],"return":{"type":"Object","name":"return","doc":"<p>instance</p>\n","properties":null,"html_type":"Object"},"deprecated":{"text":"<p>Use <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>() instead.</p>\n","version":"5.0"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-instantiate","owner":"Ext.ClassManager","short_doc":"Instantiate a class by either full name, alias or alternate name ..."},{"tagname":"method","name":"instantiateByAlias","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":830}],"doc":"<p>Instantiate a class by its alias. This is usually invoked by the\nshorthand <a href=\"#!/api/Ext-method-createByAlias\" rel=\"Ext-method-createByAlias\" class=\"docClass\">Ext.createByAlias</a>.</p>\n\n<p>If <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> is <a href=\"#!/api/Ext.Loader-method-setConfig\" rel=\"Ext.Loader-method-setConfig\" class=\"docClass\">enabled</a> and the class\nhas not been defined yet, it will attempt to load the class via synchronous\nloading.</p>\n\n<pre><code>var window = <a href=\"#!/api/Ext-method-createByAlias\" rel=\"Ext-method-createByAlias\" class=\"docClass\">Ext.createByAlias</a>('widget.window', { width: 600, height: 800 });\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"alias","doc":"\n","html_type":"String"},{"tagname":"params","type":"Object...","name":"args","doc":"<p>Additional arguments after the alias will be passed to the\nclass constructor.</p>\n","html_type":"Object..."}],"return":{"type":"Object","name":"return","doc":"<p>instance</p>\n","properties":null,"html_type":"Object"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getNameByAlias"],"id":"method-instantiateByAlias","owner":"Ext.ClassManager","short_doc":"Instantiate a class by its alias. ..."},{"tagname":"method","name":"isCreated","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":249}],"doc":"<p>Checks if a class has already been created.</p>\n","params":[{"tagname":"params","type":"String","name":"className","doc":"\n","html_type":"String"}],"return":{"type":"Boolean","name":"return","doc":"<p>exist</p>\n","properties":null,"html_type":"Boolean"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-isCreated","owner":"Ext.ClassManager","short_doc":"Checks if a class has already been created. ..."},{"tagname":"method","name":"notify","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":331}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"className","type":"Object","html_type":"Object"},{"name":"listeners","type":"Object","html_type":"Object"},{"name":"nameListeners","type":"Object","html_type":"Object"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-notify","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"onCreated","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":324}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"fn","type":"Object","html_type":"Object"},{"name":"scope","type":"Object","html_type":"Object"},{"name":"className","type":"Object","html_type":"Object"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-onCreated","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"parseNamespace","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":397}],"doc":"<p>Supports namespace rewriting.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"namespace","type":"Object","html_type":"Object"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-parseNamespace","owner":"Ext.ClassManager","short_doc":"Supports namespace rewriting. ..."},{"tagname":"method","name":"registerPostprocessor","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":928}],"doc":"<p>Register a post-processor function.</p>\n","private":true,"params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"String"},{"tagname":"params","type":"Function","name":"postprocessor","doc":"\n","html_type":"Function"}],"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":true,"fires":[],"method_calls":["setDefaultPostprocessorPosition"],"id":"method-registerPostprocessor","owner":"Ext.ClassManager","return":{"type":"Ext.ClassManager","doc":"<p>this</p>\n","html_type":"<a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>"},"short_doc":"Register a post-processor function. ..."},{"tagname":"method","name":"set","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":520}],"doc":"<p>Sets a name reference to a class.</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"String"},{"tagname":"params","type":"Object","name":"value","doc":"\n","html_type":"Object"}],"return":{"type":"Ext.ClassManager","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":true,"fires":[],"method_calls":["addAlternate","getName","setNamespace"],"id":"method-set","owner":"Ext.ClassManager","short_doc":"Sets a name reference to a class. ..."},{"tagname":"method","name":"setDefaultPostprocessorPosition","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":968}],"doc":"<p>Insert this post-processor at a specific position in the stack, optionally relative to\nany existing post-processor</p>\n","private":true,"params":[{"tagname":"params","type":"String","name":"name","doc":"<p>The post-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Ext.ClassManager-method-registerPostprocessor\" rel=\"Ext.ClassManager-method-registerPostprocessor\" class=\"docClass\">registerPostprocessor</a> before this</p>\n","html_type":"String"},{"tagname":"params","type":"String","name":"offset","doc":"<p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)</p>\n","html_type":"String"},{"tagname":"params","type":"String","name":"relativeName","doc":"\n","html_type":"String"}],"return":{"type":"Ext.ClassManager","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"method-setDefaultPostprocessorPosition","owner":"Ext.ClassManager","short_doc":"Insert this post-processor at a specific position in the stack, optionally relative to\nany existing post-processor ..."},{"tagname":"method","name":"setDefaultPostprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":955}],"doc":"<p>Set the default post processors array stack which are applied to every class.</p>\n","private":true,"params":[{"tagname":"params","type":"String/Array","name":"postprocessors","doc":"<p>The name of a registered post processor or an array of registered names.</p>\n","html_type":"String/Array"}],"return":{"type":"Ext.ClassManager","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"method-setDefaultPostprocessors","owner":"Ext.ClassManager","short_doc":"Set the default post processors array stack which are applied to every class. ..."},{"tagname":"method","name":"setNamespace","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":455}],"doc":"<p>Creates a namespace and assign the <code>value</code> to the created object.</p>\n\n<pre><code><a href=\"#!/api/Ext.ClassManager-method-setNamespace\" rel=\"Ext.ClassManager-method-setNamespace\" class=\"docClass\">Ext.ClassManager.setNamespace</a>('MyCompany.pkg.Example', someObject);\n\nalert(MyCompany.pkg.Example === someObject); // alerts true\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"String"},{"tagname":"params","type":"Object","name":"value","doc":"\n","html_type":"Object"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["parseNamespace"],"id":"method-setNamespace","owner":"Ext.ClassManager","short_doc":"Creates a namespace and assign the value to the created object. ..."},{"tagname":"method","name":"triggerCreated","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":315}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"className","type":"Object","html_type":"Object"},{"name":"state","type":"Object","html_type":"Object"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-triggerCreated","owner":"Ext.ClassManager","short_doc":" ..."},{"tagname":"method","name":"undefine","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"/tmp/ext-5.1.1/packages/sencha-core/src/class/ClassManager.js","linenr":1755}],"doc":"<p>Undefines a class defined using the #define method. Typically used\nfor unit testing where setting up and tearing down a class multiple\ntimes is required.  For example:</p>\n\n<pre><code>// define a class\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Foo', {\n   ...\n});\n\n// run test\n\n// undefine the class\nExt.undefine('Foo');\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"className","doc":"<p>The class name to undefine in string dot-namespaced format.</p>\n","html_type":"String"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-undefine","owner":"Ext.ClassManager","short_doc":"Undefines a class defined using the #define method. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.ClassManager","short_doc":"Ext.ClassManager manages all classes and handles mapping from string class name to\nactual class objects throughout th..."}