{"tagname":"class","name":"CKEDITOR.commandDefinition","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":12}],"doc":"<p>Virtual class that illustrates the features of command objects to be\npassed to the <a href=\"#!/api/CKEDITOR.editor-method-addCommand\" rel=\"CKEDITOR.editor-method-addCommand\" class=\"docClass\">CKEDITOR.editor.addCommand</a> function.</p>\n","abstract":true,"members":[{"tagname":"property","name":"async","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":49}],"doc":"<p>Whether the command is asynchronous, which means that the\n<a href=\"#!/api/CKEDITOR.editor-event-afterCommandExec\" rel=\"CKEDITOR.editor-event-afterCommandExec\" class=\"docClass\">CKEDITOR.editor.afterCommandExec</a> event will be fired by the\ncommand itself manually, and that the return value of this command is not to\nbe returned by the <a href=\"#!/api/CKEDITOR.commandDefinition-method-exec\" rel=\"CKEDITOR.commandDefinition-method-exec\" class=\"docClass\">exec</a> function.</p>\n\n<pre><code>    editorInstance.addCommand( 'loadOptions', {\n        exec: function( editor ) {\n            // Asynchronous operation below.\n            <a href=\"#!/api/CKEDITOR.ajax-method-loadXml\" rel=\"CKEDITOR.ajax-method-loadXml\" class=\"docClass\">CKEDITOR.ajax.loadXml</a>( 'data.xml', function() {\n                editor.fire( 'afterCommandExec' );\n            } );\n        },\n        async: true // The command need some time to complete after exec function returns.\n    } );\n</code></pre>\n","type":"Boolean","default":"false","properties":null,"id":"property-async","owner":"CKEDITOR.commandDefinition","short_doc":"Whether the command is asynchronous, which means that the\nCKEDITOR.editor.afterCommandExec event will be fired by the...","html_type":"Boolean"},{"tagname":"property","name":"canUndo","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":36}],"doc":"<p>Whether the command need to be hooked into the redo/undo system.</p>\n\n<pre><code>editorInstance.addCommand( 'alertName', {\n    exec: function( editor ) {\n        alert( editor.name );\n    },\n    canUndo: false // No support for undo/redo.\n} );\n</code></pre>\n","type":"Boolean","default":"true","properties":null,"id":"property-canUndo","owner":"CKEDITOR.commandDefinition","short_doc":"Whether the command need to be hooked into the redo/undo system. ...","html_type":"Boolean"},{"tagname":"property","name":"context","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":117}],"doc":"<p>Sets the element name used to reflect the command state on selection changes.\nIf the selection is in a place where the element is not allowed, the command\nwill be disabled.\nSetting this property overrides <a href=\"#!/api/CKEDITOR.commandDefinition-property-contextSensitive\" rel=\"CKEDITOR.commandDefinition-property-contextSensitive\" class=\"docClass\">contextSensitive</a> to <code>true</code>.</p>\n","type":"Boolean","default":"true","properties":null,"id":"property-context","owner":"CKEDITOR.commandDefinition","short_doc":"Sets the element name used to reflect the command state on selection changes. ...","html_type":"Boolean"},{"tagname":"property","name":"contextSensitive","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":96}],"doc":"<p>Indicates that this command is sensible to the selection context.\nIf <code>true</code>, the <a href=\"#!/api/CKEDITOR.command-method-refresh\" rel=\"CKEDITOR.command-method-refresh\" class=\"docClass\">CKEDITOR.command.refresh</a> method will be\ncalled for this command on selection changes, with a single parameter\nrepresenting the current elements path.</p>\n","type":"Boolean","default":"true","properties":null,"id":"property-contextSensitive","owner":"CKEDITOR.commandDefinition","short_doc":"Indicates that this command is sensible to the selection context. ...","html_type":"Boolean"},{"tagname":"property","name":"editorFocus","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":68}],"doc":"<p>Whether the command should give focus to the editor before execution.</p>\n\n<pre><code>editorInstance.addCommand( 'maximize', {\n        exec: function( editor ) {\n        // ...\n    },\n    editorFocus: false // The command doesn't require focusing the editing document.\n} );@see <a href=\"#!/api/CKEDITOR.command-property-editorFocus\" rel=\"CKEDITOR.command-property-editorFocus\" class=\"docClass\">CKEDITOR.command.editorFocus</a>\n</code></pre>\n","type":"Boolean","default":"true","properties":null,"id":"property-editorFocus","owner":"CKEDITOR.commandDefinition","short_doc":"Whether the command should give focus to the editor before execution. ...","html_type":"Boolean"},{"tagname":"property","name":"modes","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":126}],"doc":"<p>The editor modes within which the command can be executed. The execution\nwill have no action if the current mode is not listed in this property.</p>\n\n<pre><code>editorInstance.addCommand( 'link', {\n    exec: function( editor ) {\n        // ...\n    },\n    modes: { wysiwyg:1 } // Command is available in wysiwyg mode only.\n} );@see <a href=\"#!/api/CKEDITOR.command-property-modes\" rel=\"CKEDITOR.command-property-modes\" class=\"docClass\">CKEDITOR.command.modes</a>\n</code></pre>\n","type":"Object","default":"{ wysiwyg:1 }","properties":null,"id":"property-modes","owner":"CKEDITOR.commandDefinition","short_doc":"The editor modes within which the command can be executed. ...","html_type":"Object"},{"tagname":"property","name":"startDisabled","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":83}],"doc":"<p>Whether the command state should be set to <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> on startup.</p>\n\n<pre><code>editorInstance.addCommand( 'unlink', {\n    exec: function( editor ) {\n        // ...\n    },\n    startDisabled: true // Command is unavailable until selection is inside a link.\n} );\n</code></pre>\n","type":"Boolean","default":"false","properties":null,"id":"property-startDisabled","owner":"CKEDITOR.commandDefinition","short_doc":"Whether the command state should be set to CKEDITOR.TRISTATE_DISABLED on startup. ...","html_type":"Boolean"},{"tagname":"method","name":"exec","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":20}],"doc":"<p>The function to be fired when the commend is executed.</p>\n\n<pre><code>editorInstance.addCommand( 'sample', {\n    exec: function( editor ) {\n        alert( 'Executing a command for the editor name \"' + editor.name + '\"!' );\n    }\n} );\n</code></pre>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor within which run the command.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"},{"tagname":"params","type":"Object","name":"data","optional":true,"doc":"<p>Additional data to be used to execute the command.</p>\n","html_type":"Object"}],"return":{"type":"Boolean","name":"return","doc":"<p>Whether the command has been successfully executed.\nDefaults to <code>true</code>, if nothing is returned.</p>\n","properties":null,"html_type":"Boolean"},"id":"method-exec","owner":"CKEDITOR.commandDefinition","short_doc":"The function to be fired when the commend is executed. ..."},{"tagname":"method","name":"refresh","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/commanddefinition.js","linenr":105}],"doc":"<p>Defined by command definition a function to determinate the command state, it will be invoked\nwhen editor has it's <code>states</code> or <code>selection</code> changed.</p>\n\n<p><strong>Note:</strong> The function provided must be calling <a href=\"#!/api/CKEDITOR.command-method-setState\" rel=\"CKEDITOR.command-method-setState\" class=\"docClass\">CKEDITOR.command.setState</a> in all circumstance,\nif it is intended to update the command state.</p>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"},{"tagname":"params","type":"CKEDITOR.dom.elementPath","name":"path","doc":"\n","html_type":"<a href=\"#!/api/CKEDITOR.dom.elementPath\" rel=\"CKEDITOR.dom.elementPath\" class=\"docClass\">CKEDITOR.dom.elementPath</a>"}],"id":"method-refresh","owner":"CKEDITOR.commandDefinition","short_doc":"Defined by command definition a function to determinate the command state, it will be invoked\nwhen editor has it's st..."}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.commandDefinition"}