{"tagname":"class","name":"CKEDITOR.plugins.widget.definition","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3319}],"doc":"<p>This is an abstract class that describes the definition of a widget.\nIt is a type of <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-add\" rel=\"CKEDITOR.plugins.widget.repository-method-add\" class=\"docClass\">CKEDITOR.plugins.widget.repository.add</a> method's second argument.</p>\n\n<p>Widget instances inherit from registered widget definitions, although not in a prototypal way.\nThey are simply extended with corresponding widget definitions. Note that not all properties of\nthe widget definition become properties of a widget. Some, like <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-data\" rel=\"CKEDITOR.plugins.widget.definition-property-data\" class=\"docClass\">data</a> or <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-edit\" rel=\"CKEDITOR.plugins.widget.definition-property-edit\" class=\"docClass\">edit</a>, become\nwidget's events listeners.</p>\n","abstract":true,"mixins":["CKEDITOR.feature"],"members":[{"tagname":"property","name":"allowedContent","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/filter.js","linenr":2362}],"doc":"<p>HTML code that can be generated by this feature.</p>\n\n<p>For example a basic image feature (image button displaying the image dialog window)\nmay allow <code>'img[!src,alt,width,height]'</code>.</p>\n\n<p>During the feature activation this value is passed to <a href=\"#!/api/CKEDITOR.filter-method-allow\" rel=\"CKEDITOR.filter-method-allow\" class=\"docClass\">CKEDITOR.filter.allow</a>.</p>\n","type":"CKEDITOR.filter.allowedContentRules","default":"null","properties":null,"id":"property-allowedContent","owner":"CKEDITOR.feature","short_doc":"HTML code that can be generated by this feature. ...","html_type":"<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>"},{"tagname":"property","name":"button","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3551}],"doc":"<p>The label for the widget toolbar button.</p>\n\n<pre><code>editor.widgets.add( 'simplebox', {\n    button: 'Create a simple box'\n} );\n\neditor.widgets.add( 'simplebox', {\n    button: editor.lang.simplebox.title\n} );\n</code></pre>\n","type":"String","default":null,"properties":null,"id":"property-button","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The label for the widget toolbar button. ...","html_type":"String"},{"tagname":"property","name":"contentForms","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/filter.js","linenr":2396}],"doc":"<p>Feature content forms to be registered in the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>\nduring the feature activation.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.filter-method-addContentForms\" rel=\"CKEDITOR.filter-method-addContentForms\" class=\"docClass\">CKEDITOR.filter.addContentForms</a> for more details.</p>\n","default":"null","properties":null,"type":"Object","id":"property-contentForms","owner":"CKEDITOR.feature","short_doc":"Feature content forms to be registered in the CKEDITOR.editor.filter\nduring the feature activation. ...","html_type":"Object"},{"tagname":"property","name":"contentTransformations","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/filter.js","linenr":2405}],"doc":"<p>Transformations (usually for content generated by this feature, but not necessarily)\nthat will be registered in the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a> during the feature activation.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.filter-method-addTransformations\" rel=\"CKEDITOR.filter-method-addTransformations\" class=\"docClass\">CKEDITOR.filter.addTransformations</a> for more details.</p>\n","default":"null","properties":null,"type":"Object","id":"property-contentTransformations","owner":"CKEDITOR.feature","short_doc":"Transformations (usually for content generated by this feature, but not necessarily)\nthat will be registered in the C...","html_type":"Object"},{"tagname":"property","name":"data","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3455}],"doc":"<p>If set, it will be added as the <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">CKEDITOR.plugins.widget.data</a> event listener.\nThis means that it will be executed every time the <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">widget data</a> changes.</p>\n","type":"Function","default":null,"properties":null,"id":"property-data","owner":"CKEDITOR.plugins.widget.definition","short_doc":"If set, it will be added as the CKEDITOR.plugins.widget.data event listener. ...","html_type":"Function"},{"tagname":"property","name":"defaults","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3490}],"doc":"<p>The data object which will be used to populate the data of a newly created widget.\nSee <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">CKEDITOR.plugins.widget.data</a>.</p>\n\n<pre><code>defaults: {\n    showCaption: true,\n    align: 'none'\n}\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-defaults","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The data object which will be used to populate the data of a newly created widget. ...","html_type":"Object"},{"tagname":"property","name":"dialog","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3474}],"doc":"<p>The name of a dialog window which will be opened on <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a>.\nIf not defined, then the <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method will not perform any action and\nwidget's command will insert a new widget without opening a dialog window first.</p>\n","type":"String","default":null,"properties":null,"id":"property-dialog","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The name of a dialog window which will be opened on CKEDITOR.plugins.widget.edit. ...","html_type":"String"},{"tagname":"property","name":"downcast","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3404}],"doc":"<p>The function to be used to downcast this widget or\na name of the downcast option from the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcasts\" rel=\"CKEDITOR.plugins.widget.definition-property-downcasts\" class=\"docClass\">downcasts</a> object.</p>\n\n<p>The downcast funciton will be executed in the <a href=\"#!/api/CKEDITOR.plugins.widget\" rel=\"CKEDITOR.plugins.widget\" class=\"docClass\">CKEDITOR.plugins.widget</a> context\nand with <code>widgetElement</code> (<a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>) argument which is\nthe widget's main element.</p>\n\n<p>The function may return an instance of the <a href=\"#!/api/CKEDITOR.htmlParser.node\" rel=\"CKEDITOR.htmlParser.node\" class=\"docClass\">CKEDITOR.htmlParser.node</a> class if the widget\nneeds to be downcasted to a different node than the widget's main element.</p>\n","type":"String/Function","default":null,"properties":null,"id":"property-downcast","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The function to be used to downcast this widget or\na name of the downcast option from the downcasts object. ...","html_type":"String/Function"},{"tagname":"property","name":"downcasts","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3418}],"doc":"<p>The object containing functions which can be used to downcast this widget.\nOnly the one pointed by the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcast\" rel=\"CKEDITOR.plugins.widget.definition-property-downcast\" class=\"docClass\">downcast</a> property will be used.</p>\n\n<p>In most cases it is appropriate to use <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcast\" rel=\"CKEDITOR.plugins.widget.definition-property-downcast\" class=\"docClass\">downcast</a> directly,\nbecause majority of widgets have just one variant of downcasting (or none at all).\nHowever, in some cases the widget author may want to expose more than one variant\nand then this property may be used.</p>\n\n<pre><code>downcasts: {\n    // This downcast may transform the widget into the figure element.\n    figure: function() {\n        // ...\n    },\n    // This downcast may transform the widget into the image element with data-* attributes.\n    image: function() {\n        // ...\n    }\n}\n\n// Then, the widget user may choose one of the downcast options when setting up his editor.\neditor.on( 'widgetDefinition', function( evt ) {\n    if ( evt.data.name == 'image' )\n            evt.data.downcast = 'figure';\n} );\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-downcasts","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The object containing functions which can be used to downcast this widget. ...","html_type":"Object"},{"tagname":"property","name":"draggable","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3565}],"doc":"<p>Whether widget should be draggable. Defaults to <code>true</code>.\nIf set to <code>false</code> drag handler will not be displayed when hovering widget.</p>\n","type":"Boolean","default":null,"properties":null,"id":"property-draggable","owner":"CKEDITOR.plugins.widget.definition","short_doc":"Whether widget should be draggable. ...","html_type":"Boolean"},{"tagname":"property","name":"edit","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3447}],"doc":"<p>If set, it will be added as the <a href=\"#!/api/CKEDITOR.plugins.widget-event-edit\" rel=\"CKEDITOR.plugins.widget-event-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> event listener.\nThis means that it will be executed when a widget is being edited.\nSee the <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method.</p>\n","type":"Function","default":null,"properties":null,"id":"property-edit","owner":"CKEDITOR.plugins.widget.definition","short_doc":"If set, it will be added as the CKEDITOR.plugins.widget.edit event listener. ...","html_type":"Function"},{"tagname":"property","name":"editables","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3513}],"doc":"<p>An object containing definitions of nested editables (editable name => <a href=\"#!/api/CKEDITOR.plugins.widget.nestedEditable.definition\" rel=\"CKEDITOR.plugins.widget.nestedEditable.definition\" class=\"docClass\">CKEDITOR.plugins.widget.nestedEditable.definition</a>).</p>\n\n<pre><code>editables: {\n    header: 'h1',\n    content: {\n        selector: 'div.content',\n        allowedContent: 'p strong em; a[!href]'\n    }\n}\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-editables","owner":"CKEDITOR.plugins.widget.definition","short_doc":"An object containing definitions of nested editables (editable name => CKEDITOR.plugins.widget.nestedEditable.definit...","html_type":"Object"},{"tagname":"property","name":"init","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3340}],"doc":"<p>The method executed while initializing a widget, after a widget instance\nis created, but before it is ready. It is executed before the first\n<a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">CKEDITOR.plugins.widget.data</a> is fired so it is common to\nuse the <code>init</code> method to populate widget data with information loaded from\nthe DOM, like for exmaple:</p>\n\n<pre><code>init: function() {\n    this.setData( 'width', this.element.getStyle( 'width' ) );\n\n    if ( this.parts.caption.getStyle( 'display' ) != 'none' )\n        this.setData( 'showCaption', true );\n}\n</code></pre>\n","type":"Function","default":null,"properties":null,"id":"property-init","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The method executed while initializing a widget, after a widget instance\nis created, but before it is ready. ...","html_type":"Function"},{"tagname":"property","name":"inline","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3541}],"doc":"<p>If set to <code>true/false</code>, it will force the widget to be either an inline or a block widget.\nIf not set, the widget type will be determined from the widget element.</p>\n\n<p>Widget type influences whether a block (<code>div</code>) or an inline (<code>span</code>) element is used\nfor the wrapper.</p>\n","type":"Boolean","default":null,"properties":null,"id":"property-inline","owner":"CKEDITOR.plugins.widget.definition","short_doc":"If set to true/false, it will force the widget to be either an inline or a block widget. ...","html_type":"Boolean"},{"tagname":"property","name":"insert","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3462}],"doc":"<p>The method to be executed when the widget's command is executed in order to insert a new widget\n(widget of this type is not focused). If not defined, then the default action will be\nperformed which means that:</p>\n\n<ul>\n<li>An instance of the widget will be created in a detached <a href=\"#!/api/CKEDITOR.dom.documentFragment\" rel=\"CKEDITOR.dom.documentFragment\" class=\"docClass\">document fragment</a>,</li>\n<li>The <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method will be called to trigger widget editing,</li>\n<li>The widget element will be inserted into DOM.</li>\n</ul>\n\n","type":"Function","default":null,"properties":null,"id":"property-insert","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The method to be executed when the widget's command is executed in order to insert a new widget\n(widget of this type ...","html_type":"Function"},{"tagname":"property","name":"mask","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3533}],"doc":"<p>If set to <code>true</code>, the widget's element will be covered with a transparent mask.\nThis will prevent its content from being clickable, which matters in case\nof special elements like embedded Flash or iframes that generate a separate \"context\".</p>\n","type":"Boolean","default":null,"properties":null,"id":"property-mask","owner":"CKEDITOR.plugins.widget.definition","short_doc":"If set to true, the widget's element will be covered with a transparent mask. ...","html_type":"Boolean"},{"tagname":"property","name":"name","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3333}],"doc":"<p>Widget definition name. It is automatically set when the definition is\n<a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-add\" rel=\"CKEDITOR.plugins.widget.repository-method-add\" class=\"docClass\">registered</a>.</p>\n","type":"String","default":null,"properties":null,"id":"property-name","owner":"CKEDITOR.plugins.widget.definition","overrides":[{"name":"name","owner":"CKEDITOR.feature","link":"<a href=\"#!/api/CKEDITOR.feature-property-name\" rel=\"CKEDITOR.feature-property-name\" class=\"docClass\">CKEDITOR.feature.name</a>"}],"short_doc":"Widget definition name. ...","html_type":"String"},{"tagname":"property","name":"parts","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3502}],"doc":"<p>An object containing definitions of widget components (part name => CSS selector).</p>\n\n<pre><code>parts: {\n    image: 'img',\n    caption: 'div.caption'\n}\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-parts","owner":"CKEDITOR.plugins.widget.definition","short_doc":"An object containing definitions of widget components (part name => CSS selector). ...","html_type":"Object"},{"tagname":"property","name":"pathName","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3527}],"doc":"<p>Widget name displayed in elements path.</p>\n","type":"String","default":null,"properties":null,"id":"property-pathName","owner":"CKEDITOR.plugins.widget.definition","html_type":"String"},{"tagname":"property","name":"requiredContent","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/filter.js","linenr":2373}],"doc":"<p>Minimal HTML code that this feature must be allowed to\ngenerate in order to work.</p>\n\n<p>For example a basic image feature (image button displaying the image dialog window)\nneeds <code>'img[src,alt]'</code> in order to be activated.</p>\n\n<p>During the feature validation this value is passed to <a href=\"#!/api/CKEDITOR.filter-method-check\" rel=\"CKEDITOR.filter-method-check\" class=\"docClass\">CKEDITOR.filter.check</a>.</p>\n\n<p>If this value is not provided, a feature will be always activated.</p>\n","type":"CKEDITOR.filter.contentRule","default":"null","properties":null,"id":"property-requiredContent","owner":"CKEDITOR.feature","short_doc":"Minimal HTML code that this feature must be allowed to\ngenerate in order to work. ...","html_type":"<a href=\"#!/api/CKEDITOR.filter.contentRule\" rel=\"CKEDITOR.filter.contentRule\" class=\"docClass\">CKEDITOR.filter.contentRule</a>"},{"tagname":"property","name":"styleToAllowedContentRules","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3603}],"doc":"<p>Function transforming custom widget's <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> instance into\n<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>. It may be used when a static\n<a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleableElements\" rel=\"CKEDITOR.plugins.widget.definition-property-styleableElements\" class=\"docClass\">styleableElements</a> property is not enough to inform the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>\nwhat HTML features should be enabled when allowing the given style.</p>\n\n<p>In most cases, when style's classes just have to be added to element name(s) used by\nthe widget element, it is recommended to use simpler <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleableElements\" rel=\"CKEDITOR.plugins.widget.definition-property-styleableElements\" class=\"docClass\">styleableElements</a> property.</p>\n\n<p>In order to get parsed classes from the style definition you can use\n<a href=\"#!/api/CKEDITOR.style.customHandlers.widget-method-getClassesArray\" rel=\"CKEDITOR.style.customHandlers.widget-method-getClassesArray\" class=\"docClass\">CKEDITOR.style.customHandlers.widget.getClassesArray</a>.</p>\n\n<p>For example, if you want to use the <a href=\"#!/guide/dev_allowed_content_rules-section-object-format\">object format of allowed content rules</a>,\nto specify <code>match</code> validator, your implementation could look like this:</p>\n\n<pre><code>editor.widgets.add( 'customWidget', {\n    // ...\n\n    styleToAllowedContentRules: funciton( style ) {\n        // Retrieve classes defined in the style.\n        var classes = style.getClassesArray();\n\n        // Do something crazy - for example return allowed content rules in object format,\n        // with custom match property and propertiesOnly flag.\n        return {\n            h1: {\n                match: isWidgetElement,\n                propertiesOnly: true,\n                classes: classes\n            }\n        };\n    }\n} );\n</code></pre>\n","since":"4.4","type":"Function","default":null,"properties":null,"params":[{"tagname":"params","type":"CKEDITOR.style.customHandlers.widget","name":"style","doc":"<p>The style to be transformed.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.style.customHandlers.widget\" rel=\"CKEDITOR.style.customHandlers.widget\" class=\"docClass\">CKEDITOR.style.customHandlers.widget</a>"}],"return":{"type":"CKEDITOR.filter.allowedContentRules","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>"},"id":"property-styleToAllowedContentRules","owner":"CKEDITOR.plugins.widget.definition","short_doc":"Function transforming custom widget's CKEDITOR.style instance into\nCKEDITOR.filter.allowedContentRules. ...","html_type":"Function"},{"tagname":"property","name":"styleableElements","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3572}],"doc":"<p>Names of element(s) (separated by spaces) for which the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> should allow classes\ndefined in the widget styles. For example if your widget is upcasted from a simple <code>&lt;div&gt;</code>\nelement, then in order to make it styleable you can set:</p>\n\n<pre><code>editor.widgets.add( 'customWidget', {\n    upcast: function( element ) {\n        return element.name == 'div';\n    },\n\n    // ...\n\n    styleableElements: 'div'\n} );\n</code></pre>\n\n<p>Then, when the following style is defined:</p>\n\n<pre><code>{\n    name: 'Thick border', type: 'widget', widget: 'customWidget',\n    attributes: { 'class': 'thickBorder' }\n}\n</code></pre>\n\n<p>a rule allowing the <code>thickBorder</code> class for <code>div</code> elements will be registered in the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>.</p>\n\n<p>If you need to have more freedom when transforming widget style to allowed content rules,\nyou can use the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" rel=\"CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" class=\"docClass\">styleToAllowedContentRules</a> callback.</p>\n","since":"4.4","type":"String","default":null,"properties":null,"id":"property-styleableElements","owner":"CKEDITOR.plugins.widget.definition","short_doc":"Names of element(s) (separated by spaces) for which the CKEDITOR.filter should allow classes\ndefined in the widget st...","html_type":"String"},{"tagname":"property","name":"template","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3482}],"doc":"<p>The template which will be used to create a new widget element (when the widget's command is executed).\nThis string is populated with <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-defaults\" rel=\"CKEDITOR.plugins.widget.definition-property-defaults\" class=\"docClass\">default values</a> by using the <a href=\"#!/api/CKEDITOR.template\" rel=\"CKEDITOR.template\" class=\"docClass\">CKEDITOR.template</a> format.\nTherefore it has to be a valid <a href=\"#!/api/CKEDITOR.template\" rel=\"CKEDITOR.template\" class=\"docClass\">CKEDITOR.template</a> argument.</p>\n","type":"String","default":null,"properties":null,"id":"property-template","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The template which will be used to create a new widget element (when the widget's command is executed). ...","html_type":"String"},{"tagname":"property","name":"upcast","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3357}],"doc":"<p>The function to be used to upcast an element to this widget or a\ncomma-separated list of upcast methods from the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcasts\" rel=\"CKEDITOR.plugins.widget.definition-property-upcasts\" class=\"docClass\">upcasts</a> object.</p>\n\n<p>The upcast function <strong>is not</strong> executed in the widget context (because the widget\ndoes not exist yet) and two arguments are passed:</p>\n\n<ul>\n<li><code>element</code> (<a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>) &ndash; The element to be checked.</li>\n<li><code>data</code> (<code>Object</code>) &ndash; The object which can be extended with data which will then be passed to the widget.</li>\n</ul>\n\n\n<p>An element will be upcasted if a function returned <code>true</code> or an instance of\na <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a> if upcasting meant DOM structure changes\n(in this case the widget will be initialized on the returned element).</p>\n","type":"String/Function","default":null,"properties":null,"id":"property-upcast","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The function to be used to upcast an element to this widget or a\ncomma-separated list of upcast methods from the upca...","html_type":"String/Function"},{"tagname":"property","name":"upcasts","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/plugins/widget/plugin.js","linenr":3374}],"doc":"<p>The object containing functions which can be used to upcast this widget.\nOnly those pointed by the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcast\" rel=\"CKEDITOR.plugins.widget.definition-property-upcast\" class=\"docClass\">upcast</a> property will be used.</p>\n\n<p>In most cases it is appropriate to use <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcast\" rel=\"CKEDITOR.plugins.widget.definition-property-upcast\" class=\"docClass\">upcast</a> directly,\nbecause majority of widgets need just one method.\nHowever, in some cases the widget author may want to expose more than one variant\nand then this property may be used.</p>\n\n<pre><code>upcasts: {\n    // This function may upcast only figure elements.\n    figure: function() {\n        // ...\n    },\n    // This function may upcast only image elements.\n    image: function() {\n        // ...\n    },\n    // More variants...\n}\n\n// Then, widget user may choose which upcast methods will be enabled.\neditor.on( 'widgetDefinition', function( evt ) {\n    if ( evt.data.name == 'image' )\n            evt.data.upcast = 'figure,image'; // Use both methods.\n} );\n</code></pre>\n","type":"Object","default":null,"properties":null,"id":"property-upcasts","owner":"CKEDITOR.plugins.widget.definition","short_doc":"The object containing functions which can be used to upcast this widget. ...","html_type":"Object"},{"tagname":"method","name":"toFeature","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/filter.js","linenr":2414}],"doc":"<p>Returns a feature that this feature needs to register.</p>\n\n<p>In some cases, during activation, one feature may need to register\nanother feature. For example a <a href=\"#!/api/CKEDITOR.ui.button\" rel=\"CKEDITOR.ui.button\" class=\"docClass\">CKEDITOR.ui.button</a> often registers\na related command. See <a href=\"#!/api/CKEDITOR.ui.button-method-toFeature\" rel=\"CKEDITOR.ui.button-method-toFeature\" class=\"docClass\">CKEDITOR.ui.button.toFeature</a>.</p>\n\n<p>This method is executed when a feature is passed to the <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a>.</p>\n","return":{"type":"CKEDITOR.feature","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">CKEDITOR.feature</a>"},"params":[],"id":"method-toFeature","owner":"CKEDITOR.feature","short_doc":"Returns a feature that this feature needs to register. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.plugins.widget.definition","short_doc":"This is an abstract class that describes the definition of a widget. ..."}