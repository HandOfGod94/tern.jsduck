{"tagname":"class","name":"CKEDITOR.pluginDefinition","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":12}],"doc":"<p>Virtual class which just illustrates the features of plugin objects to be\npassed to the <a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a> method.</p>\n\n<p>This class is not really part of the API, so its constructor should not be called.</p>\n","abstract":true,"members":[{"tagname":"property","name":"hidpi","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":81}],"doc":"<p>Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. <em>Retina</em>)\nby providing high-resolution icons and images. HiDPI icons must be twice as big\n(defaults are <code>16px x 16px</code>) and stored under <code>plugin_name/icons/hidpi/</code> directory.</p>\n\n<p>The common place for additional HiDPI images used by the plugin (<strong>but not icons</strong>)\nis <code>plugin_name/images/hidpi/</code> directory.</p>\n\n<p>This property is optional and only makes sense if <code>32px x 32px</code> icons\nand high-resolution images actually exist. If this flag is set <code>true</code>, the editor\nwill automatically detect the HiDPI environment and attempt to load the\nhigh-resolution resources.</p>\n","since":"4.2","type":"Boolean","default":null,"properties":null,"id":"property-hidpi","owner":"CKEDITOR.pluginDefinition","short_doc":"Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. ...","html_type":"Boolean"},{"tagname":"property","name":"lang","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":33}],"doc":"<p>A list of language files available for this plugin. These files are stored inside\nthe <code>lang</code> directory inside the plugin directory, follow the name\npattern of <code>langCode.js</code>, and contain the language definition created with\n<a href=\"#!/api/CKEDITOR.plugins-method-setLang\" rel=\"CKEDITOR.plugins-method-setLang\" class=\"docClass\">CKEDITOR.plugins.setLang</a>.</p>\n\n<p>When the plugin is being loaded, the editor checks this list to see if\na language file of the current editor language (<a href=\"#!/api/CKEDITOR.editor-property-langCode\" rel=\"CKEDITOR.editor-property-langCode\" class=\"docClass\">CKEDITOR.editor.langCode</a>)\nis available, and if so, loads it. Otherwise, the file represented by the first item\nin the list is loaded.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    lang: [ 'en', 'fr' ]\n} );\n</code></pre>\n","type":"Array","default":null,"properties":null,"id":"property-lang","owner":"CKEDITOR.pluginDefinition","short_doc":"A list of language files available for this plugin. ...","html_type":"Array"},{"tagname":"property","name":"requires","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":22}],"doc":"<p>A list of plugins that are required by this plugin. Note that this property\ndoes not determine the loading order of the plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    requires: [ 'button', 'selection' ]\n} );\n</code></pre>\n","type":"Array","default":null,"properties":null,"id":"property-requires","owner":"CKEDITOR.pluginDefinition","short_doc":"A list of plugins that are required by this plugin. ...","html_type":"Array"},{"tagname":"method","name":"beforeInit","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":51}],"doc":"<p>A function called on initialization of every editor instance created in the\npage before the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> call task. The <code>beforeInit</code> function will be called for\nall plugins, after that the <code>init</code> function is called for all of them. This\nfeature makes it possible to initialize things that could be used in the\n<code>init</code> function of other plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    beforeInit: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is to be initialized!' );\n    }\n} );\n</code></pre>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor instance being initialized.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"}],"id":"method-beforeInit","owner":"CKEDITOR.pluginDefinition","short_doc":"A function called on initialization of every editor instance created in the\npage before the init call task. ..."},{"tagname":"method","name":"init","autodetected":{},"files":[{"filename":"D:/_Projects/git/ckeditor-dev-4.4.1/core/plugindefinition.js","linenr":68}],"doc":"<p>Function called on initialization of every editor instance created in the page.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    init: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is being initialized!' );\n    }\n} );\n</code></pre>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor instance being initialized.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"}],"id":"method-init","owner":"CKEDITOR.pluginDefinition","short_doc":"Function called on initialization of every editor instance created in the page. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.pluginDefinition","short_doc":"Virtual class which just illustrates the features of plugin objects to be\npassed to the CKEDITOR.plugins.add method. ..."}