{"tagname":"class","name":"CKEDITOR.eventInfo","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":12}],"doc":"<p>Virtual class that illustrates the features of the event object to be\npassed to event listeners by a <a href=\"#!/api/CKEDITOR.event\" rel=\"CKEDITOR.event\" class=\"docClass\">CKEDITOR.event</a> based object.</p>\n\n<p>This class is not really part of the API.</p>\n","abstract":true,"members":[{"tagname":"property","name":"data","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":57}],"doc":"<p>Any kind of additional data. Its format and usage is event dependent.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.data ); // 'Example'\n} );\nsomeObject.fire( 'someEvent', 'Example' );\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-data","owner":"CKEDITOR.eventInfo","short_doc":"Any kind of additional data. ...","html_type":"Object"},{"tagname":"property","name":"editor","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":44}],"doc":"<p>The editor instance that holds the sender. May be the same as sender. May be\nnull if the sender is not part of an editor instance, like a component\nrunning in standalone mode.</p>\n\n<pre><code>myButton.on( 'someEvent', function( event ) {\n    alert( event.editor == myEditor ); // true\n} );\nmyButton.fire( 'someEvent', null, myEditor );\n</code></pre>\n","type":"CKEDITOR.editor","default":null,"properties":null,"id":"property-editor","owner":"CKEDITOR.eventInfo","short_doc":"The editor instance that holds the sender. ...","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"},{"tagname":"property","name":"listenerData","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":68}],"doc":"<p>Any extra data appended during the listener registration.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.listenerData ); // 'Example'\n}, null, 'Example' );\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-listenerData","owner":"CKEDITOR.eventInfo","short_doc":"Any extra data appended during the listener registration. ...","html_type":"Object"},{"tagname":"property","name":"name","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":22}],"doc":"<p>The event name.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.name ); // 'someEvent'\n} );\nsomeObject.fire( 'someEvent' );\n</code></pre>\n","type":"String","default":null,"properties":null,"id":"property-name","owner":"CKEDITOR.eventInfo","short_doc":"The event name. ...","html_type":"String"},{"tagname":"property","name":"sender","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":33}],"doc":"<p>The object that publishes (sends) the event.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.sender == someObject ); // true\n} );\nsomeObject.fire( 'someEvent' );\n</code></pre>\n","default":null,"properties":null,"type":"Object","id":"property-sender","owner":"CKEDITOR.eventInfo","short_doc":"The object that publishes (sends) the event. ...","html_type":"Object"},{"tagname":"method","name":"cancel","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":92}],"doc":"<p>Indicates that the event is to be cancelled (if cancelable).</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.cancel();\n} );\nsomeObject.on( 'someEvent', function( event ) {\n    // This one will not be called.\n} );\nalert( someObject.fire( 'someEvent' ) ); // true\n</code></pre>\n","params":[],"id":"method-cancel","owner":"CKEDITOR.eventInfo","short_doc":"Indicates that the event is to be cancelled (if cancelable). ..."},{"tagname":"method","name":"removeListener","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":106}],"doc":"<p>Removes the current listener.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.removeListener();\n    // Now this function won't be called again by 'someEvent'.\n} );\n</code></pre>\n","params":[],"id":"method-removeListener","owner":"CKEDITOR.eventInfo","short_doc":"Removes the current listener. ..."},{"tagname":"method","name":"stop","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/eventInfo.js","linenr":78}],"doc":"<p>Indicates that no further listeners are to be called.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.stop();\n} );\nsomeObject.on( 'someEvent', function( event ) {\n    // This one will not be called.\n} );\nalert( someObject.fire( 'someEvent' ) ); // false\n</code></pre>\n","params":[],"id":"method-stop","owner":"CKEDITOR.eventInfo","short_doc":"Indicates that no further listeners are to be called. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.eventInfo","short_doc":"Virtual class that illustrates the features of the event object to be\npassed to event listeners by a CKEDITOR.event b..."}