{"tagname":"class","name":"CKEDITOR.pluginDefinition","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":12}],"doc":"<p>A virtual class that just illustrates the features of plugin objects which are\npassed to the <a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a> method.</p>\n\n<p>This class is not really a part of the API, so its constructor should not be called.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"#!/guide/plugin_sdk_intro\">The Plugin SDK</a></li>\n<li><a href=\"#!/guide/plugin_sdk_sample\">Creating a CKEditor plugin in 20 Lines of Code</a></li>\n<li><a href=\"#!/guide/plugin_sdk_sample_1\">Creating a Simple Plugin Tutorial</a></li>\n</ul>\n\n","abstract":true,"members":[{"tagname":"property","name":"hidpi","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":162}],"doc":"<p>Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. <em>Retina</em>)\nby providing high-resolution icons and images. HiDPI icons must be twice as big\n(defaults are <code>16px x 16px</code>) and stored under <code>plugin_name/icons/hidpi/</code> directory.</p>\n\n<p>The common place for additional HiDPI images used by the plugin (<strong>but not icons</strong>)\nis the <code>plugin_name/images/hidpi/</code> directory.</p>\n\n<p>This property is optional and only makes sense if <code>32px x 32px</code> icons\nand high-resolution images actually exist. If this flag is set to <code>true</code>, the editor\nwill automatically detect the HiDPI environment and attempt to load the\nhigh-resolution resources.</p>\n","since":"4.2","type":"Boolean","default":null,"properties":null,"id":"property-hidpi","owner":"CKEDITOR.pluginDefinition","short_doc":"Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. ...","html_type":"Boolean"},{"tagname":"property","name":"lang","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":45}],"doc":"<p>The list of language files available for this plugin. These files are stored inside\nthe <code>lang</code> directory in the plugin directory, follow the name\npattern of <code>langCode.js</code>, and contain the language definition created with\n<a href=\"#!/api/CKEDITOR.plugins-method-setLang\" rel=\"CKEDITOR.plugins-method-setLang\" class=\"docClass\">CKEDITOR.plugins.setLang</a>.</p>\n\n<p>When the plugin is being loaded, the editor checks this list to see if\na language file in the current editor language (<a href=\"#!/api/CKEDITOR.editor-property-langCode\" rel=\"CKEDITOR.editor-property-langCode\" class=\"docClass\">CKEDITOR.editor.langCode</a>)\nis available, and if so, loads it. Otherwise, the file represented by the first item\nin the list is loaded.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    lang: 'en,fr'\n} );\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    lang: [ 'en', 'fr' ]\n} );\n</code></pre>\n","type":"String/String[]","default":null,"properties":null,"id":"property-lang","owner":"CKEDITOR.pluginDefinition","short_doc":"The list of language files available for this plugin. ...","html_type":"String/String[]"},{"tagname":"property","name":"requires","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":28}],"doc":"<p>A list of plugins that are required by this plugin. Note that this property\ndoes not determine the loading order of the plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    requires: 'button,selection'\n} );\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    requires: [ 'button', 'selection' ]\n} );\n</code></pre>\n","type":"String/String[]","default":null,"properties":null,"id":"property-requires","owner":"CKEDITOR.pluginDefinition","short_doc":"A list of plugins that are required by this plugin. ...","html_type":"String/String[]"},{"tagname":"method","name":"afterInit","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":137}],"doc":"<p>A function called on initialization of every editor instance created on the\npage after the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> call task. This feature makes it possible to use things\nthat were initialized in the <code>init</code> function of other plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample1', {\n    afterInit: function( editor ) {\n        // This will work regardless of order in which\n        // plugins sample1 and sample2 where initialized.\n        console.log( editor.foo ); // 'bar'\n    }\n} );\n\n<a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample2', {\n    init: function( editor ) {\n        editor.foo = 'bar';\n    }\n} );\n</code></pre>\n\n<p>Read more about the initialization order in the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> method documentation.</p>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor instance being initialized.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"}],"id":"method-afterInit","owner":"CKEDITOR.pluginDefinition","short_doc":"A function called on initialization of every editor instance created on the\npage after the init call task. ..."},{"tagname":"method","name":"beforeInit","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":85}],"doc":"<p>A function called on initialization of every editor instance created on the\npage before the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> call task. This feature makes it possible to\ninitialize things that could be used in the <code>init</code> function of other plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample1', {\n    beforeInit: function( editor ) {\n        editor.foo = 'bar';\n    }\n} );\n\n<a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample2', {\n    init: function( editor ) {\n        // This will work regardless of order in which\n        // plugins sample1 and sample2 where initialized.\n        console.log( editor.foo ); // 'bar'\n    }\n} );\n</code></pre>\n\n<p>Read more about the initialization order in the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> method documentation.</p>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor instance being initialized.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"}],"id":"method-beforeInit","owner":"CKEDITOR.pluginDefinition","short_doc":"A function called on initialization of every editor instance created on the\npage before the init call task. ..."},{"tagname":"method","name":"init","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":110}],"doc":"<p>A function called on initialization of every editor instance created on the page.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    init: function( editor ) {\n        console.log( 'Editor \"' + editor.name + '\" is being initialized!' );\n    }\n} );\n</code></pre>\n\n<p>Initialization order:</p>\n\n<ol>\n<li>The <a href=\"#!/api/CKEDITOR.pluginDefinition-method-beforeInit\" rel=\"CKEDITOR.pluginDefinition-method-beforeInit\" class=\"docClass\">beforeInit</a> methods of all enabled plugins are executed.</li>\n<li>The <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> methods of all enabled plugins are executed.</li>\n<li>The <a href=\"#!/api/CKEDITOR.pluginDefinition-method-afterInit\" rel=\"CKEDITOR.pluginDefinition-method-afterInit\" class=\"docClass\">afterInit</a> methods of all enabled plugins are executed.</li>\n<li>The <a href=\"#!/api/CKEDITOR.editor-event-pluginsLoaded\" rel=\"CKEDITOR.editor-event-pluginsLoaded\" class=\"docClass\">CKEDITOR.editor.pluginsLoaded</a> event is fired.</li>\n</ol>\n\n\n<p><strong>Note:</strong> The order in which the <code>init</code> methods are called does not depend on the plugins' <a href=\"#!/api/CKEDITOR.pluginDefinition-property-requires\" rel=\"CKEDITOR.pluginDefinition-property-requires\" class=\"docClass\">requirements</a>\nor the order set in the <a href=\"#!/api/CKEDITOR.config-cfg-plugins\" rel=\"CKEDITOR.config-cfg-plugins\" class=\"docClass\">CKEDITOR.config.plugins</a> option. It may be random and therefore it is\nrecommended to use the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-beforeInit\" rel=\"CKEDITOR.pluginDefinition-method-beforeInit\" class=\"docClass\">beforeInit</a> and <a href=\"#!/api/CKEDITOR.pluginDefinition-method-afterInit\" rel=\"CKEDITOR.pluginDefinition-method-afterInit\" class=\"docClass\">afterInit</a> methods in order to ensure\nthe right execution sequence.</p>\n\n<p>See also the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-onLoad\" rel=\"CKEDITOR.pluginDefinition-method-onLoad\" class=\"docClass\">onLoad</a> method.</p>\n","params":[{"tagname":"params","type":"CKEDITOR.editor","name":"editor","doc":"<p>The editor instance being initialized.</p>\n","html_type":"<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>"}],"id":"method-init","owner":"CKEDITOR.pluginDefinition","short_doc":"A function called on initialization of every editor instance created on the page. ..."},{"tagname":"method","name":"onLoad","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/plugindefinition.js","linenr":69}],"doc":"<p>A function called when the plugin definition is loaded for the first time.\nIt is usually used to execute some code once for the entire page,\nfor instance code that uses the <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a>'s methods such as the <a href=\"#!/api/CKEDITOR-method-addCss\" rel=\"CKEDITOR-method-addCss\" class=\"docClass\">CKEDITOR.addCss</a> method.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    onLoad: function() {\n        <a href=\"#!/api/CKEDITOR-method-addCss\" rel=\"CKEDITOR-method-addCss\" class=\"docClass\">CKEDITOR.addCss</a>( '.cke_some_class { ... }' );\n    }\n} );\n</code></pre>\n\n<p>Read more about the initialization order in the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> method documentation.</p>\n","params":[],"id":"method-onLoad","owner":"CKEDITOR.pluginDefinition","short_doc":"A function called when the plugin definition is loaded for the first time. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.pluginDefinition","short_doc":"A virtual class that just illustrates the features of plugin objects which are\npassed to the CKEDITOR.plugins.add met..."}