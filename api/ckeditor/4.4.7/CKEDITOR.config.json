{"tagname":"class","name":"CKEDITOR.config","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":47}],"doc":"<p>Stores default configuration settings. Changes to this object are\nreflected in all editor instances, if not specified otherwise for a particular\ninstance.</p>\n\n<p>Read more about setting CKEditor configuration in the\n<a href=\"#!/guide/dev_configuration\">Developer's Guide</a>.</p>\n","singleton":true,"members":[{"tagname":"cfg","name":"allowedContent","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/filter.js","linenr":2187}],"doc":"<p>Allowed content rules. This setting is used when\ninstantiating <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>.</p>\n\n<p>The following values are accepted:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a> &ndash; defined rules will be added\nto the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>.</li>\n<li><code>true</code> &ndash; will disable the filter (data will not be filtered,\nall features will be activated).</li>\n<li>default &ndash; the filter will be configured by loaded features\n(toolbar items, commands, etc.).</li>\n</ul>\n\n\n<p>In all cases filter configuration may be extended by\n<a href=\"#!/api/CKEDITOR.config-cfg-extraAllowedContent\" rel=\"CKEDITOR.config-cfg-extraAllowedContent\" class=\"docClass\">extraAllowedContent</a>. This option may be especially\nuseful when you want to use the default <code>allowedContent</code> value\nalong with some additional rules.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'textarea_id', {\n    allowedContent: 'p b i; a[!href]',\n    on: {\n        instanceReady: function( evt ) {\n            var editor = evt.editor;\n\n            editor.filter.check( 'h1' ); // -&gt; false\n            editor.setData( '&lt;h1&gt;&lt;i&gt;Foo&lt;/i&gt;&lt;/h1&gt;&lt;p class=\"left\"&gt;&lt;span&gt;Bar&lt;/span&gt; &lt;a href=\"http://foo.bar\"&gt;foo&lt;/a&gt;&lt;/p&gt;' );\n            // Editor contents will be:\n            '&lt;p&gt;&lt;i&gt;Foo&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Bar &lt;a href=\"http://foo.bar\"&gt;foo&lt;/a&gt;&lt;/p&gt;'\n        }\n    }\n} );\n</code></pre>\n\n<p>It is also possible to disallow some already allowed content. It is especially\nuseful when you want to \"trim down\" the content allowed by default by\neditor features. To do that, use the <a href=\"#!/api/CKEDITOR.config-cfg-disallowedContent\" rel=\"CKEDITOR.config-cfg-disallowedContent\" class=\"docClass\">disallowedContent</a> option.</p>\n","since":"4.1","type":"CKEDITOR.filter.allowedContentRules/Boolean","default":"null","properties":null,"owner":"CKEDITOR.config","id":"cfg-allowedContent","short_doc":"Allowed content rules. ...","html_type":"<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>/Boolean"},{"tagname":"cfg","name":"autoUpdateElement","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":77}],"doc":"<p>Whether the replaced element (usually a <code>&lt;textarea&gt;</code>)\nis to be updated automatically when posting the form containing the editor.</p>\n","type":"Boolean","default":"true","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-autoUpdateElement","owner":"CKEDITOR.config","short_doc":"Whether the replaced element (usually a &lt;textarea&gt;)\nis to be updated automatically when posting the form contai...","html_type":"Boolean"},{"tagname":"cfg","name":"baseFloatZIndex","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":329}],"doc":"<p>The base Z-index for floating dialog windows and popups.</p>\n\n<pre><code>config.baseFloatZIndex = 2000;\n</code></pre>\n","type":"Number","default":"10000","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-baseFloatZIndex","owner":"CKEDITOR.config","short_doc":"The base Z-index for floating dialog windows and popups. ...","html_type":"Number"},{"tagname":"cfg","name":"blockedKeystrokes","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":338}],"doc":"<p>The keystrokes that are blocked by default as the browser implementation\nis buggy. These default keystrokes are handled by the editor.</p>\n\n<pre><code>// Default setting.\nconfig.blockedKeystrokes = [\n    <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 66, // CTRL+B\n    <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 73, // CTRL+I\n    <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 85 // CTRL+U\n];\n</code></pre>\n","type":"Array","default":"see example","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-blockedKeystrokes","owner":"CKEDITOR.config","short_doc":"The keystrokes that are blocked by default as the browser implementation\nis buggy. ...","html_type":"Array"},{"tagname":"cfg","name":"bodyClass","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":204}],"doc":"<p>Sets the <code>class</code> attribute to be used on the <code>body</code> element\nof the editing area. This can be useful when you intend to reuse the original CSS\nfile you are using on your live website and want to assign the editor the same class\nas the section that will include the contents. In this way class-specific CSS rules will\nbe enabled.</p>\n\n<pre><code>config.bodyClass = 'contents';\n</code></pre>\n\n<p><strong>Note:</strong> Editor needs to load stylesheets containing contents styles. You can either\ncopy them to the <code>contents.css</code> file that editor loads by default or set the contentsCss\noption.</p>\n\n<p><strong>Note:</strong> This setting applies only to the classic editor (the one that uses <code>iframe</code>).</p>\n","since":"3.1","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-bodyClass","owner":"CKEDITOR.config","short_doc":"Sets the class attribute to be used on the body element\nof the editing area. ...","html_type":"String"},{"tagname":"cfg","name":"bodyId","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":190}],"doc":"<p>Sets the <code>id</code> attribute to be used on the <code>body</code> element\nof the editing area. This can be useful when you intend to reuse the original CSS\nfile you are using on your live website and want to assign the editor the same ID\nas the section that will include the contents. In this way ID-specific CSS rules will\nbe enabled.</p>\n\n<pre><code>config.bodyId = 'contents_id';\n</code></pre>\n","since":"3.1","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-bodyId","owner":"CKEDITOR.config","short_doc":"Sets the id attribute to be used on the body element\nof the editing area. ...","html_type":"String"},{"tagname":"cfg","name":"contentsLangDirection","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":108}],"doc":"<p>The writing direction of the language which is used to create editor contents.\nAllowed values are:</p>\n\n<ul>\n<li><code>''</code> (an empty string) &ndash; Indicates that content direction will be the same as either\n   the editor UI direction or the page element direction depending on the editor type:\n\n<ul>\n<li>Classic editor &ndash; The same as the user interface language direction.</li>\n<li>Inline editor &ndash; The same as the editable element text direction.</li>\n</ul>\n</li>\n<li><code>'ltr'</code> &ndash; Indicates a Left-To-Right text direction (like in English).</li>\n<li><code>'rtl'</code> &ndash; Indicates a Right-To-Left text direction (like in Arabic).</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>config.contentsLangDirection = 'rtl';\n</code></pre>\n","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-contentsLangDirection","owner":"CKEDITOR.config","short_doc":"The writing direction of the language which is used to create editor contents. ...","html_type":"String"},{"tagname":"cfg","name":"customConfig","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":59}],"doc":"<p>The URL path for the custom configuration file to be loaded. If not\noverloaded with inline configuration, it defaults to the <code>config.js</code>\nfile present in the root of the CKEditor installation directory.</p>\n\n<p>CKEditor will recursively load custom configuration files defined inside\nother custom configuration files.</p>\n\n<pre><code>// Load a specific configuration file.\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'myfield', { customConfig: '/myconfig.js' } );\n\n// Do not load any custom configuration file.\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'myfield', { customConfig: '' } );\n</code></pre>\n","type":"String","default":"\"<CKEditor folder>/config.js\"","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-customConfig","owner":"CKEDITOR.config","short_doc":"The URL path for the custom configuration file to be loaded. ...","html_type":"String"},{"tagname":"cfg","name":"defaultLanguage","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":98}],"doc":"<p>The language to be used if the <a href=\"#!/api/CKEDITOR.config-cfg-language\" rel=\"CKEDITOR.config-cfg-language\" class=\"docClass\">language</a>\nsetting is left empty and it is not possible to localize the editor to the user language.</p>\n\n<pre><code>config.defaultLanguage = 'it';\n</code></pre>\n","type":"String","default":"'en'","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-defaultLanguage","owner":"CKEDITOR.config","short_doc":"The language to be used if the language\nsetting is left empty and it is not possible to localize the editor to the us...","html_type":"String"},{"tagname":"cfg","name":"disableReadonlyStyling","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/style.js","linenr":2039}],"doc":"<p>Disables inline styling on read-only elements.</p>\n","since":"3.5","type":"Boolean","default":"false","properties":null,"owner":"CKEDITOR.config","id":"cfg-disableReadonlyStyling","short_doc":"Disables inline styling on read-only elements. ...","html_type":"Boolean"},{"tagname":"cfg","name":"disallowedContent","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/filter.js","linenr":2258}],"doc":"<p>Disallowed content rules. They have precedence over <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">allowed content rules</a>.\nRead more in the <a href=\"#!/guide/dev_disallowed_content\">Disallowed Content guide</a>.</p>\n\n<p>See also <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">allowedContent</a> and <a href=\"#!/api/CKEDITOR.config-cfg-extraAllowedContent\" rel=\"CKEDITOR.config-cfg-extraAllowedContent\" class=\"docClass\">extraAllowedContent</a>.</p>\n","since":"4.4","type":"CKEDITOR.filter.disallowedContentRules","default":null,"properties":null,"owner":"CKEDITOR.config","id":"cfg-disallowedContent","short_doc":"Disallowed content rules. ...","html_type":"<a href=\"#!/api/CKEDITOR.filter.disallowedContentRules\" rel=\"CKEDITOR.filter.disallowedContentRules\" class=\"docClass\">CKEDITOR.filter.disallowedContentRules</a>"},{"tagname":"cfg","name":"docType","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":180}],"doc":"<p>Sets the <code>DOCTYPE</code> to be used when loading the editor content as HTML.</p>\n\n<pre><code>// Set the DOCTYPE to the HTML 4 (Quirks) mode.\nconfig.docType = '&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;';\n</code></pre>\n","type":"String","default":"'<!DOCTYPE html>'","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-docType","owner":"CKEDITOR.config","short_doc":"Sets the DOCTYPE to be used when loading the editor content as HTML. ...","html_type":"String"},{"tagname":"cfg","name":"enterMode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":127}],"doc":"<p>Sets the behavior of the <em>Enter</em> key. It also determines other behavior\nrules of the editor, like whether the <code>&lt;br&gt;</code> element is to be used\nas a paragraph separator when indenting text.\nThe allowed values are the following constants that cause the behavior outlined below:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a> (1) &ndash; new <code>&lt;p&gt;</code> paragraphs are created;</li>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a> (2) &ndash; lines are broken with <code>&lt;br&gt;</code> elements;</li>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_DIV\" rel=\"CKEDITOR-property-ENTER_DIV\" class=\"docClass\">CKEDITOR.ENTER_DIV</a> (3) &ndash; new <code>&lt;div&gt;</code> blocks are created.</li>\n</ul>\n\n\n<p><strong>Note</strong>: It is recommended to use the <a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a> setting because of\nits semantic value and correctness. The editor is optimized for this setting.</p>\n\n<pre><code>// Not recommended.\nconfig.enterMode = <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>;\n</code></pre>\n","type":"Number","default":"CKEDITOR.ENTER_P","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-enterMode","owner":"CKEDITOR.config","short_doc":"Sets the behavior of the Enter key. ...","html_type":"Number"},{"tagname":"cfg","name":"extraAllowedContent","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/filter.js","linenr":2228}],"doc":"<p>This option makes it possible to set additional allowed\ncontent rules for <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>.</p>\n\n<p>It is especially useful in combination with the default\n<a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">allowedContent</a> value:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'textarea_id', {\n    plugins: 'wysiwygarea,toolbar,format',\n    extraAllowedContent: 'b i',\n    on: {\n        instanceReady: function( evt ) {\n            var editor = evt.editor;\n\n            editor.filter.check( 'h1' ); // -&gt; true (thanks to Format combo)\n            editor.filter.check( 'b' ); // -&gt; true (thanks to extraAllowedContent)\n            editor.setData( '&lt;h1&gt;&lt;i&gt;Foo&lt;/i&gt;&lt;/h1&gt;&lt;p class=\"left\"&gt;&lt;b&gt;Bar&lt;/b&gt; &lt;a href=\"http://foo.bar\"&gt;foo&lt;/a&gt;&lt;/p&gt;' );\n            // Editor contents will be:\n            '&lt;h1&gt;&lt;i&gt;Foo&lt;/i&gt;&lt;/h1&gt;&lt;p&gt;&lt;b&gt;Bar&lt;/b&gt; foo&lt;/p&gt;'\n        }\n    }\n} );\n</code></pre>\n\n<p>See <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">allowedContent</a> for more details.</p>\n","since":"4.1","type":"Object/String","default":null,"properties":null,"owner":"CKEDITOR.config","id":"cfg-extraAllowedContent","short_doc":"This option makes it possible to set additional allowed\ncontent rules for CKEDITOR.editor.filter. ...","html_type":"Object/String"},{"tagname":"cfg","name":"extraPlugins","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":261}],"doc":"<p>A list of additional plugins to be loaded. This setting makes it easier\nto add new plugins without having to touch the <a href=\"#!/api/CKEDITOR.config-cfg-plugins\" rel=\"CKEDITOR.config-cfg-plugins\" class=\"docClass\">plugins</a> setting.</p>\n\n<p><strong>Note:</strong> The most recommended way to\n<a href=\"http://docs.ckeditor.com/#!/guide/dev_plugins\">add CKEditor plugins</a> is through\n<a href=\"http://ckeditor.com/builder\">CKEditor Builder</a>.</p>\n\n<pre><code>config.extraPlugins = 'myplugin,anotherplugin';\n</code></pre>\n","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-extraPlugins","owner":"CKEDITOR.config","short_doc":"A list of additional plugins to be loaded. ...","html_type":"String"},{"tagname":"cfg","name":"fillEmptyBlocks","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/htmldataprocessor.js","linenr":936}],"doc":"<p>Whether a filler text (non-breaking space entity &mdash; <code>&amp;nbsp;</code>) will be\ninserted into empty block elements in HTML output.\nThis is used to render block elements properly with <code>line-height</code>.\nWhen a function is specified instead, it will be passed a <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>\nto decide whether adding the filler text by expecting a Boolean return value.</p>\n\n<pre><code>config.fillEmptyBlocks = false; // Prevent filler nodes in all empty blocks.\n\n// Prevent filler node only in float cleaners.\nconfig.fillEmptyBlocks = function( element ) {\n    if ( element.attributes[ 'class' ].indexOf( 'clear-both' ) != -1 )\n        return false;\n};\n</code></pre>\n","since":"3.5","type":"Boolean/Function","default":"true","properties":null,"owner":"CKEDITOR.config","id":"cfg-fillEmptyBlocks","short_doc":"Whether a filler text (non-breaking space entity &mdash; &amp;nbsp;) will be\ninserted into empty block elements in HT...","html_type":"Boolean/Function"},{"tagname":"cfg","name":"forceEnterMode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":147}],"doc":"<p>Force the use of <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">enterMode</a> as line break regardless\nof the context. If, for example, <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">enterMode</a> is set\nto <a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a>, pressing the <em>Enter</em> key inside a\n<code>&lt;div&gt;</code> element will create a new paragraph with <code>&lt;p&gt;</code>\ninstead of a <code>&lt;div&gt;</code>.</p>\n\n<pre><code>// Not recommended.\nconfig.forceEnterMode = true;\n</code></pre>\n","since":"3.2.1","type":"Boolean","default":"false","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-forceEnterMode","owner":"CKEDITOR.config","short_doc":"Force the use of enterMode as line break regardless\nof the context. ...","html_type":"Boolean"},{"tagname":"cfg","name":"fullPage","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":224}],"doc":"<p>Indicates whether the contents to be edited are being input as a full HTML page.\nA full page includes the <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements.\nThe final output will also reflect this setting, including the\n<code>&lt;body&gt;</code> contents only if this setting is disabled.</p>\n\n<pre><code>config.fullPage = true;\n</code></pre>\n","since":"3.1","type":"Boolean","default":"false","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-fullPage","owner":"CKEDITOR.config","short_doc":"Indicates whether the contents to be edited are being input as a full HTML page. ...","html_type":"Boolean"},{"tagname":"cfg","name":"height","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":237}],"doc":"<p>The height of the editing area that includes the editor content. This configuration\noption accepts an integer (to denote a value in pixels) or any CSS-defined length unit\nexcept percent (<code>%</code>) values  which are not supported.</p>\n\n<p><strong>Note:</strong> This configuration option is ignored by <a href=\"#!/guide/dev_inline\">inline editor</a>.</p>\n\n<pre><code>config.height = 500;        // 500 pixels.\nconfig.height = '25em';     // CSS length.\nconfig.height = '300px';    // CSS length.\n</code></pre>\n","type":"Number/String","default":"200","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-height","owner":"CKEDITOR.config","short_doc":"The height of the editing area that includes the editor content. ...","html_type":"Number/String"},{"tagname":"cfg","name":"htmlEncodeOutput","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editor.js","linenr":1302}],"doc":"<p>Whether to escape HTML when the editor updates the original input element.</p>\n\n<pre><code>config.htmlEncodeOutput = true;\n</code></pre>\n","since":"3.1","type":"Boolean","default":"false","properties":null,"owner":"CKEDITOR.config","id":"cfg-htmlEncodeOutput","short_doc":"Whether to escape HTML when the editor updates the original input element. ...","html_type":"Boolean"},{"tagname":"cfg","name":"ignoreEmptyParagraph","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editable.js","linenr":2223}],"doc":"<p>Whether the editor must output an empty value (<code>''</code>) if its content only consists\nof an empty paragraph.</p>\n\n<pre><code>config.ignoreEmptyParagraph = false;\n</code></pre>\n","type":"Boolean","default":"true","properties":null,"owner":"CKEDITOR.config","id":"cfg-ignoreEmptyParagraph","short_doc":"Whether the editor must output an empty value ('') if its content only consists\nof an empty paragraph. ...","html_type":"Boolean"},{"tagname":"cfg","name":"keystrokes","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/keystrokehandler.js","linenr":96}],"doc":"<p>A list associating keystrokes with editor commands. Each element in the list\nis an array where the first item is the keystroke, and the second is the\nname of the command to be executed.</p>\n\n<p>This setting should be used to define (as well as to overwrite or remove) keystrokes\nset by plugins (like <code>link</code> and <code>basicstyles</code>). If you want to set a keystroke\nfor your plugin or during the runtime, use <a href=\"#!/api/CKEDITOR.editor-method-setKeystroke\" rel=\"CKEDITOR.editor-method-setKeystroke\" class=\"docClass\">CKEDITOR.editor.setKeystroke</a> instead.</p>\n\n<p>Since default keystrokes are set by the <a href=\"#!/api/CKEDITOR.editor-method-setKeystroke\" rel=\"CKEDITOR.editor-method-setKeystroke\" class=\"docClass\">CKEDITOR.editor.setKeystroke</a>\nmethod, by default <code>config.keystrokes</code> is an empty array.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.editor-method-setKeystroke\" rel=\"CKEDITOR.editor-method-setKeystroke\" class=\"docClass\">CKEDITOR.editor.setKeystroke</a> documentation for more details\nregarding the start up order.</p>\n\n<pre><code>// Change default Ctrl+L keystroke for 'link' command to Ctrl+Shift+L.\nconfig.keystrokes = [\n    ...\n    [ <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + <a href=\"#!/api/CKEDITOR-property-SHIFT\" rel=\"CKEDITOR-property-SHIFT\" class=\"docClass\">CKEDITOR.SHIFT</a> + 76, 'link' ],    // Ctrl+Shift+L\n    ...\n];\n</code></pre>\n\n<p>To reset a particular keystroke, the following approach can be used:</p>\n\n<pre><code>// Disable default Ctrl+L keystroke which executes the 'link' command by default.\nconfig.keystrokes = [\n    ...\n    [ <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 76, null ],                       // Ctrl+L\n    ...\n];\n</code></pre>\n\n<p>In order to reset all default keystrokes, a <a href=\"#!/api/CKEDITOR-event-instanceReady\" rel=\"CKEDITOR-event-instanceReady\" class=\"docClass\">CKEDITOR.instanceReady</a> callback should be\nused. This is since editor defaults are merged rather than overwritten by\nuser keystrokes.</p>\n\n<p><strong>Note</strong>: This can be potentially harmful for the editor. Avoid this unless you are\naware of the consequences.</p>\n\n<pre><code>// Reset all default keystrokes.\nconfig.on.instanceReady = function() {\n    this.keystrokeHandler.keystrokes = [];\n};\n</code></pre>\n","type":"Array","default":"[]","properties":null,"owner":"CKEDITOR.config","id":"cfg-keystrokes","short_doc":"A list associating keystrokes with editor commands. ...","html_type":"Array"},{"tagname":"cfg","name":"language","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":85}],"doc":"<p>The user interface language localization to use. If left empty, the editor\nwill automatically be localized to the user language. If the user language is not supported,\nthe language specified in the <a href=\"#!/api/CKEDITOR.config-cfg-defaultLanguage\" rel=\"CKEDITOR.config-cfg-defaultLanguage\" class=\"docClass\">defaultLanguage</a>\nconfiguration setting is used.</p>\n\n<pre><code>// Load the German interface.\nconfig.language = 'de';\n</code></pre>\n","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-language","owner":"CKEDITOR.config","short_doc":"The user interface language localization to use. ...","html_type":"String"},{"tagname":"cfg","name":"on","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editor.js","linenr":1362}],"doc":"<p>Sets listeners on editor events.</p>\n\n<p><strong>Note:</strong> This property can only be set in the <code>config</code> object passed directly\nto <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>, <a href=\"#!/api/CKEDITOR-method-inline\" rel=\"CKEDITOR-method-inline\" class=\"docClass\">CKEDITOR.inline</a>, and other creators.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1', {\n    on: {\n        instanceReady: function() {\n            alert( this.name ); // 'editor1'\n        },\n\n        key: function() {\n            // ...\n        }\n    }\n} );\n</code></pre>\n","type":"Object","default":null,"properties":null,"owner":"CKEDITOR.config","id":"cfg-on","short_doc":"Sets listeners on editor events. ...","html_type":"Object"},{"tagname":"cfg","name":"plugins","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":252}],"doc":"<p>Comma-separated list of plugins to be used in an editor instance. Note that\nthe actual plugins that are to be loaded could still be affected by two other settings:\n<a href=\"#!/api/CKEDITOR.config-cfg-extraPlugins\" rel=\"CKEDITOR.config-cfg-extraPlugins\" class=\"docClass\">extraPlugins</a> and <a href=\"#!/api/CKEDITOR.config-cfg-removePlugins\" rel=\"CKEDITOR.config-cfg-removePlugins\" class=\"docClass\">removePlugins</a>.</p>\n","type":"String","default":"\"<default list of plugins>\"","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-plugins","owner":"CKEDITOR.config","short_doc":"Comma-separated list of plugins to be used in an editor instance. ...","html_type":"String"},{"tagname":"cfg","name":"protectedSource","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":290}],"doc":"<p>A list of regular expressions to be executed on input HTML,\nindicating HTML source code that when matched, must <strong>not</strong> be available in the WYSIWYG\nmode for editing.</p>\n\n<pre><code>config.protectedSource.push( /&lt;\\?[\\s\\S]*?\\?&gt;/g );                                           // PHP code\nconfig.protectedSource.push( /&lt;%[\\s\\S]*?%&gt;/g );                                             // ASP code\nconfig.protectedSource.push( /(&lt;asp:[^\\&gt;]+&gt;[\\s|\\S]*?&lt;\\/asp:[^\\&gt;]+&gt;)|(&lt;asp:[^\\&gt;]+\\/&gt;)/gi );  // ASP.Net code\n</code></pre>\n","type":"Array","default":"[]","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-protectedSource","owner":"CKEDITOR.config","short_doc":"A list of regular expressions to be executed on input HTML,\nindicating HTML source code that when matched, must not b...","html_type":"Array"},{"tagname":"cfg","name":"readOnly","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editor.js","linenr":1312}],"doc":"<p>If <code>true</code>, makes the editor start in read-only state. Otherwise, it will check\nif the linked <code>&lt;textarea&gt;</code> element has the <code>disabled</code> attribute.</p>\n\n<pre><code>config.readOnly = true;@see <a href=\"#!/api/CKEDITOR.editor-method-setReadOnly\" rel=\"CKEDITOR.editor-method-setReadOnly\" class=\"docClass\">CKEDITOR.editor.setReadOnly</a>\n</code></pre>\n","since":"3.6","type":"Boolean","default":"false","properties":null,"owner":"CKEDITOR.config","id":"cfg-readOnly","short_doc":"If true, makes the editor start in read-only state. ...","html_type":"Boolean"},{"tagname":"cfg","name":"removePlugins","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":275}],"doc":"<p>A list of plugins that must not be loaded. This setting makes it possible\nto avoid loading some plugins defined in the <a href=\"#!/api/CKEDITOR.config-cfg-plugins\" rel=\"CKEDITOR.config-cfg-plugins\" class=\"docClass\">plugins</a>\nsetting, without having to touch it.</p>\n\n<p><strong>Note:</strong> A plugin required by another plugin cannot be removed and will cause\nan error to be thrown. So for example if <code>contextmenu</code> is required by <code>tabletools</code>,\nit can only be removed if <code>tabletools</code> is not loaded.</p>\n\n<pre><code>config.removePlugins = 'elementspath,save,font';\n</code></pre>\n","type":"String","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-removePlugins","owner":"CKEDITOR.config","short_doc":"A list of plugins that must not be loaded. ...","html_type":"String"},{"tagname":"cfg","name":"shiftEnterMode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":162}],"doc":"<p>Similarly to the <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">enterMode</a> setting, it defines the behavior\nof the <em>Shift+Enter</em> key combination.</p>\n\n<p>The allowed values are the following constants the behavior outlined below:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a> (1) &ndash; new <code>&lt;p&gt;</code> paragraphs are created;</li>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a> (2) &ndash; lines are broken with <code>&lt;br&gt;</code> elements;</li>\n<li><a href=\"#!/api/CKEDITOR-property-ENTER_DIV\" rel=\"CKEDITOR-property-ENTER_DIV\" class=\"docClass\">CKEDITOR.ENTER_DIV</a> (3) &ndash; new <code>&lt;div&gt;</code> blocks are created.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>config.shiftEnterMode = <a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a>;\n</code></pre>\n","type":"Number","default":"CKEDITOR.ENTER_BR","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-shiftEnterMode","owner":"CKEDITOR.config","short_doc":"Similarly to the enterMode setting, it defines the behavior\nof the Shift+Enter key combination. ...","html_type":"Number"},{"tagname":"cfg","name":"skin","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/skin.js","linenr":318}],"doc":"<p>The editor skin name. Note that it is not possible to have editors with\ndifferent skin settings in the same page. In such case just one of the\nskins will be used for all editors.</p>\n\n<p>This is a shortcut to CKEDITOR.skinName.</p>\n\n<p>It is possible to install skins outside the default <code>skin</code> folder in the\neditor installation. In that case, the absolute URL path to that folder\nshould be provided, separated by a comma (<code>'skin_name,skin_path'</code>).</p>\n\n<pre><code>config.skin = 'moono';\n\nconfig.skin = 'myskin,/customstuff/myskin/';\n</code></pre>\n","type":"String","default":null,"properties":null,"owner":"CKEDITOR.config","id":"cfg-skin","short_doc":"The editor skin name. ...","html_type":"String"},{"tagname":"cfg","name":"startupFocus","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editor.js","linenr":1324}],"doc":"<p>Sets whether an editable element should have focus when the editor is loading for the first time.</p>\n\n<pre><code>config.startupFocus = true;\n</code></pre>\n","type":"Boolean","default":"false","properties":null,"owner":"CKEDITOR.config","id":"cfg-startupFocus","short_doc":"Sets whether an editable element should have focus when the editor is loading for the first time. ...","html_type":"Boolean"},{"tagname":"cfg","name":"startupMode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/creators/themedui.js","linenr":468}],"doc":"<p>The mode to load at the editor startup. It depends on the plugins\nloaded. By default, the <code>wysiwyg</code> and <code>source</code> modes are available.</p>\n\n<pre><code>config.startupMode = 'source';\n</code></pre>\n","type":"String","default":"'wysiwyg'","properties":null,"owner":"CKEDITOR.config","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-startupMode","short_doc":"The mode to load at the editor startup. ...","html_type":"String"},{"tagname":"cfg","name":"stylesSet","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/style.js","linenr":2047}],"doc":"<p>The \"styles definition set\" to use in the editor. They will be used in the\nstyles combo and the style selector of the div container.</p>\n\n<p>The styles may be defined in the page containing the editor, or can be\nloaded on demand from an external file. In the second case, if this setting\ncontains only a name, the <code>styles.js</code> file will be loaded from the\nCKEditor root folder (what ensures backward compatibility with CKEditor 4.0).</p>\n\n<p>Otherwise, this setting has the <code>name:url</code> syntax, making it\npossible to set the URL from which loading the styles file.\nNote that the <code>name</code> has to be equal to the name used in\n<a href=\"#!/api/CKEDITOR.stylesSet-method-add\" rel=\"CKEDITOR.stylesSet-method-add\" class=\"docClass\">CKEDITOR.stylesSet.add</a> while registering styles set.</p>\n\n<p><strong>Note</strong>: Since 4.1 it is possible to set <code>stylesSet</code> to <code>false</code>\nto prevent loading any styles set.</p>\n\n<pre><code>// Do not load any file. Styles set is empty.\nconfig.stylesSet = false;\n\n// Load the 'mystyles' styles set from styles.js file.\nconfig.stylesSet = 'mystyles';\n\n// Load the 'mystyles' styles set from a relative URL.\nconfig.stylesSet = 'mystyles:/editorstyles/styles.js';\n\n// Load from a full URL.\nconfig.stylesSet = 'mystyles:http://www.example.com/editorstyles/styles.js';\n\n// Load from a list of definitions.\nconfig.stylesSet = [\n    { name: 'Strong Emphasis', element: 'strong' },\n    { name: 'Emphasis', element: 'em' },\n    ...\n];\n</code></pre>\n","since":"3.3","type":"String/Array/Boolean","default":"'default'","properties":null,"owner":"CKEDITOR.config","id":"cfg-stylesSet","short_doc":"The \"styles definition set\" to use in the editor. ...","html_type":"String/Array/Boolean"},{"tagname":"cfg","name":"tabIndex","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":303}],"doc":"<p>The editor <code>tabindex</code> value.</p>\n\n<pre><code>config.tabIndex = 1;\n</code></pre>\n","type":"Number","default":"0","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-tabIndex","owner":"CKEDITOR.config","short_doc":"The editor tabindex value. ...","html_type":"Number"},{"tagname":"cfg","name":"title","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/editor.js","linenr":1333}],"doc":"<p>Customizes the <a href=\"#!/api/CKEDITOR.editor-property-title\" rel=\"CKEDITOR.editor-property-title\" class=\"docClass\">human-readable title</a> of this editor. This title is displayed in\ntooltips and impacts various accessibility aspects, e.g. it is commonly used by screen readers\nfor distinguishing editor instances and for navigation. Accepted values are a string or <code>false</code>.</p>\n\n<p><strong>Note:</strong> When <code>config.title</code> is set globally, the same value will be applied to all editor instances\nloaded with this config. This may adversely affect accessibility as screen reader users will be unable\nto distinguish particular editor instances and navigate between them.</p>\n\n<p><strong>Note:</strong> Setting <code>config.title = false</code> may also impair accessibility in a similar way.</p>\n\n<p><strong>Note:</strong> Please do not confuse this property with <a href=\"#!/api/CKEDITOR.editor-property-name\" rel=\"CKEDITOR.editor-property-name\" class=\"docClass\">CKEDITOR.editor.name</a>\nwhich identifies the instance in the <a href=\"#!/api/CKEDITOR-property-instances\" rel=\"CKEDITOR-property-instances\" class=\"docClass\">CKEDITOR.instances</a> literal.</p>\n\n<pre><code>// Sets the title to 'My WYSIWYG editor.'. The original title of the element (if it exists)\n// will be restored once the editor instance is destroyed.\nconfig.title = 'My WYSIWYG editor.';\n\n// Do not touch the title. If the element already has a title, it remains unchanged.\n// Also if no `title` attribute exists, nothing new will be added.\nconfig.title = false;@see <a href=\"#!/api/CKEDITOR.editor-property-name\" rel=\"CKEDITOR.editor-property-name\" class=\"docClass\">CKEDITOR.editor.name</a>\n</code></pre>\n\n<p>@see <a href=\"#!/api/CKEDITOR.editor-property-title\" rel=\"CKEDITOR.editor-property-title\" class=\"docClass\">CKEDITOR.editor.title</a></p>\n","since":"4.2","type":"String/Boolean","default":"based on editor.name","properties":null,"owner":"CKEDITOR.config","id":"cfg-title","short_doc":"Customizes the human-readable title of this editor. ...","html_type":"String/Boolean"},{"tagname":"cfg","name":"uiColor","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":373}],"doc":"<p>The base user interface color to be used by the editor. Not all skins are\ncompatible with this setting.</p>\n\n<pre><code>// Using a color code.\nconfig.uiColor = '#AADC6E';\n\n// Using an HTML color name.\nconfig.uiColor = 'Gold';\n</code></pre>\n","type":"String","default":null,"properties":null,"id":"cfg-uiColor","owner":"CKEDITOR.config","short_doc":"The base user interface color to be used by the editor. ...","html_type":"String"},{"tagname":"cfg","name":"useComputedState","autodetected":{},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":358}],"doc":"<p>Indicates that some of the editor features, like alignment and text\ndirection, should use the \"computed value\" of the feature to indicate its\non/off state instead of using the \"real value\".</p>\n\n<p>If enabled in a Left-To-Right written document, the \"Left Justify\"\nalignment button will be shown as active, even if the alignment style is not\nexplicitly applied to the current paragraph in the editor.</p>\n\n<pre><code>config.useComputedState = false;\n</code></pre>\n","since":"3.4","type":"Boolean","default":"true","properties":null,"id":"cfg-useComputedState","owner":"CKEDITOR.config","short_doc":"Indicates that some of the editor features, like alignment and text\ndirection, should use the \"computed value\" of the...","html_type":"Boolean"},{"tagname":"cfg","name":"width","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"D:/_Projects/git/tern.jsduck/ckeditor-dev-4.4.7/core/config.js","linenr":312}],"doc":"<p>The editor UI outer width. This configuration option accepts an integer\n(to denote a value in pixels) or any CSS-defined length unit.</p>\n\n<p>Unlike the <a href=\"#!/api/CKEDITOR.config-cfg-height\" rel=\"CKEDITOR.config-cfg-height\" class=\"docClass\">height</a> setting, this\none will set the outer width of the entire editor UI, not for the\nediting area only.</p>\n\n<p><strong>Note:</strong> This configuration option is ignored by <a href=\"#!/guide/dev_inline\">inline editor</a>.</p>\n\n<pre><code>config.width = 850;     // 850 pixels wide.\nconfig.width = '75%';   // CSS unit.\n</code></pre>\n","type":"String/Number","default":"''","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-width","owner":"CKEDITOR.config","short_doc":"The editor UI outer width. ...","html_type":"String/Number"}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.config","short_doc":"Stores default configuration settings. ..."}