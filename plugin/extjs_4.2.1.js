(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("tern/lib/infer"), require("tern/lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define([ "tern/lib/infer", "tern/lib/tern" ], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";

  tern.registerPlugin("extjs_4.2.1", function(server, options) {
    server._extjs = {};
    return {
      defs : defs
    };
  });

  var defs = {"!name":"extjs","!define":{},"Ext":{"AbstractComponent":{"!doc":"<p>An abstract base class which provides shared methods for Components across the Sencha product line.</p>\n\n<p>Please refer to sub class's documentation.</p>\n\n<p><strong>From override Ext.rtl.AbstractComponent:</strong> This override adds RTL support and the <code>rtl</code> config option to AbstactComponent.</p>\n"},"util":{"Observable":{"!doc":"<p>Base class that provides a common interface for publishing events. Subclasses are expected to to have a property\n\"events\" with all the events defined, and, optionally, a property \"listeners\" with configured listeners defined.</p>\n\n<p>For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Employee', {\n    mixins: {\n        observable: '<a href=\"#!/api/Ext.util.Observable\" rel=\"Ext.util.Observable\" class=\"docClass\">Ext.util.Observable</a>'\n    },\n\n    constructor: function (config) {\n        // The Observable constructor copies all of the properties of `config` on\n        // to `this` using <a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply</a>. Further, the `listeners` property is\n        // processed to add listeners.\n        //\n        this.mixins.observable.constructor.call(this, config);\n\n        this.addEvents(\n            'fired',\n            'quit'\n        );\n    }\n});\n</code></pre>\n\n<p>This could then be used like this:</p>\n\n<pre><code>var newEmployee = new Employee({\n    name: employeeName,\n    listeners: {\n        quit: function() {\n            // By default, \"this\" will be the object that fired the event.\n            alert(this.name + \" has quit!\");\n        }\n    }\n});\n</code></pre>\n"},"Positionable":{"!doc":"<p>This mixin provides a common interface for objects that can be positioned, e.g.\n<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Components</a> and <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Elements</a></p>\n"},"ElementContainer":{"!doc":"<p>This mixin enables classes to declare relationships to child elements and provides the\nmechanics for acquiring the <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">elements</a> and storing them on an object\ninstance as properties.</p>\n\n<p>This class is used by <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">components</a> and <a href=\"#!/api/Ext.layout.container.Container\" rel=\"Ext.layout.container.Container\" class=\"docClass\">container layouts</a> to\nmanage their child elements.</p>\n\n<p>A typical component that uses these features might look something like this:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.ux.SomeComponent', {\n     extend: '<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>',\n\n     childEls: [\n         'bodyEl'\n     ],\n\n     renderTpl: [\n         '&lt;div id=\"{id}-bodyEl\"&gt;&lt;/div&gt;'\n     ],\n\n     // ...\n });\n</code></pre>\n\n<p>The <code>childEls</code> array lists one or more relationships to child elements managed by the\ncomponent. The items in this array can be either of the following types:</p>\n\n<ul>\n<li>String: the id suffix and property name in one. For example, \"bodyEl\" in the above\nexample means a \"bodyEl\" property will be added to the instance with the result of\n<a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a> given \"componentId-bodyEl\" where \"componentId\" is the component instance's\nid.</li>\n<li>Object: with a <code>name</code> property that names the instance property for the element, and\none of the following additional properties:\n\n<ul>\n<li> <code>id</code>: The full id of the child element.</li>\n<li> <code>itemId</code>: The suffix part of the id to which \"componentId-\" is prepended.</li>\n<li> <code>select</code>: A selector that will be passed to <a href=\"#!/api/Ext-method-select\" rel=\"Ext-method-select\" class=\"docClass\">Ext.select</a>.</li>\n<li> <code>selectNode</code>: A selector that will be passed to <a href=\"#!/api/Ext.dom.Query-method-selectNode\" rel=\"Ext.dom.Query-method-selectNode\" class=\"docClass\">Ext.DomQuery.selectNode</a>.</li>\n</ul>\n</li>\n</ul>\n\n\n<p>The example above could have used this instead to achieve the same result:</p>\n\n<pre><code> childEls: [\n     { name: 'bodyEl', itemId: 'bodyEl' }\n ]\n</code></pre>\n\n<p>When using <code>select</code>, the property will be an instance of <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a>. In\nall other cases, the property will be an <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> or <code>null</code> if not found.</p>\n\n<p>Care should be taken when using <code>select</code> or <code>selectNode</code> to find child elements. The\nfollowing issues should be considered:</p>\n\n<ul>\n<li>Performance: using selectors can be slower than id lookup by a factor 10x or more.</li>\n<li>Over-selecting: selectors are applied after the DOM elements for all children have\nbeen rendered, so selectors can match elements from child components (including nested\nversions of the same component) accidentally.</li>\n</ul>\n\n\n<p>This above issues are most important when using <code>select</code> since it returns multiple\nelements.</p>\n\n<p><strong>IMPORTANT</strong>\nUnlike a <code>renderTpl</code> where there is a single value for an instance, <code>childEls</code> are aggregated\nup the class hierarchy so that they are effectively inherited. In other words, if a\nclass where to derive from <code>Ext.ux.SomeComponent</code> in the example above, it could also\nhave a <code>childEls</code> property in the same way as <code>Ext.ux.SomeComponent</code>.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.ux.AnotherComponent', {\n     extend: 'Ext.ux.SomeComponent',\n\n     childEls: [\n         // 'bodyEl' is inherited\n         'innerEl'\n     ],\n\n     renderTpl: [\n         '&lt;div id=\"{id}-bodyEl\"&gt;'\n             '&lt;div id=\"{id}-innerEl\"&gt;&lt;/div&gt;'\n         '&lt;/div&gt;'\n     ],\n\n     // ...\n });\n</code></pre>\n\n<p>The <code>renderTpl</code> contains both child elements and unites them in the desired markup, but\nthe <code>childEls</code> only contains the new child element. The <a href=\"#!/api/Ext.util.ElementContainer-method-applyChildEls\" rel=\"Ext.util.ElementContainer-method-applyChildEls\" class=\"docClass\">applyChildEls</a> method\ntakes care of looking up all <code>childEls</code> for an instance and considers <code>childEls</code>\nproperties on all the super classes and mixins.</p>\n"},"Renderable":{"!doc":"<p>Given a component hierarchy of this:</p>\n\n<pre><code> {\n     xtype: 'panel',\n     id: 'ContainerA',\n     layout: 'hbox',\n     renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n     items: [\n         {\n             id: 'ContainerB',\n             xtype: 'container',\n             items: [\n                 { id: 'ComponentA' }\n             ]\n         }\n     ]\n }\n</code></pre>\n\n<p>The rendering of the above proceeds roughly like this:</p>\n\n<ul>\n<li>ContainerA's initComponent calls <a href=\"#!/api/Ext.util.Renderable-method-render\" rel=\"Ext.util.Renderable-method-render\" class=\"docClass\">render</a> passing the <code>renderTo</code> property as the\ncontainer argument.</li>\n<li><code>render</code> calls the <code>getRenderTree</code> method to get a complete <a href=\"#!/api/Ext.DomHelper\" rel=\"Ext.DomHelper\" class=\"docClass\">Ext.DomHelper</a> spec.</li>\n<li><code>getRenderTree</code> fires the \"beforerender\" event and calls the <a href=\"#!/api/Ext.util.Renderable-method-beforeRender\" rel=\"Ext.util.Renderable-method-beforeRender\" class=\"docClass\">beforeRender</a>\nmethod. Its result is obtained by calling <a href=\"#!/api/Ext.util.Renderable-method-getElConfig\" rel=\"Ext.util.Renderable-method-getElConfig\" class=\"docClass\">getElConfig</a>.</li>\n<li>The <a href=\"#!/api/Ext.util.Renderable-method-getElConfig\" rel=\"Ext.util.Renderable-method-getElConfig\" class=\"docClass\">getElConfig</a> method uses the <code>renderTpl</code> and its render data as the content\nof the <code>autoEl</code> described element.</li>\n<li>The result of <code>getRenderTree</code> is passed to <a href=\"#!/api/Ext.DomHelper-method-append\" rel=\"Ext.DomHelper-method-append\" class=\"docClass\">Ext.DomHelper.append</a>.</li>\n<li>The <code>renderTpl</code> contains calls to render things like docked items, container items\nand raw markup (such as the <code>html</code> or <code>tpl</code> config properties). These calls are to\nmethods added to the <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a> instance by <a href=\"#!/api/Ext.util.Renderable-method-setupRenderTpl\" rel=\"Ext.util.Renderable-method-setupRenderTpl\" class=\"docClass\">setupRenderTpl</a>.</li>\n<li>The <a href=\"#!/api/Ext.util.Renderable-method-setupRenderTpl\" rel=\"Ext.util.Renderable-method-setupRenderTpl\" class=\"docClass\">setupRenderTpl</a> method adds methods such as <code>renderItems</code>, <code>renderContent</code>, etc.\nto the template. These are directed to \"doRenderItems\", \"doRenderContent\" etc..</li>\n<li>The <a href=\"#!/api/Ext.util.Renderable-method-setupRenderTpl\" rel=\"Ext.util.Renderable-method-setupRenderTpl\" class=\"docClass\">setupRenderTpl</a> calls traverse from components to their <a href=\"#!/api/Ext.layout.Layout\" rel=\"Ext.layout.Layout\" class=\"docClass\">Ext.layout.Layout</a>\nobject.</li>\n<li>When a container is rendered, it also has a <code>renderTpl</code>. This is processed when the\n<code>renderContainer</code> method is called in the component's <code>renderTpl</code>. This call goes to\n<a href=\"#!/api/Ext.layout.container.Container-method-doRenderContainer\" rel=\"Ext.layout.container.Container-method-doRenderContainer\" class=\"docClass\">Ext.layout.container.Container.doRenderContainer</a>. This method repeats this\nprocess for all components in the container.</li>\n<li>After the top-most component's markup is generated and placed in to the DOM, the next\nstep is to link elements to their components and finish calling the component methods\n<code>onRender</code> and <code>afterRender</code> as well as fire the corresponding events.</li>\n<li>The first step in this is to call <a href=\"#!/api/Ext.util.Renderable-method-finishRender\" rel=\"Ext.util.Renderable-method-finishRender\" class=\"docClass\">finishRender</a>. This method descends the\ncomponent hierarchy and calls <code>onRender</code> and fires the <code>render</code> event. These calls\nare delivered top-down to approximate the timing of these calls/events from previous\nversions.</li>\n<li>During the pass, the component's <code>el</code> is set. Likewise, the <code>renderSelectors</code> and\n<code>childEls</code> are applied to capture references to the component's elements.</li>\n<li>These calls are also made on the <a href=\"#!/api/Ext.layout.container.Container\" rel=\"Ext.layout.container.Container\" class=\"docClass\">Ext.layout.container.Container</a> layout to\ncapture its elements. Both of these classes use <a href=\"#!/api/Ext.util.ElementContainer\" rel=\"Ext.util.ElementContainer\" class=\"docClass\">Ext.util.ElementContainer</a> to\nhandle <code>childEls</code> processing.</li>\n<li>Once this is complete, a similar pass is made by calling #finishAfterRender.\nThis call also descends the component hierarchy, but this time the calls are made in\na bottom-up order to <code>afterRender</code>.</li>\n</ul>\n\n"},"Animate":{"!doc":"<p>This animation class is a mixin.</p>\n\n<p><a href=\"#!/api/Ext.util.Animate\" rel=\"Ext.util.Animate\" class=\"docClass\">Ext.util.Animate</a> provides an API for the creation of animated transitions of properties and styles.\nThis class is used as a mixin and currently applied to <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>, <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a>,\n<a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a>, <a href=\"#!/api/Ext.draw.CompositeSprite\" rel=\"Ext.draw.CompositeSprite\" class=\"docClass\">Ext.draw.CompositeSprite</a>, and <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>.  Note that Components\nhave a limited subset of what attributes can be animated such as top, left, x, y, height, width, and\nopacity (color, paddings, and margins can not be animated).</p>\n\n<h2>Animation Basics</h2>\n\n<p>All animations require three things - <code>easing</code>, <code>duration</code>, and <code>to</code> (the final end value for each property)\nyou wish to animate. Easing and duration are defaulted values specified below.\nEasing describes how the intermediate values used during a transition will be calculated.\n<a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">Easing</a> allows for a transition to change speed over its duration.\nYou may use the defaults for easing and duration, but you must always set a\n<a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> property which is the end value for all animations.</p>\n\n<p>Popular element 'to' configurations are:</p>\n\n<ul>\n<li>opacity</li>\n<li>x</li>\n<li>y</li>\n<li>color</li>\n<li>height</li>\n<li>width</li>\n</ul>\n\n\n<p>Popular sprite 'to' configurations are:</p>\n\n<ul>\n<li>translation</li>\n<li>path</li>\n<li>scale</li>\n<li>stroke</li>\n<li>rotation</li>\n</ul>\n\n\n<p>The default duration for animations is 250 (which is a 1/4 of a second).  Duration is denoted in\nmilliseconds.  Therefore 1 second is 1000, 1 minute would be 60000, and so on. The default easing curve\nused for all animations is 'ease'.  Popular easing functions are included and can be found in <a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">Easing</a>.</p>\n\n<p>For example, a simple animation to fade out an element with a default easing and duration:</p>\n\n<pre><code>var p1 = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('myElementId');\n\np1.animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>To make this animation fade out in a tenth of a second:</p>\n\n<pre><code>var p1 = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('myElementId');\n\np1.animate({\n   duration: 100,\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<h2>Animation Queues</h2>\n\n<p>By default all animations are added to a queue which allows for animation via a chain-style API.\nFor example, the following code will queue 4 animations which occur sequentially (one right after the other):</p>\n\n<pre><code>p1.animate({\n    to: {\n        x: 500\n    }\n}).animate({\n    to: {\n        y: 150\n    }\n}).animate({\n    to: {\n        backgroundColor: '#f00'  //red\n    }\n}).animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>You can change this behavior by calling the <a href=\"#!/api/Ext.util.Animate-method-syncFx\" rel=\"Ext.util.Animate-method-syncFx\" class=\"docClass\">syncFx</a> method and all\nsubsequent animations for the specified target will be run concurrently (at the same time).</p>\n\n<pre><code>p1.syncFx();  //this will make all animations run at the same time\n\np1.animate({\n    to: {\n        x: 500\n    }\n}).animate({\n    to: {\n        y: 150\n    }\n}).animate({\n    to: {\n        backgroundColor: '#f00'  //red\n    }\n}).animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>This works the same as:</p>\n\n<pre><code>p1.animate({\n    to: {\n        x: 500,\n        y: 150,\n        backgroundColor: '#f00'  //red\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.util.Animate-method-stopAnimation\" rel=\"Ext.util.Animate-method-stopAnimation\" class=\"docClass\">stopAnimation</a> method can be used to stop any\ncurrently running animations and clear any queued animations.</p>\n\n<h2>Animation Keyframes</h2>\n\n<p>You can also set up complex animations with <a href=\"#!/api/Ext.fx.Anim-cfg-keyframes\" rel=\"Ext.fx.Anim-cfg-keyframes\" class=\"docClass\">keyframes</a> which follow the\nCSS3 Animation configuration pattern. Note rotation, translation, and scaling can only be done for sprites.\nThe previous example can be written with the following syntax:</p>\n\n<pre><code>p1.animate({\n    duration: 1000,  //one second total\n    keyframes: {\n        25: {     //from 0 to 250ms (25%)\n            x: 0\n        },\n        50: {   //from 250ms to 500ms (50%)\n            y: 0\n        },\n        75: {  //from 500ms to 750ms (75%)\n            backgroundColor: '#f00'  //red\n        },\n        100: {  //from 750ms to 1sec\n            opacity: 0\n        }\n    }\n});\n</code></pre>\n\n<h2>Animation Events</h2>\n\n<p>Each animation you create has events for <a href=\"#!/api/Ext.fx.Anim-event-beforeanimate\" rel=\"Ext.fx.Anim-event-beforeanimate\" class=\"docClass\">beforeanimate</a>,\n<a href=\"#!/api/Ext.fx.Anim-event-afteranimate\" rel=\"Ext.fx.Anim-event-afteranimate\" class=\"docClass\">afteranimate</a>, and <a href=\"#!/api/Ext.fx.Anim-event-lastframe\" rel=\"Ext.fx.Anim-event-lastframe\" class=\"docClass\">lastframe</a>.\nKeyframed animations adds an additional <a href=\"#!/api/Ext.fx.Animator-event-keyframe\" rel=\"Ext.fx.Animator-event-keyframe\" class=\"docClass\">keyframe</a> event which\nfires for each keyframe in your animation.</p>\n\n<p>All animations support the <a href=\"#!/api/Ext.util.Observable-cfg-listeners\" rel=\"Ext.util.Observable-cfg-listeners\" class=\"docClass\">listeners</a> configuration to attact functions to these events.</p>\n\n<pre><code>startAnimate: function() {\n    var p1 = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('myElementId');\n    p1.animate({\n       duration: 100,\n        to: {\n            opacity: 0\n        },\n        listeners: {\n            beforeanimate:  function() {\n                // Execute my custom method before the animation\n                this.myBeforeAnimateFn();\n            },\n            afteranimate: function() {\n                // Execute my custom method after the animation\n                this.myAfterAnimateFn();\n            },\n            scope: this\n    });\n},\nmyBeforeAnimateFn: function() {\n  // My custom logic\n},\nmyAfterAnimateFn: function() {\n  // My custom logic\n}\n</code></pre>\n\n<p>Due to the fact that animations run asynchronously, you can determine if an animation is currently\nrunning on any target by using the <a href=\"#!/api/Ext.util.Animate-method-getActiveAnimation\" rel=\"Ext.util.Animate-method-getActiveAnimation\" class=\"docClass\">getActiveAnimation</a>\nmethod.  This method will return false if there are no active animations or return the currently\nrunning <a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a> instance.</p>\n\n<p>In this example, we're going to wait for the current animation to finish, then stop any other\nqueued animations before we fade our element's opacity to 0:</p>\n\n<pre><code>var curAnim = p1.getActiveAnimation();\nif (curAnim) {\n    curAnim.on('afteranimate', function() {\n        p1.stopAnimation();\n        p1.animate({\n            to: {\n                opacity: 0\n            }\n        });\n    });\n}\n</code></pre>\n"},"Floating":{"!doc":"<p>A mixin to add floating capability to a Component.</p>\n"},"Bindable":{"!doc":"<p>This class is used as a mixin.</p>\n\n<p>This class is to be used to provide basic methods for binding/unbinding stores to other\nclasses. In general it will not be used directly.</p>\n"},"MixedCollection":{"!doc":"<p>Represents a collection of a set of key and value pairs. Each key in the MixedCollection\nmust be unique, the same key cannot exist twice. This collection is ordered, items in the\ncollection can be accessed by index  or via the key. Newly added items are added to\nthe end of the collection. This class is similar to <a href=\"#!/api/Ext.util.HashMap\" rel=\"Ext.util.HashMap\" class=\"docClass\">Ext.util.HashMap</a> however it\nis heavier and provides more functionality. Sample usage:</p>\n\n<pre><code>var coll = new <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a>();\ncoll.add('key1', 'val1');\ncoll.add('key2', 'val2');\ncoll.add('key3', 'val3');\n\nconsole.log(coll.get('key1')); // prints 'val1'\nconsole.log(coll.indexOfKey('key3')); // prints 2\n</code></pre>\n\n<p>The MixedCollection also has support for sorting and filtering of the values in the collection.</p>\n\n<pre><code>var coll = new <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a>();\ncoll.add('key1', 100);\ncoll.add('key2', -100);\ncoll.add('key3', 17);\ncoll.add('key4', 0);\nvar biggerThanZero = coll.filterBy(function(value){\n    return value &gt; 0;\n});\nconsole.log(biggerThanZero.getCount()); // prints 2\n</code></pre>\n"},"Sortable":{"!doc":"<p>A mixin which allows a data component to be sorted. This is used by e.g. <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> and <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">Ext.data.TreeStore</a>.</p>\n\n<p><strong>NOTE</strong>: This mixin is mainly for internal use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> or <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">Ext.data.TreeStore</a>.</p>\n"},"AbstractMixedCollection":{"!doc":"\n"},"HashMap":{"!doc":"<p>Represents a collection of a set of key and value pairs. Each key in the HashMap\nmust be unique, the same key cannot exist twice. Access to items is provided via\nthe key only. Sample usage:</p>\n\n<pre><code>var map = new <a href=\"#!/api/Ext.util.HashMap\" rel=\"Ext.util.HashMap\" class=\"docClass\">Ext.util.HashMap</a>();\nmap.add('key1', 1);\nmap.add('key2', 2);\nmap.add('key3', 3);\n\nmap.each(function(key, value, length){\n    console.log(key, value, length);\n});\n</code></pre>\n\n<p>The HashMap is an unordered class,\nthere is no guarantee when iterating over the items that they will be in any particular\norder. If this is required, then use a <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a>.</p>\n"},"LruCache":{"!doc":"<p>A linked <a href=\"#!/api/Ext.util.HashMap\" rel=\"Ext.util.HashMap\" class=\"docClass\">HashMap</a> implementation which maintains most recently accessed\nitems at the end of the list, and purges the cache down to the most recently accessed <a href=\"#!/api/Ext.util.LruCache-cfg-maxSize\" rel=\"Ext.util.LruCache-cfg-maxSize\" class=\"docClass\">maxSize</a> items\nupon add.</p>\n"},"KeyNav":{"!doc":"<p>Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to\nfunction calls that will get called when the keys are pressed, providing an easy way to implement custom navigation\nschemes for any UI component.</p>\n\n<p>The following are all of the possible keys that can be implemented: enter, space, left, right, up, down, tab, esc,\npageUp, pageDown, del, backspace, home, end.</p>\n\n<p>Usage:</p>\n\n<pre><code>var nav = new <a href=\"#!/api/Ext.util.KeyNav\" rel=\"Ext.util.KeyNav\" class=\"docClass\">Ext.util.KeyNav</a>({\n    target : \"my-element\",\n    left   : function(e){\n        this.moveLeft(e.ctrlKey);\n    },\n    right  : function(e){\n        this.moveRight(e.ctrlKey);\n    },\n    enter  : function(e){\n        this.save();\n    },\n\n    // Binding may be a function specifiying fn, scope and defaultAction\n    esc: {\n        fn: this.onEsc,\n        defaultEventAction: false\n    },\n    scope : this\n});\n</code></pre>\n"},"ClickRepeater":{"!doc":"<p>A wrapper class which can be applied to any element. Fires a \"click\" event while the\nmouse is pressed. The interval between firings may be specified in the config but\ndefaults to 20 milliseconds.</p>\n\n<p>Optionally, a CSS class may be applied to the element during the time it is pressed.</p>\n"},"ComponentDragger":{"!doc":"<p>A subclass of <a href=\"#!/api/Ext.dd.DragTracker\" rel=\"Ext.dd.DragTracker\" class=\"docClass\">Ext.dd.DragTracker</a> which handles dragging any Component.</p>\n\n<p>This is configured with a Component to be made draggable, and a config object for the <a href=\"#!/api/Ext.dd.DragTracker\" rel=\"Ext.dd.DragTracker\" class=\"docClass\">Ext.dd.DragTracker</a>\nclass.</p>\n\n<p>A <a href=\"#!/api/Ext.util.ComponentDragger-cfg-delegate\" rel=\"Ext.util.ComponentDragger-cfg-delegate\" class=\"docClass\">delegate</a> may be provided which may be either the element to use as the mousedown target or a <a href=\"#!/api/Ext.dom.Query\" rel=\"Ext.dom.Query\" class=\"docClass\">Ext.DomQuery</a> selector to activate multiple mousedown targets.</p>\n\n<p>When the Component begins to be dragged, its <code>beginDrag</code> method will be called if implemented.</p>\n\n<p>When the drag ends, its <code>endDrag</code> method will be called if implemented.</p>\n"},"Cookies":{"!doc":"<p>Utility class for setting/reading values from browser cookies.\nValues can be written using the <a href=\"#!/api/Ext.util.Cookies-method-set\" rel=\"Ext.util.Cookies-method-set\" class=\"docClass\">set</a> method.\nValues can be read using the <a href=\"#!/api/Ext.util.Cookies-method-get\" rel=\"Ext.util.Cookies-method-get\" class=\"docClass\">get</a> method.\nA cookie can be invalidated on the client machine using the <a href=\"#!/api/Ext.util.Cookies-method-clear\" rel=\"Ext.util.Cookies-method-clear\" class=\"docClass\">clear</a> method.</p>\n"},"CSS":{"!doc":"<p>Utility class for manipulating CSS rules</p>\n"},"DelayedTask":{"!doc":"<p>The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\ntask will wait the specified time period before executing. If durng that time period,\nthe task is called again, the original call will be cancelled. This continues so that\nthe function is only called a single time for each iteration.</p>\n\n<p>This method is especially useful for things like detecting whether a user has finished\ntyping in a text field. An example would be performing validation on a keypress. You can\nuse this class to buffer the keypress events for a certain number of milliseconds, and\nperform only if they stop for that amount of time.</p>\n\n<h2>Usage</h2>\n\n<pre><code>var task = new <a href=\"#!/api/Ext.util.DelayedTask\" rel=\"Ext.util.DelayedTask\" class=\"docClass\">Ext.util.DelayedTask</a>(function(){\n    alert(<a href=\"#!/api/Ext-method-getDom\" rel=\"Ext-method-getDom\" class=\"docClass\">Ext.getDom</a>('myInputField').value.length);\n});\n\n// Wait 500ms before calling our function. If the user presses another key\n// during that 500ms, it will be cancelled and we'll wait another 500ms.\n<a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('myInputField').on('keypress', function() {\n    task.<a href=\"#!/api/Ext.util.DelayedTask-method-delay\" rel=\"Ext.util.DelayedTask-method-delay\" class=\"docClass\">delay</a>(500);\n});\n</code></pre>\n\n<p>Note that we are using a DelayedTask here to illustrate a point. The configuration\noption <code>buffer</code> for <a href=\"#!/api/Ext.util.Observable-method-addListener\" rel=\"Ext.util.Observable-method-addListener\" class=\"docClass\">addListener/on</a> will\nalso setup a delayed task for you to buffer events.</p>\n"},"Event":{"!doc":"<p>Represents single event type that an Observable object listens to.\nAll actual listeners are tracked inside here.  When the event fires,\nit calls all the registered listener functions.</p>\n"},"Filter":{"!doc":"<p>Represents a filter that can be applied to a <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">MixedCollection</a>. Can either simply\nfilter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the\ncontext of MixedCollections, though <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>s frequently create them when filtering and searching\non their records. Example usage:</p>\n\n<pre><code>//set up a fictional MixedCollection containing a few people to filter on\nvar allNames = new <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a>();\nallNames.addAll([\n    {id: 1, name: 'Ed',    age: 25},\n    {id: 2, name: 'Jamie', age: 37},\n    {id: 3, name: 'Abe',   age: 32},\n    {id: 4, name: 'Aaron', age: 26},\n    {id: 5, name: 'David', age: 32}\n]);\n\nvar ageFilter = new <a href=\"#!/api/Ext.util.Filter\" rel=\"Ext.util.Filter\" class=\"docClass\">Ext.util.Filter</a>({\n    property: 'age',\n    value   : 32\n});\n\nvar longNameFilter = new <a href=\"#!/api/Ext.util.Filter\" rel=\"Ext.util.Filter\" class=\"docClass\">Ext.util.Filter</a>({\n    filterFn: function(item) {\n        return item.name.length &gt; 4;\n    }\n});\n\n//a new MixedCollection with the 3 names longer than 4 characters\nvar longNames = allNames.filter(longNameFilter);\n\n//a new MixedCollection with the 2 people of age 32:\nvar youngFolk = allNames.filter(ageFilter);\n</code></pre>\n"},"Format":{"!doc":"<p>This class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.</p>\n\n<h2>Localization</h2>\n\n<p>This class contains several options for localization. These can be set once the library has loaded,\nall calls to the functions from that point will use the locale settings that were specified.</p>\n\n<p>Options include:</p>\n\n<ul>\n<li>thousandSeparator</li>\n<li>decimalSeparator</li>\n<li>currenyPrecision</li>\n<li>currencySign</li>\n<li>currencyAtEnd</li>\n</ul>\n\n\n<p>This class also uses the default date format defined here: <a href=\"#!/api/Ext.Date-property-defaultFormat\" rel=\"Ext.Date-property-defaultFormat\" class=\"docClass\">Ext.Date.defaultFormat</a>.</p>\n\n<h2>Using with renderers</h2>\n\n<p>There are two helper functions that return a new function that can be used in conjunction with\ngrid renderers:</p>\n\n<pre><code>columns: [{\n    dataIndex: 'date',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-dateRenderer\" rel=\"Ext.util.Format-method-dateRenderer\" class=\"docClass\">Ext.util.Format.dateRenderer</a>('Y-m-d')\n}, {\n    dataIndex: 'time',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0.000')\n}]\n</code></pre>\n\n<p>Functions that only take a single argument can also be passed directly:</p>\n\n<pre><code>columns: [{\n    dataIndex: 'cost',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-usMoney\" rel=\"Ext.util.Format-method-usMoney\" class=\"docClass\">Ext.util.Format.usMoney</a>\n}, {\n    dataIndex: 'productCode',\n    renderer: <a href=\"#!/api/Ext.util.Format-method-uppercase\" rel=\"Ext.util.Format-method-uppercase\" class=\"docClass\">Ext.util.Format.uppercase</a>\n}]\n</code></pre>\n\n<h2>Using with XTemplates</h2>\n\n<p>XTemplates can also directly use <a href=\"#!/api/Ext.util.Format\" rel=\"Ext.util.Format\" class=\"docClass\">Ext.util.Format</a> functions:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>([\n    'Date: {startDate:date(\"Y-m-d\")}',\n    'Cost: {cost:usMoney}'\n]);\n</code></pre>\n"},"Grouper":{"!doc":"<p>Represents a single grouper that can be applied to a Store. The grouper works\nin the same fashion as the <a href=\"#!/api/Ext.util.Sorter\" rel=\"Ext.util.Sorter\" class=\"docClass\">Ext.util.Sorter</a>.</p>\n"},"Sorter":{"!doc":"<p>Represents a single sorter that can be applied to a Store. The sorter is used\nto compare two values against each other for the purpose of ordering them. Ordering\nis achieved by specifying either:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.util.Sorter-cfg-property\" rel=\"Ext.util.Sorter-cfg-property\" class=\"docClass\">A sorting property</a></li>\n<li><a href=\"#!/api/Ext.util.Sorter-cfg-sorterFn\" rel=\"Ext.util.Sorter-cfg-sorterFn\" class=\"docClass\">A sorting function</a></li>\n</ul>\n\n\n<p>As a contrived example, we can specify a custom sorter that sorts by rank:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['name', 'rank']\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'Person',\n    proxy: 'memory',\n    sorters: [{\n        sorterFn: function(o1, o2){\n            var getRank = function(o){\n                var name = o.get('rank');\n                if (name === 'first') {\n                    return 1;\n                } else if (name === 'second') {\n                    return 2;\n                } else {\n                    return 3;\n                }\n            },\n            rank1 = getRank(o1),\n            rank2 = getRank(o2);\n\n            if (rank1 === rank2) {\n                return 0;\n            }\n\n            return rank1 &lt; rank2 ? -1 : 1;\n        }\n    }],\n    data: [{\n        name: 'Person1',\n        rank: 'second'\n    }, {\n        name: 'Person2',\n        rank: 'third'\n    }, {\n        name: 'Person3',\n        rank: 'first'\n    }]\n});\n</code></pre>\n"},"History":{"!doc":"<p>History management component that allows you to register arbitrary tokens that signify application\nhistory state on navigation actions.  You can then handle the history <a href=\"#!/api/Ext.util.History-event-change\" rel=\"Ext.util.History-event-change\" class=\"docClass\">change</a> event in order\nto reset your application UI to the appropriate state when the user navigates forward or backward through\nthe browser history stack.</p>\n\n<h2>Initializing</h2>\n\n<p>The <a href=\"#!/api/Ext.util.History-method-init\" rel=\"Ext.util.History-method-init\" class=\"docClass\">init</a> method of the History object must be called before using History. This sets up the internal\nstate and must be the first thing called before using History.</p>\n"},"Inflector":{"!doc":"<p>General purpose inflector class that <a href=\"#!/api/Ext.util.Inflector-method-pluralize\" rel=\"Ext.util.Inflector-method-pluralize\" class=\"docClass\">pluralizes</a>, <a href=\"#!/api/Ext.util.Inflector-method-singularize\" rel=\"Ext.util.Inflector-method-singularize\" class=\"docClass\">singularizes</a> and\n<a href=\"#!/api/Ext.util.Inflector-method-ordinalize\" rel=\"Ext.util.Inflector-method-ordinalize\" class=\"docClass\">ordinalizes</a> words. Sample usage:</p>\n\n<pre><code>//turning singular words into plurals\n<a href=\"#!/api/Ext.util.Inflector-method-pluralize\" rel=\"Ext.util.Inflector-method-pluralize\" class=\"docClass\">Ext.util.Inflector.pluralize</a>('word'); //'words'\n<a href=\"#!/api/Ext.util.Inflector-method-pluralize\" rel=\"Ext.util.Inflector-method-pluralize\" class=\"docClass\">Ext.util.Inflector.pluralize</a>('person'); //'people'\n<a href=\"#!/api/Ext.util.Inflector-method-pluralize\" rel=\"Ext.util.Inflector-method-pluralize\" class=\"docClass\">Ext.util.Inflector.pluralize</a>('sheep'); //'sheep'\n\n//turning plurals into singulars\n<a href=\"#!/api/Ext.util.Inflector-method-singularize\" rel=\"Ext.util.Inflector-method-singularize\" class=\"docClass\">Ext.util.Inflector.singularize</a>('words'); //'word'\n<a href=\"#!/api/Ext.util.Inflector-method-singularize\" rel=\"Ext.util.Inflector-method-singularize\" class=\"docClass\">Ext.util.Inflector.singularize</a>('people'); //'person'\n<a href=\"#!/api/Ext.util.Inflector-method-singularize\" rel=\"Ext.util.Inflector-method-singularize\" class=\"docClass\">Ext.util.Inflector.singularize</a>('sheep'); //'sheep'\n\n//ordinalizing numbers\n<a href=\"#!/api/Ext.util.Inflector-method-ordinalize\" rel=\"Ext.util.Inflector-method-ordinalize\" class=\"docClass\">Ext.util.Inflector.ordinalize</a>(11); //\"11th\"\n<a href=\"#!/api/Ext.util.Inflector-method-ordinalize\" rel=\"Ext.util.Inflector-method-ordinalize\" class=\"docClass\">Ext.util.Inflector.ordinalize</a>(21); //\"21st\"\n<a href=\"#!/api/Ext.util.Inflector-method-ordinalize\" rel=\"Ext.util.Inflector-method-ordinalize\" class=\"docClass\">Ext.util.Inflector.ordinalize</a>(1043); //\"1043rd\"\n</code></pre>\n\n<h1>Customization</h1>\n\n<p>The Inflector comes with a default set of US English pluralization rules. These can be augmented with additional\nrules if the default rules do not meet your application's requirements, or swapped out entirely for other languages.\nHere is how we might add a rule that pluralizes \"ox\" to \"oxen\":</p>\n\n<pre><code><a href=\"#!/api/Ext.util.Inflector-method-plural\" rel=\"Ext.util.Inflector-method-plural\" class=\"docClass\">Ext.util.Inflector.plural</a>(/^(ox)$/i, \"$1en\");\n</code></pre>\n\n<p>Each rule consists of two items - a regular expression that matches one or more rules, and a replacement string. In\nthis case, the regular expression will only match the string \"ox\", and will replace that match with \"oxen\". Here's\nhow we could add the inverse rule:</p>\n\n<pre><code><a href=\"#!/api/Ext.util.Inflector-method-singular\" rel=\"Ext.util.Inflector-method-singular\" class=\"docClass\">Ext.util.Inflector.singular</a>(/^(ox)en$/i, \"$1\");\n</code></pre>\n\n<p>Note that the ox/oxen rules are present by default.</p>\n"},"KeyMap":{"!doc":"<p>Handles mapping key events to handling functions for an element or a Component. One KeyMap can be used for multiple\nactions.</p>\n\n<p>A KeyMap must be configured with a <a href=\"#!/api/Ext.util.KeyMap-cfg-target\" rel=\"Ext.util.KeyMap-cfg-target\" class=\"docClass\">target</a> as an event source which may be an Element or a Component.</p>\n\n<p>If the target is an element, then the <code>keydown</code> event will trigger the invocation of <a href=\"#!/api/Ext.util.KeyMap-cfg-binding\" rel=\"Ext.util.KeyMap-cfg-binding\" class=\"docClass\">binding</a>s.</p>\n\n<p>It is possible to configure the KeyMap with a custom <a href=\"#!/api/Ext.util.KeyMap-cfg-eventName\" rel=\"Ext.util.KeyMap-cfg-eventName\" class=\"docClass\">eventName</a> to listen for. This may be useful when the\n<a href=\"#!/api/Ext.util.KeyMap-cfg-target\" rel=\"Ext.util.KeyMap-cfg-target\" class=\"docClass\">target</a> is a Component.</p>\n\n<p>The KeyMap's event handling requires that the first parameter passed is a key event. So if the Component's event\nsignature is different, specify a <a href=\"#!/api/Ext.util.KeyMap-cfg-processEvent\" rel=\"Ext.util.KeyMap-cfg-processEvent\" class=\"docClass\">processEvent</a> configuration which accepts the event's parameters and\nreturns a key event.</p>\n\n<p>Functions specified in <a href=\"#!/api/Ext.util.KeyMap-cfg-binding\" rel=\"Ext.util.KeyMap-cfg-binding\" class=\"docClass\">binding</a>s are called with this signature : <code>(String key, <a href=\"#!/api/Ext.EventObject\" rel=\"Ext.EventObject\" class=\"docClass\">Ext.EventObject</a> e)</code> (if the\nmatch is a multi-key combination the callback will still be called only once). A KeyMap can also handle a string\nrepresentation of keys. By default KeyMap starts enabled.</p>\n\n<p>Usage:</p>\n\n<pre><code>// map one key by key code\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    key: 13, // or <a href=\"#!/api/Ext.EventObject-property-ENTER\" rel=\"Ext.EventObject-property-ENTER\" class=\"docClass\">Ext.EventObject.ENTER</a>\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to one action by string\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    key: \"a\\r\\n\\t\",\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to multiple actions by strings and array of codes\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    binding: [{\n        key: [10,13],\n        fn: function(){ alert(\"Return was pressed\"); }\n    }, {\n        key: \"abc\",\n        fn: function(){ alert('a, b or c was pressed'); }\n    }, {\n        key: \"\\t\",\n        ctrl:true,\n        shift:true,\n        fn: function(){ alert('Control + shift + tab was pressed.'); }\n    }]\n});\n</code></pre>\n\n<p>Since 4.1.0, KeyMaps can bind to Components and process key-based events fired by Components.</p>\n\n<p>To bind to a Component, use the single parameter form of constructor and include the Component event name\nto listen for, and a <code>processEvent</code> implementation which returns the key event for further processing by\nthe KeyMap:</p>\n\n<pre><code>var map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: myGridView,\n    eventName: 'itemkeydown',\n    processEvent: function(view, record, node, index, event) {\n\n        // Load the event with the extra information needed by the mappings\n        event.view = view;\n        event.store = view.getStore();\n        event.record = record;\n        event.index = index;\n        return event;\n    },\n    binding: {\n        key: <a href=\"#!/api/Ext.EventObject-property-DELETE\" rel=\"Ext.EventObject-property-DELETE\" class=\"docClass\">Ext.EventObject.DELETE</a>,\n        fn: function(keyCode, e) {\n            e.store.remove(e.record);\n\n            // Attempt to select the record that's now in its place\n            e.view.getSelectionModel().select(e.index);\n            e.view.el.focus();\n        }\n    }\n});\n</code></pre>\n"},"Memento":{"!doc":"<p>This class manages a set of captured properties from an object. These captured properties\ncan later be restored to an object.</p>\n"},"Offset":{"!doc":"\n"},"Point":{"!doc":"<p>Represents a 2D point with x and y properties, useful for comparison and instantiation\nfrom an event:</p>\n\n<pre><code>var point = <a href=\"#!/api/Ext.util.Point-static-method-fromEvent\" rel=\"Ext.util.Point-static-method-fromEvent\" class=\"docClass\">Ext.util.Point.fromEvent</a>(e);\n</code></pre>\n"},"Region":{"!doc":"<p>This class represents a rectangular region in X,Y space, and performs geometric\ntransformations or tests upon the region.</p>\n\n<p>This class may be used to compare the document regions occupied by elements.</p>\n"},"ProtoElement":{"!doc":"<p>Manages certain element-like data prior to rendering. These values are passed\non to the render process. This is currently used to manage the \"class\" and \"style\" attributes\nof a component's primary el as well as the bodyEl of panels. This allows things like\naddBodyCls in Panel to share logic with addCls in AbstractComponent.</p>\n"},"Queue":{"!doc":"<p>An internal Queue class.</p>\n"},"TaskManager":{"!doc":"<p>A static <a href=\"#!/api/Ext.util.TaskRunner\" rel=\"Ext.util.TaskRunner\" class=\"docClass\">Ext.util.TaskRunner</a> instance that can be used to start and stop\narbitrary tasks. See <a href=\"#!/api/Ext.util.TaskRunner\" rel=\"Ext.util.TaskRunner\" class=\"docClass\">Ext.util.TaskRunner</a> for supported methods and task\nconfig properties.</p>\n\n<p>   // Start a simple clock task that updates a div once per second\n   var task = {\n      run: function(){\n          <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a>('clock').update(new Date().format('g:i:s A'));\n      },\n      interval: 1000 //1 second\n   }</p>\n\n<p>   <a href=\"#!/api/Ext.util.TaskManager-method-start\" rel=\"Ext.util.TaskManager-method-start\" class=\"docClass\">Ext.TaskManager.start</a>(task);</p>\n\n<p>See the <a href=\"#!/api/Ext.util.TaskManager-method-start\" rel=\"Ext.util.TaskManager-method-start\" class=\"docClass\">start</a> method for details about how to configure a task object.</p>\n"},"TaskRunner":{"!doc":"<p>Provides the ability to execute one or more arbitrary tasks in a asynchronous manner.\nGenerally, you can use the singleton <a href=\"#!/api/Ext.util.TaskManager\" rel=\"Ext.util.TaskManager\" class=\"docClass\">Ext.TaskManager</a> instead, but if needed,\nyou can create separate instances of TaskRunner. Any number of separate tasks can be\nstarted at any time and will run independently of each other.</p>\n\n<p>Example usage:</p>\n\n<pre><code> // Start a simple clock task that updates a div once per second\n var updateClock = function () {\n     <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a>('clock').update(new Date().format('g:i:s A'));\n }\n\n var runner = new <a href=\"#!/api/Ext.util.TaskRunner\" rel=\"Ext.util.TaskRunner\" class=\"docClass\">Ext.util.TaskRunner</a>();\n var task = runner.start({\n     run: updateClock,\n     interval: 1000\n }\n</code></pre>\n\n<p>The equivalent using TaskManager:</p>\n\n<pre><code> var task = <a href=\"#!/api/Ext.util.TaskManager-method-start\" rel=\"Ext.util.TaskManager-method-start\" class=\"docClass\">Ext.TaskManager.start</a>({\n     run: updateClock,\n     interval: 1000\n });\n</code></pre>\n\n<p>To end a running task:</p>\n\n<pre><code> task.destroy();\n</code></pre>\n\n<p>If a task needs to be started and stopped repeated over time, you can create a\n<a href=\"#!/api/Ext.util.TaskRunner.Task\" rel=\"Ext.util.TaskRunner.Task\" class=\"docClass\">Task</a> instance.</p>\n\n<pre><code> var task = runner.newTask({\n     run: function () {\n         // useful code\n     },\n     interval: 1000\n });\n\n task.start();\n\n // ...\n\n task.stop();\n\n // ...\n\n task.start();\n</code></pre>\n\n<p>A re-usable, one-shot task can be managed similar to the above:</p>\n\n<pre><code> var task = runner.newTask({\n     run: function () {\n         // useful code to run once\n     },\n     repeat: 1\n });\n\n task.start();\n\n // ...\n\n task.start();\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.util.TaskRunner-method-start\" rel=\"Ext.util.TaskRunner-method-start\" class=\"docClass\">start</a> method for details about how to configure a task object.</p>\n\n<p>Also see <a href=\"#!/api/Ext.util.DelayedTask\" rel=\"Ext.util.DelayedTask\" class=\"docClass\">Ext.util.DelayedTask</a>.</p>\n","Task":{"!doc":"<p>Instances of this class are created by <a href=\"#!/api/Ext.util.TaskRunner-method-newTask\" rel=\"Ext.util.TaskRunner-method-newTask\" class=\"docClass\">Ext.util.TaskRunner.newTask</a> method.</p>\n\n<p>For details on config properties, see <a href=\"#!/api/Ext.util.TaskRunner-method-start\" rel=\"Ext.util.TaskRunner-method-start\" class=\"docClass\">Ext.util.TaskRunner.start</a>.</p>\n"}},"TextMetrics":{"!doc":"<p>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and\nwide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and\nshould not contain any HTML, otherwise it may not be measured correctly.</p>\n\n<p>The measurement works by copying the relevant CSS styles that can affect the font related display,\nthen checking the size of an element that is auto-sized. Note that if the text is multi-lined, you must\nprovide a <strong>fixed width</strong> when doing the measurement.</p>\n\n<p>If multiple measurements are being done on the same element, you create a new instance to initialize\nto avoid the overhead of copying the styles to the element repeatedly.</p>\n"}},"state":{"Stateful":{"!doc":"<p>A mixin for being able to save the state of an object to an underlying\n<a href=\"#!/api/Ext.state.Provider\" rel=\"Ext.state.Provider\" class=\"docClass\">Ext.state.Provider</a>.</p>\n"},"CookieProvider":{"!doc":"<p>A Provider implementation which saves and retrieves state via cookies. The CookieProvider supports the usual cookie\noptions, such as:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-path\" rel=\"Ext.state.CookieProvider-cfg-path\" class=\"docClass\">path</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-expires\" rel=\"Ext.state.CookieProvider-cfg-expires\" class=\"docClass\">expires</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-domain\" rel=\"Ext.state.CookieProvider-cfg-domain\" class=\"docClass\">domain</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-secure\" rel=\"Ext.state.CookieProvider-cfg-secure\" class=\"docClass\">secure</a></li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>var cp = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.state.CookieProvider\" rel=\"Ext.state.CookieProvider\" class=\"docClass\">Ext.state.CookieProvider</a>', {\n    path: \"/cgi-bin/\",\n    expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days\n    domain: \"sencha.com\"\n});\n\n<a href=\"#!/api/Ext.state.Manager-method-setProvider\" rel=\"Ext.state.Manager-method-setProvider\" class=\"docClass\">Ext.state.Manager.setProvider</a>(cp);\n</code></pre>\n"},"Provider":{"!doc":"<p>Abstract base class for state provider implementations. The provider is responsible\nfor setting values  and extracting values to/from the underlying storage source. The \nstorage source can vary and the details should be implemented in a subclass. For example\na provider could use a server side database or the browser localstorage where supported.</p>\n\n\n\n\n<p>This class provides methods for encoding and decoding <b>typed</b> variables including \ndates and defines the Provider interface. By default these methods put the value and the\ntype information into a delimited string that can be stored. These should be overridden in \na subclass if you want to change the format of the encoded value and subsequent decoding.</p>\n\n"},"LocalStorageProvider":{"!doc":"<p>A Provider implementation which saves and retrieves state via the HTML5 localStorage object.\nIf the browser does not support local storage, there will be no attempt to read the state.\nBefore creating this class, a check should be made to <a href=\"#!/api/Ext.supports-property-LocalStorage\" rel=\"Ext.supports-property-LocalStorage\" class=\"docClass\">Ext.supports.LocalStorage</a>.</p>\n"},"Manager":{"!doc":"<p>This is the global state manager. By default all components that are \"state aware\" check this class\nfor state information if you don't pass them a custom state provider. In order for this class\nto be useful, it must be initialized with a provider when your application initializes. Example usage:</p>\n\n<pre><code>// in your initialization function\ninit : function(){\n   <a href=\"#!/api/Ext.state.Manager-method-setProvider\" rel=\"Ext.state.Manager-method-setProvider\" class=\"docClass\">Ext.state.Manager.setProvider</a>(new <a href=\"#!/api/Ext.state.CookieProvider\" rel=\"Ext.state.CookieProvider\" class=\"docClass\">Ext.state.CookieProvider</a>());\n}\n </code></pre>\n\n\n<p>This class passes on calls from components to the underlying <a href=\"#!/api/Ext.state.Provider\" rel=\"Ext.state.Provider\" class=\"docClass\">Ext.state.Provider</a> so that\nthere is a common interface that can be used without needing to refer to a specific provider instance\nin every component.</p>\n"}},"Base":{"!doc":"<p>The root of all classes created with <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>.</p>\n\n<p><a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a> is the building block of all Ext classes. All classes in Ext inherit from <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.\nAll prototype and static members of this class are inherited by all other classes.</p>\n"},"AbstractManager":{"!doc":"<p>Base Manager class</p>\n"},"AbstractPlugin":{"!doc":"<p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>\n\n<p>This class defines the essential API of plugins as used by Components by defining the following methods:</p>\n\n<ul>\n<li><p><code>init</code> : The plugin initialization method which the owning Component calls at Component initialization time.</p>\n\n<p>The Component passes itself as the sole parameter.</p>\n\n<p>Subclasses should set up bidirectional links between the plugin and its client Component here.</p></li>\n<li><p><code>destroy</code> : The plugin cleanup method which the owning Component calls at Component destruction time.</p>\n\n<p>Use this method to break links between the plugin and the Component and to free any allocated resources.</p></li>\n<li><p><code>enable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>false</code></p></li>\n<li><p><code>disable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>true</code></p></li>\n</ul>\n\n"},"Action":{"!doc":"<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it\ncan be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI\nupdates across any components that support the Action interface (primarily <a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>,\n<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a> and <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a> components).</p>\n\n<p>Use a single Action instance as the config object for any number of UI Components which share the same configuration. The\nAction not only supplies the configuration, but allows all Components based upon it to have a common set of methods\ncalled at once through a single call to the Action.</p>\n\n<p>Any Component that is to be configured with an Action must also support\nthe following methods:</p>\n\n<ul>\n<li>setText(string)</li>\n<li>setIconCls(string)</li>\n<li>setDisabled(boolean)</li>\n<li>setVisible(boolean)</li>\n<li>setHandler(function)</li>\n</ul>\n\n\n<p>This allows the Action to control its associated Components.</p>\n\n<p>Example usage:</p>\n\n<pre><code>// Define the shared Action.  Each Component below will have the same\n// display text and icon, and will display the same message on click.\nvar action = new <a href=\"#!/api/Ext.Action\" rel=\"Ext.Action\" class=\"docClass\">Ext.Action</a>({\n    <a href=\"#!/api/Ext.Action-cfg-text\" rel=\"Ext.Action-cfg-text\" class=\"docClass\">text</a>: 'Do something',\n    <a href=\"#!/api/Ext.Action-cfg-handler\" rel=\"Ext.Action-cfg-handler\" class=\"docClass\">handler</a>: function(){\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Click', 'You did something.');\n    },\n    <a href=\"#!/api/Ext.Action-cfg-iconCls\" rel=\"Ext.Action-cfg-iconCls\" class=\"docClass\">iconCls</a>: 'do-something',\n    <a href=\"#!/api/Ext.Action-cfg-itemId\" rel=\"Ext.Action-cfg-itemId\" class=\"docClass\">itemId</a>: 'myAction'\n});\n\nvar panel = new <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>({\n    title: 'Actions',\n    width: 500,\n    height: 300,\n    tbar: [\n        // Add the Action directly to a toolbar as a menu button\n        action,\n        {\n            text: 'Action Menu',\n            // Add the Action to a menu as a text item\n            menu: [action]\n        }\n    ],\n    items: [\n        // Add the Action to the panel body as a standard button\n        new <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>(action)\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n// Change the text for all components using the Action\naction.setText('Something else');\n\n// Reference an Action through a container using the itemId\nvar btn = panel.getComponent('myAction');\nvar aRef = btn.baseAction;\naRef.setText('New text');\n</code></pre>\n"},"Ajax":{"!doc":"<p>A singleton instance of an <a href=\"#!/api/Ext.data.Connection\" rel=\"Ext.data.Connection\" class=\"docClass\">Ext.data.Connection</a>. This class\nis used to communicate with your server side code. It can be used as follows:</p>\n\n<pre><code><a href=\"#!/api/Ext.Ajax-method-request\" rel=\"Ext.Ajax-method-request\" class=\"docClass\">Ext.Ajax.request</a>({\n    url: 'page.php',\n    params: {\n        id: 1\n    },\n    success: function(response){\n        var text = response.responseText;\n        // process server response here\n    }\n});\n</code></pre>\n\n<p>Default options for all requests can be set by changing a property on the <a href=\"#!/api/Ext.Ajax\" rel=\"Ext.Ajax\" class=\"docClass\">Ext.Ajax</a> class:</p>\n\n<pre><code><a href=\"#!/api/Ext.Ajax-property-timeout\" rel=\"Ext.Ajax-property-timeout\" class=\"docClass\">Ext.Ajax.timeout</a> = 60000; // 60 seconds\n</code></pre>\n\n<p>Any options specified in the request method for the Ajax request will override any\ndefaults set on the <a href=\"#!/api/Ext.Ajax\" rel=\"Ext.Ajax\" class=\"docClass\">Ext.Ajax</a> class. In the code sample below, the timeout for the\nrequest will be 60 seconds.</p>\n\n<pre><code><a href=\"#!/api/Ext.Ajax-property-timeout\" rel=\"Ext.Ajax-property-timeout\" class=\"docClass\">Ext.Ajax.timeout</a> = 120000; // 120 seconds\n<a href=\"#!/api/Ext.Ajax-method-request\" rel=\"Ext.Ajax-method-request\" class=\"docClass\">Ext.Ajax.request</a>({\n    url: 'page.aspx',\n    timeout: 60000\n});\n</code></pre>\n\n<p>In general, this class will be used for all Ajax requests in your application.\nThe main reason for creating a separate <a href=\"#!/api/Ext.data.Connection\" rel=\"Ext.data.Connection\" class=\"docClass\">Ext.data.Connection</a> is for a\nseries of requests that share common settings that are different to all other\nrequests in the application.</p>\n"},"data":{"Connection":{"!doc":"<p>The Connection class encapsulates a connection to the page's originating domain, allowing requests to be made either\nto a configured URL, or to a URL specified at request time.</p>\n\n<p>Requests made by this class are asynchronous, and will return immediately. No data from the server will be available\nto the statement immediately following the <a href=\"#!/api/Ext.data.Connection-method-request\" rel=\"Ext.data.Connection-method-request\" class=\"docClass\">request</a> call. To process returned data, use a success callback\nin the request options object, or an <a href=\"#!/api/Ext.data.Connection-event-requestcomplete\" rel=\"Ext.data.Connection-event-requestcomplete\" class=\"docClass\">event listener</a>.</p>\n\n<h1>File Uploads</h1>\n\n<p>File uploads are not performed using normal \"Ajax\" techniques, that is they are not performed using XMLHttpRequests.\nInstead the form is submitted in the standard manner with the DOM &lt;form&gt; element temporarily modified to have its\ntarget set to refer to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document but removed\nafter the return data has been gathered.</p>\n\n<p>The server response is parsed by the browser to create the document for the IFRAME. If the server is using JSON to\nsend the return object, then the Content-Type header must be set to \"text/html\" in order to tell the browser to\ninsert the text unchanged into the document body.</p>\n\n<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode <code>&lt;</code> as <code>&amp;lt;</code>, <code>&amp;</code> as\n<code>&amp;amp;</code> etc.</p>\n\n<p>The response text is retrieved from the document, and a fake XMLHttpRequest object is created containing a\nresponseText property in order to conform to the requirements of event handlers and callbacks.</p>\n\n<p>Be aware that file upload packets are sent with the content type multipart/form and some server technologies\n(notably JEE) may require some custom processing in order to retrieve parameter names and parameter values from the\npacket content.</p>\n\n<p>Also note that it's not possible to check the response code of the hidden iframe, so the success handler will ALWAYS fire.</p>\n\n<h1>Binary Posts</h1>\n\n<p>The class supports posting binary data to the server by using native browser capabilities, or a flash polyfill plugin in browsers that do not support native binary posting (e.g. Internet Explorer version 9 or less). A number of limitations exist when the polyfill is used:</p>\n\n<ul>\n<li>Only asynchronous connections are supported.</li>\n<li>Only the POST method can be used.</li>\n<li>The return data can only be binary for now. Set the <a href=\"#!/api/Ext.data.Connection-cfg-binary\" rel=\"Ext.data.Connection-cfg-binary\" class=\"docClass\">binary</a> parameter to <tt>true</tt>.</li>\n<li>Only the 0, 1 and 4 (complete) readyState values will be reported to listeners.</li>\n<li>The flash object will be injected at the bottom of the document and should be invisible.</li>\n<li>Important: See note about packaing the flash plugin with the app in the documenetation of <a href=\"#!/api/Ext.data.flash.BinaryXhr\" rel=\"Ext.data.flash.BinaryXhr\" class=\"docClass\">BinaryXhr</a>.</li>\n</ul>\n\n"},"AbstractStore":{"!doc":"<p>AbstractStore is a superclass of <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> and <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">Ext.data.TreeStore</a>. It's never used directly,\nbut offers a set of methods used by both of those subclasses.</p>\n\n<p>We've left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what\nyou're probably looking for is <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>. If you're still interested, here's a brief description of what\nAbstractStore is and is not.</p>\n\n<p>AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be\ngiven a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> that represents the type of data in the Store. It also expects to be given a\n<a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a> that handles the loading of data into the Store.</p>\n\n<p>AbstractStore provides a few helpful methods such as <a href=\"#!/api/Ext.data.AbstractStore-method-load\" rel=\"Ext.data.AbstractStore-method-load\" class=\"docClass\">load</a> and <a href=\"#!/api/Ext.data.AbstractStore-method-sync\" rel=\"Ext.data.AbstractStore-method-sync\" class=\"docClass\">sync</a>, which load and save data\nrespectively, passing the requests through the configured <a href=\"#!/api/Ext.data.AbstractStore-cfg-proxy\" rel=\"Ext.data.AbstractStore-cfg-proxy\" class=\"docClass\">proxy</a>. Both built-in Store subclasses add extra\nbehavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -\nin <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> the data is saved as a flat <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">MixedCollection</a>, whereas in\n<a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">TreeStore</a> we use a <a href=\"#!/api/Ext.data.Tree\" rel=\"Ext.data.Tree\" class=\"docClass\">Ext.data.Tree</a> to maintain the data's hierarchy.</p>\n\n<p>The store provides filtering and sorting support. This sorting/filtering can happen on the client side\nor can be completed on the server. This is controlled by the <a href=\"#!/api/Ext.data.Store-cfg-remoteSort\" rel=\"Ext.data.Store-cfg-remoteSort\" class=\"docClass\">remoteSort</a> and\n<a href=\"#!/api/Ext.data.Store-cfg-remoteFilter\" rel=\"Ext.data.Store-cfg-remoteFilter\" class=\"docClass\">remoteFilter</a> config options. For more information see the <a href=\"#!/api/Ext.data.AbstractStore-method-sort\" rel=\"Ext.data.AbstractStore-method-sort\" class=\"docClass\">sort</a> and\n<a href=\"#!/api/Ext.data.Store-method-filter\" rel=\"Ext.data.Store-method-filter\" class=\"docClass\">filter</a> methods.</p>\n"},"ArrayStore":{"!doc":"<p>Small helper class to make creating <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>s from Array data easier. An ArrayStore will be\nautomatically configured with a <a href=\"#!/api/Ext.data.reader.Array\" rel=\"Ext.data.reader.Array\" class=\"docClass\">Ext.data.reader.Array</a>.</p>\n\n<p>A store configuration would be something like:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.ArrayStore\" rel=\"Ext.data.ArrayStore\" class=\"docClass\">Ext.data.ArrayStore</a>', {\n    // store configs\n    storeId: 'myStore',\n    // reader configs\n    fields: [\n       'company',\n       {name: 'price', type: 'float'},\n       {name: 'change', type: 'float'},\n       {name: 'pctChange', type: 'float'},\n       {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}\n    ]\n});\n</code></pre>\n\n<p>This store is configured to consume a returned object of the form:</p>\n\n<pre><code>var myData = [\n    ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],\n    ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],\n    ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],\n    ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],\n    ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']\n];\n</code></pre>\n\n<p>An object literal of this form could also be used as the <a href=\"#!/api/Ext.data.ArrayStore-cfg-data\" rel=\"Ext.data.ArrayStore-cfg-data\" class=\"docClass\">data</a> config option.</p>\n"},"Store":{"!doc":"<p>The Store class encapsulates a client side cache of <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> objects. Stores load data via a\n<a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a>, and also provide functions for <a href=\"#!/api/Ext.data.Store-method-sort\" rel=\"Ext.data.Store-method-sort\" class=\"docClass\">sorting</a>, <a href=\"#!/api/Ext.data.Store-method-filter\" rel=\"Ext.data.Store-method-filter\" class=\"docClass\">filtering</a>\nand querying the <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">model</a> instances contained within it.</p>\n\n<p>Creating a Store is easy - we just tell it the Model and the Proxy to use for loading and saving its data:</p>\n\n<pre><code> // Set up a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">model</a> to use in our Store\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n     extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n     fields: [\n         {name: 'firstName', type: 'string'},\n         {name: 'lastName',  type: 'string'},\n         {name: 'age',       type: 'int'},\n         {name: 'eyeColor',  type: 'string'}\n     ]\n });\n\n var myStore = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n     model: 'User',\n     proxy: {\n         type: 'ajax',\n         url: '/users.json',\n         reader: {\n             type: 'json',\n             root: 'users'\n         }\n     },\n     autoLoad: true\n });\n</code></pre>\n\n<p>In the example above we configured an AJAX proxy to load data from the url '/users.json'. We told our Proxy to use a\n<a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">JsonReader</a> to parse the response from the server into Model object - <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">see the docs on JsonReader</a> for details.</p>\n\n<h2>Inline data</h2>\n\n<p>Stores can also load data inline. Internally, Store converts each of the objects we pass in as <a href=\"#!/api/Ext.data.Store-cfg-data\" rel=\"Ext.data.Store-cfg-data\" class=\"docClass\">data</a> into\nModel instances:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n     model: 'User',\n     data : [\n         {firstName: 'Ed',    lastName: 'Spencer'},\n         {firstName: 'Tommy', lastName: 'Maintz'},\n         {firstName: 'Aaron', lastName: 'Conran'},\n         {firstName: 'Jamie', lastName: 'Avins'}\n     ]\n });\n</code></pre>\n\n<p>Loading inline data using the method above is great if the data is in the correct format already (e.g. it doesn't\nneed to be processed by a <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">reader</a>). If your inline data requires processing to decode\nthe data structure, use a <a href=\"#!/api/Ext.data.proxy.Memory\" rel=\"Ext.data.proxy.Memory\" class=\"docClass\">MemoryProxy</a> instead (see the <a href=\"#!/api/Ext.data.proxy.Memory\" rel=\"Ext.data.proxy.Memory\" class=\"docClass\">MemoryProxy</a> docs for an example).</p>\n\n<p>Additional data can also be loaded locally using <a href=\"#!/api/Ext.data.Store-method-add\" rel=\"Ext.data.Store-method-add\" class=\"docClass\">add</a>.</p>\n\n<h2>Dynamic Loading</h2>\n\n<p>Stores can be dynamically updated by calling the <a href=\"#!/api/Ext.data.Store-method-load\" rel=\"Ext.data.Store-method-load\" class=\"docClass\">load</a> method:</p>\n\n<pre><code>store.load({\n    params: {\n        group: 3,\n        type: 'user'\n    },\n    callback: function(records, operation, success) {\n        // do something after the load finishes\n    },\n    scope: this\n});\n</code></pre>\n\n<p>Here a bunch of arbitrary parameters is passed along with the load request and a callback function is set\nup to do something after the loading is over.</p>\n\n<h2>Loading Nested Data</h2>\n\n<p>Applications often need to load sets of associated data - for example a CRM system might load a User and her Orders.\nInstead of issuing an AJAX request for the User and a series of additional AJAX requests for each Order, we can load\na nested dataset and allow the Reader to automatically populate the associated models. Below is a brief example, see\nthe <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Ext.data.reader.Reader</a> intro docs for a full explanation:</p>\n\n<pre><code> var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n     autoLoad: true,\n     model: \"User\",\n     proxy: {\n         type: 'ajax',\n         url: 'users.json',\n         reader: {\n             type: 'json',\n             root: 'users'\n         }\n     }\n });\n</code></pre>\n\n<p>Which would consume a response like this:</p>\n\n<pre><code> {\n     \"users\": [{\n         \"id\": 1,\n         \"name\": \"Ed\",\n         \"orders\": [{\n             \"id\": 10,\n             \"total\": 10.76,\n             \"status\": \"invoiced\"\n        },{\n             \"id\": 11,\n             \"total\": 13.45,\n             \"status\": \"shipped\"\n        }]\n     }]\n }\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Ext.data.reader.Reader</a> intro docs for a full explanation.</p>\n\n<h2>Filtering and Sorting</h2>\n\n<p>Stores can be sorted and filtered - in both cases either remotely or locally. The <a href=\"#!/api/Ext.data.Store-cfg-sorters\" rel=\"Ext.data.Store-cfg-sorters\" class=\"docClass\">sorters</a> and\n<a href=\"#!/api/Ext.data.Store-cfg-filters\" rel=\"Ext.data.Store-cfg-filters\" class=\"docClass\">filters</a> are held inside <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">MixedCollection</a> instances to make them easy to manage.\nUsually it is sufficient to either just specify sorters and filters in the Store configuration or call <a href=\"#!/api/Ext.data.Store-method-sort\" rel=\"Ext.data.Store-method-sort\" class=\"docClass\">sort</a>\nor <a href=\"#!/api/Ext.data.Store-method-filter\" rel=\"Ext.data.Store-method-filter\" class=\"docClass\">filter</a>:</p>\n\n<pre><code> var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n     model: 'User',\n     sorters: [{\n         property: 'age',\n         direction: 'DESC'\n     }, {\n         property: 'firstName',\n         direction: 'ASC'\n     }],\n\n     filters: [{\n         property: 'firstName',\n         value: /Ed/\n     }]\n });\n</code></pre>\n\n<p>The new Store will keep the configured sorters and filters in the MixedCollection instances mentioned above. By\ndefault, sorting and filtering are both performed locally by the Store - see <a href=\"#!/api/Ext.data.Store-cfg-remoteSort\" rel=\"Ext.data.Store-cfg-remoteSort\" class=\"docClass\">remoteSort</a> and\n<a href=\"#!/api/Ext.data.Store-cfg-remoteFilter\" rel=\"Ext.data.Store-cfg-remoteFilter\" class=\"docClass\">remoteFilter</a> to allow the server to perform these operations instead.</p>\n\n<p>Filtering and sorting after the Store has been instantiated is also easy. Calling <a href=\"#!/api/Ext.data.Store-method-filter\" rel=\"Ext.data.Store-method-filter\" class=\"docClass\">filter</a> adds another filter\nto the Store and automatically filters the dataset (calling <a href=\"#!/api/Ext.data.Store-method-filter\" rel=\"Ext.data.Store-method-filter\" class=\"docClass\">filter</a> with no arguments simply re-applies all\nexisting filters). Note that by default <a href=\"#!/api/Ext.data.Store-cfg-sortOnFilter\" rel=\"Ext.data.Store-cfg-sortOnFilter\" class=\"docClass\">sortOnFilter</a> is set to true, which means that your sorters are\nautomatically reapplied if using local sorting.</p>\n\n<pre><code>store.filter('eyeColor', 'Brown');\n</code></pre>\n\n<p>Change the sorting at any time by calling <a href=\"#!/api/Ext.data.Store-method-sort\" rel=\"Ext.data.Store-method-sort\" class=\"docClass\">sort</a>:</p>\n\n<pre><code>store.sort('height', 'ASC');\n</code></pre>\n\n<p>Note that all existing sorters will be removed in favor of the new sorter data (if <a href=\"#!/api/Ext.data.Store-method-sort\" rel=\"Ext.data.Store-method-sort\" class=\"docClass\">sort</a> is called with no\narguments, the existing sorters are just reapplied instead of being removed). To keep existing sorters and add new\nones, just add them to the MixedCollection:</p>\n\n<pre><code>store.sorters.add(new <a href=\"#!/api/Ext.util.Sorter\" rel=\"Ext.util.Sorter\" class=\"docClass\">Ext.util.Sorter</a>({\n    property : 'shoeSize',\n    direction: 'ASC'\n}));\n\nstore.sort();\n</code></pre>\n\n<h2>Registering with StoreManager</h2>\n\n<p>Any Store that is instantiated with a <a href=\"#!/api/Ext.data.Store-cfg-storeId\" rel=\"Ext.data.Store-cfg-storeId\" class=\"docClass\">storeId</a> will automatically be registered with the <a href=\"#!/api/Ext.data.StoreManager\" rel=\"Ext.data.StoreManager\" class=\"docClass\">StoreManager</a>. This makes it easy to reuse the same store in multiple views:</p>\n\n<pre><code>//this store can be used several times\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    storeId: 'usersStore'\n});\n\nnew Ext.List({\n    store: 'usersStore',\n    //other config goes here\n});\n\nnew <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>({\n    store: 'usersStore',\n    //other config goes here\n});\n</code></pre>\n\n<h2>Further Reading</h2>\n\n<p>Stores are backed up by an ecosystem of classes that enables their operation. To gain a full understanding of these\npieces and how they fit together, see:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a> - overview of what Proxies are and how they are used</li>\n<li><a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> - the core class in the data package</li>\n<li><a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Reader</a> - used by any subclass of <a href=\"#!/api/Ext.data.proxy.Server\" rel=\"Ext.data.proxy.Server\" class=\"docClass\">ServerProxy</a> to read a response</li>\n</ul>\n\n"},"association":{"Association":{"!doc":"<p>Associations enable you to express relationships between different <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Models</a>. Let's say we're\nwriting an ecommerce system where Users can make Orders - there's a relationship between these Models that we can\nexpress like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email'],\n\n    hasMany: {model: 'Order', name: 'orders'}\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Order', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'user_id', 'status', 'price'],\n\n    belongsTo: 'User'\n});\n</code></pre>\n\n<p>We've set up two models - User and Order - and told them about each other. You can set up as many associations on\neach Model as you need using the two default types - <a href=\"#!/api/Ext.data.association.HasMany\" rel=\"Ext.data.association.HasMany\" class=\"docClass\">hasMany</a> and <a href=\"#!/api/Ext.data.association.BelongsTo\" rel=\"Ext.data.association.BelongsTo\" class=\"docClass\">belongsTo</a>. There's much more detail on the usage of each of those inside their\ndocumentation pages. If you're not familiar with Models already, <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">there is plenty on those too</a>.</p>\n\n<p><strong>Further Reading</strong></p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.association.HasMany\" rel=\"Ext.data.association.HasMany\" class=\"docClass\">hasMany associations</a></li>\n<li><a href=\"#!/api/Ext.data.association.BelongsTo\" rel=\"Ext.data.association.BelongsTo\" class=\"docClass\">belongsTo associations</a></li>\n<li><a href=\"#!/api/Ext.data.association.HasOne\" rel=\"Ext.data.association.HasOne\" class=\"docClass\">hasOne associations</a></li>\n<li><a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">using Models</a></li>\n</ul>\n\n\n<h1>Self association models</h1>\n\n<p>We can also have models that create parent/child associations between the same type. Below is an example, where\ngroups can be nested inside other groups:</p>\n\n<pre><code>// Server Data\n{\n    \"groups\": {\n        \"id\": 10,\n        \"parent_id\": 100,\n        \"name\": \"Main Group\",\n        \"parent_group\": {\n            \"id\": 100,\n            \"parent_id\": null,\n            \"name\": \"Parent Group\"\n        },\n        \"nested\" : {\n            \"child_groups\": [{\n                \"id\": 2,\n                \"parent_id\": 10,\n                \"name\": \"Child Group 1\"\n            },{\n                \"id\": 3,\n                \"parent_id\": 10,\n                \"name\": \"Child Group 2\"\n            },{\n                \"id\": 4,\n                \"parent_id\": 10,\n                \"name\": \"Child Group 3\"\n            }]\n        }\n    }\n}\n\n// Client code\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Group', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'parent_id', 'name'],\n    proxy: {\n        type: 'ajax',\n        url: 'data.json',\n        reader: {\n            type: 'json',\n            root: 'groups'\n        }\n    },\n    associations: [{\n        type: 'hasMany',\n        model: 'Group',\n        primaryKey: 'id',\n        foreignKey: 'parent_id',\n        autoLoad: true,\n        associationKey: 'nested.child_groups' // read child data from nested.child_groups\n    }, {\n        type: 'belongsTo',\n        model: 'Group',\n        primaryKey: 'id',\n        foreignKey: 'parent_id',\n        associationKey: 'parent_group' // read parent data from parent_group\n    }]\n});\n\n<a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(function(){\n\n    Group.load(10, {\n        success: function(group){\n            console.log(group.getGroup().get('name'));\n\n            group.groups().each(function(rec){\n                console.log(rec.get('name'));\n            });\n        }\n    });\n\n});\n</code></pre>\n"},"BelongsTo":{"!doc":"<p>Represents a many to one association with another model. The owner model is expected to have\na foreign key which references the primary key of the associated model:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Category', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name: 'id',   type: 'int' },\n        { name: 'name', type: 'string' }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Product', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name: 'id',          type: 'int' },\n        { name: 'category_id', type: 'int' },\n        { name: 'name',        type: 'string' }\n    ],\n    // we can use the belongsTo shortcut on the model to create a belongsTo association\n    associations: [\n        { type: 'belongsTo', model: 'Category' }\n    ]\n});\n</code></pre>\n\n<p>In the example above we have created models for Products and Categories, and linked them together\nby saying that each Product belongs to a Category. This automatically links each Product to a Category\nbased on the Product's category_id, and provides new functions on the Product model:</p>\n\n<h2>Generated getter function</h2>\n\n<p>The first function that is added to the owner model is a getter function:</p>\n\n<pre><code>var product = new Product({\n    id: 100,\n    category_id: 20,\n    name: 'Sneakers'\n});\n\nproduct.getCategory(function(category, operation) {\n    // do something with the category object\n    alert(category.get('id')); // alerts 20\n}, this);\n</code></pre>\n\n<p>The getCategory function was created on the Product model when we defined the association. This uses the\nCategory's configured <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">proxy</a> to load the Category asynchronously, calling the provided\ncallback when it has loaded.</p>\n\n<p>The new getCategory function will also accept an object containing success, failure and callback properties\n- callback will always be called, success will only be called if the associated model was loaded successfully\nand failure will only be called if the associatied model could not be loaded:</p>\n\n<pre><code>product.getCategory({\n    reload: true, // force a reload if the owner model is already cached\n    callback: function(category, operation) {}, // a function that will always be called\n    success : function(category, operation) {}, // a function that will only be called if the load succeeded\n    failure : function(category, operation) {}, // a function that will only be called if the load did not succeed\n    scope   : this // optionally pass in a scope object to execute the callbacks in\n});\n</code></pre>\n\n<p>In each case above the callbacks are called with two arguments - the associated model instance and the\n<a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">operation</a> object that was executed to load that instance. The Operation object is\nuseful when the instance could not be loaded.</p>\n\n<p>Once the getter has been called on the model, it will be cached if the getter is called a second time. To\nforce the model to reload, specify reload: true in the options object.</p>\n\n<h2>Generated setter function</h2>\n\n<p>The second generated function sets the associated model instance - if only a single argument is passed to\nthe setter then the following two calls are identical:</p>\n\n<pre><code>// this call...\nproduct.setCategory(10);\n\n// is equivalent to this call:\nproduct.set('category_id', 10);\n</code></pre>\n\n<p>An instance of the owner model can also be passed as a parameter.</p>\n\n<p>If we pass in a second argument, the model will be automatically saved and the second argument passed to\nthe owner model's <a href=\"#!/api/Ext.data.Model-method-save\" rel=\"Ext.data.Model-method-save\" class=\"docClass\">save</a> method:</p>\n\n<pre><code>product.setCategory(10, function(product, operation) {\n    // the product has been saved\n    alert(product.get('category_id')); //now alerts 10\n});\n\n//alternative syntax:\nproduct.setCategory(10, {\n    callback: function(product, operation), // a function that will always be called\n    success : function(product, operation), // a function that will only be called if the load succeeded\n    failure : function(product, operation), // a function that will only be called if the load did not succeed\n    scope   : this //optionally pass in a scope object to execute the callbacks in\n})\n</code></pre>\n\n<h2>Customisation</h2>\n\n<p>Associations reflect on the models they are linking to automatically set up properties such as the\n<a href=\"#!/api/Ext.data.association.BelongsTo-cfg-primaryKey\" rel=\"Ext.data.association.BelongsTo-cfg-primaryKey\" class=\"docClass\">primaryKey</a> and <a href=\"#!/api/Ext.data.association.BelongsTo-cfg-foreignKey\" rel=\"Ext.data.association.BelongsTo-cfg-foreignKey\" class=\"docClass\">foreignKey</a>. These can alternatively be specified:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Product', {\n    fields: [...],\n\n    associations: [\n        { type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id' }\n    ]\n});\n</code></pre>\n\n<p>Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')\nwith our own settings. Usually this will not be needed.</p>\n"},"HasMany":{"!doc":"<p>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:</p>\n\n\n\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Product', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'id',      type: 'int'},\n        {name: 'user_id', type: 'int'},\n        {name: 'name',    type: 'string'}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'id',   type: 'int'},\n        {name: 'name', type: 'string'}\n    ],\n    // we can use the hasMany shortcut on the model to create a hasMany association\n    hasMany: {model: 'Product', name: 'products'}\n});\n</code></pre>\n\n\n\n\n<p>Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives\nus a new function on every User instance, in this case the function is called 'products' because that is the name\nwe specified in the association configuration above.</p>\n\n\n\n\n<p>This new function returns a specialized <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> which is automatically filtered to load\nonly Products for the given model instance:</p>\n\n\n\n\n<pre><code>//first, we load up a User with id of 1\nvar user = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {id: 1, name: 'Ed'});\n\n//the user.products function was created automatically by the association and returns a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>\n//the created store is automatically scoped to the set of Products for the User with id of 1\nvar products = user.products();\n\n//we still have all of the usual Store functions, for example it's easy to add a Product for this User\nproducts.add({\n    name: 'Another Product'\n});\n\n//saves the changes to the store - this automatically sets the new Product's user_id to 1 before saving\nproducts.sync();\n</code></pre>\n\n\n\n\n<p>The new Store is only instantiated the first time you call products() to conserve memory and processing time,\nthough calling products() a second time returns the same store instance.</p>\n\n\n\n\n<p><u>Custom filtering</u></p>\n\n\n\n\n<p>The Store is automatically furnished with a filter - by default this filter tells the store to only return\nrecords where the associated model's foreign key matches the owner model's primary key. For example, if a User\nwith ID = 100 hasMany Products, the filter loads only Products with user_id == 100.</p>\n\n\n\n\n<p>Sometimes we want to filter by another field - for example in the case of a Twitter search application we may\nhave models for Search and Tweet:</p>\n\n\n\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Search', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'query'\n    ],\n\n    hasMany: {\n        model: 'Tweet',\n        name : 'tweets',\n        filterProperty: 'query'\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Tweet', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'text', 'from_user'\n    ]\n});\n\n//returns a Store filtered by the filterProperty\nvar store = new Search({query: 'Sencha Touch'}).tweets();\n</code></pre>\n\n\n\n\n<p>The tweets association above is filtered by the query property by setting the <a href=\"#!/api/Ext.data.association.HasMany-cfg-filterProperty\" rel=\"Ext.data.association.HasMany-cfg-filterProperty\" class=\"docClass\">filterProperty</a>, and is\nequivalent to this:</p>\n\n\n\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'Tweet',\n    filters: [\n        {\n            property: 'query',\n            value   : 'Sencha Touch'\n        }\n    ]\n});\n</code></pre>\n\n"},"HasOne":{"!doc":"<p>Represents a one to one association with another model. The owner model is expected to have\na foreign key which references the primary key of the associated model:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Address', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name: 'id',          type: 'int' },\n        { name: 'number', type: 'string' },\n        { name: 'street', type: 'string' },\n        { name: 'city', type: 'string' },\n        { name: 'zip', type: 'string' },\n    ]\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name: 'id',   type: 'int' },\n        { name: 'name', type: 'string' },\n        { name: 'address_id', type: 'int'}\n    ],\n    // we can use the hasOne shortcut on the model to create a hasOne association\n    associations: [{ type: 'hasOne', model: 'Address' }]\n});\n</code></pre>\n\n<p>In the example above we have created models for People and Addresses, and linked them together\nby saying that each Person has a single Address. This automatically links each Person to an Address\nbased on the Persons address_id, and provides new functions on the Person model:</p>\n\n<h2>Generated getter function</h2>\n\n<p>The first function that is added to the owner model is a getter function:</p>\n\n<pre><code>var person = new Person({\n    id: 100,\n    address_id: 20,\n    name: 'John Smith'\n});\n\nperson.getAddress(function(address, operation) {\n    // do something with the address object\n    alert(address.get('id')); // alerts 20\n}, this);\n</code></pre>\n\n<p>The getAddress function was created on the Person model when we defined the association. This uses the\nPersons configured <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">proxy</a> to load the Address asynchronously, calling the provided\ncallback when it has loaded.</p>\n\n<p>The new getAddress function will also accept an object containing success, failure and callback properties\n- callback will always be called, success will only be called if the associated model was loaded successfully\nand failure will only be called if the associatied model could not be loaded:</p>\n\n<pre><code>person.getAddress({\n    reload: true, // force a reload if the owner model is already cached\n    callback: function(address, operation) {}, // a function that will always be called\n    success : function(address, operation) {}, // a function that will only be called if the load succeeded\n    failure : function(address, operation) {}, // a function that will only be called if the load did not succeed\n    scope   : this // optionally pass in a scope object to execute the callbacks in\n});\n</code></pre>\n\n<p>In each case above the callbacks are called with two arguments - the associated model instance and the\n<a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">operation</a> object that was executed to load that instance. The Operation object is\nuseful when the instance could not be loaded.</p>\n\n<p>Once the getter has been called on the model, it will be cached if the getter is called a second time. To\nforce the model to reload, specify reload: true in the options object.</p>\n\n<h2>Generated setter function</h2>\n\n<p>The second generated function sets the associated model instance - if only a single argument is passed to\nthe setter then the following two calls are identical:</p>\n\n<pre><code>// this call...\nperson.setAddress(10);\n\n// is equivalent to this call:\nperson.set('address_id', 10);\n</code></pre>\n\n<p>An instance of the owner model can also be passed as a parameter.</p>\n\n<p>If we pass in a second argument, the model will be automatically saved and the second argument passed to\nthe owner model's <a href=\"#!/api/Ext.data.Model-method-save\" rel=\"Ext.data.Model-method-save\" class=\"docClass\">save</a> method:</p>\n\n<pre><code>person.setAddress(10, function(address, operation) {\n    // the address has been saved\n    alert(address.get('address_id')); //now alerts 10\n});\n\n//alternative syntax:\nperson.setAddress(10, {\n    callback: function(address, operation), // a function that will always be called\n    success : function(address, operation), // a function that will only be called if the load succeeded\n    failure : function(address, operation), // a function that will only be called if the load did not succeed\n    scope   : this //optionally pass in a scope object to execute the callbacks in\n})\n</code></pre>\n\n<h2>Customisation</h2>\n\n<p>Associations reflect on the models they are linking to automatically set up properties such as the\n<a href=\"#!/api/Ext.data.association.HasOne-cfg-primaryKey\" rel=\"Ext.data.association.HasOne-cfg-primaryKey\" class=\"docClass\">primaryKey</a> and <a href=\"#!/api/Ext.data.association.HasOne-cfg-foreignKey\" rel=\"Ext.data.association.HasOne-cfg-foreignKey\" class=\"docClass\">foreignKey</a>. These can alternatively be specified:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    fields: [...],\n\n    associations: [\n        { type: 'hasOne', model: 'Address', primaryKey: 'unique_id', foreignKey: 'addr_id' }\n    ]\n});\n</code></pre>\n\n<p>Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'address_id')\nwith our own settings. Usually this will not be needed.</p>\n"}},"Batch":{"!doc":"<p>Provides a mechanism to run one or more <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">operations</a> in a given order. Fires the 'operationcomplete' event\nafter the completion of each Operation, and the 'complete' event when all Operations have been successfully executed. Fires an 'exception'\nevent if any of the Operations encounter an exception.</p>\n\n\n\n\n<p>Usually these are only used internally by <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Ext.data.proxy.Proxy</a> classes</p>\n\n"},"BufferStore":{"!doc":"\n"},"DirectStore":{"!doc":"<p>Small helper class to create an <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> configured with an <a href=\"#!/api/Ext.data.proxy.Direct\" rel=\"Ext.data.proxy.Direct\" class=\"docClass\">Ext.data.proxy.Direct</a>\nand <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">Ext.data.reader.Json</a> to make interacting with an <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.direct.Manager</a> server-side\n<a href=\"#!/api/Ext.direct.Provider\" rel=\"Ext.direct.Provider\" class=\"docClass\">Provider</a> easier. To create a different proxy/reader combination create a basic\n<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> configured as needed.</p>\n\n<p><strong>Note:</strong> Although they are not listed, this class inherits all of the config options of:</p>\n\n<ul>\n<li><p><strong><a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a></strong></p></li>\n<li><p><strong><a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">JsonReader</a></strong></p>\n\n<ul>\n<li><strong><a href=\"#!/api/Ext.data.reader.Json-cfg-root\" rel=\"Ext.data.reader.Json-cfg-root\" class=\"docClass\">root</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.data.reader.Json-cfg-idProperty\" rel=\"Ext.data.reader.Json-cfg-idProperty\" class=\"docClass\">idProperty</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.data.reader.Json-cfg-totalProperty\" rel=\"Ext.data.reader.Json-cfg-totalProperty\" class=\"docClass\">totalProperty</a></strong></li>\n</ul>\n</li>\n<li><p><strong><a href=\"#!/api/Ext.data.proxy.Direct\" rel=\"Ext.data.proxy.Direct\" class=\"docClass\">DirectProxy</a></strong></p>\n\n<ul>\n<li><strong><a href=\"#!/api/Ext.data.proxy.Direct-cfg-directFn\" rel=\"Ext.data.proxy.Direct-cfg-directFn\" class=\"docClass\">directFn</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.data.proxy.Direct-cfg-paramOrder\" rel=\"Ext.data.proxy.Direct-cfg-paramOrder\" class=\"docClass\">paramOrder</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.data.proxy.Direct-cfg-paramsAsHash\" rel=\"Ext.data.proxy.Direct-cfg-paramsAsHash\" class=\"docClass\">paramsAsHash</a></strong></li>\n</ul>\n</li>\n</ul>\n\n"},"Errors":{"!doc":"<p>Wraps a collection of validation error responses and provides convenient functions for\naccessing and errors for specific fields.</p>\n\n\n\n\n<p>Usually this class does not need to be instantiated directly - instances are instead created\nautomatically when <a href=\"#!/api/Ext.data.Model-method-validate\" rel=\"Ext.data.Model-method-validate\" class=\"docClass\">validate</a> on a model instance:</p>\n\n\n\n\n<pre><code>//validate some existing model instance - in this case it returned 2 failures messages\nvar errors = myModel.validate();\n\nerrors.isValid(); //false\n\nerrors.length; //2\nerrors.getByField('name');  // [{field: 'name',  message: 'must be present'}]\nerrors.getByField('title'); // [{field: 'title', message: 'is too short'}]\n</code></pre>\n\n"},"Field":{"!doc":"<p>Fields are used to define what a Model is. They aren't instantiated directly - instead, when we create a class that\nextends <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>, it will automatically create a Field instance for each field configured in a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>. For example, we might set up a model like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'name', 'email',\n        {name: 'age', type: 'int'},\n        {name: 'gender', type: 'string', defaultValue: 'Unknown'}\n    ]\n});\n</code></pre>\n\n<p>Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a couple\nof different formats here; if we only pass in the string name of the field (as with name and email), the field is set\nup with the 'auto' type. It's as if we'd done this instead:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'name', type: 'auto'},\n        {name: 'email', type: 'auto'},\n        {name: 'age', type: 'int'},\n        {name: 'gender', type: 'string', defaultValue: 'Unknown'}\n    ]\n});\n</code></pre>\n\n<h1>Types and conversion</h1>\n\n<p>The <a href=\"#!/api/Ext.data.Field-cfg-type\" rel=\"Ext.data.Field-cfg-type\" class=\"docClass\">type</a> is important - it's used to automatically convert data passed to the field into the correct format.\nIn our example above, the name and email fields used the 'auto' type and will just accept anything that is passed\ninto them. The 'age' field had an 'int' type however, so if we passed 25.4 this would be rounded to 25.</p>\n\n<p>Sometimes a simple type isn't enough, or we want to perform some processing when we load a Field's data. We can do\nthis using a <a href=\"#!/api/Ext.data.Field-cfg-convert\" rel=\"Ext.data.Field-cfg-convert\" class=\"docClass\">convert</a> function. Here, we're going to create a new field based on another:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {\n            name: 'firstName',\n            convert: function(value, record) {\n                var fullName  = record.get('name'),\n                    splits    = fullName.split(\" \"),\n                    firstName = splits[0];\n\n                return firstName;\n            }\n        },\n        'name', 'email',\n        {name: 'age', type: 'int'},\n        {name: 'gender', type: 'string', defaultValue: 'Unknown'}\n    ]\n});\n</code></pre>\n\n<p>Now when we create a new User, the firstName is populated automatically based on the name:</p>\n\n<pre><code>var ed = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {name: 'Ed Spencer'});\n\nconsole.log(ed.get('firstName')); //logs 'Ed', based on our convert function\n</code></pre>\n\n<p>Fields which are configured with a custom <code>convert</code> function are read <em>after</em> all other fields\nwhen constructing and reading records, so that if convert functions rely on other, non-converted fields\n(as in this example), they can be sure of those fields being present.</p>\n\n<p>In fact, if we log out all of the data inside ed, we'll see this:</p>\n\n<pre><code>console.log(ed.data);\n\n//outputs this:\n{\n    age: 0,\n    email: \"\",\n    firstName: \"Ed\",\n    gender: \"Unknown\",\n    name: \"Ed Spencer\"\n}\n</code></pre>\n\n<p>The age field has been given a default of zero because we made it an int type. As an auto field, email has defaulted\nto an empty string. When we registered the User model we set gender's <a href=\"#!/api/Ext.data.Field-cfg-defaultValue\" rel=\"Ext.data.Field-cfg-defaultValue\" class=\"docClass\">defaultValue</a> to 'Unknown' so we see\nthat now. Let's correct that and satisfy ourselves that the types work as we expect:</p>\n\n<pre><code>ed.set('gender', 'Male');\ned.get('gender'); //returns 'Male'\n\ned.set('age', 25.4);\ned.get('age'); //returns 25 - we wanted an int, not a float, so no decimal places allowed\n</code></pre>\n"},"flash":{"BinaryXhr":{"!doc":"<p>Simulates an XMLHttpRequest object's methods and properties as returned\nform the flash polyfill plugin. Used in submitting binary data in browsers that do\nnot support doing so from JavaScript.\nNOTE: By default this will look for the flash object in the ext directory. When packaging and deploying the app, copy the <tt>ext/plugins</tt> directory and its contents to your root directory. For custom deployments where just the <tt>FlashPlugin.swf</tt> file gets copied (e.g. to <tt>/resources/FlashPlugin.swf</tt>), make sure to notify the framework of the location of the plugin before making the first attempt to post binary data, e.g. in the <tt>launch</tt> method of your app do:</p>\n\n<pre><code>Ext.flashPluginPath=\"/resources/FlashPlugin.swf\";\n </code></pre>\n\n"}},"Group":{"!doc":"\n"},"IdGenerator":{"!doc":"<p>This class is a base for all id generators. It also provides lookup of id generators by\ntheir id.</p>\n\n<p>Generally, id generators are used to generate a primary key for new model instances. There\nare different approaches to solving this problem, so this mechanism has both simple use\ncases and is open to custom implementations. A <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> requests id generation\nusing the <a href=\"#!/api/Ext.data.Model-cfg-idgen\" rel=\"Ext.data.Model-cfg-idgen\" class=\"docClass\">Ext.data.Model.idgen</a> property.</p>\n\n<h1>Identity, Type and Shared IdGenerators</h1>\n\n<p>It is often desirable to share IdGenerators to ensure uniqueness or common configuration.\nThis is done by giving IdGenerator instances an id property by which they can be looked\nup using the <a href=\"#!/api/Ext.data.IdGenerator-static-method-get\" rel=\"Ext.data.IdGenerator-static-method-get\" class=\"docClass\">get</a> method. To configure two <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> classes\nto share one <a href=\"#!/api/Ext.data.SequentialIdGenerator\" rel=\"Ext.data.SequentialIdGenerator\" class=\"docClass\">sequential</a> id generator, you simply\nassign them the same id:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelA', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: {\n        type: 'sequential',\n        id: 'foo'\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelB', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: {\n        type: 'sequential',\n        id: 'foo'\n    }\n});\n</code></pre>\n\n<p>To make this as simple as possible for generator types that are shared by many (or all)\nModels, the IdGenerator types (such as 'sequential' or 'uuid') are also reserved as\ngenerator id's. This is used by the <a href=\"#!/api/Ext.data.UuidGenerator\" rel=\"Ext.data.UuidGenerator\" class=\"docClass\">Ext.data.UuidGenerator</a> which has an id equal\nto its type ('uuid'). In other words, the following Models share the same generator:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelX', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'uuid'\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelY', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'uuid'\n});\n</code></pre>\n\n<p>This can be overridden (by specifying the id explicitly), but there is no particularly\ngood reason to do so for this generator type.</p>\n\n<h1>Creating Custom Generators</h1>\n\n<p>An id generator should derive from this class and implement the <a href=\"#!/api/Ext.data.IdGenerator-method-generate\" rel=\"Ext.data.IdGenerator-method-generate\" class=\"docClass\">generate</a> method.\nThe constructor will apply config properties on new instances, so a constructor is often\nnot necessary.</p>\n\n<p>To register an id generator type, a derived class should provide an <code>alias</code> like so:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.CustomIdGenerator', {\n    extend: '<a href=\"#!/api/Ext.data.IdGenerator\" rel=\"Ext.data.IdGenerator\" class=\"docClass\">Ext.data.IdGenerator</a>',\n    alias: 'idgen.custom',\n\n    configProp: 42, // some config property w/default value\n\n    generate: function () {\n        return ... // a new id\n    }\n});\n</code></pre>\n\n<p>Using the custom id generator is then straightforward:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModel', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'custom'\n});\n// or...\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModel', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: {\n        type: 'custom',\n        configProp: value\n    }\n});\n</code></pre>\n\n<p>It is not recommended to mix shared generators with generator configuration. This leads\nto unpredictable results unless all configurations match (which is also redundant). In\nsuch cases, a custom generator with a default id is the best approach.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.CustomIdGenerator', {\n    extend: '<a href=\"#!/api/Ext.data.SequentialIdGenerator\" rel=\"Ext.data.SequentialIdGenerator\" class=\"docClass\">Ext.data.SequentialIdGenerator</a>',\n    alias: 'idgen.custom',\n\n    id: 'custom', // shared by default\n\n    prefix: 'ID_',\n    seed: 1000\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelX', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'custom'\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelY', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'custom'\n});\n\n// the above models share a generator that produces ID_1000, ID_1001, etc..\n</code></pre>\n"},"JsonP":{"!doc":"<p>This class is used to create JSONP requests. JSONP is a mechanism that allows for making\nrequests for data cross domain. More information is available <a href=\"http://en.wikipedia.org/wiki/JSONP\">here</a>.</p>\n"},"JsonPStore":{"!doc":"<p>Small helper class to make creating <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>s from different domain JSON data easier.\nA JsonPStore will be automatically configured with a <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">Ext.data.reader.Json</a> and a <a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">JsonPProxy</a>.</p>\n\n\n<p>A store configuration would be something like:\n<pre><code>var store = new <a href=\"#!/api/Ext.data.JsonPStore\" rel=\"Ext.data.JsonPStore\" class=\"docClass\">Ext.data.JsonPStore</a>({\n    // store configs\n    storeId: 'myStore',\n\n    // proxy configs\n    url: 'get-images.php',\n\n    // reader configs\n    root: 'images',\n    idProperty: 'name',\n    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]\n});\n</code></pre></p>\n\n\n<p>This store is configured to consume a returned object of the form:\n<pre><code>stcCallback({\n    images: [\n        {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},\n        {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}\n    ]\n})\n</code></pre>\n<p>Where stcCallback is the callback name passed in the request to the remote domain. See <a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">JsonPProxy</a>\nfor details of how this works.</p>\nAn object literal of this form could also be used as the <a href=\"#!/api/Ext.data.JsonPStore-cfg-data\" rel=\"Ext.data.JsonPStore-cfg-data\" class=\"docClass\">data</a> config option.</p>\n\n"},"JsonStore":{"!doc":"<p>Small helper class to make creating <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>s from JSON data easier.\nA JsonStore will be automatically configured with a <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">Ext.data.reader.Json</a>.</p>\n\n<p>A store configuration would be something like:</p>\n\n<pre><code>var store = new <a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>({\n    // store configs\n    storeId: 'myStore',\n\n    proxy: {\n        type: 'ajax',\n        url: 'get-images.php',\n        reader: {\n            type: 'json',\n            root: 'images',\n            idProperty: 'name'\n        }\n    },\n\n    //alternatively, a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> name can be given (see <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> for an example)\n    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]\n});\n</code></pre>\n\n<p>This store is configured to consume a returned object of the form:</p>\n\n<pre><code>{\n    images: [\n        {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},\n        {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}\n    ]\n}\n</code></pre>\n\n<p>An object literal of this form could also be used as the <a href=\"#!/api/Ext.data.JsonStore-cfg-data\" rel=\"Ext.data.JsonStore-cfg-data\" class=\"docClass\">data</a> config option.</p>\n"},"Model":{"!doc":"<p>A Model represents some object that your application manages. For example, one might define a Model for Users,\nProducts, Cars, or any other real-world object that we want to model in the system. Models are registered via the\n<a href=\"#!/api/Ext.ModelManager\" rel=\"Ext.ModelManager\" class=\"docClass\">model manager</a>, and are used by <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">stores</a>, which are in turn used by many\nof the data-bound components in Ext.</p>\n\n<p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'name',  type: 'string'},\n        {name: 'age',   type: 'int', convert: null},\n        {name: 'phone', type: 'string'},\n        {name: 'alive', type: 'boolean', defaultValue: true, convert: null}\n    ],\n\n    changeName: function() {\n        var oldName = this.get('name'),\n            newName = oldName + \" The Barbarian\";\n\n        this.set('name', newName);\n    }\n});\n</code></pre>\n\n<p>The fields array is turned into a <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">MixedCollection</a> automatically by the <a href=\"#!/api/Ext.ModelManager\" rel=\"Ext.ModelManager\" class=\"docClass\">ModelManager</a>, and all other functions and properties are copied to the new Model's prototype.</p>\n\n<p>A Model definition always has an <em>identifying field</em> which should yield a unique key for each instance. By default, a field\nnamed \"id\" will be created with a <a href=\"#!/api/Ext.data.Field-cfg-mapping\" rel=\"Ext.data.Field-cfg-mapping\" class=\"docClass\">mapping</a> of \"id\". This happens because of the default\n<a href=\"#!/api/Ext.data.Model-cfg-idProperty\" rel=\"Ext.data.Model-cfg-idProperty\" class=\"docClass\">idProperty</a> provided in Model definitions.</p>\n\n<p>To alter which field is the identifying field, use the <a href=\"#!/api/Ext.data.Model-cfg-idProperty\" rel=\"Ext.data.Model-cfg-idProperty\" class=\"docClass\">idProperty</a> config.</p>\n\n<p>If the Model should not have any identifying field (for example if you are defining ab abstract base class for your\napplication models), configure the {@liknk <a href=\"#!/api/Ext.data.Model-cfg-idProperty\" rel=\"Ext.data.Model-cfg-idProperty\" class=\"docClass\">idProperty</a>} as <code>null</code>.</p>\n\n<p>By default, the built in numeric and boolean field types have a <a href=\"#!/api/Ext.data.Field-cfg-convert\" rel=\"Ext.data.Field-cfg-convert\" class=\"docClass\">Ext.data.Field.convert</a> function which coerces string\nvalues in raw data into the field's type. For better performance with <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">Json</a> or <a href=\"#!/api/Ext.data.reader.Array\" rel=\"Ext.data.reader.Array\" class=\"docClass\">Array</a>\nreaders <em>if you are in control of the data fed into this Model</em>, you can null out the default convert function which will cause\nthe raw property to be copied directly into the Field's value.</p>\n\n<p>Now we can create instances of our User model and call any model logic we defined:</p>\n\n<pre><code>var user = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {\n    id   : 'ABCD12345',\n    name : 'Conan',\n    age  : 24,\n    phone: '555-555-5555'\n});\n\nuser.changeName();\nuser.get('name'); //returns \"Conan The Barbarian\"\n</code></pre>\n\n<h1>Validations</h1>\n\n<p>Models have built-in support for validations, which are executed against the validator functions in <a href=\"#!/api/Ext.data.validations\" rel=\"Ext.data.validations\" class=\"docClass\">Ext.data.validations</a> (<a href=\"#!/api/Ext.data.validations\" rel=\"Ext.data.validations\" class=\"docClass\">see all validation functions</a>). Validations are easy to add to\nmodels:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'name',     type: 'string'},\n        {name: 'age',      type: 'int'},\n        {name: 'phone',    type: 'string'},\n        {name: 'gender',   type: 'string'},\n        {name: 'username', type: 'string'},\n        {name: 'alive',    type: 'boolean', defaultValue: true}\n    ],\n\n    validations: [\n        {type: 'presence',  field: 'age'},\n        {type: 'length',    field: 'name',     min: 2},\n        {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},\n        {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},\n        {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}\n    ]\n});\n</code></pre>\n\n<p>The validations can be run by simply calling the <a href=\"#!/api/Ext.data.Model-method-validate\" rel=\"Ext.data.Model-method-validate\" class=\"docClass\">validate</a> function, which returns a <a href=\"#!/api/Ext.data.Errors\" rel=\"Ext.data.Errors\" class=\"docClass\">Ext.data.Errors</a>\nobject:</p>\n\n<pre><code>var instance = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {\n    name: 'Ed',\n    gender: 'Male',\n    username: 'edspencer'\n});\n\nvar errors = instance.validate();\n</code></pre>\n\n<h1>Associations</h1>\n\n<p>Models can have associations with other Models via <a href=\"#!/api/Ext.data.association.HasOne\" rel=\"Ext.data.association.HasOne\" class=\"docClass\">Ext.data.association.HasOne</a>,\n<a href=\"#!/api/Ext.data.association.BelongsTo\" rel=\"Ext.data.association.BelongsTo\" class=\"docClass\">belongsTo</a> and <a href=\"#!/api/Ext.data.association.HasMany\" rel=\"Ext.data.association.HasMany\" class=\"docClass\">hasMany</a> associations.\nFor example, let's say we're writing a blog administration application which deals with Users, Posts and Comments.\nWe can express the relationships between these models like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Post', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'user_id'],\n\n    belongsTo: 'User',\n    hasMany  : {model: 'Comment', name: 'comments'}\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Comment', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'user_id', 'post_id'],\n\n    belongsTo: 'Post'\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id'],\n\n    hasMany: [\n        'Post',\n        {model: 'Comment', name: 'comments'}\n    ]\n});\n</code></pre>\n\n<p>See the docs for <a href=\"#!/api/Ext.data.association.HasOne\" rel=\"Ext.data.association.HasOne\" class=\"docClass\">Ext.data.association.HasOne</a>, <a href=\"#!/api/Ext.data.association.BelongsTo\" rel=\"Ext.data.association.BelongsTo\" class=\"docClass\">Ext.data.association.BelongsTo</a> and\n<a href=\"#!/api/Ext.data.association.HasMany\" rel=\"Ext.data.association.HasMany\" class=\"docClass\">Ext.data.association.HasMany</a> for details on the usage and configuration of associations.\nNote that associations can also be specified like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id'],\n\n    associations: [\n        {type: 'hasMany', model: 'Post',    name: 'posts'},\n        {type: 'hasMany', model: 'Comment', name: 'comments'}\n    ]\n});\n</code></pre>\n\n<h1>Using a Proxy</h1>\n\n<p>Models are great for representing types of data and relationships, but sooner or later we're going to want to load or\nsave that data somewhere. All loading and saving of data is handled via a <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a>, which\ncan be set directly on the Model:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email'],\n\n    proxy: {\n        type: 'rest',\n        url : '/users'\n    }\n});\n</code></pre>\n\n<p>Here we've set up a <a href=\"#!/api/Ext.data.proxy.Rest\" rel=\"Ext.data.proxy.Rest\" class=\"docClass\">Rest Proxy</a>, which knows how to load and save data to and from a\nRESTful backend. Let's see how this works:</p>\n\n<pre><code>var user = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});\n\nuser.save(); //POST /users\n</code></pre>\n\n<p>Calling <a href=\"#!/api/Ext.data.Model-method-save\" rel=\"Ext.data.Model-method-save\" class=\"docClass\">save</a> on the new Model instance tells the configured RestProxy that we wish to persist this Model's\ndata onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't have an id,\nand performs the appropriate action - in this case issuing a POST request to the url we configured (/users). We\nconfigure any Proxy on any Model and always follow this API - see <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Ext.data.proxy.Proxy</a> for a full list.</p>\n\n<p>Loading data via the Proxy is equally easy:</p>\n\n<pre><code>//get a reference to the User model class\nvar User = <a href=\"#!/api/Ext.ModelManager-method-getModel\" rel=\"Ext.ModelManager-method-getModel\" class=\"docClass\">Ext.ModelManager.getModel</a>('User');\n\n//Uses the configured RestProxy to make a GET request to /users/123\nUser.load(123, {\n    success: function(user) {\n        console.log(user.getId()); //logs 123\n    }\n});\n</code></pre>\n\n<p>Models can also be updated and destroyed easily:</p>\n\n<pre><code>//the user Model we loaded in the last snippet:\nuser.set('name', 'Edward Spencer');\n\n//tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id\nuser.save({\n    success: function() {\n        console.log('The User was updated');\n    }\n});\n\n//tells the Proxy to destroy the Model. Performs a DELETE request to /users/123\nuser.destroy({\n    success: function() {\n        console.log('The User was destroyed!');\n    }\n});\n</code></pre>\n\n<h1>Usage in Stores</h1>\n\n<p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this by\ncreating a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User'\n});\n\n//uses the Proxy we set up on Model to load the Store data\nstore.load();\n</code></pre>\n\n<p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain a\nset of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store docs</a> for more information on Stores.</p>\n"},"NodeInterface":{"!doc":"<p>This class is used as a set of methods that are applied to the prototype of a\nModel to decorate it with a Node API. This means that models used in conjunction with a tree\nwill have all of the tree related methods available on the model. In general this class will\nnot be used directly by the developer. This class also creates extra fields on the model if\nthey do not exist, to help maintain the tree state and UI. These fields are documented as\nconfig options.</p>\n"},"NodeStore":{"!doc":"<p>Node Store</p>\n"},"Operation":{"!doc":"<p>Represents a single read or write operation performed by a <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a>. Operation objects are\nused to enable communication between Stores and Proxies. Application developers should rarely need to interact with\nOperation objects directly.</p>\n\n<p>Several Operations can be batched together in a <a href=\"#!/api/Ext.data.Batch\" rel=\"Ext.data.Batch\" class=\"docClass\">batch</a>.</p>\n"},"PageMap":{"!doc":"<p>Private class for use by only Store when configured <code>buffered: true</code>.</p>\n"},"proxy":{"Ajax":{"!doc":"<p>AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to load\ndata from the server, usually to be placed into a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>. Let's take a look at a typical setup.\nHere we're going to set up a Store that has an AjaxProxy. To prepare, we'll also set up a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email']\n});\n\n//The Store contains the AjaxProxy as an inline configuration\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'ajax',\n        url : 'users.json'\n    }\n});\n\nstore.load();\n</code></pre>\n\n<p>Our example is going to load user data into a Store, so we start off by defining a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> with\nthe fields that we expect the server to return. Next we set up the Store itself, along with a\n<a href=\"#!/api/Ext.data.Store-cfg-proxy\" rel=\"Ext.data.Store-cfg-proxy\" class=\"docClass\">proxy</a> configuration. This configuration was automatically turned into an\n<a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a> instance, with the url we specified being passed into AjaxProxy's constructor.\nIt's as if we'd done this:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: 'users.json',\n    model: 'User',\n    reader: 'json'\n});\n</code></pre>\n\n<p>A couple of extra configurations appeared here - <a href=\"#!/api/Ext.data.proxy.Ajax-cfg-model\" rel=\"Ext.data.proxy.Ajax-cfg-model\" class=\"docClass\">model</a> and <a href=\"#!/api/Ext.data.proxy.Ajax-cfg-reader\" rel=\"Ext.data.proxy.Ajax-cfg-reader\" class=\"docClass\">reader</a>. These are set by default when we\ncreate the proxy via the Store - the Store already knows about the Model, and Proxy's default <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Reader</a> is <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">JsonReader</a>.</p>\n\n<p>Now when we call store.load(), the AjaxProxy springs into action, making a request to the url we configured\n('users.json' in this case). As we're performing a read, it sends a GET request to that url (see\n<a href=\"#!/api/Ext.data.proxy.Ajax-property-actionMethods\" rel=\"Ext.data.proxy.Ajax-property-actionMethods\" class=\"docClass\">actionMethods</a> to customize this - by default any kind of read will be sent as a GET request and any kind of write\nwill be sent as a POST request).</p>\n\n<h1>Limitations</h1>\n\n<p>AjaxProxy cannot be used to retrieve data from other domains. If your application is running on http://domainA.com it\ncannot load data from http://domainB.com because browsers have a built-in security policy that prohibits domains\ntalking to each other via AJAX.</p>\n\n<p>If you need to read data from another domain and can't set up a proxy server (some software that runs on your own\ndomain's web server and transparently forwards requests to http://domainB.com, making it look like they actually came\nfrom http://domainA.com), you can use <a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">Ext.data.proxy.JsonP</a> and a technique known as JSON-P (JSON with\nPadding), which can help you get around the problem so long as the server on http://domainB.com is set up to support\nJSON-P responses. See <a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">JsonPProxy</a>'s introduction docs for more details.</p>\n\n<h1>Readers and Writers</h1>\n\n<p>AjaxProxy can be configured to use any type of <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Reader</a> to decode the server's response.\nIf no Reader is supplied, AjaxProxy will default to using a <a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">JsonReader</a>. Reader\nconfiguration can be passed in as a simple object, which the Proxy automatically turns into a <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Reader</a> instance:</p>\n\n<pre><code>var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    model: 'User',\n    reader: {\n        type: 'xml',\n        root: 'users'\n    }\n});\n\nproxy.getReader(); //returns an <a href=\"#!/api/Ext.data.reader.Xml\" rel=\"Ext.data.reader.Xml\" class=\"docClass\">XmlReader</a> instance based on the config we supplied\n</code></pre>\n\n<h1>Url generation</h1>\n\n<p>AjaxProxy automatically inserts any sorting, filtering, paging and grouping options into the url it generates for\neach request. These are controlled with the following configuration options:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.proxy.Ajax-cfg-pageParam\" rel=\"Ext.data.proxy.Ajax-cfg-pageParam\" class=\"docClass\">pageParam</a> - controls how the page number is sent to the server (see also <a href=\"#!/api/Ext.data.proxy.Ajax-cfg-startParam\" rel=\"Ext.data.proxy.Ajax-cfg-startParam\" class=\"docClass\">startParam</a> and <a href=\"#!/api/Ext.data.proxy.Ajax-cfg-limitParam\" rel=\"Ext.data.proxy.Ajax-cfg-limitParam\" class=\"docClass\">limitParam</a>)</li>\n<li><a href=\"#!/api/Ext.data.proxy.Ajax-cfg-sortParam\" rel=\"Ext.data.proxy.Ajax-cfg-sortParam\" class=\"docClass\">sortParam</a> - controls how sort information is sent to the server</li>\n<li><a href=\"#!/api/Ext.data.proxy.Ajax-cfg-groupParam\" rel=\"Ext.data.proxy.Ajax-cfg-groupParam\" class=\"docClass\">groupParam</a> - controls how grouping information is sent to the server</li>\n<li><a href=\"#!/api/Ext.data.proxy.Ajax-cfg-filterParam\" rel=\"Ext.data.proxy.Ajax-cfg-filterParam\" class=\"docClass\">filterParam</a> - controls how filter information is sent to the server</li>\n</ul>\n\n\n<p>Each request sent by AjaxProxy is described by an <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Operation</a>. To see how we can customize\nthe generated urls, let's say we're loading the Proxy with the following Operation:</p>\n\n<pre><code>var operation = new <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Ext.data.Operation</a>({\n    action: 'read',\n    page  : 2\n});\n</code></pre>\n\n<p>Now we'll issue the request for this Operation by calling <a href=\"#!/api/Ext.data.proxy.Ajax-method-read\" rel=\"Ext.data.proxy.Ajax-method-read\" class=\"docClass\">read</a>:</p>\n\n<pre><code>var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: '/users'\n});\n\nproxy.read(operation); //GET /users?page=2\n</code></pre>\n\n<p>Easy enough - the Proxy just copied the page property from the Operation. We can customize how this page data is sent\nto the server:</p>\n\n<pre><code>var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: '/users',\n    pageParam: 'pageNumber'\n});\n\nproxy.read(operation); //GET /users?pageNumber=2\n</code></pre>\n\n<p>Alternatively, our Operation could have been configured to send start and limit parameters instead of page:</p>\n\n<pre><code>var operation = new <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Ext.data.Operation</a>({\n    action: 'read',\n    start : 50,\n    limit : 25\n});\n\nvar proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: '/users'\n});\n\nproxy.read(operation); //GET /users?start=50&amp;limit;=25\n</code></pre>\n\n<p>Again we can customize this url:</p>\n\n<pre><code>var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: '/users',\n    startParam: 'startIndex',\n    limitParam: 'limitIndex'\n});\n\nproxy.read(operation); //GET /users?startIndex=50&amp;limitIndex;=25\n</code></pre>\n\n<p>AjaxProxy will also send sort and filter information to the server. Let's take a look at how this looks with a more\nexpressive Operation object:</p>\n\n<pre><code>var operation = new <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Ext.data.Operation</a>({\n    action: 'read',\n    sorters: [\n        new <a href=\"#!/api/Ext.util.Sorter\" rel=\"Ext.util.Sorter\" class=\"docClass\">Ext.util.Sorter</a>({\n            property : 'name',\n            direction: 'ASC'\n        }),\n        new <a href=\"#!/api/Ext.util.Sorter\" rel=\"Ext.util.Sorter\" class=\"docClass\">Ext.util.Sorter</a>({\n            property : 'age',\n            direction: 'DESC'\n        })\n    ],\n    filters: [\n        new <a href=\"#!/api/Ext.util.Filter\" rel=\"Ext.util.Filter\" class=\"docClass\">Ext.util.Filter</a>({\n            property: 'eyeColor',\n            value   : 'brown'\n        })\n    ]\n});\n</code></pre>\n\n<p>This is the type of object that is generated internally when loading a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> with sorters and\nfilters defined. By default the AjaxProxy will JSON encode the sorters and filters, resulting in something like this\n(note that the url is escaped before sending the request, but is left unescaped here for clarity):</p>\n\n<pre><code>var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n    url: '/users'\n});\n\nproxy.read(operation); //GET /users?sort=[{\"property\":\"name\",\"direction\":\"ASC\"},{\"property\":\"age\",\"direction\":\"DESC\"}]&amp;filter;=[{\"property\":\"eyeColor\",\"value\":\"brown\"}]\n</code></pre>\n\n<p>We can again customize how this is created by supplying a few configuration options. Let's say our server is set up\nto receive sorting information is a format like \"sortBy=name#ASC,age#DESC\". We can configure AjaxProxy to provide\nthat format like this:</p>\n\n<pre><code> var proxy = new <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ext.data.proxy.Ajax</a>({\n     url: '/users',\n     sortParam: 'sortBy',\n     filterParam: 'filterBy',\n\n     //our custom implementation of sorter encoding - turns our sorters into \"name#ASC,age#DESC\"\n     encodeSorters: function(sorters) {\n         var length   = sorters.length,\n             sortStrs = [],\n             sorter, i;\n\n         for (i = 0; i &lt; length; i++) {\n             sorter = sorters[i];\n\n             sortStrs[i] = sorter.property + '#' + sorter.direction\n         }\n\n         return sortStrs.join(\",\");\n     }\n });\n\n proxy.read(operation); //GET /users?sortBy=name#ASC,age#DESC&amp;filterBy;=[{\"property\":\"eyeColor\",\"value\":\"brown\"}]\n</code></pre>\n\n<p>We can also provide a custom <a href=\"#!/api/Ext.data.proxy.Ajax-method-encodeFilters\" rel=\"Ext.data.proxy.Ajax-method-encodeFilters\" class=\"docClass\">encodeFilters</a> function to encode our filters.</p>\n"},"Server":{"!doc":"<p>ServerProxy is a superclass of <a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">JsonPProxy</a> and <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">AjaxProxy</a>, and\nwould not usually be used directly.</p>\n\n<p>ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been\ncalled ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now\nan alias of AjaxProxy).</p>\n"},"Proxy":{"!doc":"<p>Proxies are used by <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Stores</a> to handle the loading and saving of <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>\ndata. Usually developers will not need to create or interact with proxies directly.</p>\n\n<h1>Types of Proxy</h1>\n\n<p>There are two main types of Proxy - <a href=\"#!/api/Ext.data.proxy.Client\" rel=\"Ext.data.proxy.Client\" class=\"docClass\">Client</a> and <a href=\"#!/api/Ext.data.proxy.Server\" rel=\"Ext.data.proxy.Server\" class=\"docClass\">Server</a>.\nThe Client proxies save their data locally and include the following subclasses:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.proxy.LocalStorage\" rel=\"Ext.data.proxy.LocalStorage\" class=\"docClass\">LocalStorageProxy</a> - saves its data to localStorage if the browser supports it</li>\n<li><a href=\"#!/api/Ext.data.proxy.SessionStorage\" rel=\"Ext.data.proxy.SessionStorage\" class=\"docClass\">SessionStorageProxy</a> - saves its data to sessionStorage if the browsers supports it</li>\n<li><a href=\"#!/api/Ext.data.proxy.Memory\" rel=\"Ext.data.proxy.Memory\" class=\"docClass\">MemoryProxy</a> - holds data in memory only, any data is lost when the page is refreshed</li>\n</ul>\n\n\n<p>The Server proxies save their data by sending requests to some remote server. These proxies include:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ajax</a> - sends requests to a server on the same domain</li>\n<li><a href=\"#!/api/Ext.data.proxy.JsonP\" rel=\"Ext.data.proxy.JsonP\" class=\"docClass\">JsonP</a> - uses JSON-P to send requests to a server on a different domain</li>\n<li><a href=\"#!/api/Ext.data.proxy.Rest\" rel=\"Ext.data.proxy.Rest\" class=\"docClass\">Rest</a> - uses RESTful HTTP methods (GET/PUT/POST/DELETE) to communicate with server</li>\n<li><a href=\"#!/api/Ext.data.proxy.Direct\" rel=\"Ext.data.proxy.Direct\" class=\"docClass\">Direct</a> - uses <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.direct.Manager</a> to send requests</li>\n</ul>\n\n\n<p>Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four\noperations are mapped to the methods <a href=\"#!/api/Ext.data.proxy.Proxy-method-create\" rel=\"Ext.data.proxy.Proxy-method-create\" class=\"docClass\">create</a>, <a href=\"#!/api/Ext.data.proxy.Proxy-method-read\" rel=\"Ext.data.proxy.Proxy-method-read\" class=\"docClass\">read</a>, <a href=\"#!/api/Ext.data.proxy.Proxy-method-update\" rel=\"Ext.data.proxy.Proxy-method-update\" class=\"docClass\">update</a> and <a href=\"#!/api/Ext.data.proxy.Proxy-method-destroy\" rel=\"Ext.data.proxy.Proxy-method-destroy\" class=\"docClass\">destroy</a>\nrespectively. Each Proxy subclass implements these functions.</p>\n\n<p>The CRUD methods each expect an <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Operation</a> object as the sole argument. The Operation\nencapsulates information about the action the Store wishes to perform, the <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">model</a> instances\nthat are to be modified, etc. See the <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Operation</a> documentation for more details. Each CRUD\nmethod also accepts a callback function to be called asynchronously on completion.</p>\n\n<p>Proxies also support batching of Operations via a <a href=\"#!/api/Ext.data.Batch\" rel=\"Ext.data.Batch\" class=\"docClass\">batch</a> object, invoked by the <a href=\"#!/api/Ext.data.proxy.Proxy-method-batch\" rel=\"Ext.data.proxy.Proxy-method-batch\" class=\"docClass\">batch</a>\nmethod.</p>\n"},"Client":{"!doc":"<p>Base class for any client-side storage. Used as a superclass for <a href=\"#!/api/Ext.data.proxy.Memory\" rel=\"Ext.data.proxy.Memory\" class=\"docClass\">Memory</a> and\n<a href=\"#!/api/Ext.data.proxy.WebStorage\" rel=\"Ext.data.proxy.WebStorage\" class=\"docClass\">Web Storage</a> proxies. Do not use directly, use one of the subclasses instead.</p>\n"},"Direct":{"!doc":"<p>This class is used to send requests to the server using <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a>. When a\nrequest is made, the transport mechanism is handed off to the appropriate\n<a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">Provider</a> to complete the call.</p>\n\n<h1>Specifying the function</h1>\n\n<p>This proxy expects a Direct remoting method to be passed in order to be able to complete requests.\nThis can be done by specifying the <a href=\"#!/api/Ext.data.proxy.Direct-cfg-directFn\" rel=\"Ext.data.proxy.Direct-cfg-directFn\" class=\"docClass\">directFn</a> configuration. This will use the same direct\nmethod for all requests. Alternatively, you can provide an <a href=\"#!/api/Ext.data.proxy.Direct-cfg-api\" rel=\"Ext.data.proxy.Direct-cfg-api\" class=\"docClass\">api</a> configuration. This\nallows you to specify a different remoting method for each CRUD action.</p>\n\n<h1>Parameters</h1>\n\n<p>This proxy provides options to help configure which parameters will be sent to the server.\nBy specifying the <a href=\"#!/api/Ext.data.proxy.Direct-cfg-paramsAsHash\" rel=\"Ext.data.proxy.Direct-cfg-paramsAsHash\" class=\"docClass\">paramsAsHash</a> option, it will send an object literal containing each\nof the passed parameters. The <a href=\"#!/api/Ext.data.proxy.Direct-cfg-paramOrder\" rel=\"Ext.data.proxy.Direct-cfg-paramOrder\" class=\"docClass\">paramOrder</a> option can be used to specify the order in which\nthe remoting method parameters are passed.</p>\n\n<h1>Example Usage</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['firstName', 'lastName'],\n    proxy: {\n        type: 'direct',\n        directFn: MyApp.getUsers,\n        paramOrder: 'id' // Tells the proxy to pass the id as the first parameter to the remoting method.\n    }\n});\nUser.load(1);\n</code></pre>\n"},"JsonP":{"!doc":"<p>The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on. If\nyour application is running on http://domainA.com it cannot use <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">Ajax</a> to load its data\nfrom http://domainB.com because cross-domain ajax requests are prohibited by the browser.</p>\n\n<p>We can get around this using a JsonP proxy. JsonP proxy injects a <code>&lt;script&gt;</code> tag into the DOM whenever an AJAX request\nwould usually be made. Let's say we want to load data from http://domainB.com/users - the script tag that would be\ninjected might look like this:</p>\n\n<pre><code>&lt;script src=\"http://domainB.com/users?callback=someCallback\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>When we inject the tag above, the browser makes a request to that url and includes the response as if it was any\nother type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we want\nto be notified when the result comes in and that it should call our callback function with the data it sends back. So\nlong as the server formats the response to look like this, everything will work:</p>\n\n<pre><code>someCallback({\n    users: [\n        {\n            id: 1,\n            name: \"Ed Spencer\",\n            email: \"ed@sencha.com\"\n        }\n    ]\n});\n</code></pre>\n\n<p>As soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the JSON\nobject that the server returned.</p>\n\n<p>JsonP proxy takes care of all of this automatically. It formats the url you pass, adding the callback parameter\nautomatically. It even creates a temporary callback function, waits for it to be called and then puts the data into\nthe Proxy making it look just like you loaded it through a normal <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">AjaxProxy</a>. Here's how\nwe might set that up:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email']\n});\n\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'jsonp',\n        url : 'http://domainB.com/users'\n    }\n});\n\nstore.load();\n</code></pre>\n\n<p>That's all we need to do - JsonP proxy takes care of the rest. In this case the Proxy will have injected a script tag\nlike this:</p>\n\n<pre><code>&lt;script src=\"http://domainB.com/users?callback=callback1\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h1>Customization</h1>\n\n<p>This script tag can be customized using the <a href=\"#!/api/Ext.data.proxy.JsonP-cfg-callbackKey\" rel=\"Ext.data.proxy.JsonP-cfg-callbackKey\" class=\"docClass\">callbackKey</a> configuration. For example:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'jsonp',\n        url : 'http://domainB.com/users',\n        callbackKey: 'theCallbackFunction'\n    }\n});\n\nstore.load();\n</code></pre>\n\n<p>Would inject a script tag like this:</p>\n\n<pre><code>&lt;script src=\"http://domainB.com/users?theCallbackFunction=callback1\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h1>Implementing on the server side</h1>\n\n<p>The remote server side needs to be configured to return data in this format. Here are suggestions for how you might\nachieve this using Java, PHP and ASP.net:</p>\n\n<p>Java:</p>\n\n<pre><code>boolean jsonP = false;\nString cb = request.getParameter(\"callback\");\nif (cb != null) {\n    jsonP = true;\n    response.setContentType(\"text/javascript\");\n} else {\n    response.setContentType(\"application/x-json\");\n}\nWriter out = response.getWriter();\nif (jsonP) {\n    out.write(cb + \"(\");\n}\nout.print(dataBlock.toJsonString());\nif (jsonP) {\n    out.write(\");\");\n}\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>$callback = $_REQUEST['callback'];\n\n// Create the output object.\n$output = array('a' =&gt; 'Apple', 'b' =&gt; 'Banana');\n\n//start output\nif ($callback) {\n    header('Content-Type: text/javascript');\n    echo $callback . '(' . json_encode($output) . ');';\n} else {\n    header('Content-Type: application/x-json');\n    echo json_encode($output);\n}\n</code></pre>\n\n<p>ASP.net:</p>\n\n<pre><code>String jsonString = \"{success: true}\";\nString cb = Request.Params.Get(\"callback\");\nString responseString = \"\";\nif (!String.IsNullOrEmpty(cb)) {\n    responseString = cb + \"(\" + jsonString + \")\";\n} else {\n    responseString = jsonString;\n}\nResponse.Write(responseString);\n</code></pre>\n"},"LocalStorage":{"!doc":"<p>The LocalStorageProxy uses the new HTML5 localStorage API to save <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> data locally on the\nclient browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so\nLocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>\n\n<p>localStorage is extremely useful for saving user-specific information without needing to build server-side\ninfrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's\nsearches locally so they can easily perform a saved search again later. We'd start by creating a Search model:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Search', {\n    fields: ['id', 'query'],\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    proxy: {\n        type: 'localstorage',\n        id  : 'twitter-Searches'\n    }\n});\n</code></pre>\n\n<p>Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we need to\npass to the LocalStorage proxy is an <a href=\"#!/api/Ext.data.proxy.LocalStorage-cfg-id\" rel=\"Ext.data.proxy.LocalStorage-cfg-id\" class=\"docClass\">id</a>. This is important as it separates the Model data in this Proxy from\nall others. The localStorage API puts all data into a single shared namespace, so by setting an id we enable\nLocalStorageProxy to manage the saved Search data.</p>\n\n<p>Saving our data into localStorage is easy and would usually be done with a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>:</p>\n\n<pre><code>//our Store automatically picks up the LocalStorageProxy defined on the Search model\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: \"Search\"\n});\n\n//loads any existing Search data from localStorage\nstore.load();\n\n//now add some Searches\nstore.add({query: 'Sencha Touch'});\nstore.add({query: 'Ext JS'});\n\n//finally, save our Search data to localStorage\nstore.sync();\n</code></pre>\n\n<p>The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model data\nand places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:</p>\n\n<pre><code>var search = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Search', {query: 'Sencha Animator'});\n\n//uses the configured LocalStorageProxy to save the new Search to localStorage\nsearch.save();\n</code></pre>\n\n<h1>Limitations</h1>\n\n<p>If this proxy is used in a browser where local storage is not supported, the constructor will throw an error. A local\nstorage proxy requires a unique ID which is used as a key in which all record data are stored in the local storage\nobject.</p>\n\n<p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the\nattached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.</p>\n"},"WebStorage":{"!doc":"<p>WebStorageProxy is simply a superclass for the <a href=\"#!/api/Ext.data.proxy.LocalStorage\" rel=\"Ext.data.proxy.LocalStorage\" class=\"docClass\">LocalStorage</a> and <a href=\"#!/api/Ext.data.proxy.SessionStorage\" rel=\"Ext.data.proxy.SessionStorage\" class=\"docClass\">SessionStorage</a> proxies. It uses the new HTML5 key/value client-side storage objects to\nsave <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">model instances</a> for offline use.</p>\n"},"Memory":{"!doc":"<p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on\nevery page refresh.</p>\n\n<p>Usually this Proxy isn't used directly, serving instead as a helper to a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> where a reader\nis required to load data. For example, say we have a Store for a User model and have some inline data we want to\nload, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into our\nStore:</p>\n\n<pre><code>//this is the model we will be using in the store\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        {name: 'id',    type: 'int'},\n        {name: 'name',  type: 'string'},\n        {name: 'phone', type: 'string', mapping: 'phoneNumber'}\n    ]\n});\n\n//this data does not line up to our model fields - the phone field is called phoneNumber\nvar data = {\n    users: [\n        {\n            id: 1,\n            name: 'Ed Spencer',\n            phoneNumber: '555 1234'\n        },\n        {\n            id: 2,\n            name: 'Abe Elias',\n            phoneNumber: '666 1234'\n        }\n    ]\n};\n\n//note how we set the 'root' in the reader to match the data structure above\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    autoLoad: true,\n    model: 'User',\n    data : data,\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            root: 'users'\n        }\n    }\n});\n</code></pre>\n"},"Rest":{"!doc":"<p>The Rest proxy is a specialization of the <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">AjaxProxy</a> which simply maps the four actions\n(create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>\nwith an inline Rest proxy</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email'],\n\n    proxy: {\n        type: 'rest',\n        url : '/users'\n    }\n});\n</code></pre>\n\n<p>Now we can create a new User instance and save it via the Rest proxy. Doing this will cause the Proxy to send a POST\nrequest to '/users':</p>\n\n<pre><code>var user = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});\n\nuser.save(); //POST /users\n</code></pre>\n\n<p>Let's expand this a little and provide a callback for the <a href=\"#!/api/Ext.data.Model-method-save\" rel=\"Ext.data.Model-method-save\" class=\"docClass\">Ext.data.Model.save</a> call to update the Model once\nit has been created. We'll assume the creation went successfully and that the server gave this user an ID of 123:</p>\n\n<pre><code>user.save({\n    success: function(user) {\n        user.set('name', 'Khan Noonien Singh');\n\n        user.save(); //PUT /users/123\n    }\n});\n</code></pre>\n\n<p>Now that we're no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting the\nrelevant url for that user. Now let's delete this user, which will use the DELETE method:</p>\n\n<pre><code>    user.destroy(); //DELETE /users/123\n</code></pre>\n\n<p>Finally, when we perform a load of a Model or Store, Rest proxy will use the GET method:</p>\n\n<pre><code>//1. Load via Store\n\n//the Store automatically picks up the Proxy from the User model\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User'\n});\n\nstore.load(); //GET /users\n\n//2. Load directly from the Model\n\n//GET /users/123\n<a href=\"#!/api/Ext.ModelManager-method-getModel\" rel=\"Ext.ModelManager-method-getModel\" class=\"docClass\">Ext.ModelManager.getModel</a>('User').load(123, {\n    success: function(user) {\n        console.log(user.getId()); //outputs 123\n    }\n});\n</code></pre>\n\n<h1>Url generation</h1>\n\n<p>The Rest proxy is able to automatically generate the urls above based on two configuration options - <a href=\"#!/api/Ext.data.proxy.Rest-cfg-appendId\" rel=\"Ext.data.proxy.Rest-cfg-appendId\" class=\"docClass\">appendId</a> and\n<a href=\"#!/api/Ext.data.proxy.Rest-cfg-format\" rel=\"Ext.data.proxy.Rest-cfg-format\" class=\"docClass\">format</a>. If appendId is true (it is by default) then Rest proxy will automatically append the ID of the Model\ninstance in question to the configured url, resulting in the '/users/123' that we saw above.</p>\n\n<p>If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.\nThe Rest proxy will automatically insert a '/' before the ID if one is not already present.</p>\n\n<pre><code>new <a href=\"#!/api/Ext.data.proxy.Rest\" rel=\"Ext.data.proxy.Rest\" class=\"docClass\">Ext.data.proxy.Rest</a>({\n    url: '/users',\n    appendId: true //default\n});\n\n// Collection url: /users\n// Instance url  : /users/123\n</code></pre>\n\n<p>The Rest proxy can also optionally append a format string to the end of any generated url:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.data.proxy.Rest\" rel=\"Ext.data.proxy.Rest\" class=\"docClass\">Ext.data.proxy.Rest</a>({\n    url: '/users',\n    format: 'json'\n});\n\n// Collection url: /users.json\n// Instance url  : /users/123.json\n</code></pre>\n\n<p>If further customization is needed, simply implement the <a href=\"#!/api/Ext.data.proxy.Rest-method-buildUrl\" rel=\"Ext.data.proxy.Rest-method-buildUrl\" class=\"docClass\">buildUrl</a> method and add your custom generated url\nonto the <a href=\"#!/api/Ext.data.Request\" rel=\"Ext.data.Request\" class=\"docClass\">Request</a> object that is passed to buildUrl. See <a href=\"source/Rest.html#Ext-data-proxy-Rest-method-buildUrl\">Rest proxy's implementation</a> for\nan example of how to achieve this.</p>\n\n<p>Note that Rest proxy inherits from <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">AjaxProxy</a>, which already injects all of the sorter,\nfilter, group and paging options into the generated url. See the <a href=\"#!/api/Ext.data.proxy.Ajax\" rel=\"Ext.data.proxy.Ajax\" class=\"docClass\">AjaxProxy docs</a> for more\ndetails.</p>\n"},"SessionStorage":{"!doc":"<p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. If this proxy is used in a browser\nwhere session storage is not supported, the constructor will throw an error. A session storage proxy requires a\nunique ID which is used as a key in which all record data are stored in the session storage object.</p>\n\n<p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the\nattached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.</p>\n\n<p>Proxies are almost always used with a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">store</a>:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>({\n    proxy: {\n        type: 'sessionstorage',\n        id  : 'myProxyKey'\n    }\n});\n</code></pre>\n\n<p>Alternatively you can instantiate the Proxy directly:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.data.proxy.SessionStorage\" rel=\"Ext.data.proxy.SessionStorage\" class=\"docClass\">Ext.data.proxy.SessionStorage</a>({\n    id  : 'myOtherProxyKey'\n});\n</code></pre>\n\n<p>Note that session storage is different to local storage (see <a href=\"#!/api/Ext.data.proxy.LocalStorage\" rel=\"Ext.data.proxy.LocalStorage\" class=\"docClass\">Ext.data.proxy.LocalStorage</a>) - if a browser\nsession is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts\ndon't affect the <a href=\"#!/api/Ext.data.proxy.LocalStorage\" rel=\"Ext.data.proxy.LocalStorage\" class=\"docClass\">Ext.data.proxy.LocalStorage</a> - the data are preserved.</p>\n"}},"reader":{"Array":{"!doc":"<p>Data reader class to create an Array of <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> objects from an Array.\nEach element of that Array represents a row of data fields. The\nfields are pulled into a Record object using as a subscript, the <code>mapping</code> property\nof the field definition if it exists, or the field's ordinal position in the definition.</p>\n\n\n\n\n<p><u>Example code:</u></p>\n\n\n\n\n<pre><code>Employee = <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Employee', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id',\n        {name: 'name', mapping: 1},         // \"mapping\" only needed if an \"id\" field is present which\n        {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.        \n    ]\n});\n\nvar myReader = new <a href=\"#!/api/Ext.data.reader.Array\" rel=\"Ext.data.reader.Array\" class=\"docClass\">Ext.data.reader.Array</a>({\n    model: 'Employee'\n}, Employee);\n</code></pre>\n\n\n\n\n<p>This would consume an Array like this:</p>\n\n\n\n\n<pre><code>[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]\n</code></pre>\n\n"},"Reader":{"!doc":"<p>Readers are used to interpret data to be loaded into a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> instance or a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> - often in response to an AJAX request. In general there is usually no need to create\na Reader instance directly, since a Reader is almost always used together with a <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a>,\nand is configured using the Proxy's <a href=\"#!/api/Ext.data.proxy.Proxy-cfg-reader\" rel=\"Ext.data.proxy.Proxy-cfg-reader\" class=\"docClass\">reader</a> configuration property:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'ajax',\n        url : 'users.json',\n        reader: {\n            type: 'json',\n            root: 'users'\n        }\n    },\n});\n</code></pre>\n\n<p>The above reader is configured to consume a JSON string that looks something like this:</p>\n\n<pre><code>{\n    \"success\": true,\n    \"users\": [\n        { \"name\": \"User 1\" },\n        { \"name\": \"User 2\" }\n    ]\n}\n</code></pre>\n\n<h1>Loading Nested Data</h1>\n\n<p>Readers have the ability to automatically load deeply-nested data objects based on the <a href=\"#!/api/Ext.data.association.Association\" rel=\"Ext.data.association.Association\" class=\"docClass\">associations</a> configured on each Model. Below is an example demonstrating the flexibility of these associations in a\nfictional CRM system which manages a User, their Orders, OrderItems and Products. First we'll define the models:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(\"User\", {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'name'\n    ],\n\n    hasMany: {model: 'Order', name: 'orders'},\n\n    proxy: {\n        type: 'rest',\n        url : 'users.json',\n        reader: {\n            type: 'json',\n            root: 'users'\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(\"Order\", {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'total'\n    ],\n\n    hasMany  : {model: 'OrderItem', name: 'orderItems', associationKey: 'order_items'},\n    belongsTo: 'User'\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(\"OrderItem\", {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'price', 'quantity', 'order_id', 'product_id'\n    ],\n\n    belongsTo: ['Order', {model: 'Product', associationKey: 'product'}]\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(\"Product\", {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        'id', 'name'\n    ],\n\n    hasMany: 'OrderItem'\n});\n</code></pre>\n\n<p>This may be a lot to take in - basically a User has many Orders, each of which is composed of several OrderItems.\nFinally, each OrderItem has a single Product. This allows us to consume data like this:</p>\n\n<pre><code>{\n    \"users\": [\n        {\n            \"id\": 123,\n            \"name\": \"Ed\",\n            \"orders\": [\n                {\n                    \"id\": 50,\n                    \"total\": 100,\n                    \"order_items\": [\n                        {\n                            \"id\"      : 20,\n                            \"price\"   : 40,\n                            \"quantity\": 2,\n                            \"product\" : {\n                                \"id\": 1000,\n                                \"name\": \"MacBook Pro\"\n                            }\n                        },\n                        {\n                            \"id\"      : 21,\n                            \"price\"   : 20,\n                            \"quantity\": 3,\n                            \"product\" : {\n                                \"id\": 1001,\n                                \"name\": \"iPhone\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre>\n\n<p>The JSON response is deeply nested - it returns all Users (in this case just 1 for simplicity's sake), all of the\nOrders for each User (again just 1 in this case), all of the OrderItems for each Order (2 order items in this case),\nand finally the Product associated with each OrderItem. Now we can read the data and use it as follows:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: \"User\"\n});\n\nstore.load({\n    callback: function() {\n        //the user that was loaded\n        var user = store.first();\n\n        console.log(\"Orders for \" + user.get('name') + \":\")\n\n        //iterate over the Orders for each User\n        user.orders().each(function(order) {\n            console.log(\"Order ID: \" + order.getId() + \", which contains items:\");\n\n            //iterate over the OrderItems for each Order\n            order.orderItems().each(function(orderItem) {\n                //we know that the Product data is already loaded, so we can use the synchronous getProduct\n                //usually, we would use the asynchronous version (see <a href=\"#!/api/Ext.data.association.BelongsTo\" rel=\"Ext.data.association.BelongsTo\" class=\"docClass\">Ext.data.association.BelongsTo</a>)\n                var product = orderItem.getProduct();\n\n                console.log(orderItem.get('quantity') + ' orders of ' + product.get('name'));\n            });\n        });\n    }\n});\n</code></pre>\n\n<p>Running the code above results in the following:</p>\n\n<pre><code>Orders for Ed:\nOrder ID: 50, which contains items:\n2 orders of MacBook Pro\n3 orders of iPhone\n</code></pre>\n"},"Json":{"!doc":"<p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually\nhappens as a result of loading a Store - for example we might create something like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email']\n});\n\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'ajax',\n        url : 'users.json',\n        reader: {\n            type: 'json'\n        }\n    }\n});\n</code></pre>\n\n<p>The example above creates a 'User' model. Models are explained in the <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> docs if you're\nnot already familiar with them.</p>\n\n<p>We created the simplest type of JSON Reader possible by simply telling our <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>'s\n<a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a> that we want a JSON Reader. The Store automatically passes the configured model to the\nStore, so it is as if we passed this instead:</p>\n\n<pre><code>reader: {\n    type : 'json',\n    model: 'User'\n}\n</code></pre>\n\n<p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>\n\n<pre><code>[\n    {\n        \"id\": 1,\n        \"name\": \"Ed Spencer\",\n        \"email\": \"ed@sencha.com\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Abe Elias\",\n        \"email\": \"abe@sencha.com\"\n    }\n]\n</code></pre>\n\n<h2>Reading other JSON formats</h2>\n\n<p>If you already have your JSON format defined and it doesn't look quite like what we have above, you can usually\npass JsonReader a couple of configuration options to make it parse your format. For example, we can use the\n<a href=\"#!/api/Ext.data.reader.Json-cfg-root\" rel=\"Ext.data.reader.Json-cfg-root\" class=\"docClass\">root</a> configuration to parse data that comes back like this:</p>\n\n<pre><code>{\n    \"users\": [\n       {\n           \"id\": 1,\n           \"name\": \"Ed Spencer\",\n           \"email\": \"ed@sencha.com\"\n       },\n       {\n           \"id\": 2,\n           \"name\": \"Abe Elias\",\n           \"email\": \"abe@sencha.com\"\n       }\n    ]\n}\n</code></pre>\n\n<p>To parse this we just pass in a <a href=\"#!/api/Ext.data.reader.Json-cfg-root\" rel=\"Ext.data.reader.Json-cfg-root\" class=\"docClass\">root</a> configuration that matches the 'users' above:</p>\n\n<pre><code>reader: {\n    type: 'json',\n    root: 'users'\n}\n</code></pre>\n\n<p>Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata\naround each record inside a nested structure like this:</p>\n\n<pre><code>{\n    \"total\": 122,\n    \"offset\": 0,\n    \"users\": [\n        {\n            \"id\": \"ed-spencer-1\",\n            \"value\": 1,\n            \"user\": {\n                \"id\": 1,\n                \"name\": \"Ed Spencer\",\n                \"email\": \"ed@sencha.com\"\n            }\n        }\n    ]\n}\n</code></pre>\n\n<p>In the case above the record data is nested an additional level inside the \"users\" array as each \"user\" item has\nadditional metadata surrounding it ('id' and 'value' in this case). To parse data out of each \"user\" item in the\nJSON above we need to specify the <a href=\"#!/api/Ext.data.reader.Json-cfg-record\" rel=\"Ext.data.reader.Json-cfg-record\" class=\"docClass\">record</a> configuration like this:</p>\n\n<pre><code>reader: {\n    type  : 'json',\n    root  : 'users',\n    record: 'user'\n}\n</code></pre>\n\n<h2>Response MetaData</h2>\n\n<p>The server can return metadata in its response, in addition to the record data, that describe attributes\nof the data set itself or are used to reconfigure the Reader. To pass metadata in the response you simply\nadd a <code>metaData</code> attribute to the root of the response data. The metaData attribute can contain anything,\nbut supports a specific set of properties that are handled by the Reader if they are present:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.reader.Json-cfg-root\" rel=\"Ext.data.reader.Json-cfg-root\" class=\"docClass\">root</a>: the property name of the root response node containing the record data</li>\n<li><a href=\"#!/api/Ext.data.reader.Json-cfg-idProperty\" rel=\"Ext.data.reader.Json-cfg-idProperty\" class=\"docClass\">idProperty</a>: property name for the primary key field of the data</li>\n<li><a href=\"#!/api/Ext.data.reader.Json-cfg-totalProperty\" rel=\"Ext.data.reader.Json-cfg-totalProperty\" class=\"docClass\">totalProperty</a>: property name for the total number of records in the data</li>\n<li><a href=\"#!/api/Ext.data.reader.Json-cfg-successProperty\" rel=\"Ext.data.reader.Json-cfg-successProperty\" class=\"docClass\">successProperty</a>: property name for the success status of the response</li>\n<li><a href=\"#!/api/Ext.data.reader.Json-cfg-messageProperty\" rel=\"Ext.data.reader.Json-cfg-messageProperty\" class=\"docClass\">messageProperty</a>: property name for an optional response message</li>\n<li><a href=\"#!/api/Ext.data.Model-cfg-fields\" rel=\"Ext.data.Model-cfg-fields\" class=\"docClass\">fields</a>: Config used to reconfigure the Model's fields before converting the\nresponse data into records</li>\n</ul>\n\n\n<p>An initial Reader configuration containing all of these properties might look like this (\"fields\" would be\nincluded in the Model definition, not shown):</p>\n\n<pre><code>reader: {\n    type : 'json',\n    root : 'root',\n    idProperty     : 'id',\n    totalProperty  : 'total',\n    successProperty: 'success',\n    messageProperty: 'message'\n}\n</code></pre>\n\n<p>If you were to pass a response object containing attributes different from those initially defined above, you could\nuse the <code>metaData</code> attribute to reconifgure the Reader on the fly. For example:</p>\n\n<pre><code>{\n    \"count\": 1,\n    \"ok\": true,\n    \"msg\": \"Users found\",\n    \"users\": [{\n        \"userId\": 123,\n        \"name\": \"Ed Spencer\",\n        \"email\": \"ed@sencha.com\"\n    }],\n    \"metaData\": {\n        \"root\": \"users\",\n        \"idProperty\": 'userId',\n        \"totalProperty\": 'count',\n        \"successProperty\": 'ok',\n        \"messageProperty\": 'msg'\n    }\n}\n</code></pre>\n\n<p>You can also place any other arbitrary data you need into the <code>metaData</code> attribute which will be ignored by the Reader,\nbut will be accessible via the Reader's <a href=\"#!/api/Ext.data.reader.Json-property-metaData\" rel=\"Ext.data.reader.Json-property-metaData\" class=\"docClass\">metaData</a> property (which is also passed to listeners via the Proxy's\n<a href=\"#!/api/Ext.data.proxy.Proxy-event-metachange\" rel=\"Ext.data.proxy.Proxy-event-metachange\" class=\"docClass\">metachange</a> event (also relayed by the <a href=\"#!/api/Ext.data.AbstractStore-event-metachange\" rel=\"Ext.data.AbstractStore-event-metachange\" class=\"docClass\">store</a>). Application code can then process the passed metadata in any way it chooses.</p>\n\n<p>A simple example for how this can be used would be customizing the fields for a Model that is bound to a grid. By passing\nthe <code>fields</code> property the Model will be automatically updated by the Reader internally, but that change will not be\nreflected automatically in the grid unless you also update the column configuration. You could do this manually, or you\ncould simply pass a standard grid <a href=\"#!/api/Ext.panel.Table-cfg-columns\" rel=\"Ext.panel.Table-cfg-columns\" class=\"docClass\">column</a> config object as part of the <code>metaData</code> attribute\nand then pass that along to the grid. Here's a very simple example for how that could be accomplished:</p>\n\n<pre><code>// response format:\n{\n    ...\n    \"metaData\": {\n        \"fields\": [\n            { \"name\": \"userId\", \"type\": \"int\" },\n            { \"name\": \"name\", \"type\": \"string\" },\n            { \"name\": \"birthday\", \"type\": \"date\", \"dateFormat\": \"Y-j-m\" },\n        ],\n        \"columns\": [\n            { \"text\": \"User ID\", \"dataIndex\": \"userId\", \"width\": 40 },\n            { \"text\": \"User Name\", \"dataIndex\": \"name\", \"flex\": 1 },\n            { \"text\": \"Birthday\", \"dataIndex\": \"birthday\", \"flex\": 1, \"format\": 'Y-j-m', \"xtype\": \"datecolumn\" }\n        ]\n    }\n}\n</code></pre>\n\n<p>The Reader will automatically read the meta fields config and rebuild the Model based on the new fields, but to handle\nthe new column configuration you would need to handle the metadata within the application code. This is done simply enough\nby handling the metachange event on either the store or the proxy, e.g.:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    ...\n    listeners: {\n        'metachange': function(store, meta) {\n            myGrid.reconfigure(store, meta.columns);\n        }\n    }\n});\n</code></pre>\n"},"Xml":{"!doc":"<p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually happens as\na result of loading a Store - for example we might create something like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['id', 'name', 'email']\n});\n\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'User',\n    proxy: {\n        type: 'ajax',\n        url : 'users.xml',\n        reader: {\n            type: 'xml',\n            record: 'user',\n            root: 'users'\n        }\n    }\n});\n</code></pre>\n\n<p>The example above creates a 'User' model. Models are explained in the <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> docs if you're not\nalready familiar with them.</p>\n\n<p>We created the simplest type of XML Reader possible by simply telling our <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>'s <a href=\"#!/api/Ext.data.proxy.Proxy\" rel=\"Ext.data.proxy.Proxy\" class=\"docClass\">Proxy</a> that we want a XML Reader. The Store automatically passes the configured model to the\nStore, so it is as if we passed this instead:</p>\n\n<pre><code>reader: {\n    type : 'xml',\n    model: 'User',\n    record: 'user',\n    root: 'users'\n}\n</code></pre>\n\n<p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;users&gt;\n    &lt;user&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;name&gt;Ed Spencer&lt;/name&gt;\n        &lt;email&gt;ed@sencha.com&lt;/email&gt;\n    &lt;/user&gt;\n    &lt;user&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;name&gt;Abe Elias&lt;/name&gt;\n        &lt;email&gt;abe@sencha.com&lt;/email&gt;\n    &lt;/user&gt;\n&lt;/users&gt;\n</code></pre>\n\n<p>First off there's <a href=\"#!/api/Ext.data.reader.Xml-cfg-root\" rel=\"Ext.data.reader.Xml-cfg-root\" class=\"docClass\">root</a> option to define the root node <code>&lt;users&gt;</code> (there should be only one in a well-formed\nXML document). Then the XML Reader uses the configured <a href=\"#!/api/Ext.data.reader.Xml-cfg-record\" rel=\"Ext.data.reader.Xml-cfg-record\" class=\"docClass\">record</a> option to pull out the data for each record -\nin this case we set record to 'user', so each <code>&lt;user&gt;</code> above will be converted into a User model.</p>\n\n<p>Note that XmlReader doesn't care whether your <a href=\"#!/api/Ext.data.reader.Xml-cfg-root\" rel=\"Ext.data.reader.Xml-cfg-root\" class=\"docClass\">root</a> and <a href=\"#!/api/Ext.data.reader.Xml-cfg-record\" rel=\"Ext.data.reader.Xml-cfg-record\" class=\"docClass\">record</a> elements are nested deep inside a\nlarger structure, so a response like this will still work:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;deeply&gt;\n    &lt;nested&gt;\n        &lt;xml&gt;\n            &lt;users&gt;\n                &lt;user&gt;\n                    &lt;id&gt;1&lt;/id&gt;\n                    &lt;name&gt;Ed Spencer&lt;/name&gt;\n                    &lt;email&gt;ed@sencha.com&lt;/email&gt;\n                &lt;/user&gt;\n                &lt;user&gt;\n                    &lt;id&gt;2&lt;/id&gt;\n                    &lt;name&gt;Abe Elias&lt;/name&gt;\n                    &lt;email&gt;abe@sencha.com&lt;/email&gt;\n                &lt;/user&gt;\n            &lt;/users&gt;\n        &lt;/xml&gt;\n    &lt;/nested&gt;\n&lt;/deeply&gt;\n</code></pre>\n\n<p>If this Reader is being used by a <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">TreeStore</a> to read tree-structured data in which records\nare nested as descendant nodes of other records, then this lenient behaviour must be overridden by using a more specific\nchild node selector as your <a href=\"#!/api/Ext.data.reader.Xml-cfg-record\" rel=\"Ext.data.reader.Xml-cfg-record\" class=\"docClass\">record</a> selector which will not select all descendants, such as:</p>\n\n<p>   record: '>user'</p>\n\n<h1>Response metadata</h1>\n\n<p>The server can return additional data in its response, such as the <a href=\"#!/api/Ext.data.reader.Xml-cfg-totalProperty\" rel=\"Ext.data.reader.Xml-cfg-totalProperty\" class=\"docClass\">total number of records</a> and\nthe <a href=\"#!/api/Ext.data.reader.Xml-cfg-successProperty\" rel=\"Ext.data.reader.Xml-cfg-successProperty\" class=\"docClass\">success status of the response</a>. These are typically included in the XML response like\nthis:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;users&gt;\n    &lt;total&gt;100&lt;/total&gt;\n    &lt;success&gt;true&lt;/success&gt;\n    &lt;user&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;name&gt;Ed Spencer&lt;/name&gt;\n        &lt;email&gt;ed@sencha.com&lt;/email&gt;\n    &lt;/user&gt;\n    &lt;user&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;name&gt;Abe Elias&lt;/name&gt;\n        &lt;email&gt;abe@sencha.com&lt;/email&gt;\n    &lt;/user&gt;\n&lt;/users&gt;\n</code></pre>\n\n<p>If these properties are present in the XML response they can be parsed out by the XmlReader and used by the Store\nthat loaded it. We can set up the names of these properties by specifying a final pair of configuration options:</p>\n\n<pre><code>reader: {\n    type: 'xml',\n    root: 'users',\n    totalProperty  : 'total',\n    successProperty: 'success'\n}\n</code></pre>\n\n<p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report an\nerror or if it needs to indicate that there is a lot of data available of which only a subset is currently being\nreturned.</p>\n\n<h1>Response format</h1>\n\n<p><strong>Note:</strong> in order for the browser to parse a returned XML document, the Content-Type header in the HTTP response\nmust be set to \"text/xml\" or \"application/xml\". This is very important - the XmlReader will not work correctly\notherwise.</p>\n"}},"Request":{"!doc":"<p>Simple class that represents a Request that will be made by any <a href=\"#!/api/Ext.data.proxy.Server\" rel=\"Ext.data.proxy.Server\" class=\"docClass\">Ext.data.proxy.Server</a> subclass.\nAll this class does is standardize the representation of a Request as used by any ServerProxy subclass,\nit does not contain any actual logic or perform the request itself.</p>\n"},"ResultSet":{"!doc":"<p>Simple wrapper class that represents a set of records returned by a Proxy.</p>\n"},"SequentialIdGenerator":{"!doc":"<p>This class is a sequential id generator. A simple use of this class would be like so:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModel', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'sequential'\n});\n// assign id's of 1, 2, 3, etc.\n</code></pre>\n\n<p>An example of a configured generator would be:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModel', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: {\n        type: 'sequential',\n        prefix: 'ID_',\n        seed: 1000\n    }\n});\n// assign id's of ID_1000, ID_1001, ID_1002, etc.\n</code></pre>\n"},"SortTypes":{"!doc":"<p>This class defines a series of static methods that are used on a\n<a href=\"#!/api/Ext.data.Field\" rel=\"Ext.data.Field\" class=\"docClass\">Ext.data.Field</a> for performing sorting. The methods cast the\nunderlying values into a data type that is appropriate for sorting on\nthat particular field.  If a <a href=\"#!/api/Ext.data.Field-cfg-type\" rel=\"Ext.data.Field-cfg-type\" class=\"docClass\">Ext.data.Field.type</a> is specified,\nthe sortType will be set to a sane default if the sortType is not\nexplicitly defined on the field. The sortType will make any necessary\nmodifications to the value and return it.</p>\n\n<ul>\n<li><b>asText</b> - Removes any tags and converts the value to a string</li>\n<li><b>asUCText</b> - Removes any tags and converts the value to an uppercase string</li>\n<li><b>asUCText</b> - Converts the value to an uppercase string</li>\n<li><b>asDate</b> - Converts the value into Unix epoch time</li>\n<li><b>asFloat</b> - Converts the value to a floating point number</li>\n<li><b>asInt</b> - Converts the value to an integer number</li>\n</ul>\n\n\n<p>\nIt is also possible to create a custom sortType that can be used throughout\nan application.\n<pre><code><a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply</a>(<a href=\"#!/api/Ext.data.SortTypes\" rel=\"Ext.data.SortTypes\" class=\"docClass\">Ext.data.SortTypes</a>, {\n    asPerson: function(person){\n        // expects an object with a first and last name property\n        return person.lastName.toUpperCase() + person.firstName.toLowerCase();\n    }    \n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Employee', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [{\n        name: 'person',\n        sortType: 'asPerson'\n    }, {\n        name: 'salary',\n        type: 'float' // sortType set to asFloat\n    }]\n});\n</code></pre>\n</p>\n\n"},"StoreManager":{"!doc":"<p>Contains a collection of all stores that are created that have an identifier. An identifier can be assigned by\nsetting the <a href=\"#!/api/Ext.data.AbstractStore-cfg-storeId\" rel=\"Ext.data.AbstractStore-cfg-storeId\" class=\"docClass\">storeId</a> property. When a store is in the StoreManager, it can be\nreferred to via it's identifier:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'SomeModel',\n    storeId: 'myStore'\n});\n\nvar store = <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('myStore');\n</code></pre>\n\n<p>Also note that the <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">lookup</a> method is aliased to <a href=\"#!/api/Ext-method-getStore\" rel=\"Ext-method-getStore\" class=\"docClass\">Ext.getStore</a> for convenience.</p>\n\n<p>If a store is registered with the StoreManager, you can also refer to the store by it's identifier when registering\nit with any Component that consumes data from a store:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'SomeModel',\n    storeId: 'myStore'\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>', {\n    store: 'myStore',\n    // other configuration here\n});\n</code></pre>\n"},"Tree":{"!doc":"<p>This class is used as a container for a series of nodes. The nodes themselves maintain\nthe relationship between parent/child. The tree itself acts as a manager. It gives functionality\nto retrieve a node by its identifier: <a href=\"#!/api/Ext.data.Tree-method-getNodeById\" rel=\"Ext.data.Tree-method-getNodeById\" class=\"docClass\">getNodeById</a>.</p>\n\n<p>The tree also relays events from any of it's child nodes, allowing them to be handled in a\ncentralized fashion. In general this class is not used directly, rather used internally\nby other parts of the framework.</p>\n"},"TreeModel":{"!doc":"<p>This class can be used as a base class from which to derived Models used in Trees.</p>\n"},"TreeStore":{"!doc":"<p>The TreeStore is a store implementation that is backed by by an <a href=\"#!/api/Ext.data.Tree\" rel=\"Ext.data.Tree\" class=\"docClass\">Ext.data.Tree</a>.\nIt provides convenience methods for loading nodes, as well as the ability to use\nthe hierarchical tree structure combined with a store. This class is generally used\nin conjunction with <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>. This class also relays many events from\nthe Tree for convenience.</p>\n\n<h1>Using Models</h1>\n\n<p>If no Model is specified, an implicit model will be created that implements <a href=\"#!/api/Ext.data.NodeInterface\" rel=\"Ext.data.NodeInterface\" class=\"docClass\">Ext.data.NodeInterface</a>.\nThe standard Tree fields will also be copied onto the Model for maintaining their state. These fields are listed\nin the <a href=\"#!/api/Ext.data.NodeInterface\" rel=\"Ext.data.NodeInterface\" class=\"docClass\">Ext.data.NodeInterface</a> documentation.</p>\n\n<h1>Reading Nested Data</h1>\n\n<p>For the tree to read nested data, the <a href=\"#!/api/Ext.data.reader.Reader\" rel=\"Ext.data.reader.Reader\" class=\"docClass\">Ext.data.reader.Reader</a> must be configured with a root property,\nso the reader can find nested data for each node (if a root is not specified, it will default to\n'children'). This will tell the tree to look for any nested tree nodes by the same keyword, i.e., 'children'.\nIf a root is specified in the config make sure that any nested nodes with children have the same name.\nNote that setting <a href=\"#!/api/Ext.data.TreeStore-cfg-defaultRootProperty\" rel=\"Ext.data.TreeStore-cfg-defaultRootProperty\" class=\"docClass\">defaultRootProperty</a> accomplishes the same thing.</p>\n"},"Types":{"!doc":"<p>This is a static class containing the system-supplied data types\nwhich may be given to a <a href=\"#!/api/Ext.data.Field\" rel=\"Ext.data.Field\" class=\"docClass\">Field</a>.</p>\n\n<p>The properties in this class are used as type indicators in the\n<a href=\"#!/api/Ext.data.Field\" rel=\"Ext.data.Field\" class=\"docClass\">Field</a> class, so to test whether a Field is\nof a certain type, compare the <a href=\"#!/api/Ext.data.Field-cfg-type\" rel=\"Ext.data.Field-cfg-type\" class=\"docClass\">type</a>\nproperty against properties of this class.</p>\n\n<p>Developers may add their own application-specific data types to\nthis class. Definition names must be UPPERCASE. Each type\ndefinition must contain three properties:</p>\n\n<ul>\n<li><p><code>convert</code> : Function<br>\nA function to convert raw data values from a data block into\nthe data to be stored in the Field. The function is passed the\ncollowing parameters:</p>\n\n<ul>\n<li><strong>v</strong> : Mixed<br>\nThe data value as read by the Reader, if undefined will use\nthe configured <a href=\"#!/api/Ext.data.Field-cfg-defaultValue\" rel=\"Ext.data.Field-cfg-defaultValue\" class=\"docClass\">defaultValue</a>.</li>\n<li><strong>rec</strong> : Mixed<br>\nThe data object containing the row as read by the Reader.\nDepending on the Reader type, this could be an Array\n(<a href=\"#!/api/Ext.data.reader.Array\" rel=\"Ext.data.reader.Array\" class=\"docClass\">ArrayReader</a>), an object\n(<a href=\"#!/api/Ext.data.reader.Json\" rel=\"Ext.data.reader.Json\" class=\"docClass\">JsonReader</a>), or an XML element.</li>\n</ul>\n</li>\n<li><p><code>sortType</code> : Function<br>\nA function to convert the stored data into comparable form, as\ndefined by <a href=\"#!/api/Ext.data.SortTypes\" rel=\"Ext.data.SortTypes\" class=\"docClass\">Ext.data.SortTypes</a>.</p></li>\n<li><p><code>type</code> : String<br>\nA textual data type name.</p></li>\n</ul>\n\n\n<p>For example, to create a VELatLong field (See the Microsoft Bing\nMapping API) containing the latitude/longitude value of a datapoint\non a map from a JsonReader data block</p>\n\n<p>which contained the properties <code>lat</code> and <code>long</code>, you would define a\nnew data type like this:</p>\n\n<pre><code>// Add a new Field data type which stores a VELatLong object in the Record.\nExt.data.Types.VELATLONG = {\n    convert: function(v, data) {\n        return new VELatLong(data.lat, data.long);\n    },\n    sortType: function(v) {\n        return v.Latitude;  // When sorting, order by latitude\n    },\n    type: 'VELatLong'\n};\n</code></pre>\n\n<p>Then, when declaring a Model, use:</p>\n\n<pre><code>var types = <a href=\"#!/api/Ext.data.Types\" rel=\"Ext.data.Types\" class=\"docClass\">Ext.data.Types</a>; // allow shorthand type access\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Unit',\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name: 'unitName', mapping: 'UnitName' },\n        { name: 'curSpeed', mapping: 'CurSpeed', type: types.INT },\n        { name: 'latitude', mapping: 'lat', type: types.FLOAT },\n        { name: 'longitude', mapping: 'long', type: types.FLOAT },\n        { name: 'position', type: types.VELATLONG }\n    ]\n});\n</code></pre>\n"},"UuidGenerator":{"!doc":"<p>This class generates UUID's according to RFC 4122. This class has a default id property.\nThis means that a single instance is shared unless the id property is overridden. Thus,\ntwo <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> instances configured like the following share one generator:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelX', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'uuid'\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.data.MyModelY', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    idgen: 'uuid'\n});\n</code></pre>\n\n<p>This allows all models using this class to share a commonly configured instance.</p>\n\n<h1>Using Version 1 (\"Sequential\") UUID's</h1>\n\n<p>If a server can provide a proper timestamp and a \"cryptographic quality random number\"\n(as described in RFC 4122), the shared instance can be configured as follows:</p>\n\n<pre><code><a href=\"#!/api/Ext.data.IdGenerator-static-method-get\" rel=\"Ext.data.IdGenerator-static-method-get\" class=\"docClass\">Ext.data.IdGenerator.get</a>('uuid').reconfigure({\n    version: 1,\n    clockSeq: clock, // 14 random bits\n    salt: salt,      // 48 secure random bits (the Node field)\n    timestamp: ts    // timestamp per Section 4.1.4\n});\n\n// or these values can be split into 32-bit chunks:\n\n<a href=\"#!/api/Ext.data.IdGenerator-static-method-get\" rel=\"Ext.data.IdGenerator-static-method-get\" class=\"docClass\">Ext.data.IdGenerator.get</a>('uuid').reconfigure({\n    version: 1,\n    clockSeq: clock,\n    salt: { lo: saltLow32, hi: saltHigh32 },\n    timestamp: { lo: timestampLow32, hi: timestamptHigh32 }\n});\n</code></pre>\n\n<p>This approach improves the generator's uniqueness by providing a valid timestamp and\nhigher quality random data. Version 1 UUID's should not be used unless this information\ncan be provided by a server and care should be taken to avoid caching of this data.</p>\n\n<p>See http://www.ietf.org/rfc/rfc4122.txt for details.</p>\n"},"validations":{"!doc":"<p>This singleton contains a set of validation functions that can be used to validate any type of data. They are most\noften used in <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Models</a>, where they are automatically set up and executed.</p>\n"},"writer":{"Json":{"!doc":"<p>This class is used to write <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> data to the server in a JSON format.\nThe <a href=\"#!/api/Ext.data.writer.Json-cfg-allowSingle\" rel=\"Ext.data.writer.Json-cfg-allowSingle\" class=\"docClass\">allowSingle</a> configuration can be set to false to force the records to always be\nencoded in an array, even if there is only a single record being sent.</p>\n"},"Writer":{"!doc":"<p>Base Writer class used by most subclasses of <a href=\"#!/api/Ext.data.proxy.Server\" rel=\"Ext.data.proxy.Server\" class=\"docClass\">Ext.data.proxy.Server</a>. This class is responsible for taking a\nset of <a href=\"#!/api/Ext.data.Operation\" rel=\"Ext.data.Operation\" class=\"docClass\">Ext.data.Operation</a> objects and a <a href=\"#!/api/Ext.data.Request\" rel=\"Ext.data.Request\" class=\"docClass\">Ext.data.Request</a> object and modifying that request based on\nthe Operations.</p>\n\n<p>For example a <a href=\"#!/api/Ext.data.writer.Json\" rel=\"Ext.data.writer.Json\" class=\"docClass\">Ext.data.writer.Json</a> would format the Operations and their <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> instances based on\nthe config options passed to the JsonWriter's constructor.</p>\n\n<p>Writers are not needed for any kind of local storage - whether via a <a href=\"#!/api/Ext.data.proxy.WebStorage\" rel=\"Ext.data.proxy.WebStorage\" class=\"docClass\">Web Storage\nproxy</a> (see <a href=\"#!/api/Ext.data.proxy.LocalStorage\" rel=\"Ext.data.proxy.LocalStorage\" class=\"docClass\">localStorage</a> and <a href=\"#!/api/Ext.data.proxy.SessionStorage\" rel=\"Ext.data.proxy.SessionStorage\" class=\"docClass\">sessionStorage</a>) or just in memory via a <a href=\"#!/api/Ext.data.proxy.Memory\" rel=\"Ext.data.proxy.Memory\" class=\"docClass\">MemoryProxy</a>.</p>\n\n<h1>Dates</h1>\n\n<p>Before sending dates to the server, they can be formatted using one of the <a href=\"#!/api/Ext.Date\" rel=\"Ext.Date\" class=\"docClass\">Ext.Date</a> formats.\nThese formats can be specified both on the field and the writer itself. In terms of precedence, from highest to lowest:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.writer.Writer-cfg-dateFormat\" rel=\"Ext.data.writer.Writer-cfg-dateFormat\" class=\"docClass\">Writer.dateFormat</a> The writer dateFormat will always have the highest precedence</li>\n<li><a href=\"#!/api/Ext.data.Field-cfg-dateWriteFormat\" rel=\"Ext.data.Field-cfg-dateWriteFormat\" class=\"docClass\">Ext.data.Field.dateWriteFormat</a> The dateWriteFormat will be used if no format is specified on the writer</li>\n<li><a href=\"#!/api/Ext.data.Field-cfg-dateFormat\" rel=\"Ext.data.Field-cfg-dateFormat\" class=\"docClass\">Field.dateFormat</a>/<a href=\"#!/api/Ext.data.Field-cfg-dateReadFormat\" rel=\"Ext.data.Field-cfg-dateReadFormat\" class=\"docClass\">Field.dateReadFormat</a>\nFinally, if none of the above options are specified the field will be formatted using the format that was used to read the date from the server.</li>\n</ul>\n\n"},"Xml":{"!doc":"<p>This class is used to write <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> data to the server in an XML format.\nThe <a href=\"#!/api/Ext.data.writer.Xml-cfg-documentRoot\" rel=\"Ext.data.writer.Xml-cfg-documentRoot\" class=\"docClass\">documentRoot</a> property is used to specify the root element in the XML document.\nThe <a href=\"#!/api/Ext.data.writer.Xml-cfg-record\" rel=\"Ext.data.writer.Xml-cfg-record\" class=\"docClass\">record</a> option is used to specify the element name for each record that will make\nup the XML document.</p>\n"}},"XmlStore":{"!doc":"<p>Small helper class to make creating <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>s from XML data easier.\nA XmlStore will be automatically configured with a <a href=\"#!/api/Ext.data.reader.Xml\" rel=\"Ext.data.reader.Xml\" class=\"docClass\">Ext.data.reader.Xml</a>.</p>\n\n\n<p>A store configuration would be something like:\n<pre><code>var store = new <a href=\"#!/api/Ext.data.XmlStore\" rel=\"Ext.data.XmlStore\" class=\"docClass\">Ext.data.XmlStore</a>({\n    // store configs\n    storeId: 'myStore',\n    url: 'sheldon.xml', // automatically configures a HttpProxy\n    // reader configs\n    record: 'Item', // records will have an \"Item\" tag\n    idPath: 'ASIN',\n    totalRecords: '@TotalResults'\n    fields: [\n        // set up the fields mapping into the xml doc\n        // The first needs mapping, the others are very basic\n        {name: 'Author', mapping: 'ItemAttributes > Author'},\n        'Title', 'Manufacturer', 'ProductGroup'\n    ]\n});\n</code></pre></p>\n\n\n<p>This store is configured to consume a returned object of the form:\n<pre><code>&#60?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#60ItemSearchResponse xmlns=\"http://webservices.amazon.com/AWSECommerceService/2009-05-15\">\n    &#60Items>\n        &#60Request>\n            &#60IsValid>True&#60/IsValid>\n            &#60ItemSearchRequest>\n                &#60Author>Sidney Sheldon&#60/Author>\n                &#60SearchIndex>Books&#60/SearchIndex>\n            &#60/ItemSearchRequest>\n        &#60/Request>\n        &#60TotalResults>203&#60/TotalResults>\n        &#60TotalPages>21&#60/TotalPages>\n        &#60Item>\n            &#60ASIN>0446355453&#60/ASIN>\n            &#60DetailPageURL>\n                http://www.amazon.com/\n            &#60/DetailPageURL>\n            &#60ItemAttributes>\n                &#60Author>Sidney Sheldon&#60/Author>\n                &#60Manufacturer>Warner Books&#60/Manufacturer>\n                &#60ProductGroup>Book&#60/ProductGroup>\n                &#60Title>Master of the Game&#60/Title>\n            &#60/ItemAttributes>\n        &#60/Item>\n    &#60/Items>\n&#60/ItemSearchResponse>\n</code></pre>\nAn object literal of this form could also be used as the <a href=\"#!/api/Ext.data.XmlStore-cfg-data\" rel=\"Ext.data.XmlStore-cfg-data\" class=\"docClass\">data</a> config option.</p>\n\n\n<p><b>Note:</b> This class accepts all of the configuration options of\n<b><a href=\"#!/api/Ext.data.reader.Xml\" rel=\"Ext.data.reader.Xml\" class=\"docClass\">XmlReader</a></b>.</p>\n\n"}},"app":{"Application":{"!doc":"<p>Represents an Ext JS 4 application, which is typically a single page app using a <a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Viewport</a>.\nA typical <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a> might look like this:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'MyApp',\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Ext.container.Viewport</a>', {\n            items: {\n                html: 'My App'\n            }\n        });\n    }\n});\n</code></pre>\n\n<p>This does several things. First it creates a global variable called 'MyApp' - all of your Application's classes (such\nas its Models, Views and Controllers) will reside under this single namespace, which drastically lowers the chances\nof colliding global variables. The MyApp global will also have a getApplication method to get a reference to\nthe current application:</p>\n\n<pre><code>var app = MyApp.getApplication();\n</code></pre>\n\n<p>When the page is ready and all of your JavaScript has loaded, your Application's <a href=\"#!/api/Ext.app.Application-method-launch\" rel=\"Ext.app.Application-method-launch\" class=\"docClass\">launch</a> function is called,\nat which time you can run the code that starts your app. Usually this consists of creating a Viewport, as we do in\nthe example above.</p>\n\n<h1>Telling Application about the rest of the app</h1>\n\n<p>Because an <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a> represents an entire app, we should tell it about the other parts of the app - namely\nthe Models, Views and Controllers that are bundled with the application. Let's say we have a blog management app; we\nmight have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.\nHere's how we'd tell our Application about all these things:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Blog',\n    models: ['Post', 'Comment'],\n    controllers: ['Posts', 'Comments'],\n\n    launch: function() {\n        ...\n    }\n});\n</code></pre>\n\n<p>Note that we didn't actually list the Views directly in the Application itself. This is because Views are managed by\nControllers, so it makes sense to keep those dependencies there. The Application will load each of the specified\nControllers using the pathing conventions laid out in the <a href=\"#/guide/application_architecture\">application architecture guide</a> - in this case\nexpecting the controllers to reside in app/controller/Posts.js and app/controller/Comments.js. In turn, each\nController simply needs to list the Views it uses and they will be automatically loaded. Here's how our Posts\ncontroller like be defined:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.controller.Posts', {\n    extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n    views: ['posts.List', 'posts.Edit'],\n\n    //the rest of the Controller here\n});\n</code></pre>\n\n<p>Because we told our Application about our Models and Controllers, and our Controllers about their Views, Ext JS will\nautomatically load all of our app files for us. This means we don't have to manually add script tags into our html\nfiles whenever we add a new class, but more importantly it enables us to create a minimized build of our entire\napplication using Sencha Cmd.</p>\n\n<h1>Deriving from <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a></h1>\n\n<p>Typically, applications do not derive directly from <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>. Rather, the\nconfiguration passed to <code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a></code> mimics what you might do in a derived class.\nIn some cases, however, it can be desirable to share logic by using a derived class\nfrom <code><a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a></code>.</p>\n\n<p>Derivation works as you would expect, but using the derived class should still be the\njob of the <code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a></code> method.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.app.Application', {\n    extend: '<a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>',\n    name: 'MyApp',\n    ...\n});\n\n<a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>('MyApp.app.Application');\n</code></pre>\n\n<p>For more information about writing Ext JS 4 applications, please see the <a href=\"#/guide/application_architecture\">application architecture guide</a>.</p>\n"},"Controller":{"!doc":"<p>Controllers are the glue that binds an application together. All they really do is listen for events (usually from\nviews) and take some action. Here's how we might create a Controller to manage Users:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     init: function() {\n         console.log('Initialized Users! This happens before ' +\n                     'the Application launch() function is called');\n     }\n });\n</code></pre>\n\n<p>The init function is a special method that is called when your application boots. It is called before the\n<a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Application</a>'s launch function is executed so gives a hook point to run any code before\nyour Viewport is created.</p>\n\n<p>The init function is a great place to set up how your controller interacts with the view, and is usually used in\nconjunction with another Controller function - <a href=\"#!/api/Ext.app.Controller-method-control\" rel=\"Ext.app.Controller-method-control\" class=\"docClass\">control</a>. The control function\nmakes it easy to listen to events on your view classes and take some action with a handler function. Let's update\nour Users controller to tell us when the panel is rendered:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     init: function() {\n         this.control({\n             'viewport &gt; panel': {\n                 render: this.onPanelRendered\n             }\n         });\n     },\n\n     onPanelRendered: function() {\n         console.log('The panel was rendered');\n     }\n });\n</code></pre>\n\n<p>We've updated the init function to use <a href=\"#!/api/Ext.app.Controller-method-control\" rel=\"Ext.app.Controller-method-control\" class=\"docClass\">control method</a> to set up listeners on views\nin our application. The control method uses the ComponentQuery engine to quickly and easily get references to components\non the page. If you are not familiar with ComponentQuery yet, be sure to check out the\n<a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">documentation</a>. In brief though, it allows us to pass a CSS-like selector that will find\nevery matching component on the page.</p>\n\n<p>In our init function above we supplied 'viewport > panel', which translates to \"find me every Panel that is a direct\nchild of a Viewport\". We then supplied an object that maps event names (just 'render' in this case) to handler\nfunctions. The overall effect is that whenever any component that matches our selector fires a 'render' event, our\nonPanelRendered function is called.</p>\n\n<h2>Event domains</h2>\n\n<p>In Ext JS 4.2, we introduced the concept of event domains. In terms of MVC, an event domain\nis one or more base classes that fire events to which a Controller wants to listen. Besides\nComponent event domain that encompass <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>-descended Views, Controllers now\ncan listen to events from data Stores, <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> Providers, other Controllers, and <a href=\"#!/api/Ext-property-globalEvents\" rel=\"Ext-property-globalEvents\" class=\"docClass\">Ext.globalEvents</a>.\nThis feature provides a way to communicate between parts of the whole application without the need\nto bind controllers together tightly, and allows to develop and test application parts in isolation.</p>\n\n<p>See usage examples in <a href=\"#!/api/Ext.app.Controller-method-listen\" rel=\"Ext.app.Controller-method-listen\" class=\"docClass\">listen</a> method documentation.</p>\n\n<h2>Using refs</h2>\n\n<p>One of the most useful parts of Controllers is the ref system. These use the <a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">Ext.ComponentQuery</a> to\nmake it really easy to get references to Views on your page. Let's look at an example of this now:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     refs: [{\n         ref: 'list',\n         selector: 'grid'\n     }],\n\n     init: function() {\n         this.control({\n             'button': {\n                 click: this.refreshGrid\n             }\n         });\n     },\n\n     refreshGrid: function() {\n         this.getList().store.load();\n     }\n });\n</code></pre>\n\n<p>This example assumes the existence of a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> on the page, which contains a single button to\nrefresh the Grid when clicked. In our refs array, we set up a reference to the grid. There are two parts to this -\nthe 'selector', which is a <a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">ComponentQuery</a> selector which finds any grid on the page and\nassigns it to the reference 'list'.</p>\n\n<p>By giving the reference a name, we get a number of things for free. The first is the getList function that we use in\nthe refreshGrid method above. This is generated automatically by the Controller based on the name of our ref, which\nwas capitalized and prepended with get to go from 'list' to 'getList'.</p>\n\n<p>The way this works is that the first time getList is called by your code, the ComponentQuery selector is run and the\nfirst component that matches the selector ('grid' in this case) will be returned. All future calls to getList will\nuse a cached reference to that grid. Usually it is advised to use a specific ComponentQuery selector that will only\nmatch a single View in your application (in the case above our selector will match any grid on the page).</p>\n\n<p>Bringing it all together, our init function is called when the application boots, at which time we call this.control\nto listen to any click on a <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">button</a> and call our refreshGrid function (again, this will\nmatch any button on the page so we advise a more specific selector than just 'button', but have left it this way for\nsimplicity). When the button is clicked we use out getList function to refresh the grid.</p>\n\n<p>You can create any number of refs and control any number of components this way, simply adding more functions to\nyour Controller as you go. For an example of real-world usage of Controllers see the Feed Viewer example in the\nexamples/app/feed-viewer folder in the SDK download.</p>\n\n<h2>Generated getter methods</h2>\n\n<p>Refs aren't the only thing that generate convenient getter methods. Controllers often have to deal with Models and\nStores so the framework offers a couple of easy ways to get access to those too. Let's look at another example:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     models: ['User'],\n     stores: ['AllUsers', 'AdminUsers'],\n\n     init: function() {\n         var User, allUsers, ed;\n\n         User = this.getUserModel();\n         allUsers = this.getAllUsersStore();\n\n         ed = new User({ name: 'Ed' });\n         allUsers.add(ed);\n     }\n });\n</code></pre>\n\n<p>By specifying Models and Stores that the Controller cares about, it again dynamically loads them from the appropriate\nlocations (app/model/User.js, app/store/AllUsers.js and app/store/AdminUsers.js in this case) and creates getter\nfunctions for them all. The example above will create a new User model instance and add it to the AllUsers Store.\nOf course, you could do anything in this function but in this case we just did something simple to demonstrate the\nfunctionality.</p>\n\n<h2>Further Reading</h2>\n\n<p>For more information about writing Ext JS 4 applications, please see the\n<a href=\"#/guide/application_architecture\">application architecture guide</a>. Also see the <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>\ndocumentation.</p>\n"},"domain":{"Component":{"!doc":"<p>This class implements the component event domain. All classes extending from\n<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> are included in this domain. The matching criteria uses\n<a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">Ext.ComponentQuery</a>.</p>\n"},"Controller":{"!doc":"<p>This class implements the controller event domain. All classes extending from\n<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a> are included in this domain. The selectors are simply id's or the\nwildcard \"*\" to match any controller.</p>\n"},"Direct":{"!doc":"<p>This class implements the <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> event domain. All classes extending from\n<a href=\"#!/api/Ext.direct.Provider\" rel=\"Ext.direct.Provider\" class=\"docClass\">Ext.direct.Provider</a> are included in this domain. The selectors are simply provider\nid's or the wildcard \"*\" to match any provider.</p>\n"},"Global":{"!doc":"<p>This class implements the global event domain. This domain represents event fired from\n<a href=\"#!/api/Ext-property-globalEvents\" rel=\"Ext-property-globalEvents\" class=\"docClass\">Ext.globalEvents</a> Observable instance. No selectors are supported for this domain.</p>\n"},"Store":{"!doc":"<p>This class implements the data store event domain. All classes extending from\n<a href=\"#!/api/Ext.data.AbstractStore\" rel=\"Ext.data.AbstractStore\" class=\"docClass\">Ext.data.AbstractStore</a> are included in this domain. The selectors are simply\nstore id's or the wildcard \"*\" to match any store.</p>\n"}},"EventDomain":{"!doc":"<p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>\n\n<p>Matching selectors to the firer of an event is one key aspect that defines an event\ndomain. All event domain instances must provide a <code>match</code> method that tests selectors\nagainst the event firer.</p>\n\n<p>When an event domain instance is created (typically as a <code>singleton</code>), its <code>type</code>\nproperty is used to catalog the domain in the\n<a href=\"#!/api/Ext.app.EventDomain-static-property-instances\" rel=\"Ext.app.EventDomain-static-property-instances\" class=\"docClass\">Ext.app.EventDomain.instances</a> map.</p>\n\n<p>There are five event domains provided by default:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.app.domain.Component\" rel=\"Ext.app.domain.Component\" class=\"docClass\">Component domain</a>. This is the primary event domain that\nhas been available since Ext JS MVC was introduced. This domain is defined as any class that\nextends <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>, where the selectors use\n<a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery</a>.</li>\n<li><a href=\"#!/api/Ext.app.domain.Global\" rel=\"Ext.app.domain.Global\" class=\"docClass\">Global domain</a>. This domain provides Controllers with access\nto events fired from <a href=\"#!/api/Ext-property-globalEvents\" rel=\"Ext-property-globalEvents\" class=\"docClass\">Ext.globalEvents</a> Observable instance. These events represent\nthe state of the application as a whole, and are always anonymous. Because of this, Global\ndomain does not provide selectors at all.</li>\n<li><a href=\"#!/api/Ext.app.domain.Controller\" rel=\"Ext.app.domain.Controller\" class=\"docClass\">Controller domain</a>. This domain includes all classes\nthat extend <a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>. Events fired by Controllers will be available\nwithin this domain; selectors are either Controller's <a href=\"#!/api/Ext.app.Controller-cfg-id\" rel=\"Ext.app.Controller-cfg-id\" class=\"docClass\">id</a> or\n'*' wildcard for any Controller.</li>\n<li><a href=\"#!/api/Ext.app.domain.Store\" rel=\"Ext.app.domain.Store\" class=\"docClass\">Store domain</a>. This domain is for classes extending\n<a href=\"#!/api/Ext.data.AbstractStore\" rel=\"Ext.data.AbstractStore\" class=\"docClass\">Ext.data.AbstractStore</a>. Selectors are either Store's\n<a href=\"#!/api/Ext.data.AbstractStore-cfg-storeId\" rel=\"Ext.data.AbstractStore-cfg-storeId\" class=\"docClass\">storeId</a> or '*' wildcard for any Store.</li>\n<li><a href=\"#!/api/Ext.app.domain.Direct\" rel=\"Ext.app.domain.Direct\" class=\"docClass\">Direct domain</a>. This domain includes all classes that extend\n<a href=\"#!/api/Ext.direct.Provider\" rel=\"Ext.direct.Provider\" class=\"docClass\">Ext.direct.Provider</a>. Selectors are either Provider's <a href=\"#!/api/Ext.direct.Provider-cfg-id\" rel=\"Ext.direct.Provider-cfg-id\" class=\"docClass\">id</a>\nor '*' wildcard for any Provider. This domain is optional and will be loaded only if\n<a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.direct.Manager</a> singleton is required in your application.</li>\n</ul>\n\n"},"EventBus":{"!doc":"<p>This class manages event dispatching for Controllers. The details of connecting classes\nto this dispatching mechanism is delegated to <a href=\"#!/api/Ext.app.EventDomain\" rel=\"Ext.app.EventDomain\" class=\"docClass\">Ext.app.EventDomain</a> instances.</p>\n"}},"Array":{"!doc":"<p>A set of useful static methods to deal with arrays; provide missing methods for older browsers.</p>\n"},"button":{"Button":{"!doc":"<p>Create simple buttons with this component. Customisations include <a href=\"#!/api/Ext.button.Button-cfg-iconAlign\" rel=\"Ext.button.Button-cfg-iconAlign\" class=\"docClass\">aligned</a>\n<a href=\"#!/api/Ext.button.Button-cfg-iconCls\" rel=\"Ext.button.Button-cfg-iconCls\" class=\"docClass\">icons</a>, <a href=\"#!/api/Ext.button.Button-cfg-menu\" rel=\"Ext.button.Button-cfg-menu\" class=\"docClass\">dropdown menus</a>, <a href=\"#!/api/Ext.button.Button-cfg-tooltip\" rel=\"Ext.button.Button-cfg-tooltip\" class=\"docClass\">tooltips</a>\nand <a href=\"#!/api/Ext.button.Button-cfg-scale\" rel=\"Ext.button.Button-cfg-scale\" class=\"docClass\">sizing options</a>. Specify a <a href=\"#!/api/Ext.button.Button-cfg-handler\" rel=\"Ext.button.Button-cfg-handler\" class=\"docClass\">handler</a> to run code when\na user clicks the button, or use <a href=\"#!/api/Ext.button.Button-cfg-listeners\" rel=\"Ext.button.Button-cfg-listeners\" class=\"docClass\">listeners</a> for other events such as\n<a href=\"#!/api/Ext.button.Button-event-mouseover\" rel=\"Ext.button.Button-event-mouseover\" class=\"docClass\">mouseover</a>. Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text: 'Click me',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    handler: function() {\n        alert('You clicked the button!');\n    }\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.button.Button-cfg-handler\" rel=\"Ext.button.Button-cfg-handler\" class=\"docClass\">handler</a> configuration can also be updated dynamically using the <a href=\"#!/api/Ext.button.Button-method-setHandler\" rel=\"Ext.button.Button-method-setHandler\" class=\"docClass\">setHandler</a>\nmethod.  Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text    : 'Dynamic Handler Button',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    handler : function() {\n        // this button will spit out a different number every time you click it.\n        // so firstly we must check if that number is already set:\n        if (this.clickCount) {\n            // looks like the property is already set, so lets just add 1 to that number and alert the user\n            this.clickCount++;\n            alert('You have clicked the button \"' + this.clickCount + '\" times.\\n\\nTry clicking it again..');\n        } else {\n            // if the clickCount property is not set, we will set it and alert the user\n            this.clickCount = 1;\n            alert('You just clicked the button for the first time!\\n\\nTry pressing it again..');\n        }\n    }\n});\n</code></pre>\n\n<p>A button within a container:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.Container</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items   : [\n        {\n            xtype: 'button',\n            text : 'My Button'\n        }\n    ]\n});\n</code></pre>\n\n<p>A useful option of Button is the <a href=\"#!/api/Ext.button.Button-cfg-scale\" rel=\"Ext.button.Button-cfg-scale\" class=\"docClass\">scale</a> configuration. This configuration has three different options:</p>\n\n<ul>\n<li><code>'small'</code></li>\n<li><code>'medium'</code></li>\n<li><code>'large'</code></li>\n</ul>\n\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: document.body,\n    text    : 'Click me',\n    scale   : 'large'\n});\n</code></pre>\n\n<p>Buttons can also be toggled. To enable this, you simple set the <a href=\"#!/api/Ext.button.Button-cfg-enableToggle\" rel=\"Ext.button.Button-cfg-enableToggle\" class=\"docClass\">enableToggle</a> property to <code>true</code>.\nExample usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Click Me',\n    enableToggle: true\n});\n</code></pre>\n\n<p>You can assign a menu to a button by using the <a href=\"#!/api/Ext.button.Button-cfg-menu\" rel=\"Ext.button.Button-cfg-menu\" class=\"docClass\">menu</a> configuration. This standard configuration\ncan either be a reference to a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> object, a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> id or a\n<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> config blob. When assigning a menu to a button, an arrow is automatically\nadded to the button.  You can change the alignment of the arrow using the <a href=\"#!/api/Ext.button.Button-cfg-arrowAlign\" rel=\"Ext.button.Button-cfg-arrowAlign\" class=\"docClass\">arrowAlign</a> configuration\non button.  Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text      : 'Menu button',\n    renderTo  : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    arrowAlign: 'bottom',\n    menu      : [\n        {text: 'Item 1'},\n        {text: 'Item 2'},\n        {text: 'Item 3'},\n        {text: 'Item 4'}\n    ]\n});\n</code></pre>\n\n<p>Using listeners, you can easily listen to events fired by any component, using the <a href=\"#!/api/Ext.button.Button-cfg-listeners\" rel=\"Ext.button.Button-cfg-listeners\" class=\"docClass\">listeners</a>\nconfiguration or using the <a href=\"#!/api/Ext.button.Button-method-addListener\" rel=\"Ext.button.Button-method-addListener\" class=\"docClass\">addListener</a> method.  Button has a variety of different listeners:</p>\n\n<ul>\n<li><code>click</code></li>\n<li><code>toggle</code></li>\n<li><code>mouseover</code></li>\n<li><code>mouseout</code></li>\n<li><code>mouseshow</code></li>\n<li><code>menuhide</code></li>\n<li><code>menutriggerover</code></li>\n<li><code>menutriggerout</code></li>\n</ul>\n\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text     : 'Button',\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    listeners: {\n        click: function() {\n            // this == the button, as we are in the local scope\n            this.setText('I was clicked!');\n        },\n        mouseover: function() {\n            // set a new config which says we moused over, if not already set\n            if (!this.mousedOver) {\n                this.mousedOver = true;\n                alert('You moused over a button!\\n\\nI wont do this again.');\n            }\n        }\n    }\n});\n</code></pre>\n"},"Cycle":{"!doc":"<p>A specialized SplitButton that contains a menu of <a href=\"#!/api/Ext.menu.CheckItem\" rel=\"Ext.menu.CheckItem\" class=\"docClass\">Ext.menu.CheckItem</a> elements. The button automatically\ncycles through each menu item on click, raising the button's <a href=\"#!/api/Ext.button.Cycle-event-change\" rel=\"Ext.button.Cycle-event-change\" class=\"docClass\">change</a> event (or calling the button's\n<a href=\"#!/api/Ext.button.Cycle-cfg-changeHandler\" rel=\"Ext.button.Cycle-cfg-changeHandler\" class=\"docClass\">changeHandler</a> function, if supplied) for the active menu item. Clicking on the arrow section of the\nbutton displays the dropdown menu just like a normal SplitButton.  Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Cycle\" rel=\"Ext.button.Cycle\" class=\"docClass\">Ext.button.Cycle</a>', {\n    showText: true,\n    prependText: 'View as ',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    menu: {\n        id: 'view-type-menu',\n        items: [{\n            text: 'text only',\n            iconCls: 'view-text',\n            checked: true\n        },{\n            text: 'HTML',\n            iconCls: 'view-html'\n        }]\n    },\n    changeHandler: function(cycleBtn, activeItem) {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Change View', activeItem.text);\n    }\n});\n</code></pre>\n"},"Split":{"!doc":"<p>A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event\nof the button. Typically this would be used to display a dropdown menu that provides additional options to the\nprimary button action, but any custom handler can provide the arrowclick implementation.  Example usage:</p>\n\n<pre class='inline-example '><code>// display a dropdown menu:\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Split\" rel=\"Ext.button.Split\" class=\"docClass\">Ext.button.Split</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Options',\n    // handle a click on the button itself\n    handler: function() {\n        alert(\"The button was clicked\");\n    },\n    menu: new <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>({\n        items: [\n            // these will render as dropdown menu items when the arrow is clicked:\n            {text: 'Item 1', handler: function(){ alert(\"Item 1 clicked\"); }},\n            {text: 'Item 2', handler: function(){ alert(\"Item 2 clicked\"); }}\n        ]\n    })\n});\n</code></pre>\n\n<p>Instead of showing a menu, you can provide any type of custom functionality you want when the dropdown\narrow is clicked:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Split\" rel=\"Ext.button.Split\" class=\"docClass\">Ext.button.Split</a>', {\n    renderTo: 'button-ct',\n    text: 'Options',\n    handler: optionsHandler,\n    arrowHandler: myCustomHandler\n});\n</code></pre>\n"},"Manager":{"!doc":"\n"}},"Component":{"!doc":"<p>Base class for all Ext components.</p>\n\n<p>The Component base class has built-in support for basic hide/show and enable/disable and size control behavior.</p>\n\n<h2>xtypes</h2>\n\n<p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the xtype\nlike <a href=\"#!/api/Ext.Component-method-getXType\" rel=\"Ext.Component-method-getXType\" class=\"docClass\">getXType</a> and <a href=\"#!/api/Ext.Component-method-isXType\" rel=\"Ext.Component-method-isXType\" class=\"docClass\">isXType</a>. See the <a href=\"#!/guide/components\">Component Guide</a> for more information on xtypes and the\nComponent hierarchy.</p>\n\n<h2>Finding components</h2>\n\n<p>All Components are registered with the <a href=\"#!/api/Ext.ComponentManager\" rel=\"Ext.ComponentManager\" class=\"docClass\">Ext.ComponentManager</a> on construction so that they can be referenced at\nany time via <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>, passing the <a href=\"#!/api/Ext.Component-cfg-id\" rel=\"Ext.Component-cfg-id\" class=\"docClass\">id</a>.</p>\n\n<p>Additionally the <a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">Ext.ComponentQuery</a> provides a CSS-selectors-like way to look up components by their xtype\nand many other attributes.  For example the following code will find all textfield components inside component with\n<code>id: 'myform'</code>:</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('#myform textfield');\n</code></pre>\n\n<h2>Extending <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a></h2>\n\n<p>All subclasses of Component may participate in the automated Ext component\nlifecycle of creation, rendering and destruction which is provided by the <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>\nclass. Components may be added to a Container through the <a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a> config option\nat the time the Container is created, or they may be added dynamically via the\n<a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">add</a> method.</p>\n\n<p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should\nsubclass Component.</p>\n\n<p>See the Creating new UI controls chapter in <a href=\"#!/guide/components\">Component Guide</a> for details on how and to either extend\nor augment Ext JS base classes to create custom Components.</p>\n\n<h2>The <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> class by itself</h2>\n\n<p>Usually one doesn't need to instantiate the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> class. There are subclasses which implement\nspecialized use cases, covering most application needs. However it is possible to instantiate a base\nComponent, and it can be rendered to document, or handled by layouts as the child item of a Container:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    html: 'Hello world!',\n    width: 300,\n    height: 200,\n    padding: 20,\n    style: {\n        color: '#FFFFFF',\n        backgroundColor:'#000000'\n    },\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The Component above creates its encapsulating <code>div</code> upon render, and use the configured HTML as content. More complex\ninternal structure may be created using the <a href=\"#!/api/Ext.Component-cfg-renderTpl\" rel=\"Ext.Component-cfg-renderTpl\" class=\"docClass\">renderTpl</a> configuration, although to display database-derived\nmass data, it is recommended that an ExtJS data-backed Component such as a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">View</a>,\n<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a>, or <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a> be used.</p>\n\n<p><strong>From override Ext.layout.container.border.Region:</strong> This override provides extra, border layout specific methods for <code><a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a></code>. The\n<code><a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a></code> class requires this override so that the added functions\nare only included in a build when <code>border</code> layout is used.</p>\n"},"Queryable":{"!doc":"<p>A mixin for providing query related methods for <a href=\"#!/api/Ext.ComponentQuery\" rel=\"Ext.ComponentQuery\" class=\"docClass\">Ext.ComponentQuery</a> for components that\nimplement getRefItems.</p>\n"},"chart":{"axis":{"Abstract":{"!doc":"<p>Base class for all axis classes.</p>\n"},"Axis":{"!doc":"<p>Defines axis for charts. The axis position, type, style can be configured.\nThe axes are defined in an axes array of configuration objects where the type,\nfield, grid and other configuration options can be set. To know more about how\nto create a Chart please check the Chart class documentation. Here's an example for the axes part:\nAn example of axis for a series (in this case for an area chart that has multiple layers of yFields) could be:</p>\n\n<pre><code>axes: [{\n    type: 'Numeric',\n    position: 'left',\n    fields: ['data1', 'data2', 'data3'],\n    title: 'Number of Hits',\n    grid: {\n        odd: {\n            opacity: 1,\n            fill: '#ddd',\n            stroke: '#bbb',\n            'stroke-width': 1\n        }\n    },\n    minimum: 0\n}, {\n    type: 'Category',\n    position: 'bottom',\n    fields: ['name'],\n    title: 'Month of the Year',\n    grid: true,\n    label: {\n        rotate: {\n            degrees: 315\n        }\n    }\n}]\n</code></pre>\n\n<p>In this case we use a <code>Numeric</code> axis for displaying the values of the Area series and a <code>Category</code> axis for displaying the names of\nthe store elements. The numeric axis is placed on the left of the screen, while the category axis is placed at the bottom of the chart.\nBoth the category and numeric axes have <code>grid</code> set, which means that horizontal and vertical lines will cover the chart background. In the\ncategory axis the labels will be rotated so they can fit the space better.</p>\n"},"Category":{"!doc":"<p>A type of axis that displays items in categories. This axis is generally used to\ndisplay categorical information like names of items, month names, quarters, etc.\nbut no quantitative values. For that other type of information <code>Number</code>\naxis are more suitable.</p>\n\n<p>As with other axis you can set the position of the axis and its title. For example:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n    data: [\n        {'name':'metric one', 'data1':10, 'data2':12, 'data3':14, 'data4':8, 'data5':13},\n        {'name':'metric two', 'data1':7, 'data2':8, 'data3':16, 'data4':10, 'data5':3},\n        {'name':'metric three', 'data1':5, 'data2':2, 'data3':14, 'data4':12, 'data5':7},\n        {'name':'metric four', 'data1':2, 'data2':14, 'data3':6, 'data4':1, 'data5':23},\n        {'name':'metric five', 'data1':27, 'data2':38, 'data3':36, 'data4':13, 'data5':33}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    store: store,\n    axes: [{\n        type: 'Numeric',\n        position: 'left',\n        fields: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        title: 'Sample Values',\n        grid: {\n            odd: {\n                opacity: 1,\n                fill: '#ddd',\n                stroke: '#bbb',\n                'stroke-width': 1\n            }\n        },\n        minimum: 0,\n        adjustMinimumByMajorUnit: 0\n    }, {\n        type: 'Category',\n        position: 'bottom',\n        fields: ['name'],\n        title: 'Sample Metrics',\n        grid: true,\n        label: {\n            rotate: {\n                degrees: 315\n            }\n        }\n    }],\n    series: [{\n        type: 'area',\n        highlight: false,\n        axis: 'left',\n        xField: 'name',\n        yField: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        style: {\n            opacity: 0.93\n        }\n    }]\n});\n</code></pre>\n\n<p>In this example with set the category axis to the bottom of the surface, bound the axis to\nthe <code>name</code> property and set as title <em>Month of the Year</em>.</p>\n"},"Gauge":{"!doc":"<p>Gauge Axis is the axis to be used with a Gauge series. The Gauge axis\ndisplays numeric data from an interval defined by the <code>minimum</code>, <code>maximum</code> and\n<code>step</code> configuration properties. The placement of the numeric data can be changed\nby altering the <code>margin</code> option that is set to <code>10</code> by default.</p>\n\n<p>A possible configuration for this axis would look like:</p>\n\n<pre><code>axes: [{\n    type: 'gauge',\n    position: 'gauge',\n    minimum: 0,\n    maximum: 100,\n    steps: 10,\n    margin: 7\n}],\n</code></pre>\n"},"Numeric":{"!doc":"<p>An axis to handle numeric values. This axis is used for quantitative data as\nopposed to the category axis. You can set mininum and maximum values to the\naxis so that the values are bound to that. If no values are set, then the\nscale will auto-adjust to the values.</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n     fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n     data: [\n         {'name':'metric one', 'data1':10, 'data2':12, 'data3':14, 'data4':8, 'data5':13},\n         {'name':'metric two', 'data1':7, 'data2':8, 'data3':16, 'data4':10, 'data5':3},\n         {'name':'metric three', 'data1':5, 'data2':2, 'data3':14, 'data4':12, 'data5':7},\n         {'name':'metric four', 'data1':2, 'data2':14, 'data3':6, 'data4':1, 'data5':23},\n         {'name':'metric five', 'data1':27, 'data2':38, 'data3':36, 'data4':13, 'data5':33}\n     ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    store: store,\n    axes: [{\n        type: 'Numeric',\n        position: 'left',\n        fields: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        title: 'Sample Values',\n        grid: {\n            odd: {\n                opacity: 1,\n                fill: '#ddd',\n                stroke: '#bbb',\n                'stroke-width': 1\n            }\n        },\n        minimum: 0,\n        adjustMinimumByMajorUnit: 0\n    }, {\n        type: 'Category',\n        position: 'bottom',\n        fields: ['name'],\n        title: 'Sample Metrics',\n        grid: true,\n        label: {\n            rotate: {\n                degrees: 315\n            }\n        }\n    }],\n    series: [{\n        type: 'area',\n        highlight: false,\n        axis: 'left',\n        xField: 'name',\n        yField: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        style: {\n            opacity: 0.93\n        }\n    }]\n});\n</code></pre>\n\n<p>In this example we create an axis of Numeric type. We set a minimum value so that\neven if all series have values greater than zero, the grid starts at zero. We bind\nthe axis onto the left part of the surface by setting <code>position</code> to <code>left</code>.\nWe bind three different store fields to this axis by setting <code>fields</code> to an array.\nWe set the title of the axis to <em>Number of Hits</em> by using the <code>title</code> property.\nWe use a <code>grid</code> configuration to set odd background rows to a certain style and even rows\nto be transparent/ignored.</p>\n"},"Radial":{"!doc":"\n"},"Time":{"!doc":"<p>A type of axis whose units are measured in time values. Use this axis\nfor listing dates that you will want to group or dynamically change.\nIf you just want to display dates as categories then use the\nCategory class for axis instead.</p>\n\n<p>For example:</p>\n\n<pre><code>axes: [{\n    type: 'Time',\n    position: 'bottom',\n    fields: 'date',\n    title: 'Day',\n    dateFormat: 'M d',\n\n    constrain: true,\n    fromDate: new Date('1/1/11'),\n    toDate: new Date('1/7/11')\n}]\n</code></pre>\n\n<p>In this example we're creating a time axis that has as title <em>Day</em>.\nThe field the axis is bound to is <code>date</code>.\nThe date format to use to display the text for the axis labels is <code>M d</code>\nwhich is a three letter month abbreviation followed by the day number.\nThe time axis will show values for dates between <code>fromDate</code> and <code>toDate</code>.\nSince <code>constrain</code> is set to true all other values for other dates not between\nthe fromDate and toDate will not be displayed.</p>\n"}},"Callout":{"!doc":"<p>A mixin providing callout functionality for <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Ext.chart.series.Series</a>.</p>\n"},"Chart":{"!doc":"<p>Charts provide a flexible way to achieve a wide range of data visualization capablitities.\nEach Chart gets its data directly from a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>, and automatically\nupdates its display whenever data in the Store changes. In addition, the look and feel\nof a Chart can be customized using <a href=\"#!/api/Ext.chart.theme.Theme\" rel=\"Ext.chart.theme.Theme\" class=\"docClass\">Theme</a>s.</p>\n\n<h2>Creating a Simple Chart</h2>\n\n<p>Every Chart has three key parts - a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> that contains the data,\nan array of <a href=\"#!/api/Ext.chart.axis.Axis\" rel=\"Ext.chart.axis.Axis\" class=\"docClass\">Axes</a> which define the boundaries of the Chart,\nand one or more <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Series</a> to handle the visual rendering of the data points.</p>\n\n<h3>1. Creating a Store</h3>\n\n<p>The first step is to create a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> that represents the type of\ndata that will be displayed in the Chart. For example the data for a chart that displays\na weather forecast could be represented as a series of \"WeatherPoint\" data points with\ntwo fields - \"temperature\", and \"date\":</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('WeatherPoint', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['temperature', 'date']\n});\n</code></pre>\n\n<p>Next a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> must be created.  The store contains a collection of \"WeatherPoint\" Model instances.\nThe data could be loaded dynamically, but for sake of ease this example uses inline data:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    model: 'WeatherPoint',\n    data: [\n        { temperature: 58, date: new Date(2011, 1, 1, 8) },\n        { temperature: 63, date: new Date(2011, 1, 1, 9) },\n        { temperature: 73, date: new Date(2011, 1, 1, 10) },\n        { temperature: 78, date: new Date(2011, 1, 1, 11) },\n        { temperature: 81, date: new Date(2011, 1, 1, 12) }\n    ]\n});\n</code></pre>\n\n<p>For additional information on Models and Stores please refer to the <a href=\"#/guide/data\">Data Guide</a>.</p>\n\n<h3>2. Creating the Chart object</h3>\n\n<p>Now that a Store has been created it can be used in a Chart:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n   renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n   width: 400,\n   height: 300,\n   store: store\n});\n</code></pre>\n\n<p>That's all it takes to create a Chart instance that is backed by a Store.\nHowever, if the above code is run in a browser, a blank screen will be displayed.\nThis is because the two pieces that are responsible for the visual display,\nthe Chart's <a href=\"#!/api/Ext.chart.Chart-cfg-axes\" rel=\"Ext.chart.Chart-cfg-axes\" class=\"docClass\">axes</a> and <a href=\"#!/api/Ext.chart.Chart-cfg-series\" rel=\"Ext.chart.Chart-cfg-series\" class=\"docClass\">series</a>, have not yet been defined.</p>\n\n<h3>3. Configuring the Axes</h3>\n\n<p><a href=\"#!/api/Ext.chart.axis.Axis\" rel=\"Ext.chart.axis.Axis\" class=\"docClass\">Axes</a> are the lines that define the boundaries of the data points that a Chart can display.\nThis example uses one of the most common Axes configurations - a horizontal \"x\" axis, and a vertical \"y\" axis:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    axes: [\n        {\n            title: 'Temperature',\n            type: 'Numeric',\n            position: 'left',\n            fields: ['temperature'],\n            minimum: 0,\n            maximum: 100\n        },\n        {\n            title: 'Time',\n            type: 'Time',\n            position: 'bottom',\n            fields: ['date'],\n            dateFormat: 'ga'\n        }\n    ]\n});\n</code></pre>\n\n<p>The \"Temperature\" axis is a vertical <a href=\"#!/api/Ext.chart.axis.Numeric\" rel=\"Ext.chart.axis.Numeric\" class=\"docClass\">Numeric Axis</a> and is positioned on the left edge of the Chart.\nIt represents the bounds of the data contained in the \"WeatherPoint\" Model's \"temperature\" field that was\ndefined above. The minimum value for this axis is \"0\", and the maximum is \"100\".</p>\n\n<p>The horizontal axis is a <a href=\"#!/api/Ext.chart.axis.Time\" rel=\"Ext.chart.axis.Time\" class=\"docClass\">Time Axis</a> and is positioned on the bottom edge of the Chart.\nIt represents the bounds of the data contained in the \"WeatherPoint\" Model's \"date\" field.\nThe <a href=\"#!/api/Ext.chart.axis.Time-cfg-dateFormat\" rel=\"Ext.chart.axis.Time-cfg-dateFormat\" class=\"docClass\">dateFormat</a>\nconfiguration tells the Time Axis how to format it's labels.</p>\n\n<p>Here's what the Chart looks like now that it has its Axes configured:</p>\n\n<p><p><img src=\"\" alt=\"Chart Axes\" width=\"\" height=\"\"></p></p>\n\n<h3>4. Configuring the Series</h3>\n\n<p>The final step in creating a simple Chart is to configure one or more <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Series</a>.\nSeries are responsible for the visual representation of the data points contained in the Store.\nThis example only has one Series:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    axes: [\n        ...\n    ],\n    series: [\n        {\n            type: 'line',\n            xField: 'date',\n            yField: 'temperature'\n        }\n    ]\n});\n</code></pre>\n\n<p>This Series is a <a href=\"#!/api/Ext.chart.series.Line\" rel=\"Ext.chart.series.Line\" class=\"docClass\">Line Series</a>, and it uses the \"date\" and \"temperature\" fields\nfrom the \"WeatherPoint\" Models in the Store to plot its data points:</p>\n\n<p><p><img src=\"\" alt=\"Line Series\" width=\"\" height=\"\"></p></p>\n\n<p>See the <a href=\"#!/example/charts/Charts.html\">Line Charts Example</a> for a live demo.</p>\n\n<h2>Themes</h2>\n\n<p>The color scheme for a Chart can be easily changed using the <a href=\"#!/api/Ext.chart.Chart-cfg-theme\" rel=\"Ext.chart.Chart-cfg-theme\" class=\"docClass\">theme</a> configuration option:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    ...\n    theme: 'Green',\n    ...\n});\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Green Theme\" width=\"\" height=\"\"></p></p>\n\n<p>For more information on Charts please refer to the <a href=\"#/guide/charting\">Charting Guide</a>.</p>\n"},"Mask":{"!doc":"<p>Defines a mask for a chart's series.\nThe 'chart' member must be set prior to rendering.</p>\n\n<p>A Mask can be used to select a certain region in a chart.\nWhen enabled, the <code>select</code> event will be triggered when a\nregion is selected by the mask, allowing the user to perform\nother tasks like zooming on that region, etc.</p>\n\n<p>In order to use the mask one has to set the Chart <code>mask</code> option to\n<code>true</code>, <code>vertical</code> or <code>horizontal</code>. Then a possible configuration for the\nlistener could be:</p>\n\n<pre><code>items: {\n    xtype: 'chart',\n    animate: true,\n    store: store1,\n    mask: 'horizontal',\n    listeners: {\n        select: {\n            fn: function(me, selection) {\n                me.setZoom(selection);\n                me.mask.hide();\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>In this example we zoom the chart to that particular region. You can also get\na handle to a mask instance from the chart object. The <code>chart.mask</code> element is a\n<code><a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a></code>.</p>\n"},"Navigation":{"!doc":"<p>Handles panning and zooming capabilities.</p>\n\n<p>Used as mixin by <a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>.</p>\n"},"Highlight":{"!doc":"<p>A mixin providing highlight functionality for <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Ext.chart.series.Series</a>.</p>\n"},"Label":{"!doc":"<p>Labels is a mixin to the Series class. Labels methods are implemented\nin each of the Series (Pie, Bar, etc) for label creation and placement.</p>\n\n<p>The 2 methods that must be implemented by the Series are:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.chart.Label-method-onCreateLabel\" rel=\"Ext.chart.Label-method-onCreateLabel\" class=\"docClass\">onCreateLabel</a></li>\n<li><a href=\"#!/api/Ext.chart.Label-method-onPlaceLabel\" rel=\"Ext.chart.Label-method-onPlaceLabel\" class=\"docClass\">onPlaceLabel</a></li>\n</ul>\n\n\n<p>The application can override these methods to control the style and\nlocation of the labels. For instance, to display the labels in green and\nadd a '+' symbol when the value of a Line series exceeds 50:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.chart.series.MyLine', {\n     extend: '<a href=\"#!/api/Ext.chart.series.Line\" rel=\"Ext.chart.series.Line\" class=\"docClass\">Ext.chart.series.Line</a>',\n     alias: ['series.myline', 'Ext.chart.series.MyLine'],\n     type: 'MYLINE',\n\n     onPlaceLabel: function(label, storeItem, item, i, display, animate){\n         if (storeItem.data.y &gt;= 50) {\n             label.setAttributes({\n                 fill: '#080',\n                 text: \"+\" + storeItem.data.y\n             }, true);\n         }\n         return this.callParent(arguments);\n     }\n });\n</code></pre>\n\n<p>Note that for simple effects, like the example above, it is simpler\nfor the application to provide a label.renderer function in the config:</p>\n\n<pre><code>  label: {\n      renderer: function(value, label, storeItem, item, i, display, animate, index) {\n          if (value &gt;= 50) {\n              label.setAttributes({fill:'#080'});\n              value = \"+\" + value;\n          }\n          return value;\n      }\n  }\n</code></pre>\n\n<p>The rule of thumb is that to customize the value and modify simple visual attributes, it\nis simpler to use a renderer function, while overridding <code>onCreateLabel</code> and <code>onPlaceLabel</code>\nallows the application to take entire control over the labels.</p>\n"},"Legend":{"!doc":"<p>Defines a legend for a chart's series.\nThe 'chart' member must be set prior to rendering.\nThe legend class displays a list of legend items each of them related with a\nseries being rendered. In order to render the legend item of the proper series\nthe series configuration object must have <code>showInLegend</code> set to true.</p>\n\n<p>The legend configuration object accepts a <code>position</code> as parameter.\nThe <code>position</code> parameter can be <code>left</code>, <code>right</code>\n<code>top</code> or <code>bottom</code>. For example:</p>\n\n<pre><code>legend: {\n    position: 'right'\n},\n</code></pre>\n\n<h2>Example</h2>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n    data: [\n        { 'name': 'metric one',   'data1': 10, 'data2': 12, 'data3': 14, 'data4': 8,  'data5': 13 },\n        { 'name': 'metric two',   'data1': 7,  'data2': 8,  'data3': 16, 'data4': 10, 'data5': 3  },\n        { 'name': 'metric three', 'data1': 5,  'data2': 2,  'data3': 14, 'data4': 12, 'data5': 7  },\n        { 'name': 'metric four',  'data1': 2,  'data2': 14, 'data3': 6,  'data4': 1,  'data5': 23 },\n        { 'name': 'metric five',  'data1': 27, 'data2': 38, 'data3': 36, 'data4': 13, 'data5': 33 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    store: store,\n    shadow: true,\n    theme: 'Category1',\n    legend: {\n        position: 'top'\n    },\n    axes: [\n        {\n            type: 'Numeric',\n            position: 'left',\n            fields: ['data1', 'data2', 'data3', 'data4', 'data5'],\n            title: 'Sample Values',\n            grid: {\n                odd: {\n                    opacity: 1,\n                    fill: '#ddd',\n                    stroke: '#bbb',\n                    'stroke-width': 1\n                }\n            },\n            minimum: 0,\n            adjustMinimumByMajorUnit: 0\n        },\n        {\n            type: 'Category',\n            position: 'bottom',\n            fields: ['name'],\n            title: 'Sample Metrics',\n            grid: true,\n            label: {\n                rotate: {\n                    degrees: 315\n                }\n            }\n        }\n    ],\n    series: [{\n        type: 'area',\n        highlight: false,\n        axis: 'left',\n        xField: 'name',\n        yField: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        style: {\n            opacity: 0.93\n        }\n    }]\n});\n</code></pre>\n"},"LegendItem":{"!doc":"<p>A single item of a legend (marker plus label)</p>\n"},"MaskLayer":{"!doc":"\n"},"series":{"Area":{"!doc":"<p>Creates a Stacked Area Chart. The stacked area chart is useful when displaying multiple aggregated layers of information.\nAs with all other series, the Area Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the area series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n    data: [\n        { 'name': 'metric one',   'data1':10, 'data2':12, 'data3':14, 'data4':8,  'data5':13 },\n        { 'name': 'metric two',   'data1':7,  'data2':8,  'data3':16, 'data4':10, 'data5':3  },\n        { 'name': 'metric three', 'data1':5,  'data2':2,  'data3':14, 'data4':12, 'data5':7  },\n        { 'name': 'metric four',  'data1':2,  'data2':14, 'data3':6,  'data4':1,  'data5':23 },\n        { 'name': 'metric five',  'data1':27, 'data2':38, 'data3':36, 'data4':13, 'data5':33 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    store: store,\n    axes: [\n        {\n            type: 'Numeric',\n            position: 'left',\n            fields: ['data1', 'data2', 'data3', 'data4', 'data5'],\n            title: 'Sample Values',\n            grid: {\n                odd: {\n                    opacity: 1,\n                    fill: '#ddd',\n                    stroke: '#bbb',\n                    'stroke-width': 1\n                }\n            },\n            minimum: 0,\n            adjustMinimumByMajorUnit: 0\n        },\n        {\n            type: 'Category',\n            position: 'bottom',\n            fields: ['name'],\n            title: 'Sample Metrics',\n            grid: true,\n            label: {\n                rotate: {\n                    degrees: 315\n                }\n            }\n        }\n    ],\n    series: [{\n        type: 'area',\n        highlight: false,\n        axis: 'left',\n        xField: 'name',\n        yField: ['data1', 'data2', 'data3', 'data4', 'data5'],\n        style: {\n            opacity: 0.93\n        }\n    }]\n});\n</code></pre>\n\n<p>In this configuration we set <code>area</code> as the type for the series, set highlighting options to true for highlighting elements on hover,\ntake the left axis to measure the data in the area series, set as xField (x values) the name field of each element in the store,\nand as yFields (aggregated layers) seven data fields from the same store. Then we override some theming styles by adding some opacity\nto the style object.</p>\n"},"Cartesian":{"!doc":"<p>Common base class for series implementations which plot values using x/y coordinates.</p>\n"},"Series":{"!doc":"<p>Series is the abstract class containing the common logic to all chart series. Series includes\nmethods from Labels, Highlights, Tips and Callouts mixins. This class implements the logic of handling\nmouse events, animating, hiding, showing all elements and returning the color of the series to be used as a legend item.</p>\n\n<h2>Listeners</h2>\n\n<p>The series class supports listeners via the Observable syntax. Some of these listeners are:</p>\n\n<ul>\n<li><code>itemclick</code> When the user interacts with a marker.</li>\n<li><code>itemmouseup</code> When the user interacts with a marker.</li>\n<li><code>itemmousedown</code> When the user interacts with a marker.</li>\n<li><code>itemmousemove</code> When the user iteracts with a marker.</li>\n<li><code>afterrender</code> Will be triggered when the animation ends or when the series has been rendered completely.</li>\n</ul>\n\n\n<p>For example:</p>\n\n<pre><code>series: [{\n        type: 'column',\n        axis: 'left',\n        listeners: {\n                'afterrender': function() {\n                        console('afterrender');\n                }\n        },\n        xField: 'category',\n        yField: 'data1'\n}]\n</code></pre>\n"},"Bar":{"!doc":"<p>Creates a Bar Chart. A Bar Chart is a useful visualization technique to display quantitative information for\ndifferent categories that can show some progression (or regression) in the dataset. As with all other series, the Bar\nSeries must be appended in the <em>series</em> Chart array configuration. See the Chart documentation for more information.\nA typical configuration object for the bar series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data'],\n    data: [\n        { 'name': 'metric one',   'data':10 },\n        { 'name': 'metric two',   'data': 7 },\n        { 'name': 'metric three', 'data': 5 },\n        { 'name': 'metric four',  'data': 2 },\n        { 'name': 'metric five',  'data':27 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    store: store,\n    axes: [{\n        type: 'Numeric',\n        position: 'bottom',\n        fields: ['data'],\n        label: {\n            renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0,0')\n        },\n        title: 'Sample Values',\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'Category',\n        position: 'left',\n        fields: ['name'],\n        title: 'Sample Metrics'\n    }],\n    series: [{\n        type: 'bar',\n        axis: 'bottom',\n        highlight: true,\n        tips: {\n          trackMouse: true,\n          width: 140,\n          height: 28,\n          renderer: function(storeItem, item) {\n            this.setTitle(storeItem.get('name') + ': ' + storeItem.get('data') + ' views');\n          }\n        },\n        label: {\n          display: 'insideEnd',\n            field: 'data',\n            renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0'),\n            orientation: 'horizontal',\n            color: '#333',\n            'text-anchor': 'middle'\n        },\n        xField: 'name',\n        yField: 'data'\n    }]\n});\n</code></pre>\n\n<p>In this configuration we set <code>bar</code> as the series type, bind the values of the bar to the bottom axis and set the\nxField or category field to the <code>name</code> parameter of the store. We also set <code>highlight</code> to true which enables smooth\nanimations when bars are hovered. We also set some configuration for the bar labels to be displayed inside the bar,\nto display the information found in the <code>data1</code> property of each element store, to render a formated text with the\n<code><a href=\"#!/api/Ext.util.Format\" rel=\"Ext.util.Format\" class=\"docClass\">Ext.util.Format</a></code> we pass in, to have an <code>horizontal</code> orientation (as opposed to a vertical one) and we also set\nother styles like <code>color</code>, <code>text-anchor</code>, etc.</p>\n"},"Column":{"!doc":"<p>Creates a Column Chart. Much of the methods are inherited from Bar. A Column Chart is a useful\nvisualization technique to display quantitative information for different categories that can\nshow some progression (or regression) in the data set. As with all other series, the Column Series\nmust be appended in the <em>series</em> Chart array configuration. See the Chart documentation for more\ninformation. A typical configuration object for the column series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data'],\n    data: [\n        { 'name': 'metric one',   'data':10 },\n        { 'name': 'metric two',   'data': 7 },\n        { 'name': 'metric three', 'data': 5 },\n        { 'name': 'metric four',  'data': 2 },\n        { 'name': 'metric five',  'data':27 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    store: store,\n    axes: [\n        {\n            type: 'Numeric',\n            position: 'left',\n            fields: ['data'],\n            label: {\n                renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0,0')\n            },\n            title: 'Sample Values',\n            grid: true,\n            minimum: 0\n        },\n        {\n            type: 'Category',\n            position: 'bottom',\n            fields: ['name'],\n            title: 'Sample Metrics'\n        }\n    ],\n    series: [\n        {\n            type: 'column',\n            axis: 'left',\n            highlight: true,\n            tips: {\n              trackMouse: true,\n              width: 140,\n              height: 28,\n              renderer: function(storeItem, item) {\n                this.setTitle(storeItem.get('name') + ': ' + storeItem.get('data') + ' $');\n              }\n            },\n            label: {\n              display: 'insideEnd',\n              'text-anchor': 'middle',\n                field: 'data',\n                renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0'),\n                orientation: 'vertical',\n                color: '#333'\n            },\n            xField: 'name',\n            yField: 'data'\n        }\n    ]\n});\n</code></pre>\n\n<p>In this configuration we set <code>column</code> as the series type, bind the values of the bars to the bottom axis,\nset <code>highlight</code> to true so that bars are smoothly highlighted when hovered and bind the <code>xField</code> or category\nfield to the data store <code>name</code> property and the <code>yField</code> as the data1 property of a store element.</p>\n"},"Gauge":{"!doc":"<p>Creates a Gauge Chart. Gauge Charts are used to show progress in a certain variable. There are two ways of using the Gauge chart.\nOne is setting a store element into the Gauge and selecting the field to be used from that store. Another one is instantiating the\nvisualization and using the <code>setValue</code> method to adjust the value you want.</p>\n\n<p>An example of Gauge visualization:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['value'],\n    data: [\n        { 'value':80 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    store: store,\n    width: 400,\n    height: 250,\n    animate: true,\n    insetPadding: 30,\n    axes: [{\n        type: 'gauge',\n        position: 'gauge',\n        minimum: 0,\n        maximum: 100,\n        steps: 10,\n        margin: 10\n    }],\n    series: [{\n        type: 'gauge',\n        field: 'value',\n        donut: 30,\n        colorSet: ['#F49D10', '#ddd']\n    }]\n});\n\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>(\"button\", {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: \"Refresh\",\n    handler: function() {\n        store.getAt(0).set('value', Math.round(Math.random()*100));\n    }\n});\n</code></pre>\n\n<p>In this example we create a special Gauge axis to be used with the gauge visualization (describing half-circle markers), and also we're\nsetting a maximum, minimum and steps configuration options into the axis. The Gauge series configuration contains the store field to be bound to\nthe visual display and the color set to be used with the visualization.</p>\n"},"Line":{"!doc":"<p>Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different\ncategories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.\nAs with all other series, the Line Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the line series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n    data: [\n        { 'name': 'metric one',   'data1': 10, 'data2': 12, 'data3': 14, 'data4': 8,  'data5': 13 },\n        { 'name': 'metric two',   'data1': 7,  'data2': 8,  'data3': 16, 'data4': 10, 'data5': 3  },\n        { 'name': 'metric three', 'data1': 5,  'data2': 2,  'data3': 14, 'data4': 12, 'data5': 7  },\n        { 'name': 'metric four',  'data1': 2,  'data2': 14, 'data3': 6,  'data4': 1,  'data5': 23 },\n        { 'name': 'metric five',  'data1': 4,  'data2': 4,  'data3': 36, 'data4': 13, 'data5': 33 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    store: store,\n    axes: [\n        {\n            type: 'Numeric',\n            position: 'left',\n            fields: ['data1', 'data2'],\n            label: {\n                renderer: <a href=\"#!/api/Ext.util.Format-method-numberRenderer\" rel=\"Ext.util.Format-method-numberRenderer\" class=\"docClass\">Ext.util.Format.numberRenderer</a>('0,0')\n            },\n            title: 'Sample Values',\n            grid: true,\n            minimum: 0\n        },\n        {\n            type: 'Category',\n            position: 'bottom',\n            fields: ['name'],\n            title: 'Sample Metrics'\n        }\n    ],\n    series: [\n        {\n            type: 'line',\n            highlight: {\n                size: 7,\n                radius: 7\n            },\n            axis: 'left',\n            xField: 'name',\n            yField: 'data1',\n            markerConfig: {\n                type: 'cross',\n                size: 4,\n                radius: 4,\n                'stroke-width': 0\n            }\n        },\n        {\n            type: 'line',\n            highlight: {\n                size: 7,\n                radius: 7\n            },\n            axis: 'left',\n            fill: true,\n            xField: 'name',\n            yField: 'data2',\n            markerConfig: {\n                type: 'circle',\n                size: 4,\n                radius: 4,\n                'stroke-width': 0\n            }\n        }\n    ]\n});\n</code></pre>\n\n<p>In this configuration we're adding two series (or lines), one bound to the <code>data1</code>\nproperty of the store and the other to <code>data3</code>. The type for both configurations is\n<code>line</code>. The <code>xField</code> for both series is the same, the name propert of the store.\nBoth line series share the same axis, the left axis. You can set particular marker\nconfiguration by adding properties onto the markerConfig object. Both series have\nan object as highlight so that markers animate smoothly to the properties in highlight\nwhen hovered. The second series has <code>fill=true</code> which means that the line will also\nhave an area below it of the same color.</p>\n\n<p><strong>Note:</strong> In the series definition remember to explicitly set the axis to bind the\nvalues of the line series to. This can be done by using the <code>axis</code> configuration property.</p>\n"},"Pie":{"!doc":"<p>Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different\ncategories that also have a meaning as a whole.\nAs with all other series, the Pie Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the pie series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data'],\n    data: [\n        { 'name': 'metric one',   'data': 10 },\n        { 'name': 'metric two',   'data':  7 },\n        { 'name': 'metric three', 'data':  5 },\n        { 'name': 'metric four',  'data':  2 },\n        { 'name': 'metric five',  'data': 27 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 350,\n    animate: true,\n    store: store,\n    theme: 'Base:gradients',\n    series: [{\n        type: 'pie',\n        angleField: 'data',\n        showInLegend: true,\n        tips: {\n            trackMouse: true,\n            width: 140,\n            height: 28,\n            renderer: function(storeItem, item) {\n                // calculate and display percentage on hover\n                var total = 0;\n                store.each(function(rec) {\n                    total += rec.get('data');\n                });\n                this.setTitle(storeItem.get('name') + ': ' + Math.round(storeItem.get('data') / total * 100) + '%');\n            }\n        },\n        highlight: {\n            segment: {\n                margin: 20\n            }\n        },\n        label: {\n            field: 'name',\n            display: 'rotate',\n            contrast: true,\n            font: '18px Arial'\n        }\n    }]\n});\n</code></pre>\n\n<p>In this configuration we set <code>pie</code> as the type for the series, set an object with specific style properties for highlighting options\n(triggered when hovering elements). We also set true to <code>showInLegend</code> so all the pie slices can be represented by a legend item.</p>\n\n<p>We set <code>data</code> as the value of the field to determine the angle span for each pie slice. We also set a label configuration object\nwhere we set the field name of the store field to be renderer as text for the label. The labels will also be displayed rotated.</p>\n\n<p>We set <code>contrast</code> to <code>true</code> to flip the color of the label if it is to similar to the background color. Finally, we set the font family\nand size through the <code>font</code> parameter.</p>\n"},"Radar":{"!doc":"<p>Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for\na constrained number of categories.</p>\n\n<p>As with all other series, the Radar series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the radar series could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3'],\n    data: [\n        { 'name': 'metric one',   'data1': 14, 'data2': 12, 'data3': 13 },\n        { 'name': 'metric two',   'data1': 16, 'data2':  8, 'data3':  3 },\n        { 'name': 'metric three', 'data1': 14, 'data2':  2, 'data3':  7 },\n        { 'name': 'metric four',  'data1':  6, 'data2': 14, 'data3': 23 },\n        { 'name': 'metric five',  'data1': 36, 'data2': 38, 'data3': 33 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    theme:'Category2',\n    store: store,\n    axes: [{\n        type: 'Radial',\n        position: 'radial',\n        label: {\n            display: true\n        }\n    }],\n    series: [{\n        type: 'radar',\n        xField: 'name',\n        yField: 'data1',\n        showInLegend: true,\n        showMarkers: true,\n        markerConfig: {\n            radius: 5,\n            size: 5\n        },\n        style: {\n            'stroke-width': 2,\n            fill: 'none'\n        }\n    },{\n        type: 'radar',\n        xField: 'name',\n        yField: 'data2',\n        showMarkers: true,\n        showInLegend: true,\n        markerConfig: {\n            radius: 5,\n            size: 5\n        },\n        style: {\n            'stroke-width': 2,\n            fill: 'none'\n        }\n    },{\n        type: 'radar',\n        xField: 'name',\n        yField: 'data3',\n        showMarkers: true,\n        showInLegend: true,\n        markerConfig: {\n            radius: 5,\n            size: 5\n        },\n        style: {\n            'stroke-width': 2,\n            fill: 'none'\n        }\n    }]\n});\n</code></pre>\n\n<p>In this configuration we add three series to the chart. Each of these series is bound to the same\ncategories field, <code>name</code> but bound to different properties for each category, <code>data1</code>, <code>data2</code> and\n<code>data3</code> respectively. All series display markers by having <code>showMarkers</code> enabled. The configuration\nfor the markers of each series can be set by adding properties onto the markerConfig object.\nFinally we override some theme styling properties by adding properties to the <code>style</code> object.</p>\n"},"Scatter":{"!doc":"<p>Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.\nThese variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.\nAs with all other series, the Scatter Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information on creating charts. A typical configuration object for the scatter could be:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.JsonStore\" rel=\"Ext.data.JsonStore\" class=\"docClass\">Ext.data.JsonStore</a>', {\n    fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],\n    data: [\n        { 'name': 'metric one',   'data1': 10, 'data2': 12, 'data3': 14, 'data4': 8,  'data5': 13 },\n        { 'name': 'metric two',   'data1': 7,  'data2': 8,  'data3': 16, 'data4': 10, 'data5': 3  },\n        { 'name': 'metric three', 'data1': 5,  'data2': 2,  'data3': 14, 'data4': 12, 'data5': 7  },\n        { 'name': 'metric four',  'data1': 2,  'data2': 14, 'data3': 6,  'data4': 1,  'data5': 23 },\n        { 'name': 'metric five',  'data1': 27, 'data2': 38, 'data3': 36, 'data4': 13, 'data5': 33 }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 500,\n    height: 300,\n    animate: true,\n    theme:'Category2',\n    store: store,\n    axes: [{\n        type: 'Numeric',\n        position: 'left',\n        fields: ['data2', 'data3'],\n        title: 'Sample Values',\n        grid: true,\n        minimum: 0\n    }, {\n        type: 'Category',\n        position: 'bottom',\n        fields: ['name'],\n        title: 'Sample Metrics'\n    }],\n    series: [{\n        type: 'scatter',\n        markerConfig: {\n            radius: 5,\n            size: 5\n        },\n        axis: 'left',\n        xField: 'name',\n        yField: 'data2'\n    }, {\n        type: 'scatter',\n        markerConfig: {\n            radius: 5,\n            size: 5\n        },\n        axis: 'left',\n        xField: 'name',\n        yField: 'data3'\n    }]\n});\n</code></pre>\n\n<p>In this configuration we add three different categories of scatter series. Each of them is bound to a different field of the same data store,\n<code>data1</code>, <code>data2</code> and <code>data3</code> respectively. All x-fields for the series must be the same field, in this case <code>name</code>.\nEach scatter series has a different styling configuration for markers, specified by the <code>markerConfig</code> object. Finally we set the left axis as\naxis to show the current values of the elements.</p>\n"}},"Tip":{"!doc":"<p>Provides tips for <a href=\"#!/api/Ext.chart.series.Series\" rel=\"Ext.chart.series.Series\" class=\"docClass\">Ext.chart.series.Series</a>.</p>\n"},"Shape":{"!doc":"\n"},"theme":{"Base":{"!doc":"<p>Provides default colors for non-specified things. Should be sub-classed when creating new themes.</p>\n"},"Theme":{"!doc":"<p>Provides chart theming.</p>\n\n<p>Used as mixins by <a href=\"#!/api/Ext.chart.Chart\" rel=\"Ext.chart.Chart\" class=\"docClass\">Ext.chart.Chart</a>.</p>\n"}},"TipSurface":{"!doc":"\n"}},"draw":{"Component":{"!doc":"<p>The Draw Component is a surface in which sprites can be rendered. The Draw Component\nmanages and holds an <a href=\"#!/api/Ext.draw.Surface\" rel=\"Ext.draw.Surface\" class=\"docClass\">Ext.draw.Surface</a> instance where\n<a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Sprites</a> can be appended.</p>\n\n<p>One way to create a draw component is:</p>\n\n<pre class='inline-example '><code>var drawComponent = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    viewBox: false,\n    items: [{\n        type: 'circle',\n        fill: '#79BB3F',\n        radius: 100,\n        x: 100,\n        y: 100\n    }]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.Window</a>', {\n    width: 215,\n    height: 235,\n    layout: 'fit',\n    items: [drawComponent]\n}).show();\n</code></pre>\n\n<p>In this case we created a draw component and added a <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">sprite</a> to it.\nThe <a href=\"#!/api/Ext.draw.Sprite-cfg-type\" rel=\"Ext.draw.Sprite-cfg-type\" class=\"docClass\">type</a> of the sprite is <code>circle</code> so if you run this code you'll see a yellow-ish\ncircle in a Window. When setting <code>viewBox</code> to <code>false</code> we are responsible for setting the object's position and\ndimensions accordingly.</p>\n\n<p>You can also add sprites by using the surface's add method:</p>\n\n<pre><code>drawComponent.surface.add({\n    type: 'circle',\n    fill: '#79BB3F',\n    radius: 100,\n    x: 100,\n    y: 100\n});\n</code></pre>\n\n<h2>Larger example</h2>\n\n<pre class='inline-example '><code>var drawComponent = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    width: 800,\n    height: 600,\n    renderTo: document.body\n}), surface = drawComponent.surface;\n\nsurface.add([{\n    type: 'circle',\n    radius: 10,\n    fill: '#f00',\n    x: 10,\n    y: 10,\n    group: 'circles'\n}, {\n    type: 'circle',\n    radius: 10,\n    fill: '#0f0',\n    x: 50,\n    y: 50,\n    group: 'circles'\n}, {\n    type: 'circle',\n    radius: 10,\n    fill: '#00f',\n    x: 100,\n    y: 100,\n    group: 'circles'\n}, {\n    type: 'rect',\n    width: 20,\n    height: 20,\n    fill: '#f00',\n    x: 10,\n    y: 10,\n    group: 'rectangles'\n}, {\n    type: 'rect',\n    width: 20,\n    height: 20,\n    fill: '#0f0',\n    x: 50,\n    y: 50,\n    group: 'rectangles'\n}, {\n    type: 'rect',\n    width: 20,\n    height: 20,\n    fill: '#00f',\n    x: 100,\n    y: 100,\n    group: 'rectangles'\n}]);\n\n// Get references to my groups\ncircles = surface.getGroup('circles');\nrectangles = surface.getGroup('rectangles');\n\n// Animate the circles down\ncircles.animate({\n    duration: 1000,\n    to: {\n        translate: {\n            y: 200\n        }\n    }\n});\n\n// Animate the rectangles across\nrectangles.animate({\n    duration: 1000,\n    to: {\n        translate: {\n            x: 200\n        }\n    }\n});\n</code></pre>\n\n<p>For more information on Sprites, the core elements added to a draw component's surface,\nrefer to the <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a> documentation.</p>\n"},"CompositeSprite":{"!doc":"<p>A composite Sprite handles a group of sprites with common methods to a sprite\nsuch as <code>hide</code>, <code>show</code>, <code>setAttributes</code>. These methods are applied to the set of sprites\nadded to the group.</p>\n\n<p>CompositeSprite extends <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a> so you can use the same methods\nin <code>MixedCollection</code> to iterate through sprites, add and remove elements, etc.</p>\n\n<p>In order to create a CompositeSprite, one has to provide a handle to the surface where it is\nrendered:</p>\n\n<pre><code>var group = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.CompositeSprite\" rel=\"Ext.draw.CompositeSprite\" class=\"docClass\">Ext.draw.CompositeSprite</a>', {\n    surface: drawComponent.surface\n});\n</code></pre>\n\n<p>Then just by using <code>MixedCollection</code> methods it's possible to add <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a>s:</p>\n\n<pre><code>group.add(sprite1);\ngroup.add(sprite2);\ngroup.add(sprite3);\n</code></pre>\n\n<p>And then apply common Sprite methods to them:</p>\n\n<pre><code>group.setAttributes({\n    fill: '#f00'\n}, true);\n</code></pre>\n"},"Color":{"!doc":"<p>Represents an RGB color and provides helper functions get\ncolor components in HSL color space.</p>\n"},"Draw":{"!doc":"<p>Base Drawing class.  Provides base drawing functions.</p>\n"},"engine":{"ImageExporter":{"!doc":"<p>Exports a <a href=\"#!/api/Ext.draw.Surface\" rel=\"Ext.draw.Surface\" class=\"docClass\">Surface</a> to an image. To do this,\nthe svg string must be sent to a remote server and processed.</p>\n\n<h1>Sending the data</h1>\n\n<p>A post request is made to the URL. The following fields are sent:</p>\n\n<ul>\n<li>width: The width of the image</li>\n<li>height: The height of the image</li>\n<li>type: The image type to save as, see <a href=\"#!/api/Ext.draw.engine.ImageExporter-property-supportedTypes\" rel=\"Ext.draw.engine.ImageExporter-property-supportedTypes\" class=\"docClass\">supportedTypes</a></li>\n<li>svg: The svg string for the surface</li>\n</ul>\n\n\n<h1>The response</h1>\n\n<p>It is expected that the user will be prompted with an image download.\nAs such, the following options should be set on the server:</p>\n\n<ul>\n<li>Content-Disposition: 'attachment, filename=\"chart.png\"'</li>\n<li>Content-Type: 'image/png'</li>\n</ul>\n\n\n<p><strong>Important</strong>: By default, chart data is sent to a server operated\nby Sencha to do data processing. You may change this default by\nsetting the <a href=\"#!/api/Ext.draw.engine.ImageExporter-property-defaultUrl\" rel=\"Ext.draw.engine.ImageExporter-property-defaultUrl\" class=\"docClass\">defaultUrl</a> of this class.\nIn addition, please note that this service only creates PNG images.</p>\n"},"Svg":{"!doc":"<p>Provides specific methods to draw with SVG.</p>\n"},"SvgExporter":{"!doc":"<p>A utility class for exporting a <a href=\"#!/api/Ext.draw.Surface\" rel=\"Ext.draw.Surface\" class=\"docClass\">Surface</a> to a string\nthat may be saved or used for processing on the server.</p>\n"},"Vml":{"!doc":"<p>Provides specific methods to draw with VML.</p>\n"}},"Surface":{"!doc":"<p>A Surface is an interface to render methods inside <a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>.</p>\n\n<p>Most of the Surface methods are abstract and they have a concrete implementation\nin <a href=\"#!/api/Ext.draw.engine.Vml\" rel=\"Ext.draw.engine.Vml\" class=\"docClass\">VML</a> or <a href=\"#!/api/Ext.draw.engine.Svg\" rel=\"Ext.draw.engine.Svg\" class=\"docClass\">SVG</a> engines.</p>\n\n<p>A Surface contains methods to render <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">sprites</a>, get bounding\nboxes of sprites, add sprites to the canvas, initialize other graphic components, etc.</p>\n\n<h2>Adding sprites to surface</h2>\n\n<p>One of the most used methods for this class is the <a href=\"#!/api/Ext.draw.Surface-method-add\" rel=\"Ext.draw.Surface-method-add\" class=\"docClass\">add</a> method, to add Sprites to\nthe surface. For example:</p>\n\n<pre><code>drawComponent.surface.add({\n    type: 'circle',\n    fill: '#ffc',\n    radius: 100,\n    x: 100,\n    y: 100\n});\n</code></pre>\n\n<p>The configuration object passed in the <code>add</code> method is the same as described in the\n<a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a> class documentation.</p>\n\n<p>Sprites can also be added to surface by setting their surface config at creation time:</p>\n\n<pre><code>var sprite = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a>', {\n    type: 'circle',\n    fill: '#ff0',\n    surface: drawComponent.surface,\n    radius: 5\n});\n</code></pre>\n\n<p>In order to properly apply properties and render the sprite we have to\n<code>show</code> the sprite setting the option <code>redraw</code> to <code>true</code>:</p>\n\n<pre><code>sprite.show(true);\n</code></pre>\n"},"Matrix":{"!doc":"\n"},"Sprite":{"!doc":"<p>A Sprite is an object rendered in a Drawing surface.</p>\n\n<h2>Types</h2>\n\n<p>The following sprite types are supported:</p>\n\n<h3>Rect</h3>\n\n<p>Rectangle requires <code>width</code> and <code>height</code> attributes:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: 'rect',\n        width: 100,\n        height: 50,\n        radius: 10,\n        fill: 'green',\n        opacity: 0.5,\n        stroke: 'red',\n        'stroke-width': 2\n    }]\n});\n</code></pre>\n\n<h3>Circle</h3>\n\n<p>Circle requires <code>x</code>, <code>y</code> and <code>radius</code> attributes:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: 'circle',\n        radius: 90,\n        x: 100,\n        y: 100,\n        fill: 'blue'\n    }]\n});\n</code></pre>\n\n<h3>Ellipse</h3>\n\n<p>Ellipse requires <code>x</code>, <code>y</code>, <code>radiusX</code> and <code>radiusY</code> attributes:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: \"ellipse\",\n        radiusX: 100,\n        radiusY: 50,\n        x: 100,\n        y: 100,\n        fill: 'red'\n    }]\n});\n</code></pre>\n\n<h3>Path</h3>\n\n<p>Path requires the <code>path</code> attribute:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: \"path\",\n        path: \"M-66.6 26C-66.6 26 -75 22 -78.2 18.4C-81.4 14.8 -80.948 19.966 \" +\n              \"-85.8 19.6C-91.647 19.159 -90.6 3.2 -90.6 3.2L-94.6 10.8C-94.6 \" +\n              \"10.8 -95.8 25.2 -87.8 22.8C-83.893 21.628 -82.6 23.2 -84.2 \" +\n              \"24C-85.8 24.8 -78.6 25.2 -81.4 26.8C-84.2 28.4 -69.8 23.2 -72.2 \" +\n              \"33.6L-66.6 26z\",\n        fill: \"purple\"\n    }]\n});\n</code></pre>\n\n<h3>Text</h3>\n\n<p>Text requires the <code>text</code> attribute:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: \"text\",\n        text: \"Hello, Sprite!\",\n        fill: \"green\",\n        font: \"18px monospace\"\n    }]\n});\n</code></pre>\n\n<h3>Image</h3>\n\n<p>Image requires <code>width</code>, <code>height</code> and <code>src</code> attributes:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.draw.Component\" rel=\"Ext.draw.Component\" class=\"docClass\">Ext.draw.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    items: [{\n        type: \"image\",\n        src: \"http://www.sencha.com/img/apple-touch-icon.png\",\n        width: 200,\n        height: 200\n    }]\n});\n</code></pre>\n\n<h2>Creating and adding a Sprite to a Surface</h2>\n\n<p>See <a href=\"#!/api/Ext.draw.Surface\" rel=\"Ext.draw.Surface\" class=\"docClass\">Ext.draw.Surface</a> documentation.</p>\n\n<h2>Transforming sprites</h2>\n\n<p>See <a href=\"#!/api/Ext.draw.Sprite-method-setAttributes\" rel=\"Ext.draw.Sprite-method-setAttributes\" class=\"docClass\">setAttributes</a> method documentation for examples on how to translate, scale and rotate the sprites.</p>\n"},"SpriteDD":{"!doc":"<p>DD implementation for Panels.</p>\n"},"Text":{"!doc":"<p>This class encapsulates a drawn text item as rendered by the Ext.draw package within a Component which can be\nthen used anywhere in an ExtJS application just like any other Component.</p>\n\n<h2>Example usage</h2>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Panel with VerticalTextItem',\n    width: 300,\n    height: 200,\n    lbar: {\n        layout: {\n            align: 'center'\n        },\n        items: [{\n            xtype: 'text',\n            text: 'Sample VerticalTextItem',\n            degrees: 90\n        }]\n    },\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"Class":{"!doc":"<p>Handles class creation throughout the framework. This is a low level factory that is used by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> and generally\nshould not be used directly. If you choose to use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> you will lose out on the namespace, aliasing and depency loading\nfeatures made available by <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a>. The only time you would use <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> directly is to create an anonymous class.</p>\n\n<p>If you wish to create a class you should use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> which aliases\n<a href=\"#!/api/Ext.ClassManager-method-create\" rel=\"Ext.ClassManager-method-create\" class=\"docClass\">Ext.ClassManager.create</a> to enable namespacing and dynamic dependency resolution.</p>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> is the factory and <strong>not</strong> the superclass of everything. For the base class that <strong>all</strong> Ext classes inherit\nfrom, see <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.</p>\n"},"ClassManager":{"!doc":"<p><a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> manages all classes and handles mapping from string class name to\nactual class objects throughout the whole framework. It is not generally accessed directly, rather through\nthese convenient shorthands:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a></li>\n<li><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a></li>\n<li><a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a></li>\n<li><a href=\"#!/api/Ext-method-getClass\" rel=\"Ext-method-getClass\" class=\"docClass\">Ext.getClass</a></li>\n<li><a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a></li>\n</ul>\n\n\n<h1>Basic syntax:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>(className, properties);\n</code></pre>\n\n<p>in which <code>properties</code> is an object represent a collection of properties that apply to the class. See\n<a href=\"#!/api/Ext.ClassManager-method-create\" rel=\"Ext.ClassManager-method-create\" class=\"docClass\">create</a> for more detailed instructions.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n     name: 'Unknown',\n\n     constructor: function(name) {\n         if (name) {\n             this.name = name;\n         }\n     },\n\n     eat: function(foodType) {\n         alert(\"I'm eating: \" + foodType);\n\n         return this;\n     }\n});\n\nvar aaron = new Person(\"Aaron\");\naaron.eat(\"Sandwich\"); // alert(\"I'm eating: Sandwich\");\n</code></pre>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> has a powerful set of extensible <a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">pre-processors</a> which takes care of\neverything related to class creation, including but not limited to inheritance, mixins, configuration, statics, etc.</p>\n\n<h1>Inheritance:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n     extend: 'Person',\n\n     constructor: function(name, isGeek) {\n         this.isGeek = isGeek;\n\n         // Apply a method from the parent class' prototype\n         this.callParent([name]);\n     },\n\n     code: function(language) {\n         alert(\"I'm coding in: \" + language);\n\n         this.eat(\"Bugs\");\n\n         return this;\n     }\n});\n\nvar jacky = new Developer(\"Jacky\", true);\njacky.code(\"JavaScript\"); // alert(\"I'm coding in: JavaScript\");\n                          // alert(\"I'm eating: Bugs\");\n</code></pre>\n\n<p>See <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">Ext.Base.callParent</a> for more details on calling superclass' methods</p>\n\n<h1>Mixins:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanPlayGuitar', {\n     playGuitar: function() {\n        alert(\"F#...G...D...A\");\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanComposeSongs', {\n     composeSongs: function() { ... }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"I'm on the highway to hell...\")\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     extend: 'Person',\n\n     mixins: {\n         canPlayGuitar: 'CanPlayGuitar',\n         canComposeSongs: 'CanComposeSongs',\n         canSing: 'CanSing'\n     }\n})\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CoolPerson', {\n     extend: 'Person',\n\n     mixins: {\n         canPlayGuitar: 'CanPlayGuitar',\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         alert(\"Ahem....\");\n\n         this.mixins.canSing.sing.call(this);\n\n         alert(\"[Playing guitar at the same time...]\");\n\n         this.playGuitar();\n     }\n});\n\nvar me = new CoolPerson(\"Jacky\");\n\nme.sing(); // alert(\"Ahem...\");\n           // alert(\"I'm on the highway to hell...\");\n           // alert(\"[Playing guitar at the same time...]\");\n           // alert(\"F#...G...D...A\");\n</code></pre>\n\n<h1>Config:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('SmartPhone', {\n     config: {\n         hasTouchScreen: false,\n         operatingSystem: 'Other',\n         price: 500\n     },\n\n     isExpensive: false,\n\n     constructor: function(config) {\n         this.initConfig(config);\n     },\n\n     applyPrice: function(price) {\n         this.isExpensive = (price &gt; 500);\n\n         return price;\n     },\n\n     applyOperatingSystem: function(operatingSystem) {\n         if (!(/^(iOS|Android|BlackBerry)$/i).test(operatingSystem)) {\n             return 'Other';\n         }\n\n         return operatingSystem;\n     }\n});\n\nvar iPhone = new SmartPhone({\n     hasTouchScreen: true,\n     operatingSystem: 'iOS'\n});\n\niPhone.getPrice(); // 500;\niPhone.getOperatingSystem(); // 'iOS'\niPhone.getHasTouchScreen(); // true;\niPhone.hasTouchScreen(); // true\n\niPhone.isExpensive; // false;\niPhone.setPrice(600);\niPhone.getPrice(); // 600\niPhone.isExpensive; // true;\n\niPhone.setOperatingSystem('AlienOS');\niPhone.getOperatingSystem(); // 'Other'\n</code></pre>\n\n<h1>Statics:</h1>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n            // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n\n<p>Also see <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">Ext.Base.statics</a> and <a href=\"#!/api/Ext.Base-property-self\" rel=\"Ext.Base-property-self\" class=\"docClass\">Ext.Base.self</a> for more details on accessing\nstatic properties within class methods</p>\n"},"ComponentLoader":{"!doc":"<p>This class is used to load content via Ajax into a <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>. In general\nthis class will not be instanced directly, rather a loader configuration will be passed to the\nconstructor of the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>.</p>\n\n<h2>HTML Renderer</h2>\n\n<p>By default, the content loaded will be processed as raw html. The response text\nfrom the request is taken and added to the component. This can be used in\nconjunction with the <a href=\"#!/api/Ext.ComponentLoader-cfg-scripts\" rel=\"Ext.ComponentLoader-cfg-scripts\" class=\"docClass\">scripts</a> option to execute any inline scripts in\nthe resulting content. Using this renderer has the same effect as passing the\n<a href=\"#!/api/Ext.Component-cfg-html\" rel=\"Ext.Component-cfg-html\" class=\"docClass\">Ext.Component.html</a> configuration option.</p>\n\n<h2>Data Renderer</h2>\n\n<p>This renderer allows content to be added by using JSON data and a <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>.\nThe content received from the response is passed to the <a href=\"#!/api/Ext.Component-method-update\" rel=\"Ext.Component-method-update\" class=\"docClass\">Ext.Component.update</a> method.\nThis content is run through the attached <a href=\"#!/api/Ext.Component-cfg-tpl\" rel=\"Ext.Component-cfg-tpl\" class=\"docClass\">Ext.Component.tpl</a> and the data is added to\nthe Component. Using this renderer has the same effect as using the <a href=\"#!/api/Ext.Component-cfg-data\" rel=\"Ext.Component-cfg-data\" class=\"docClass\">Ext.Component.data</a>\nconfiguration in conjunction with a <a href=\"#!/api/Ext.Component-cfg-tpl\" rel=\"Ext.Component-cfg-tpl\" class=\"docClass\">Ext.Component.tpl</a>.</p>\n\n<h2>Component Renderer</h2>\n\n<p>This renderer can only be used with a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> and subclasses. It allows for\nComponents to be loaded remotely into a Container. The response is expected to be a single/series of\n<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> configuration objects. When the response is received, the data is decoded\nand then passed to <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">Ext.container.Container.add</a>. Using this renderer has the same effect as specifying\nthe <a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">Ext.container.Container.items</a> configuration on a Container.</p>\n\n<h2>Custom Renderer</h2>\n\n<p>A custom function can be passed to handle any other special case, see the <a href=\"#!/api/Ext.ComponentLoader-cfg-renderer\" rel=\"Ext.ComponentLoader-cfg-renderer\" class=\"docClass\">renderer</a> option.</p>\n\n<h2>Example Usage</h2>\n\n<pre><code>var cmp = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    tpl: '{firstName} - {lastName}',\n    loader: {\n        url: 'myPage.php',\n        renderer: 'data',\n        params: {\n            userId: 1\n        }\n    }\n});\n\n// call the loader manually (or use autoLoad:true instead)\ncmp.getLoader().load();\n</code></pre>\n"},"ElementLoader":{"!doc":"<p>A class used to load remote content to an Element. Sample usage:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('el').load({\n    url: 'myPage.php',\n    scripts: true,\n    params: {\n        id: 1\n    }\n});\n</code></pre>\n\n<p>In general this class will not be instanced directly, rather the <a href=\"#!/api/Ext.dom.Element-method-load\" rel=\"Ext.dom.Element-method-load\" class=\"docClass\">Ext.Element.load</a> method\nwill be used.</p>\n"},"ComponentManager":{"!doc":"<p>Provides a registry of all Components (instances of <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> or any subclass\nthereof) on a page so that they can be easily accessed by <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">component</a>\n<a href=\"#!/api/Ext.Component-cfg-id\" rel=\"Ext.Component-cfg-id\" class=\"docClass\">id</a> (see <a href=\"#!/api/Ext.ComponentManager-method-get\" rel=\"Ext.ComponentManager-method-get\" class=\"docClass\">get</a>, or the convenience method <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>).</p>\n\n\n<p>This object also provides a registry of available Component <i>classes</i>\nindexed by a mnemonic code known as the Component's <a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtype</a>.\nThe <code>xtype</code> provides a way to avoid instantiating child Components\nwhen creating a full, nested config object for a complete Ext page.</p>\n\n\n<p>A child Component may be specified simply as a <i>config object</i>\nas long as the correct <code><a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtype</a></code> is specified so that if and when the Component\nneeds rendering, the correct type can be looked up for lazy instantiation.</p>\n\n\n<p>For a list of all available <code><a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtypes</a></code>, see <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>.</p>\n\n"},"ComponentQuery":{"!doc":"<p>Provides searching of Components within <a href=\"#!/api/Ext.ComponentManager\" rel=\"Ext.ComponentManager\" class=\"docClass\">Ext.ComponentManager</a> (globally) or a specific\n<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> on the document with a similar syntax to a CSS selector.\nReturns Array of matching Components, or empty Array.</p>\n\n<h2>Basic Component lookup</h2>\n\n<p>Components can be retrieved by using their <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">xtype</a>:</p>\n\n<ul>\n<li><code>component</code></li>\n<li><code>gridpanel</code></li>\n</ul>\n\n\n<p>Matching by <code>xtype</code> matches inherited types, so in the following code, the previous field\n<em>of any type which inherits from <code>TextField</code></em> will be found:</p>\n\n<pre><code>prevField = myField.previousNode('textfield');\n</code></pre>\n\n<p>To match only the exact type, pass the \"shallow\" flag by adding <code>(true)</code> to xtype\n(See AbstractComponent's <a href=\"#!/api/Ext.AbstractComponent-method-isXType\" rel=\"Ext.AbstractComponent-method-isXType\" class=\"docClass\">isXType</a> method):</p>\n\n<pre><code>prevTextField = myField.previousNode('textfield(true)');\n</code></pre>\n\n<p>You can search Components by their <code>id</code> or <code>itemId</code> property, prefixed with a #:</p>\n\n<pre><code>#myContainer\n</code></pre>\n\n<p>Component <code>xtype</code> and <code>id</code> or <code>itemId</code> can be used together to avoid possible\nid collisions between Components of different types:</p>\n\n<pre><code>panel#myPanel\n</code></pre>\n\n<h2>Traversing Component tree</h2>\n\n<p>Components can be found by their relation to other Components. There are several\nrelationship operators, mostly taken from CSS selectors:</p>\n\n<ul>\n<li><strong><code>E F</code></strong> All descendant Components of E that match F</li>\n<li><strong><code>E &gt; F</code></strong> All direct children Components of E that match F</li>\n<li><strong><code>E ^ F</code></strong> All parent Components of E that match F</li>\n</ul>\n\n\n<p>Expressions between relationship operators are matched left to right, i.e. leftmost\nselector is applied first, then if one or more matches are found, relationship operator\nitself is applied, then next selector expression, etc. It is possible to combine\nrelationship operators in complex selectors:</p>\n\n<pre><code>window[title=\"Input form\"] textfield[name=login] ^ form &gt; button[action=submit]\n</code></pre>\n\n<p>That selector can be read this way: Find a window with title \"Input form\", in that\nwindow find a TextField with name \"login\" at any depth (including subpanels and/or\nFieldSets), then find an <code><a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a></code> that is a parent of the TextField, and in\nthat form find a direct child that is a button with custom property <code>action</code> set to\nvalue \"submit\".</p>\n\n<p>Whitespace on both sides of <code>^</code> and <code>&gt;</code> operators is non-significant, i.e. can be\nomitted, but usually is used for clarity.</p>\n\n<h2>Searching by Component attributes</h2>\n\n<p>Components can be searched by their object property values (attributes). To do that,\nuse attribute matching expression in square brackets:</p>\n\n<ul>\n<li><code>component[autoScroll]</code> - matches any Component that has <code>autoScroll</code> property with\nany truthy (non-empty, not <code>false</code>) value.</li>\n<li><code>panel[title=\"Test\"]</code> - matches any Component that has <code>title</code> property set to\n\"Test\". Note that if the value does not contain spaces, the quotes are optional.</li>\n</ul>\n\n\n<p>Attributes can use any of the operators in <a href=\"#!/api/Ext.dom.Query\" rel=\"Ext.dom.Query\" class=\"docClass\">DomQuery</a>'s\n<a href=\"#!/api/Ext.dom.Query-property-operators\" rel=\"Ext.dom.Query-property-operators\" class=\"docClass\">operators</a> to compare values.</p>\n\n<p>Prefixing the attribute name with an at sign <code>@</code> means that the property must be\nthe object's <code>ownProperty</code>, not a property from the prototype chain.</p>\n\n<p>Specifications like <code>[propName]</code> check that the property is a truthy value. To check\nthat the object has an <code>ownProperty</code> of a certain name, regardless of the value use\nthe form <code>[?propName]</code>.</p>\n\n<p>The specified value is coerced to match the type of the property found in the\ncandidate Component using <a href=\"#!/api/Ext-method-coerce\" rel=\"Ext-method-coerce\" class=\"docClass\">Ext.coerce</a>.</p>\n\n<p>If you need to find Components by their <code>itemId</code> property, use <code>#id</code> form; it will\ndo the same but is easier to read.</p>\n\n<h2>Attribute matching operators</h2>\n\n<p>The '=' operator will return the results that <strong>exactly</strong> match the\nspecified object property (attribute):</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel[cls=my-cls]');\n</code></pre>\n\n<p>Will match the following Component:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>', {\n    cls: 'my-cls'\n});\n</code></pre>\n\n<p>But will not match the following Component, because 'my-cls' is one value\namong others:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n     cls: 'foo-cls my-cls bar-cls'\n });\n</code></pre>\n\n<p>You can use the '~=' operator instead, it will return Components with\nthe property that <strong>exactly</strong> matches one of the whitespace-separated\nvalues. This is also true for properties that only have <em>one</em> value:</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel[cls~=my-cls]');\n</code></pre>\n\n<p>Will match both Components:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    cls: 'foo-cls my-cls bar-cls'\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>', {\n    cls: 'my-cls'\n});\n</code></pre>\n\n<p>Generally, '=' operator is more suited for object properties other than\nCSS classes, while '~=' operator will work best with properties that\nhold lists of whitespace-separated CSS classes.</p>\n\n<p>The '^=' operator will return Components with specified attribute that\nstart with the passed value:</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel[title^=Sales]');\n</code></pre>\n\n<p>Will match the following Component:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Sales estimate for Q4'\n});\n</code></pre>\n\n<p>The '$=' operator will return Components with specified properties that\nend with the passed value:</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('field[fieldLabel$=name]');\n</code></pre>\n\n<p>Will match the following Component:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n    fieldLabel: 'Enter your name'\n});\n</code></pre>\n\n<p>The following test will find panels with their <code>ownProperty</code> collapsed being equal to\n<code>false</code>. It will <strong>not</strong> match a collapsed property from the prototype chain.</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel[@collapsed=false]');\n</code></pre>\n\n<p>Member expressions from candidate Components may be tested. If the expression returns\na <em>truthy</em> value, the candidate Component will be included in the query:</p>\n\n<pre><code>var disabledFields = myFormPanel.query(\"{isDisabled()}\");\n</code></pre>\n\n<p>Such expressions are executed in Component's context, and the above expression is\nsimilar to running this snippet for every Component in your application:</p>\n\n<pre><code> if (component.isDisabled()) {\n     matches.push(component);\n }\n</code></pre>\n\n<p>It is important to use only methods that are available in <strong>every</strong> Component instance\nto avoid run time exceptions. If you need to match your Components with a custom\ncondition formula, you can augment <code><a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a></code> to provide custom matcher that\nwill return <code>false</code> by default, and override it in your custom classes:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Component', {\n     override: '<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>',\n     myMatcher: function() { return false; }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Panel', {\n     extend: '<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>',\n     requires: ['My.Component'],     // Ensure that Component override is applied\n     myMatcher: function(selector) {\n         return selector === 'myPanel';\n     }\n });\n</code></pre>\n\n<p>After that you can use a selector with your custom matcher to find all instances\nof <code>My.Panel</code>:</p>\n\n<pre><code> <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>(\"{myMatcher('myPanel')}\");\n</code></pre>\n\n<p>However if you really need to use a custom matcher, you may find it easier to implement\na custom Pseudo class instead (see below).</p>\n\n<h2>Conditional matching</h2>\n\n<p>Attribute matchers can be combined to select only Components that match <strong>all</strong>\nconditions (logical AND operator):</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel[cls~=my-cls][floating=true][title$=\"sales data\"]');\n</code></pre>\n\n<p>E.g., the query above will match only a Panel-descended Component that has 'my-cls'\nCSS class <em>and</em> is floating <em>and</em> with a title that ends with \"sales data\".</p>\n\n<p>Expressions separated with commas will match any Component that satisfies\n<em>either</em> expression (logical OR operator):</p>\n\n<pre><code><a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('field[fieldLabel^=User], field[fieldLabel*=password]');\n</code></pre>\n\n<p>E.g., the query above will match any field with field label starting with \"User\",\n<em>or</em> any field that has \"password\" in its label.</p>\n\n<h2>Pseudo classes</h2>\n\n<p>Pseudo classes may be used to filter results in the same way as in\n<a href=\"#!/api/Ext.dom.Query\" rel=\"Ext.dom.Query\" class=\"docClass\">Ext.dom.Query</a>. There are five default pseudo classes:</p>\n\n<ul>\n<li><code>not</code> Negates a selector.</li>\n<li><code>first</code> Filters out all except the first matching item for a selector.</li>\n<li><code>last</code> Filters out all except the last matching item for a selector.</li>\n<li><code>focusable</code> Filters out all except Components which are currently able to recieve\nfocus.</li>\n<li><code>nth-child</code> Filters Components by ordinal position in the selection.</li>\n</ul>\n\n\n<p>These pseudo classes can be used with other matchers or without them:</p>\n\n<pre><code> // Select first direct child button in any panel\n <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel &gt; button:first');\n\n // Select last field in Profile form\n <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('form[title=Profile] field:last');\n\n // Find first focusable Component in a panel and focus it\n panel.down(':focusable').focus();\n\n // Select any field that is not hidden in a form\n form.query('field:not(hiddenfield)');\n</code></pre>\n\n<p>Pseudo class <code>nth-child</code> can be used to find any child Component by its\nposition relative to its siblings. This class' handler takes one argument\nthat specifies the selection formula as <code>Xn</code> or <code>Xn+Y</code>:</p>\n\n<pre><code> // Find every odd field in a form\n form.query('field:nth-child(2n+1)'); // or use shortcut: :nth-child(odd)\n\n // Find every even field in a form\n form.query('field:nth-child(2n)');   // or use shortcut: :nth-child(even)\n\n // Find every 3rd field in a form\n form.query('field:nth-child(3n)');\n</code></pre>\n\n<p>Pseudo classes can be combined to further filter the results, e.g., in the\nform example above we can modify the query to exclude hidden fields:</p>\n\n<pre><code> // Find every 3rd non-hidden field in a form\n form.query('field:not(hiddenfield):nth-child(3n)');\n</code></pre>\n\n<p>Note that when combining pseudo classes, whitespace is significant, i.e.\nthere should be no spaces between pseudo classes. This is a common mistake;\nif you accidentally type a space between <code>field</code> and <code>:not</code>, the query\nwill not return any result because it will mean \"find <em>field's children\nComponents</em> that are not hidden fields...\".</p>\n\n<h2>Custom pseudo classes</h2>\n\n<p>It is possible to define your own custom pseudo classes. In fact, a\npseudo class is just a property in <code>Ext.ComponentQuery.pseudos</code> object\nthat defines pseudo class name (property name) and pseudo class handler\n(property value):</p>\n\n<pre><code>// Function receives array and returns a filtered array.\nExt.ComponentQuery.pseudos.invalid = function(items) {\n    var i = 0, l = items.length, c, result = [];\n    for (; i &lt; l; i++) {\n        if (!(c = items[i]).isValid()) {\n            result.push(c);\n        }\n    }\n    return result;\n};\n\nvar invalidFields = myFormPanel.query('field:invalid');\nif (invalidFields.length) {\n    invalidFields[0].getEl().scrollIntoView(myFormPanel.body);\n    for (var i = 0, l = invalidFields.length; i &lt; l; i++) {\n        invalidFields[i].getEl().frame(\"red\");\n    }\n}\n</code></pre>\n\n<p>Pseudo class handlers can be even more flexible, with a selector\nargument used to define the logic:</p>\n\n<pre><code> // Handler receives array of itmes and selector in parentheses\n Ext.ComponentQuery.pseudos.titleRegex = function(components, selector) {\n     var i = 0, l = components.length, c, result = [], regex = new RegExp(selector);\n     for (; i &lt; l; i++) {\n         c = components[i];\n         if (c.title &amp;&amp; regex.test(c.title)) {\n             result.push(c);\n         }\n     }\n     return result;\n }\n\n var salesTabs = tabPanel.query('panel:titleRegex(\"sales\\\\s+for\\\\s+201[123]\")');\n</code></pre>\n\n<p>Be careful when using custom pseudo classes with MVC Controllers: when\nyou use a pseudo class in Controller's <code>control</code> or <code>listen</code> component\nselectors, the pseudo class' handler function will be called very often\nand may slow down your application significantly. A good rule of thumb\nis to always specify Component xtype with the pseudo class so that the\nhandlers are only called on Components that you need, and try to make\nthe condition checks as cheap in terms of execution time as possible.\nNote how in the example above, handler function checks that Component\n<em>has</em> a title first, before running regex test on it.</p>\n\n<h2>Query examples</h2>\n\n<p>Queries return an array of Components. Here are some example queries:</p>\n\n<pre><code>// retrieve all Ext.Panels in the document by xtype\nvar panelsArray = <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('panel');\n\n// retrieve all Ext.Panels within the container with an id myCt\nvar panelsWithinmyCt = <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('#myCt panel');\n\n// retrieve all direct children which are Ext.Panels within myCt\nvar directChildPanel = <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('#myCt &gt; panel');\n\n// retrieve all grids or trees\nvar gridsAndTrees = <a href=\"#!/api/Ext.ComponentQuery-method-query\" rel=\"Ext.ComponentQuery-method-query\" class=\"docClass\">Ext.ComponentQuery.query</a>('gridpanel, treepanel');\n\n// Focus first Component\nmyFormPanel.child(':focusable').focus();\n\n// Retrieve every odd text field in a form\nmyFormPanel.query('textfield:nth-child(odd)');\n\n// Retrieve every even field in a form, excluding hidden fields\nmyFormPanel.query('field:not(hiddenfield):nth-child(even)');\n</code></pre>\n\n<p>For easy access to queries based from a particular Container see the\n<a href=\"#!/api/Ext.container.Container-method-query\" rel=\"Ext.container.Container-method-query\" class=\"docClass\">Ext.container.Container.query</a>, <a href=\"#!/api/Ext.container.Container-method-down\" rel=\"Ext.container.Container-method-down\" class=\"docClass\">Ext.container.Container.down</a> and\n<a href=\"#!/api/Ext.container.Container-method-child\" rel=\"Ext.container.Container-method-child\" class=\"docClass\">Ext.container.Container.child</a> methods. Also see\n<a href=\"#!/api/Ext.Component-method-up\" rel=\"Ext.Component-method-up\" class=\"docClass\">Ext.Component.up</a>.</p>\n"},"container":{"AbstractContainer":{"!doc":"<p>An abstract base class which provides shared methods for Containers across the Sencha product line.</p>\n\n<p>Please refer to sub class's documentation</p>\n"},"ButtonGroup":{"!doc":"<p>Provides a container for arranging a group of related Buttons in a tabular manner.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Panel with ButtonGroup',\n    width: 300,\n    height:200,\n    renderTo: document.body,\n    bodyPadding: 10,\n    html: 'HTML Panel Content',\n    tbar: [{\n        xtype: 'buttongroup',\n        columns: 3,\n        title: 'Clipboard',\n        items: [{\n            text: 'Paste',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            cls: 'btn-as-arrow'\n        },{\n            xtype:'splitbutton',\n            text: 'Menu Button',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            arrowAlign:'bottom',\n            menu: [{ text: 'Menu Item 1' }]\n        },{\n            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]\n        },{\n            text: 'Copy', iconCls: 'add16'\n        },{\n            text: 'Format', iconCls: 'add16'\n        }]\n    }]\n});\n</code></pre>\n"},"Container":{"!doc":"<p>Base class for any <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> that may contain other Components. Containers handle the basic behavior of\ncontaining items, namely adding, inserting and removing items.</p>\n\n<p>The most commonly used Container classes are <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>, <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a> and\n<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>. If you do not need the capabilities offered by the aforementioned classes you can create a\nlightweight Container to be encapsulated by an HTML element to your specifications by using the\n<a href=\"#!/api/Ext.Component-cfg-autoEl\" rel=\"Ext.Component-cfg-autoEl\" class=\"docClass\">autoEl</a> config option.</p>\n\n<p>The code below illustrates how to explicitly create a Container:</p>\n\n<pre class='inline-example '><code>// Explicitly create a Container\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>', {\n    layout: {\n        type: 'hbox'\n    },\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    border: 1,\n    style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n    defaults: {\n        labelWidth: 80,\n        // implicitly create Container by specifying xtype\n        xtype: 'datefield',\n        flex: 1,\n        style: {\n            padding: '10px'\n        }\n    },\n    items: [{\n        xtype: 'datefield',\n        name: 'startDate',\n        fieldLabel: 'Start date'\n    },{\n        xtype: 'datefield',\n        name: 'endDate',\n        fieldLabel: 'End date'\n    }]\n});\n</code></pre>\n\n<h2>Layout</h2>\n\n<p>Container classes delegate the rendering of child Components to a layout manager class which must be configured into\nthe Container using the <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> configuration property.</p>\n\n<p>When either specifying child <code><a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a></code> of a Container, or dynamically <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">adding</a> Components to a\nContainer, remember to consider how you wish the Container to arrange those child elements, and whether those child\nelements need to be sized using one of Ext's built-in <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> schemes. By default, Containers use the\n<a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme which only renders child components, appending them one after the other\ninside the Container, and <strong>does not apply any sizing</strong> at all.</p>\n\n<p>A common mistake is when a developer neglects to specify a <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> (e.g. widgets like GridPanels or\nTreePanels are added to Containers for which no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> has been specified). If a Container is left to\nuse the default <a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme, none of its child components will be resized, or changed in\nany way when the Container is resized.</p>\n\n<p>Certain layout managers allow dynamic addition of child components. Those that do include\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Ext.layout.container.Card</a>, <a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">Ext.layout.container.Anchor</a>, <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">Ext.layout.container.VBox</a>,\n<a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">Ext.layout.container.HBox</a>, and <a href=\"#!/api/Ext.layout.container.Table\" rel=\"Ext.layout.container.Table\" class=\"docClass\">Ext.layout.container.Table</a>. For example:</p>\n\n<pre><code>//  Create the GridPanel.\nvar myNewGrid = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: myStore,\n    headers: myHeaders,\n    title: 'Results', // the title becomes the title of the tab\n});\n\nmyTabPanel.add(myNewGrid); // <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a> implicitly uses <a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Card</a>\nmyTabPanel.<a href=\"#!/api/Ext.tab.Panel-method-setActiveTab\" rel=\"Ext.tab.Panel-method-setActiveTab\" class=\"docClass\">setActiveTab</a>(myNewGrid);\n</code></pre>\n\n<p>The example above adds a newly created GridPanel to a TabPanel. Note that a TabPanel uses <a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Ext.layout.container.Card</a> as its layout manager which means all its child items are sized to <a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">fit</a> exactly into its client area.</p>\n\n<p><strong><em>Overnesting is a common problem</em></strong>. An example of overnesting occurs when a GridPanel is added to a TabPanel by\nwrapping the GridPanel <em>inside</em> a wrapping Panel (that has no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> specified) and then add that\nwrapping Panel to the TabPanel. The point to realize is that a GridPanel <strong>is</strong> a Component which can be added\ndirectly to a Container. If the wrapping Panel has no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> configuration, then the overnested\nGridPanel will not be sized as expected.</p>\n\n<h2>Adding via remote configuration</h2>\n\n<p>A server side script can be used to add Components which are generated dynamically on the server. An example of\nadding a GridPanel to a TabPanel where the GridPanel is generated by the server based on certain parameters:</p>\n\n<pre><code>// execute an Ajax request to invoke server side script:\n<a href=\"#!/api/Ext.Ajax-method-request\" rel=\"Ext.Ajax-method-request\" class=\"docClass\">Ext.Ajax.request</a>({\n    url: 'gen-invoice-grid.php',\n    // send additional parameters to instruct server script\n    params: {\n        startDate: <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('start-date').getValue(),\n        endDate: <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('end-date').getValue()\n    },\n    // process the response object to add it to the TabPanel:\n    success: function(xhr) {\n        var newComponent = eval(xhr.responseText); // see discussion below\n        myTabPanel.add(newComponent); // add the component to the TabPanel\n        myTabPanel.setActiveTab(newComponent);\n    },\n    failure: function() {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>(\"Grid create failed\", \"Server communication failure\");\n    }\n});\n</code></pre>\n\n<p>The server script needs to return a JSON representation of a configuration object, which, when decoded will return a\nconfig object with an <a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtype</a>. The server might return the following JSON:</p>\n\n<pre><code>{\n    \"xtype\": 'grid',\n    \"title\": 'Invoice Report',\n    \"store\": {\n        \"model\": 'Invoice',\n        \"proxy\": {\n            \"type\": 'ajax',\n            \"url\": 'get-invoice-data.php',\n            \"reader\": {\n                \"type\": 'json'\n                \"record\": 'transaction',\n                \"idProperty\": 'id',\n                \"totalRecords\": 'total'\n            })\n        },\n        \"autoLoad\": {\n            \"params\": {\n                \"startDate\": '01/01/2008',\n                \"endDate\": '01/31/2008'\n            }\n        }\n    },\n    \"headers\": [\n        {\"header\": \"Customer\", \"width\": 250, \"dataIndex\": 'customer', \"sortable\": true},\n        {\"header\": \"Invoice Number\", \"width\": 120, \"dataIndex\": 'invNo', \"sortable\": true},\n        {\"header\": \"Invoice Date\", \"width\": 100, \"dataIndex\": 'date', \"renderer\": <a href=\"#!/api/Ext.util.Format-method-dateRenderer\" rel=\"Ext.util.Format-method-dateRenderer\" class=\"docClass\">Ext.util.Format.dateRenderer</a>('M d, y'), \"sortable\": true},\n        {\"header\": \"Value\", \"width\": 120, \"dataIndex\": 'value', \"renderer\": 'usMoney', \"sortable\": true}\n    ]\n}\n</code></pre>\n\n<p>When the above code fragment is passed through the <code>eval</code> function in the success handler of the Ajax request, the\nresult will be a config object which, when added to a Container, will cause instantiation of a GridPanel. <strong>Be sure\nthat the Container is configured with a layout which sizes and positions the child items to your requirements.</strong></p>\n\n<p><strong>Note:</strong> since the code above is <em>generated</em> by a server script, the <code>autoLoad</code> params for the Store, the user's\npreferred date format, the metadata to allow generation of the Model layout, and the ColumnModel can all be generated\ninto the code since these are all known on the server.</p>\n"},"DockingContainer":{"!doc":"\n"},"Monitor":{"!doc":"<p>This is a utility class for being able to track all items of a particular type\ninside any level at a container. This can be used in favour of bubbling add/remove events\nwhich can add a large perf cost when implemented globally</p>\n"},"Viewport":{"!doc":"<p>A specialized container representing the viewable application area (the browser viewport).</p>\n\n<p>The Viewport renders itself to the document body, and automatically sizes itself to the size of\nthe browser viewport and manages window resizing. There may only be one Viewport created\nin a page.</p>\n\n<p>Like any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>, a Viewport will only perform sizing and positioning\non its child Components if you configure it with a <a href=\"#!/api/Ext.container.Viewport-cfg-layout\" rel=\"Ext.container.Viewport-cfg-layout\" class=\"docClass\">layout</a>.</p>\n\n<p>A Common layout used with Viewports is <a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">border layout</a>, but if the\nrequired layout is simpler, a different layout should be chosen.</p>\n\n<p>For example, to simply make a single child item occupy all available space, use\n<a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">fit layout</a>.</p>\n\n<p>To display one \"active\" item at full size from a choice of several child items, use\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">card layout</a>.</p>\n\n<p>Inner layouts are available because all <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Panel</a>s\nadded to the Viewport, either through its <a href=\"#!/api/Ext.container.Viewport-cfg-items\" rel=\"Ext.container.Viewport-cfg-items\" class=\"docClass\">items</a>, or the <a href=\"#!/api/Ext.container.Viewport-method-add\" rel=\"Ext.container.Viewport-method-add\" class=\"docClass\">add</a>\nmethod of any of its child Panels may themselves have a layout.</p>\n\n<p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide\nfor scrolling if needed using the <a href=\"#!/api/Ext.container.Viewport-cfg-autoScroll\" rel=\"Ext.container.Viewport-cfg-autoScroll\" class=\"docClass\">autoScroll</a> config.</p>\n\n<p>An example showing a classic application border layout:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Ext.container.Viewport</a>', {\n    layout: 'border',\n    items: [{\n        region: 'north',\n        html: '&lt;h1 class=\"x-panel-header\"&gt;Page Title&lt;/h1&gt;',\n        border: false,\n        margins: '0 0 5 0'\n    }, {\n        region: 'west',\n        collapsible: true,\n        title: 'Navigation',\n        width: 150\n        // could use a TreePanel or AccordionLayout for navigational items\n    }, {\n        region: 'south',\n        title: 'South Panel',\n        collapsible: true,\n        html: 'Information goes here',\n        split: true,\n        height: 100,\n        minHeight: 100\n    }, {\n        region: 'east',\n        title: 'East Panel',\n        collapsible: true,\n        split: true,\n        width: 150\n    }, {\n        region: 'center',\n        xtype: 'tabpanel', // TabPanel itself has no title\n        activeTab: 0,      // First tab active by default\n        items: {\n            title: 'Default Tab',\n            html: 'The first tab\\'s content. Others may be added dynamically'\n        }\n    }]\n});\n</code></pre>\n"}},"panel":{"Panel":{"!doc":"<p>Panel is a container that has specific functionality and structural components that make it the perfect building\nblock for application-oriented user interfaces.</p>\n\n<p>Panels are, by virtue of their inheritance from <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>, capable of being configured with a\n<a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>, and containing child Components.</p>\n\n<p>When either specifying child <a href=\"#!/api/Ext.panel.Panel-cfg-items\" rel=\"Ext.panel.Panel-cfg-items\" class=\"docClass\">items</a> of a Panel, or dynamically <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">adding</a>\nComponents to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether those\nchild elements need to be sized using one of Ext's built-in <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code>\nschemes. By default, Panels use the <a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme. This simply renders child\ncomponents, appending them one after the other inside the Container, and <strong>does not apply any sizing</strong> at all.</p>\n\n<p><p><img src=\"\" alt=\"Panel components\" width=\"\" height=\"\"></p></p>\n\n<p>A Panel may also contain <a href=\"#!/api/Ext.panel.Panel-cfg-bbar\" rel=\"Ext.panel.Panel-cfg-bbar\" class=\"docClass\">bottom</a> and <a href=\"#!/api/Ext.panel.Panel-cfg-tbar\" rel=\"Ext.panel.Panel-cfg-tbar\" class=\"docClass\">top</a> toolbars, along with separate <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">header</a>, <a href=\"#!/api/Ext.panel.Panel-cfg-fbar\" rel=\"Ext.panel.Panel-cfg-fbar\" class=\"docClass\">footer</a> and body sections.</p>\n\n<p>Panel also provides built-in <a href=\"#!/api/Ext.panel.Panel-cfg-collapsible\" rel=\"Ext.panel.Panel-cfg-collapsible\" class=\"docClass\">collapsible, expandable</a> and <a href=\"#!/api/Ext.panel.Panel-cfg-closable\" rel=\"Ext.panel.Panel-cfg-closable\" class=\"docClass\">closable</a> behavior. Panels can\nbe easily dropped into any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a> or layout, and the layout and rendering pipeline\nis <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">completely managed by the framework</a>.</p>\n\n<p><strong>Note:</strong> By default, the <code><a href=\"#!/api/Ext.panel.Panel-cfg-closable\" rel=\"Ext.panel.Panel-cfg-closable\" class=\"docClass\">close</a></code> header tool <em>destroys</em> the Panel resulting in removal of the\nPanel and the destruction of any descendant Components. This makes the Panel object, and all its descendants\n<strong>unusable</strong>. To enable the close tool to simply <em>hide</em> a Panel for later re-use, configure the Panel with\n<code><a href=\"#!/api/Ext.panel.Panel-cfg-closeAction\" rel=\"Ext.panel.Panel-cfg-closeAction\" class=\"docClass\">closeAction</a>: 'hide'</code>.</p>\n\n<p>Usually, Panels are used as constituents within an application, in which case, they would be used as child items of\nContainers, and would themselves use Ext.Components as child <a href=\"#!/api/Ext.panel.Panel-cfg-items\" rel=\"Ext.panel.Panel-cfg-items\" class=\"docClass\">items</a>. However to illustrate simply rendering a\nPanel into the document, here's how to do it:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Hello',\n    width: 200,\n    html: '&lt;p&gt;World!&lt;/p&gt;',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>A more realistic scenario is a Panel created to house input fields which will not be rendered, but used as a\nconstituent part of a Container:</p>\n\n<pre class='inline-example '><code>var filterPanel = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    bodyPadding: 5,  // Don't want content to crunch against the borders\n    width: 300,\n    title: 'Filters',\n    items: [{\n        xtype: 'datefield',\n        fieldLabel: 'Start date'\n    }, {\n        xtype: 'datefield',\n        fieldLabel: 'End date'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Note that the Panel above is configured to render into the document and assigned a size. In a real world scenario,\nthe Panel will often be added inside a Container which will use a <a href=\"#!/api/Ext.panel.Panel-cfg-layout\" rel=\"Ext.panel.Panel-cfg-layout\" class=\"docClass\">layout</a> to render, size and position its\nchild Components.</p>\n\n<p>Panels will often use specific <a href=\"#!/api/Ext.panel.Panel-cfg-layout\" rel=\"Ext.panel.Panel-cfg-layout\" class=\"docClass\">layout</a>s to provide an application with shape and structure by containing and\narranging child Components:</p>\n\n<pre class='inline-example '><code>var resultsPanel = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Results',\n    width: 600,\n    height: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    layout: {\n        type: 'vbox',       // Arrange child items vertically\n        align: 'stretch',    // Each takes up full width\n        padding: 5\n    },\n    items: [{               // Results grid specified as a config object with an xtype of 'grid'\n        xtype: 'grid',\n        columns: [{header: 'Column One'}],            // One header just for show. There's no data,\n        store: <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.ArrayStore\" rel=\"Ext.data.ArrayStore\" class=\"docClass\">Ext.data.ArrayStore</a>', {}), // A dummy empty data store\n        flex: 1                                       // Use 1/3 of Container's height (hint to Box layout)\n    }, {\n        xtype: 'splitter'   // A splitter between the two child items\n    }, {                    // Details Panel specified as a config object (no xtype defaults to 'panel').\n        title: 'Details',\n        bodyPadding: 5,\n        items: [{\n            fieldLabel: 'Data item',\n            xtype: 'textfield'\n        }], // An array of form fields\n        flex: 2             // Use 2/3 of Container's height (hint to Box layout)\n    }]\n});\n</code></pre>\n\n<p>The example illustrates one possible method of displaying search results. The Panel contains a grid with the\nresulting data arranged in rows. Each selected row may be displayed in detail in the Panel below. The <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">vbox</a> layout is used to arrange the two vertically. It is configured to stretch child items\nhorizontally to full width. Child items may either be configured with a numeric height, or with a <code>flex</code> value to\ndistribute available space proportionately.</p>\n\n<p>This Panel itself may be a child item of, for exaple, a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a> which will size its child items to fit\nwithin its content area.</p>\n\n<p>Using these techniques, as long as the <strong>layout</strong> is chosen and configured correctly, an application may have any\nlevel of nested containment, all dynamically sized according to configuration, the user's preference and available\nbrowser size.</p>\n"},"AbstractPanel":{"!doc":"<p>A base class which provides methods common to Panel classes across the Sencha product range.</p>\n\n<p>Please refer to sub class's documentation</p>\n"},"Table":{"!doc":"<p>TablePanel is the basis of both <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a> and <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a>.</p>\n\n<p>TablePanel aggregates:</p>\n\n<ul>\n<li>a Selection Model</li>\n<li>a View</li>\n<li>a Store</li>\n<li>Scrollers</li>\n<li><a href=\"#!/api/Ext.grid.header.Container\" rel=\"Ext.grid.header.Container\" class=\"docClass\">Ext.grid.header.Container</a></li>\n</ul>\n\n"},"DD":{"!doc":"<p>DD implementation for Panels.</p>\n"},"Header":{"!doc":"<p>Simple header class which is used for on <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> and <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>.</p>\n"},"Proxy":{"!doc":"<p>A custom drag proxy implementation specific to <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>s. This class\nis primarily used internally for the Panel's drag drop implementation, and\nshould never need to be created directly.</p>\n"},"Tool":{"!doc":"<p>This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the <a href=\"#!/api/Ext.panel.Tool-cfg-type\" rel=\"Ext.panel.Tool-cfg-type\" class=\"docClass\">type</a> config. The <a href=\"#!/api/Ext.panel.Tool-cfg-callback\" rel=\"Ext.panel.Tool-cfg-callback\" class=\"docClass\">callback</a> config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the <a href=\"#!/api/Ext.panel.Panel-cfg-tools\" rel=\"Ext.panel.Panel-cfg-tools\" class=\"docClass\">Ext.panel.Panel.tools</a>\nconfiguration on the Panel itself.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    width: 200,\n    height: 200,\n    renderTo: document.body,\n    title: 'A Panel',\n    tools: [{\n        type: 'help',\n        callback: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        callback: function() {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        callback: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n</code></pre>\n\n<p>The <code>callback</code> config was added in Ext JS 4.2.1 as an alternative to <a href=\"#!/api/Ext.panel.Tool-cfg-handler\" rel=\"Ext.panel.Tool-cfg-handler\" class=\"docClass\">handler</a>\nto provide a more convenient list of arguments. In Ext JS 4.2.1 it is also possible to\npass a method name instead of a direct function:</p>\n\n<pre><code> tools: [{\n     type: 'help',\n     callback: 'onHelp',\n     scope: this\n },\n ...\n</code></pre>\n\n<p>The <code>callback</code> (or <code>handler</code>) name is looked up on the <code>scope</code> which will also be the\n<code>this</code> reference when the method is called.</p>\n"}},"Date":{"!doc":"<p>A set of useful static methods to deal with date\nNote that if <a href=\"#!/api/Ext.Date\" rel=\"Ext.Date\" class=\"docClass\">Ext.Date</a> is required and loaded, it will copy all methods / properties to\nthis object for convenience</p>\n\n<p>The date parsing and formatting syntax contains a subset of\n<a href=\"http://www.php.net/date\">PHP's <code>date()</code> function</a>, and the formats that are\nsupported will provide results equivalent to their PHP versions.</p>\n\n<p>The following is a list of all currently supported formats:</p>\n\n<pre class=\"\">\nFormat      Description                                                               Example returned values\n------      -----------------------------------------------------------------------   -----------------------\n  d         Day of the month, 2 digits with leading zeros                             01 to 31\n  D         A short textual representation of the day of the week                     Mon to Sun\n  j         Day of the month without leading zeros                                    1 to 31\n  l         A full textual representation of the day of the week                      Sunday to Saturday\n  N         ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)\n  S         English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j\n  w         Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)\n  z         The day of the year (starting from 0)                                     0 to 364 (365 in leap years)\n  W         ISO-8601 week number of year, weeks starting on Monday                    01 to 53\n  F         A full textual representation of a month, such as January or March        January to December\n  m         Numeric representation of a month, with leading zeros                     01 to 12\n  M         A short textual representation of a month                                 Jan to Dec\n  n         Numeric representation of a month, without leading zeros                  1 to 12\n  t         Number of days in the given month                                         28 to 31\n  L         Whether it&#39;s a leap year                                                  1 if it is a leap year, 0 otherwise.\n  o         ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004\n            belongs to the previous or next year, that year is used instead)\n  Y         A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003\n  y         A two digit representation of a year                                      Examples: 99 or 03\n  a         Lowercase Ante meridiem and Post meridiem                                 am or pm\n  A         Uppercase Ante meridiem and Post meridiem                                 AM or PM\n  g         12-hour format of an hour without leading zeros                           1 to 12\n  G         24-hour format of an hour without leading zeros                           0 to 23\n  h         12-hour format of an hour with leading zeros                              01 to 12\n  H         24-hour format of an hour with leading zeros                              00 to 23\n  i         Minutes, with leading zeros                                               00 to 59\n  s         Seconds, with leading zeros                                               00 to 59\n  u         Decimal fraction of a second                                              Examples:\n            (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or\n                                                                                      100 (i.e. 0.100s) or\n                                                                                      999 (i.e. 0.999s) or\n                                                                                      999876543210 (i.e. 0.999876543210s)\n  O         Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030\n  P         Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00\n  T         Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...\n  Z         Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400\n  c         ISO 8601 date\n            Notes:                                                                    Examples:\n            1) If unspecified, the month / day defaults to the current month / day,   1991 or\n               the time defaults to midnight, while the timezone defaults to the      1992-10 or\n               browser's timezone. If a time is specified, it must include both hours 1993-09-20 or\n               and minutes. The \"T\" delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or\n               are optional.                                                          1995-07-18T17:21:28-02:00 or\n            2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or\n               least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or\n               of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or\n            Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or\n            date-time granularity which are supported, or see                         2000-02-13T21:25:33\n            http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34\n  U         Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463\n  MS        Microsoft AJAX serialized dates                                           \\/Date(1238606590509)\\/ (i.e. UTC milliseconds since epoch) or\n                                                                                      \\/Date(1238606590509+0800)\\/\n  time      A javascript millisecond timestamp                                        1350024476440\n  timestamp A UNIX timestamp (same as U)                                              1350024866            \n</pre>\n\n\n<p>Example usage (note that you must escape format specifiers with '\\' to render them as character literals):</p>\n\n<pre><code>// Sample date:\n// 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'\n\nvar dt = new Date('1/10/2007 03:05:01 PM GMT-0600');\nconsole.log(<a href=\"#!/api/Ext.Date-method-format\" rel=\"Ext.Date-method-format\" class=\"docClass\">Ext.Date.format</a>(dt, 'Y-m-d'));                          // 2007-01-10\nconsole.log(<a href=\"#!/api/Ext.Date-method-format\" rel=\"Ext.Date-method-format\" class=\"docClass\">Ext.Date.format</a>(dt, 'F j, Y, g:i a'));                  // January 10, 2007, 3:05 pm\nconsole.log(<a href=\"#!/api/Ext.Date-method-format\" rel=\"Ext.Date-method-format\" class=\"docClass\">Ext.Date.format</a>(dt, 'l, \\\\t\\\\he jS \\\\of F Y h:i:s A')); // Wednesday, the 10th of January 2007 03:05:01 PM\n</code></pre>\n\n<p>Here are some standard date/time patterns that you might find helpful.  They\nare not part of the source of <a href=\"#!/api/Ext.Date\" rel=\"Ext.Date\" class=\"docClass\">Ext.Date</a>, but to use them you can simply copy this\nblock of code into any script that is included after <a href=\"#!/api/Ext.Date\" rel=\"Ext.Date\" class=\"docClass\">Ext.Date</a> and they will also become\nglobally available on the Date object.  Feel free to add or remove patterns as needed in your code.</p>\n\n<pre><code>Ext.Date.patterns = {\n    ISO8601Long:\"Y-m-d H:i:s\",\n    ISO8601Short:\"Y-m-d\",\n    ShortDate: \"n/j/Y\",\n    LongDate: \"l, F d, Y\",\n    FullDateTime: \"l, F d, Y g:i:s A\",\n    MonthDay: \"F d\",\n    ShortTime: \"g:i A\",\n    LongTime: \"g:i:s A\",\n    SortableDateTime: \"Y-m-d\\\\TH:i:s\",\n    UniversalSortableDateTime: \"Y-m-d H:i:sO\",\n    YearMonth: \"F, Y\"\n};\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>var dt = new Date();\nconsole.log(<a href=\"#!/api/Ext.Date-method-format\" rel=\"Ext.Date-method-format\" class=\"docClass\">Ext.Date.format</a>(dt, Ext.Date.patterns.ShortDate));\n</code></pre>\n\n<p>Developer-written, custom formats may be used by supplying both a formatting and a parsing function\nwhich perform to specialized requirements. The functions are stored in <a href=\"#!/api/Ext.Date-property-parseFunctions\" rel=\"Ext.Date-property-parseFunctions\" class=\"docClass\">parseFunctions</a> and <a href=\"#!/api/Ext.Date-property-formatFunctions\" rel=\"Ext.Date-property-formatFunctions\" class=\"docClass\">formatFunctions</a>.</p>\n"},"dd":{"DD":{"!doc":"<p>A DragDrop implementation where the linked element follows the\nmouse cursor during a drag.</p>\n"},"DragDrop":{"!doc":"<p>Defines the interface and base operation of items that that can be\ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver and onDragOut.\nUp to three html elements can be associated with a DragDrop instance:</p>\n\n<ul>\n<li><p>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with\nother DragDrop objects.</p></li>\n<li><p>handle element(s): The drag operation only occurs if the element that\nwas clicked matches a handle element.  By default this is the linked\nelement, but there are times that you will want only a portion of the\nlinked element to initiate the drag operation, and the setHandleElId()\nmethod provides a way to define this.</p></li>\n<li><p>drag element: this represents the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in <a href=\"#!/api/Ext.dd.DD\" rel=\"Ext.dd.DD\" class=\"docClass\">Ext.dd.DD</a>.  setDragElId() lets you define\na separate element that would be moved, as in <a href=\"#!/api/Ext.dd.DDProxy\" rel=\"Ext.dd.DDProxy\" class=\"docClass\">Ext.dd.DDProxy</a>.</p></li>\n</ul>\n\n\n<p>This class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any\nother DragDrop obj in the \"group1\" group:</p>\n\n<pre><code>dd = new <a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>(\"div1\", \"group1\");\n</code></pre>\n\n<p>Since none of the event handlers have been implemented, nothing would\nactually happen if you were to run the code above.  Normally you would\noverride this class or one of the default implementations, but you can\nalso override the methods you want on an instance of the class...</p>\n\n<pre><code>dd.onDragDrop = function(e, id) {\n    alert(\"dd was dropped on \" + id);\n}\n</code></pre>\n"},"DDProxy":{"!doc":"<p>A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.</p>\n\n<p>References to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage.</p>\n"},"DDTarget":{"!doc":"<p>A DragDrop implementation that does not move, but can be a drop\ntarget.  You would get the same result by simply omitting implementation\nfor the event callbacks, but this way we reduce the processing cost of the\nevent listener and the callbacks.</p>\n"},"DragDropElement":{"!doc":"\n"},"DragDropManager":{"ElementWrapper":{"!doc":"<p>Deprecated inner class for cached elements.</p>\n"},"!doc":"<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.</p>\n"},"DragSource":{"!doc":"<p>A simple class that provides the basic implementation needed to make any element draggable.</p>\n"},"DragTracker":{"!doc":"<p>A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,\nas well as during the drag. This is useful for components such as <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>, where there is\nan element that can be dragged around to change the Slider's value.</p>\n\n<p>DragTracker provides a series of template methods that should be overridden to provide functionality\nin response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.\nSee <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>'s initEvents function for an example implementation.</p>\n"},"DragZone":{"!doc":"<p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>\n\n<p>This class does not move the drag target nodes, but a proxy element which may contain any DOM structure you wish. The\nDOM element to show in the proxy is provided by either a provided implementation of <a href=\"#!/api/Ext.dd.DragZone-method-getDragData\" rel=\"Ext.dd.DragZone-method-getDragData\" class=\"docClass\">getDragData</a>, or by\nregistered draggables registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a></p>\n\n<p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some application\nobject (For example nodes in a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">DataView</a>) then use of this class is the most efficient way to\n\"activate\" those nodes.</p>\n\n<p>By default, this class requires that draggable child nodes are registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a>. However a\nsimpler way to allow a DragZone to manage any number of draggable elements is to configure the DragZone with an\nimplementation of the <a href=\"#!/api/Ext.dd.DragZone-method-getDragData\" rel=\"Ext.dd.DragZone-method-getDragData\" class=\"docClass\">getDragData</a> method which interrogates the passed mouse event to see if it has taken\nplace within an element, or class of elements. This is easily done by using the event's <a href=\"#!/api/Ext.EventObject-method-getTarget\" rel=\"Ext.EventObject-method-getTarget\" class=\"docClass\">getTarget</a> method to identify a node based on a <a href=\"#!/api/Ext.dom.Query\" rel=\"Ext.dom.Query\" class=\"docClass\">Ext.DomQuery</a> selector. For example,\nto make the nodes of a DataView draggable, use the following technique. Knowledge of the use of the DataView is\nrequired:</p>\n\n<pre><code>myDataView.on('render', function(v) {\n    myDataView.dragZone = new <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">Ext.dd.DragZone</a>(v.getEl(), {\n\n//      On receipt of a mousedown event, see if it is within a DataView node.\n//      Return a drag data object if so.\n        getDragData: function(e) {\n\n//          Use the DataView's own itemSelector (a mandatory property) to\n//          test if the mousedown is within one of the DataView's nodes.\n            var sourceEl = e.getTarget(v.itemSelector, 10);\n\n//          If the mousedown is within a DataView node, clone the node to produce\n//          a ddel element for use by the drag proxy. Also add application data\n//          to the returned data object.\n            if (sourceEl) {\n                d = sourceEl.cloneNode(true);\n                d.id = <a href=\"#!/api/Ext-method-id\" rel=\"Ext-method-id\" class=\"docClass\">Ext.id</a>();\n                return {\n                    ddel: d,\n                    sourceEl: sourceEl,\n                    repairXY: <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a>(sourceEl).getXY(),\n                    sourceStore: v.store,\n                    draggedRecord: v.<a href=\"#!/api/Ext.view.View-method-getRecord\" rel=\"Ext.view.View-method-getRecord\" class=\"docClass\">getRecord</a>(sourceEl)\n                }\n            }\n        },\n\n//      Provide coordinates for the proxy to slide back to on failed drag.\n//      This is the original XY coordinates of the draggable element captured\n//      in the getDragData method.\n        getRepairXY: function() {\n            return this.dragData.repairXY;\n        }\n    });\n});\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">DropZone</a> documentation for details about building a DropZone which cooperates with\nthis DragZone.</p>\n"},"DropTarget":{"!doc":"<p>A simple class that provides the basic implementation needed to make any element a drop target that can have\ndraggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</p>\n"},"DropZone":{"!doc":"<p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>\n\n<p>By default, this class requires that child nodes accepting drop are registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a>.\nHowever a simpler way to allow a DropZone to manage any number of target elements is to configure the\nDropZone with an implementation of <a href=\"#!/api/Ext.dd.DropZone-method-getTargetFromEvent\" rel=\"Ext.dd.DropZone-method-getTargetFromEvent\" class=\"docClass\">getTargetFromEvent</a> which interrogates the passed\nmouse event to see if it has taken place within an element, or class of elements. This is easily done\nby using the event's <a href=\"#!/api/Ext.EventObject-method-getTarget\" rel=\"Ext.EventObject-method-getTarget\" class=\"docClass\">getTarget</a> method to identify a node based on a\n<a href=\"#!/api/Ext.dom.Query\" rel=\"Ext.dom.Query\" class=\"docClass\">Ext.DomQuery</a> selector.</p>\n\n<p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over\na drop target, that target is passed as the first parameter to <a href=\"#!/api/Ext.dd.DropZone-method-onNodeEnter\" rel=\"Ext.dd.DropZone-method-onNodeEnter\" class=\"docClass\">onNodeEnter</a>, <a href=\"#!/api/Ext.dd.DropZone-method-onNodeOver\" rel=\"Ext.dd.DropZone-method-onNodeOver\" class=\"docClass\">onNodeOver</a>,\n<a href=\"#!/api/Ext.dd.DropZone-method-onNodeOut\" rel=\"Ext.dd.DropZone-method-onNodeOut\" class=\"docClass\">onNodeOut</a>, <a href=\"#!/api/Ext.dd.DropZone-method-onNodeDrop\" rel=\"Ext.dd.DropZone-method-onNodeDrop\" class=\"docClass\">onNodeDrop</a>. You may configure the instance of DropZone with implementations\nof these methods to provide application-specific behaviour for these events to update both\napplication state, and UI state.</p>\n\n<p>For example to make a GridPanel a cooperating target with the example illustrated in\n<a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>, the following technique might be used:</p>\n\n<pre><code>myGridPanel.on('render', function() {\n    myGridPanel.dropZone = new <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a>(myGridPanel.getView().scroller, {\n\n        // If the mouse is over a grid row, return that node. This is\n        // provided as the \"target\" parameter in all \"onNodeXXXX\" node event handling functions\n        getTargetFromEvent: function(e) {\n            return e.getTarget(myGridPanel.getView().rowSelector);\n        },\n\n        // On entry into a target node, highlight that node.\n        onNodeEnter : function(target, dd, e, data){\n            <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a>(target).addCls('my-row-highlight-class');\n        },\n\n        // On exit from a target node, unhighlight that node.\n        onNodeOut : function(target, dd, e, data){\n            <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a>(target).removeCls('my-row-highlight-class');\n        },\n\n        // While over a target node, return the default drop allowed class which\n        // places a \"tick\" icon into the drag proxy.\n        onNodeOver : function(target, dd, e, data){\n            return Ext.dd.DropZone.prototype.dropAllowed;\n        },\n\n        // On node drop we can interrogate the target to find the underlying\n        // application object that is the real target of the dragged data.\n        // In this case, it is a Record in the GridPanel's Store.\n        // We can use the data set up by the DragZone's getDragData method to read\n        // any data we decided to attach in the DragZone's getDragData method.\n        onNodeDrop : function(target, dd, e, data){\n            var rowIndex = myGridPanel.getView().findRowIndex(target);\n            var r = myGridPanel.getStore().getAt(rowIndex);\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +\n                ' on Record id ' + r.id);\n            return true;\n        }\n    });\n}\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> documentation for details about building a DragZone which\ncooperates with this DropZone.</p>\n"},"Registry":{"!doc":"<p>Provides easy access to all drag drop components that are registered on a page. Items can be retrieved either\ndirectly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.</p>\n"},"ScrollManager":{"!doc":"<p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>\n\n<p>The ScrollManager configs will be used as the defaults for any scroll container registered with it, but you can also\noverride most of the configs per scroll container by adding a ddScrollConfig object to the target element that\ncontains these properties: <a href=\"#!/api/Ext.dd.ScrollManager-property-hthresh\" rel=\"Ext.dd.ScrollManager-property-hthresh\" class=\"docClass\">hthresh</a>, <a href=\"#!/api/Ext.dd.ScrollManager-property-vthresh\" rel=\"Ext.dd.ScrollManager-property-vthresh\" class=\"docClass\">vthresh</a>, <a href=\"#!/api/Ext.dd.ScrollManager-property-increment\" rel=\"Ext.dd.ScrollManager-property-increment\" class=\"docClass\">increment</a> and <a href=\"#!/api/Ext.dd.ScrollManager-property-frequency\" rel=\"Ext.dd.ScrollManager-property-frequency\" class=\"docClass\">frequency</a>. Example\nusage:</p>\n\n<pre><code>var el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('scroll-ct');\nel.ddScrollConfig = {\n    vthresh: 50,\n    hthresh: -1,\n    frequency: 100,\n    increment: 200\n};\n<a href=\"#!/api/Ext.dd.ScrollManager-method-register\" rel=\"Ext.dd.ScrollManager-method-register\" class=\"docClass\">Ext.dd.ScrollManager.register</a>(el);\n</code></pre>\n\n<p>Note: This class is designed to be used in \"Point Mode</p>\n"},"StatusProxy":{"!doc":"<p>A specialized floating Component that supports a drop status icon, <a href=\"#!/api/Ext.dom.Layer\" rel=\"Ext.dom.Layer\" class=\"docClass\">Ext.Layer</a> styles\nand auto-repair.  This is the default drag proxy used by all Ext.dd components.</p>\n"}},"direct":{"Event":{"!doc":"<p>Base class for all Ext.direct events. An event is\ncreated after some kind of interaction with the server.\nThe event class is essentially just a data structure\nto hold a Direct response.</p>\n"},"ExceptionEvent":{"!doc":"<p>An event that is fired when an exception is received from a <a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">Ext.direct.RemotingProvider</a></p>\n"},"RemotingEvent":{"!doc":"<p>An event that is fired when data is received from a\n<a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">Ext.direct.RemotingProvider</a>. Contains a method to the\nrelated transaction for the direct request, see <a href=\"#!/api/Ext.direct.RemotingEvent-method-getTransaction\" rel=\"Ext.direct.RemotingEvent-method-getTransaction\" class=\"docClass\">getTransaction</a></p>\n"},"JsonProvider":{"!doc":"<p>A base provider for communicating using JSON. This is an abstract class\nand should not be instanced directly.</p>\n"},"Provider":{"!doc":"<p><a href=\"#!/api/Ext.direct.Provider\" rel=\"Ext.direct.Provider\" class=\"docClass\">Ext.direct.Provider</a> is an abstract class meant to be extended.</p>\n\n<p>For example Ext JS implements the following subclasses:</p>\n\n<pre><code>Provider\n|\n+---<a href=\"#!/api/Ext.direct.JsonProvider\" rel=\"Ext.direct.JsonProvider\" class=\"docClass\">JsonProvider</a>\n    |\n    +---<a href=\"#!/api/Ext.direct.PollingProvider\" rel=\"Ext.direct.PollingProvider\" class=\"docClass\">PollingProvider</a>\n    |\n    +---<a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">RemotingProvider</a>\n</code></pre>\n"},"Manager":{"!doc":"<p><a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> aims to streamline communication between the client and server by providing a single interface that\nreduces the amount of common code typically required to validate data and handle returned data packets (reading data,\nerror conditions, etc).</p>\n\n<p>The Ext.direct namespace includes several classes for a closer integration with the server-side. The Ext.data\nnamespace also includes classes for working with Ext.data.Stores which are backed by data from an <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> method.</p>\n\n<h1>Specification</h1>\n\n<p>For additional information consult the <a href=\"http://sencha.com/products/extjs/extdirect\">Ext.Direct Specification</a>.</p>\n\n<h1>Providers</h1>\n\n<p><a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> uses a provider architecture, where one or more providers are used to transport data to and from the\nserver. There are several providers that exist in the core at the moment:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.direct.JsonProvider\" rel=\"Ext.direct.JsonProvider\" class=\"docClass\">JsonProvider</a> for simple JSON operations</li>\n<li><a href=\"#!/api/Ext.direct.PollingProvider\" rel=\"Ext.direct.PollingProvider\" class=\"docClass\">PollingProvider</a> for repeated requests</li>\n<li><a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">RemotingProvider</a> exposes server side on the client.</li>\n</ul>\n\n\n<p>A provider does not need to be invoked directly, providers are added via <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.direct.Manager</a>.<a href=\"#!/api/Ext.direct.Manager-method-addProvider\" rel=\"Ext.direct.Manager-method-addProvider\" class=\"docClass\">addProvider</a>.</p>\n\n<h1>Router</h1>\n\n<p><a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> utilizes a \"router\" on the server to direct requests from the client to the appropriate server-side\nmethod. Because the <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> API is completely platform-agnostic, you could completely swap out a Java based server\nsolution and replace it with one that uses C# without changing the client side JavaScript at all.</p>\n\n<h1>Server side events</h1>\n\n<p>Custom events from the server may be handled by the client by adding listeners, for example:</p>\n\n<pre><code>{\"type\":\"event\",\"name\":\"message\",\"data\":\"Successfully polled at: 11:19:30 am\"}\n\n// add a handler for a 'message' event sent by the server\n<a href=\"#!/api/Ext.direct.Manager-method-on\" rel=\"Ext.direct.Manager-method-on\" class=\"docClass\">Ext.direct.Manager.on</a>('message', function(e){\n    out.append(String.format('&lt;p&gt;&lt;i&gt;{0}&lt;/i&gt;&lt;/p&gt;', e.data));\n    out.el.scrollTo('t', 100000, true);\n});\n</code></pre>\n"},"PollingProvider":{"!doc":"<p>Provides for repetitive polling of the server at distinct <a href=\"#!/api/Ext.direct.PollingProvider-cfg-interval\" rel=\"Ext.direct.PollingProvider-cfg-interval\" class=\"docClass\">intervals</a>.\nThe initial request for data originates from the client, and then is responded to by the\nserver.</p>\n\n<p>Configuration for the PollingProvider can be generated by the server-side\nAPI portion of the <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> stack.</p>\n\n<p>An instance of PollingProvider may be created directly via the new keyword or by simply\nspecifying <code>type = 'polling'</code>. For example:</p>\n\n<pre><code> var pollA = new <a href=\"#!/api/Ext.direct.PollingProvider\" rel=\"Ext.direct.PollingProvider\" class=\"docClass\">Ext.direct.PollingProvider</a>({\n     type:'polling',\n     url: 'php/pollA.php',\n });\n <a href=\"#!/api/Ext.direct.Manager-method-addProvider\" rel=\"Ext.direct.Manager-method-addProvider\" class=\"docClass\">Ext.direct.Manager.addProvider</a>(pollA);\n pollA.disconnect();\n\n <a href=\"#!/api/Ext.direct.Manager-method-addProvider\" rel=\"Ext.direct.Manager-method-addProvider\" class=\"docClass\">Ext.direct.Manager.addProvider</a>({\n     type:'polling',\n     url: 'php/pollB.php',\n     id: 'pollB-provider'\n });\n var pollB = <a href=\"#!/api/Ext.direct.Manager-method-getProvider\" rel=\"Ext.direct.Manager-method-getProvider\" class=\"docClass\">Ext.direct.Manager.getProvider</a>('pollB-provider');\n</code></pre>\n"},"RemotingMethod":{"!doc":"<p>Small utility class used internally to represent a Direct method.</p>\n"},"RemotingProvider":{"!doc":"<p>The <a href=\"#!/api/Ext.direct.RemotingProvider\" rel=\"Ext.direct.RemotingProvider\" class=\"docClass\">RemotingProvider</a> exposes access to\nserver side methods on the client (a remote procedure call (RPC) type of\nconnection where the client can initiate a procedure on the server).</p>\n\n<p>This allows for code to be organized in a fashion that is maintainable,\nwhile providing a clear path between client and server, something that is\nnot always apparent when using URLs.</p>\n\n<p>To accomplish this the server-side needs to describe what classes and methods\nare available on the client-side. This configuration will typically be\noutputted by the server-side <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> stack when the API description is built.</p>\n"},"Transaction":{"!doc":"<p>Supporting Class for <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a> (not intended to be used directly).</p>\n"}},"dom":{"AbstractElement":{"!doc":"\n"},"AbstractHelper":{"!doc":"<p>Abstract base class for <a href=\"#!/api/Ext.dom.Helper\" rel=\"Ext.dom.Helper\" class=\"docClass\">Ext.dom.Helper</a>.</p>\n"},"AbstractQuery":{"!doc":"\n"},"CompositeElement":{"!doc":"<p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter\nmembers, or to perform collective actions upon the whole set.</p>\n\n\n<p>Although they are not listed, this class supports all of the methods of <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.dom.Element</a> and\n<a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a>. The methods from these classes will be performed on all the elements in this collection.</p>\n\n\n<p>All methods return <i>this</i> and can be chained.</p>\n\n\n<p>Usage:</p>\n\n<pre><code> var els = <a href=\"#!/api/Ext-method-select\" rel=\"Ext-method-select\" class=\"docClass\">Ext.select</a>(\"#some-el div.some-class\", true);\n // or select directly from an existing element\n var el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('some-el');\n el.select('div.some-class', true);\n\n els.setWidth(100); // all elements become 100 width\n els.hide(true); // all elements fade out and hide\n // or\n els.setWidth(100).hide(true);\n </code></pre>\n\n"},"CompositeElementLite":{"!doc":"<p>This class encapsulates a <em>collection</em> of DOM elements, providing methods to filter members, or to perform collective\nactions upon the whole set.</p>\n\n<p>Although they are not listed, this class supports all of the methods of <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.dom.Element</a> and\n<a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a>. The methods from these classes will be performed on all the elements in this collection.</p>\n\n<p>Example:</p>\n\n<pre><code>var els = <a href=\"#!/api/Ext-method-select\" rel=\"Ext-method-select\" class=\"docClass\">Ext.select</a>(\"#some-el div.some-class\");\n// or select directly from an existing element\nvar el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('some-el');\nel.select('div.some-class');\n\nels.setWidth(100); // all elements become 100 width\nels.hide(true); // all elements fade out and hide\n// or\nels.setWidth(100).hide(true);\n</code></pre>\n"},"Element":{"Fly":{"!doc":"<p>A non-persistent wrapper for a DOM element which may be used to execute methods of <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.dom.Element</a>\nupon a DOM element without creating an instance of <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.dom.Element</a>.</p>\n\n<p>A <strong>singleton</strong> instance of this class is returned when you use <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a></p>\n\n<p>Because it is a singleton, this Flyweight does not have an ID, and must be used and discarded in a single line.\nYou should not keep and use the reference to this singleton over multiple lines because methods that you call\nmay themselves make use of <a href=\"#!/api/Ext-method-fly\" rel=\"Ext-method-fly\" class=\"docClass\">Ext.fly</a> and may change the DOM element to which the instance refers.</p>\n"},"!doc":"<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>\n\n<p>All instances of this class inherit the methods of <a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a> making visual effects easily available to all\nDOM elements.</p>\n\n<p>Note that the events documented in this class are not Ext events, they encapsulate browser events. Some older browsers\nmay not support the full range of events. Which events are supported is beyond the control of Ext JS.</p>\n\n<p>Usage:</p>\n\n<pre><code>// by id\nvar el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>(\"my-div\");\n\n// by DOM element reference\nvar el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>(myDivElement);\n</code></pre>\n\n<h1>Animations</h1>\n\n<p>When an element is manipulated, by default there is no animation.</p>\n\n<pre><code>var el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>(\"my-div\");\n\n// no animation\nel.setWidth(100);\n</code></pre>\n\n<p>Many of the functions for manipulating an element have an optional \"animate\" parameter. This parameter can be\nspecified as boolean (true) for default animation effects.</p>\n\n<pre><code>// default animation\nel.setWidth(100, true);\n</code></pre>\n\n<p>To configure the effects, an object literal with animation options to use as the Element animation configuration\nobject can also be specified. Note that the supported Element animation configuration options are a subset of the\n<a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a> animation options specific to Fx effects. The supported Element animation configuration options\nare:</p>\n\n<pre><code>Option    Default   Description\n--------- --------  ---------------------------------------------\n<a href=\"#!/api/Ext.fx.Anim-cfg-duration\" rel=\"Ext.fx.Anim-cfg-duration\" class=\"docClass\">duration</a>  350       The duration of the animation in milliseconds\n<a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">easing</a>    easeOut   The easing method\n<a href=\"#!/api/Ext.fx.Anim-cfg-callback\" rel=\"Ext.fx.Anim-cfg-callback\" class=\"docClass\">callback</a>  none      A function to execute when the anim completes\n<a href=\"#!/api/Ext.fx.Anim-cfg-scope\" rel=\"Ext.fx.Anim-cfg-scope\" class=\"docClass\">scope</a>     this      The scope (this) of the callback function\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>// Element animation options object\nvar opt = {\n    <a href=\"#!/api/Ext.fx.Anim-cfg-duration\" rel=\"Ext.fx.Anim-cfg-duration\" class=\"docClass\">duration</a>: 1000,\n    <a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">easing</a>: 'elasticIn',\n    <a href=\"#!/api/Ext.fx.Anim-cfg-callback\" rel=\"Ext.fx.Anim-cfg-callback\" class=\"docClass\">callback</a>: this.foo,\n    <a href=\"#!/api/Ext.fx.Anim-cfg-scope\" rel=\"Ext.fx.Anim-cfg-scope\" class=\"docClass\">scope</a>: this\n};\n// animation with some options set\nel.setWidth(100, opt);\n</code></pre>\n\n<p>The Element animation object being used for the animation will be set on the options object as \"anim\", which allows\nyou to stop or manipulate the animation. Here is an example:</p>\n\n<pre><code>// using the \"anim\" property to get the Anim object\nif(opt.anim.isAnimated()){\n    opt.anim.stop();\n}\n</code></pre>\n\n<h1>Composite (Collections of) Elements</h1>\n\n<p>For working with collections of Elements, see <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a></p>\n\n<p><strong>From override Ext.rtl.dom.Element_position:</strong> This override adds RTL positioning methods to <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.dom.Element</a>.</p>\n"},"Helper":{"!doc":"<p>The actual class of which <a href=\"#!/api/Ext.DomHelper\" rel=\"Ext.DomHelper\" class=\"docClass\">Ext.DomHelper</a> is instance of.</p>\n\n<p>Use singleton <a href=\"#!/api/Ext.DomHelper\" rel=\"Ext.DomHelper\" class=\"docClass\">Ext.DomHelper</a> instead.</p>\n"},"Layer":{"!doc":"<p>An extended <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> object that supports a shadow and shim, constrain to viewport and\nautomatic maintaining of shadow/shim positions.</p>\n"},"Query":{"!doc":"<p>Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes\nand matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).</p>\n\n<p>DomQuery supports most of the <a href=\"http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors\">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>\n\n<p>All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example\n<code>div.foo:nth-child(odd)[@foo=bar].bar:first</code> would be a perfectly valid selector. Node filters are processed\nin the order in which they appear, which allows you to optimize your queries for your document structure.</p>\n\n<h2>Element Selectors:</h2>\n\n<ul>\n<li><strong><code>*</code></strong> any element</li>\n<li><strong><code>E</code></strong> an element with the tag E</li>\n<li><strong><code>E F</code></strong> All descendent elements of E that have the tag F</li>\n<li><strong><code>E &gt; F</code></strong> or <strong>E/F</strong> all direct children elements of E that have the tag F</li>\n<li><strong><code>E + F</code></strong> all elements with the tag F that are immediately preceded by an element with the tag E</li>\n<li><strong><code>E ~ F</code></strong> all elements with the tag F that are preceded by a sibling element with the tag E</li>\n</ul>\n\n\n<h2>Attribute Selectors:</h2>\n\n<p>The use of <code>@</code> and quotes are optional. For example, <code>div[@foo='bar']</code> is also a valid attribute selector.</p>\n\n<ul>\n<li><strong><code>E[foo]</code></strong> has an attribute \"foo\"</li>\n<li><strong><code>E[foo=bar]</code></strong> has an attribute \"foo\" that equals \"bar\"</li>\n<li><strong><code>E[foo^=bar]</code></strong> has an attribute \"foo\" that starts with \"bar\"</li>\n<li><strong><code>E[foo$=bar]</code></strong> has an attribute \"foo\" that ends with \"bar\"</li>\n<li><strong><code>E[foo*=bar]</code></strong> has an attribute \"foo\" that contains the substring \"bar\"</li>\n<li><strong><code>E[foo%=2]</code></strong> has an attribute \"foo\" that is evenly divisible by 2</li>\n<li><strong><code>E[foo!=bar]</code></strong> attribute \"foo\" does not equal \"bar\"</li>\n</ul>\n\n\n<h2>Pseudo Classes:</h2>\n\n<ul>\n<li><strong><code>E:first-child</code></strong> E is the first child of its parent</li>\n<li><strong><code>E:last-child</code></strong> E is the last child of its parent</li>\n<li><strong><code>E:nth-child(_n_)</code></strong> E is the _n_th child of its parent (1 based as per the spec)</li>\n<li><strong><code>E:nth-child(odd)</code></strong> E is an odd child of its parent</li>\n<li><strong><code>E:nth-child(even)</code></strong> E is an even child of its parent</li>\n<li><strong><code>E:only-child</code></strong> E is the only child of its parent</li>\n<li><strong><code>E:checked</code></strong> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)</li>\n<li><strong><code>E:first</code></strong> the first E in the resultset</li>\n<li><strong><code>E:last</code></strong> the last E in the resultset</li>\n<li><strong><code>E:nth(_n_)</code></strong> the _n_th E in the resultset (1 based)</li>\n<li><strong><code>E:odd</code></strong> shortcut for :nth-child(odd)</li>\n<li><strong><code>E:even</code></strong> shortcut for :nth-child(even)</li>\n<li><strong><code>E:contains(foo)</code></strong> E's innerHTML contains the substring \"foo\"</li>\n<li><strong><code>E:nodeValue(foo)</code></strong> E contains a textNode with a nodeValue that equals \"foo\"</li>\n<li><strong><code>E:not(S)</code></strong> an E element that does not match simple selector S</li>\n<li><strong><code>E:has(S)</code></strong> an E element that has a descendent that matches simple selector S</li>\n<li><strong><code>E:next(S)</code></strong> an E element whose next sibling matches simple selector S</li>\n<li><strong><code>E:prev(S)</code></strong> an E element whose previous sibling matches simple selector S</li>\n<li><strong><code>E:any(S1|S2|S2)</code></strong> an E element which matches any of the simple selectors S1, S2 or S3</li>\n<li><strong><code>E:visible(true)</code></strong> an E element which is deeply visible according to <a href=\"#!/api/Ext.dom.Element-method-isVisible\" rel=\"Ext.dom.Element-method-isVisible\" class=\"docClass\">Ext.dom.Element.isVisible</a></li>\n</ul>\n\n\n<h2>CSS Value Selectors:</h2>\n\n<ul>\n<li><strong><code>E{display=none}</code></strong> css value \"display\" that equals \"none\"</li>\n<li><strong><code>E{display^=none}</code></strong> css value \"display\" that starts with \"none\"</li>\n<li><strong><code>E{display$=none}</code></strong> css value \"display\" that ends with \"none\"</li>\n<li><strong><code>E{display*=none}</code></strong> css value \"display\" that contains the substring \"none\"</li>\n<li><strong><code>E{display%=2}</code></strong> css value \"display\" that is evenly divisible by 2</li>\n<li><strong><code>E{display!=none}</code></strong> css value \"display\" that does not equal \"none\"</li>\n</ul>\n\n\n<h2>XML Namespaces:</h2>\n\n<ul>\n<li><strong><code>ns|E</code></strong> an element with tag E and namespace prefix ns</li>\n</ul>\n\n"}},"DomHelper":{"!doc":"<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\nusing HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.</p>\n\n<h1>DomHelper element specification object</h1>\n\n<p>A specification object is used when creating elements. Attributes of this object are assumed to be element\nattributes, except for 4 special attributes:</p>\n\n<ul>\n<li><strong>tag</strong> - The tag name of the element.</li>\n<li><strong>children</strong> or <strong>cn</strong> - An array of the same kind of element definition objects to be created and appended.\nThese can be nested as deep as you want.</li>\n<li><strong>cls</strong> - The class attribute of the element. This will end up being either the \"class\" attribute on a HTML\nfragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.</li>\n<li><strong>html</strong> - The innerHTML for the element.</li>\n</ul>\n\n\n<p><strong>NOTE:</strong> For other arbitrary attributes, the value will currently <strong>not</strong> be automatically HTML-escaped prior to\nbuilding the element's HTML string. This means that if your attribute value contains special characters that would\nnot normally be allowed in a double-quoted attribute value, you <strong>must</strong> manually HTML-encode it beforehand (see\n<a href=\"#!/api/Ext.String-method-htmlEncode\" rel=\"Ext.String-method-htmlEncode\" class=\"docClass\">Ext.String.htmlEncode</a>) or risk malformed HTML being created. This behavior may change in a future release.</p>\n\n<h1>Insertion methods</h1>\n\n<p>Commonly used insertion methods:</p>\n\n<ul>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-append\" rel=\"Ext.DomHelper-method-append\" class=\"docClass\">append</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-insertBefore\" rel=\"Ext.DomHelper-method-insertBefore\" class=\"docClass\">insertBefore</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-insertAfter\" rel=\"Ext.DomHelper-method-insertAfter\" class=\"docClass\">insertAfter</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-overwrite\" rel=\"Ext.DomHelper-method-overwrite\" class=\"docClass\">overwrite</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">createTemplate</a></strong></li>\n<li><strong><a href=\"#!/api/Ext.DomHelper-method-insertHtml\" rel=\"Ext.DomHelper-method-insertHtml\" class=\"docClass\">insertHtml</a></strong></li>\n</ul>\n\n\n<h1>Example</h1>\n\n<p>This is an example, where an unordered list with 3 children items is appended to an existing element with\nid 'my-div':</p>\n\n<pre><code>var dh = <a href=\"#!/api/Ext.DomHelper\" rel=\"Ext.DomHelper\" class=\"docClass\">Ext.DomHelper</a>; // create shorthand alias\n// specification object\nvar spec = {\n    id: 'my-ul',\n    tag: 'ul',\n    cls: 'my-list',\n    // append children after creating\n    children: [     // may also specify 'cn' instead of 'children'\n        {tag: 'li', id: 'item0', html: 'List Item 0'},\n        {tag: 'li', id: 'item1', html: 'List Item 1'},\n        {tag: 'li', id: 'item2', html: 'List Item 2'}\n    ]\n};\nvar list = dh.append(\n    'my-div', // the context element 'my-div' can either be the id or the actual node\n    spec      // the specification object\n);\n</code></pre>\n\n<p>Element creation specification parameters in this class may also be passed as an Array of specification objects. This\ncan be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add more\nlist items to the example above:</p>\n\n<pre><code>dh.append('my-ul', [\n    {tag: 'li', id: 'item3', html: 'List Item 3'},\n    {tag: 'li', id: 'item4', html: 'List Item 4'}\n]);\n</code></pre>\n\n<h1>Templating</h1>\n\n<p>The real power is in the built-in templating. Instead of creating or appending any elements, <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">createTemplate</a>\nreturns a Template object which can be used over and over to insert new elements. Revisiting the example above, we\ncould utilize templating this time:</p>\n\n<pre><code>// create the node\nvar list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});\n// get template\nvar tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});\n\nfor(var i = 0; i &lt; 5, i++){\n    tpl.append(list, [i]); // use template to append to the actual node\n}\n</code></pre>\n\n<p>An example using a template:</p>\n\n<pre><code>var html = '&lt;a id=\"{0}\" href=\"{1}\" class=\"nav\"&gt;{2}&lt;/a&gt;';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.append('blog-roll', ['link1', 'http://www.edspencer.net/', \"Ed's Site\"]);\ntpl.append('blog-roll', ['link2', 'http://www.dustindiaz.com/', \"Dustin's Site\"]);\n</code></pre>\n\n<p>The same example using named parameters:</p>\n\n<pre><code>var html = '&lt;a id=\"{id}\" href=\"{url}\" class=\"nav\"&gt;{text}&lt;/a&gt;';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.append('blog-roll', {\n    id: 'link1',\n    url: 'http://www.edspencer.net/',\n    text: \"Ed's Site\"\n});\ntpl.append('blog-roll', {\n    id: 'link2',\n    url: 'http://www.dustindiaz.com/',\n    text: \"Dustin's Site\"\n});\n</code></pre>\n\n<h1>Compiling Templates</h1>\n\n<p>Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM\nelements using the same template, you can increase performance even further by <a href=\"#!/api/Ext.Template-method-compile\" rel=\"Ext.Template-method-compile\" class=\"docClass\">&quot;compiling&quot;</a> the template. The way \"<a href=\"#!/api/Ext.Template-method-compile\" rel=\"Ext.Template-method-compile\" class=\"docClass\">compile()</a>\" works is the template is parsed and\nbroken up at the different variable points and a dynamic function is created and eval'ed. The generated function\nperforms string concatenation of these parts and the passed variables instead of using regular expressions.</p>\n\n<pre><code>var html = '&lt;a id=\"{id}\" href=\"{url}\" class=\"nav\"&gt;{text}&lt;/a&gt;';\n\nvar tpl = new <a href=\"#!/api/Ext.DomHelper-method-createTemplate\" rel=\"Ext.DomHelper-method-createTemplate\" class=\"docClass\">Ext.DomHelper.createTemplate</a>(html);\ntpl.compile();\n\n//... use template like normal\n</code></pre>\n\n<h1>Performance Boost</h1>\n\n<p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can significantly\nboost performance.</p>\n\n<p>Element creation specification parameters may also be strings. If <a href=\"#!/api/Ext.DomHelper-property-useDom\" rel=\"Ext.DomHelper-property-useDom\" class=\"docClass\">useDom</a> is false, then the string is used\nas innerHTML. If <a href=\"#!/api/Ext.DomHelper-property-useDom\" rel=\"Ext.DomHelper-property-useDom\" class=\"docClass\">useDom</a> is true, a string specification results in the creation of a text node. Usage:</p>\n\n<pre><code><a href=\"#!/api/Ext.DomHelper-property-useDom\" rel=\"Ext.DomHelper-property-useDom\" class=\"docClass\">Ext.DomHelper.useDom</a> = true; // force it to use DOM; reduces performance\n</code></pre>\n"},"Editor":{"!doc":"<p>The Editor class is used to provide inline editing for elements on the page. The editor\nis backed by a <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> that will be displayed to edit the underlying content.\nThe editor is a floating Component, when the editor is shown it is automatically aligned to\ndisplay over the top of the bound element it is editing. The Editor contains several options\nfor how to handle key presses:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.Editor-cfg-completeOnEnter\" rel=\"Ext.Editor-cfg-completeOnEnter\" class=\"docClass\">completeOnEnter</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-cancelOnEsc\" rel=\"Ext.Editor-cfg-cancelOnEsc\" class=\"docClass\">cancelOnEsc</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-swallowKeys\" rel=\"Ext.Editor-cfg-swallowKeys\" class=\"docClass\">swallowKeys</a></li>\n</ul>\n\n\n<p>It also has options for how to use the value once the editor has been activated:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.Editor-cfg-revertInvalid\" rel=\"Ext.Editor-cfg-revertInvalid\" class=\"docClass\">revertInvalid</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-ignoreNoChange\" rel=\"Ext.Editor-cfg-ignoreNoChange\" class=\"docClass\">ignoreNoChange</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-updateEl\" rel=\"Ext.Editor-cfg-updateEl\" class=\"docClass\">updateEl</a></li>\n</ul>\n\n\n<p>Sample usage:</p>\n\n<pre><code>var editor = new <a href=\"#!/api/Ext.Editor\" rel=\"Ext.Editor\" class=\"docClass\">Ext.Editor</a>({\n    updateEl: true, // update the innerHTML of the bound element when editing completes\n    field: {\n        xtype: 'textfield'\n    }\n});\nvar el = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('my-text'); // The element to 'edit'\neditor.startEdit(el); // The value of the field will be taken as the innerHTML of the element.\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Ext.Editor component\" width=\"\" height=\"\"></p></p>\n"},"enums":{"Feature":{"!doc":"<p>Enumeration of all ftypes.</p>\n"},"Layout":{"!doc":"<p>Enumeration of all layout types.</p>\n"},"Plugin":{"!doc":"<p>Enumeration of all ptypes.</p>\n"},"Widget":{"!doc":"<p>Enumeration of all xtypes.</p>\n"}},"Error":{"!doc":"<p>A wrapper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an Ext application. When you use <a href=\"#!/api/Ext.Error\" rel=\"Ext.Error\" class=\"docClass\">Ext.Error</a> to <a href=\"#!/api/Ext.Error-static-method-raise\" rel=\"Ext.Error-static-method-raise\" class=\"docClass\">raise</a> an error from within any class that\nuses the Ext 4 class system, the Error class can automatically add the source class and method from which\nthe error was raised. It also includes logic to automatically log the error to the console, if available,\nwith additional metadata about the error. In all cases, the error will always be thrown at the end so that\nexecution will halt.</p>\n\n<p><a href=\"#!/api/Ext.Error\" rel=\"Ext.Error\" class=\"docClass\">Ext.Error</a> also offers a global error <a href=\"#!/api/Ext.Error-static-method-handle\" rel=\"Ext.Error-static-method-handle\" class=\"docClass\">handling</a> method that can be overridden in order to\nhandle application-wide errors in a single spot. You can optionally <a href=\"#!/api/Ext.Error-static-property-ignore\" rel=\"Ext.Error-static-property-ignore\" class=\"docClass\">ignore</a> errors altogether,\nalthough in a real application it's usually a better idea to override the handling function and perform\nlogging or some other method of reporting the errors in a way that is meaningful to the application.</p>\n\n<p>At its simplest you can simply raise an error as a simple string from within any code:</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/Ext.Error-static-method-raise\" rel=\"Ext.Error-static-method-raise\" class=\"docClass\">Ext.Error.raise</a>('Something bad happened!');\n</code></pre>\n\n<p>If raised from plain JavaScript code, the error will be logged to the console (if available) and the message\ndisplayed. In most cases however you'll be raising errors from within a class, and it may often be useful to add\nadditional metadata about the error being raised.  The <a href=\"#!/api/Ext.Error-static-method-raise\" rel=\"Ext.Error-static-method-raise\" class=\"docClass\">raise</a> method can also take a config object.\nIn this form the <code>msg</code> attribute becomes the error description, and any other data added to the config gets\nadded to the error object and, if the console is available, logged to the console for inspection.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.Foo', {\n    doSomething: function(option){\n        if (someCondition === false) {\n            <a href=\"#!/api/Ext.Error-static-method-raise\" rel=\"Ext.Error-static-method-raise\" class=\"docClass\">Ext.Error.raise</a>({\n                msg: 'You cannot do that!',\n                option: option,   // whatever was passed into the method\n                'error code': 100 // other arbitrary info\n            });\n        }\n    }\n});\n</code></pre>\n\n<p>If a console is available (that supports the <code>console.dir</code> function) you'll see console output like:</p>\n\n<pre><code>An error was raised with the following data:\noption:         Object { foo: \"bar\"}\n    foo:        \"bar\"\nerror code:     100\nmsg:            \"You cannot do that!\"\nsourceClass:   \"Ext.Foo\"\nsourceMethod:  \"doSomething\"\n\nuncaught exception: You cannot do that!\n</code></pre>\n\n<p>As you can see, the error will report exactly where it was raised and will include as much information as the\nraising code can usefully provide.</p>\n\n<p>If you want to handle all application errors globally you can simply override the static <a href=\"#!/api/Ext.Error-static-method-handle\" rel=\"Ext.Error-static-method-handle\" class=\"docClass\">handle</a> method\nand provide whatever handling logic you need. If the method returns true then the error is considered handled\nand will not be thrown to the browser. If anything but true is returned then the error will be thrown normally.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/Ext.Error-static-method-handle\" rel=\"Ext.Error-static-method-handle\" class=\"docClass\">Ext.Error.handle</a> = function(err) {\n    if (err.someProperty == 'NotReallyAnError') {\n        // maybe log something to the application here if applicable\n        return true;\n    }\n    // any non-true return value (including none) will cause the error to be thrown\n}\n</code></pre>\n"},"EventManager":{"!doc":"<p>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides\nseveral useful events directly.</p>\n\n<p>See <a href=\"#!/api/Ext.EventObject\" rel=\"Ext.EventObject\" class=\"docClass\">Ext.EventObject</a> for more details on normalized event objects.</p>\n"},"EventObject":{"!doc":"<p>Just as <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> wraps around a native DOM node, <a href=\"#!/api/Ext.EventObject\" rel=\"Ext.EventObject\" class=\"docClass\">Ext.EventObject</a>\nwraps the browser's native event-object normalizing cross-browser differences,\nsuch as which mouse button is clicked, keys pressed, mechanisms to stop\nevent-propagation along with a method to prevent default actions from taking place.</p>\n\n<p>For example:</p>\n\n<pre><code>function handleClick(e, t){ // e is not a standard event object, it is a <a href=\"#!/api/Ext.EventObject\" rel=\"Ext.EventObject\" class=\"docClass\">Ext.EventObject</a>\n    e.preventDefault();\n    var target = e.getTarget(); // same as t (the target HTMLElement)\n    ...\n}\n\nvar myDiv = <a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>(\"myDiv\");  // get reference to an <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>\nmyDiv.on(         // 'on' is shorthand for addListener\n    \"click\",      // perform an action on click of myDiv\n    handleClick   // reference to the action handler\n);\n\n// other methods to do the same:\n<a href=\"#!/api/Ext.EventManager-method-on\" rel=\"Ext.EventManager-method-on\" class=\"docClass\">Ext.EventManager.on</a>(\"myDiv\", 'click', handleClick);\n<a href=\"#!/api/Ext.EventManager-method-addListener\" rel=\"Ext.EventManager-method-addListener\" class=\"docClass\">Ext.EventManager.addListener</a>(\"myDiv\", 'click', handleClick);\n</code></pre>\n"},"flash":{"Component":{"!doc":"<p>A simple Component for displaying an Adobe Flash SWF movie. The movie will be sized and can participate\nin layout like any other Component.</p>\n\n<p>This component requires the third-party SWFObject library version 2.2 or above. It is not included within\nthe ExtJS distribution, so you will have to include it into your page manually in order to use this component.\nThe SWFObject library can be downloaded from the <a href=\"http://code.google.com/p/swfobject\">SWFObject project page</a>\nand then simply import it into the head of your HTML document:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"path/to/local/swfobject.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h2>Configuration</h2>\n\n<p>This component allows several options for configuring how the target Flash movie is embedded. The most\nimportant is the required <a href=\"#!/api/Ext.flash.Component-cfg-url\" rel=\"Ext.flash.Component-cfg-url\" class=\"docClass\">url</a> which points to the location of the Flash movie to load. Other\nconfigurations include:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-backgroundColor\" rel=\"Ext.flash.Component-cfg-backgroundColor\" class=\"docClass\">backgroundColor</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-wmode\" rel=\"Ext.flash.Component-cfg-wmode\" class=\"docClass\">wmode</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashVars\" rel=\"Ext.flash.Component-cfg-flashVars\" class=\"docClass\">flashVars</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashParams\" rel=\"Ext.flash.Component-cfg-flashParams\" class=\"docClass\">flashParams</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashAttributes\" rel=\"Ext.flash.Component-cfg-flashAttributes\" class=\"docClass\">flashAttributes</a></li>\n</ul>\n\n\n<h2>Example usage:</h2>\n\n<pre><code>var win = <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('window', {\n    title: \"It's a tiger!\",\n    layout: 'fit',\n    width: 300,\n    height: 300,\n    x: 20,\n    y: 20,\n    resizable: true,\n    items: {\n        xtype: 'flash',\n        url: 'tiger.swf'\n    }\n});\nwin.show();\n</code></pre>\n\n<h2>Express Install</h2>\n\n<p>Adobe provides a tool called <a href=\"http://www.adobe.com/devnet/flashplayer/articles/express_install.html\">Express Install</a>\nthat offers users an easy way to upgrade their Flash player. If you wish to make use of this, you should set\nthe static EXPRESS_INSTALL_URL property to the location of your Express Install SWF file:</p>\n\n<pre><code><a href=\"#!/api/Ext.flash.Component-static-property-EXPRESS_INSTALL_URL\" rel=\"Ext.flash.Component-static-property-EXPRESS_INSTALL_URL\" class=\"docClass\">Ext.flash.Component.EXPRESS_INSTALL_URL</a> = 'path/to/local/expressInstall.swf';\n</code></pre>\n"}},"FocusManager":{"!doc":"<p>The FocusManager is responsible for globally:</p>\n\n<ol>\n<li>Managing component focus</li>\n<li>Providing basic keyboard navigation</li>\n<li>(optional) Provide a visual cue for focused components, in the form of a focus ring/frame.</li>\n</ol>\n\n\n<p>To activate the FocusManager, simply call <code><a href=\"#!/api/Ext.FocusManager-event-enable\" rel=\"Ext.FocusManager-event-enable\" class=\"docClass\">Ext.FocusManager.enable</a>();</code>. In turn, you may\ndeactivate the FocusManager by subsequently calling <code><a href=\"#!/api/Ext.FocusManager-event-disable\" rel=\"Ext.FocusManager-event-disable\" class=\"docClass\">Ext.FocusManager.disable</a>();</code>.  The\nFocusManager is disabled by default.</p>\n\n<p>To enable the optional focus frame, pass <code>true</code> or <code>{focusFrame: true}</code> to <a href=\"#!/api/Ext.FocusManager-method-enable\" rel=\"Ext.FocusManager-method-enable\" class=\"docClass\">enable</a>.</p>\n\n<p>Another feature of the FocusManager is to provide basic keyboard focus navigation scoped to any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>\nthat would like to have navigation between its child <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>'s.</p>\n"},"form":{"action":{"Action":{"!doc":"<p>The subclasses of this class provide actions to perform upon <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when the Form needs to perform an action\nsuch as submit or load. The Configuration options listed for this class are set through the Form's action methods:\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>, <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a> and <a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a></p>\n\n<p>The instance of Action which performed the action is passed to the success and failure callbacks of the Form's action\nmethods (<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>, <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a> and\n<a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a>), and to the <a href=\"#!/api/Ext.form.Basic-event-actioncomplete\" rel=\"Ext.form.Basic-event-actioncomplete\" class=\"docClass\">actioncomplete</a> and\n<a href=\"#!/api/Ext.form.Basic-event-actionfailed\" rel=\"Ext.form.Basic-event-actionfailed\" class=\"docClass\">actionfailed</a> event handlers.</p>\n"},"DirectLoad":{"!doc":"<p>Provides <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.direct.Manager</a> support for loading form data.</p>\n\n<p>This example illustrates usage of Ext.direct.Direct to <strong>load</strong> a form through <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a>.</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    // configs for FormPanel\n    title: 'Basic Information',\n    renderTo: document.body,\n    width: 300, height: 160,\n    padding: 10,\n\n    // configs apply to child items\n    defaults: {anchor: '100%'},\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'Name',\n        name: 'name'\n    },{\n        fieldLabel: 'Email',\n        name: 'email'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }],\n\n    // configs for BasicForm\n    api: {\n        // The server-side method to call for load() requests\n        load: Profile.getBasicInfo,\n        // The server-side must mark the submit handler as a 'formHandler'\n        submit: Profile.updateBasicInfo\n    },\n    // specify the order for the passed params\n    paramOrder: ['uid', 'foo']\n});\n\n// load the form\nmyFormPanel.getForm().load({\n    // pass 2 arguments to server side getBasicInfo method (len=2)\n    params: {\n        foo: 'bar',\n        uid: 34\n    }\n});\n</code></pre>\n\n<p>The data packet sent to the server will resemble something like:</p>\n\n<pre><code>[\n    {\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\n        \"data\":[34,\"bar\"] // note the order of the params\n    }\n]\n</code></pre>\n\n<p>The form will process a data packet returned by the server that is similar to the following format:</p>\n\n<pre><code>[\n    {\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\n        \"result\":{\n            \"success\":true,\n            \"data\":{\n                \"name\":\"Fred Flintstone\",\n                \"company\":\"Slate Rock and Gravel\",\n                \"email\":\"fred.flintstone@slaterg.com\"\n            }\n        }\n    }\n]\n</code></pre>\n"},"Load":{"!doc":"<p>A class which handles loading of data from a server into the Fields of an <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a>ing.</p>\n\n<h2>Response Packet Criteria</h2>\n\n<p>A response packet <strong>must</strong> contain:</p>\n\n<ul>\n<li><strong><code>success</code></strong> property : Boolean</li>\n<li><strong><code>data</code></strong> property : Object</li>\n</ul>\n\n\n<p>The <code>data</code> property contains the values of Fields to load. The individual value object for each Field is passed to\nthe Field's <a href=\"#!/api/Ext.form.field.Field-method-setValue\" rel=\"Ext.form.field.Field-method-setValue\" class=\"docClass\">setValue</a> method.</p>\n\n<h2>JSON Packets</h2>\n\n<p>By default, response packets are assumed to be JSON, so for the following form load call:</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    title: 'Client and routing info',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    defaults: {\n        xtype: 'textfield'\n    },\n    items: [{\n        fieldLabel: 'Client',\n        name: 'clientName'\n    }, {\n        fieldLabel: 'Port of loading',\n        name: 'portOfLoading'\n    }, {\n        fieldLabel: 'Port of discharge',\n        name: 'portOfDischarge'\n    }]\n});\nmyFormPanel.<a href=\"#!/api/Ext.form.Panel-method-getForm\" rel=\"Ext.form.Panel-method-getForm\" class=\"docClass\">getForm</a>().<a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a>({\n    url: '/getRoutingInfo.php',\n    params: {\n        consignmentRef: myConsignmentRef\n    },\n    failure: function(form, action) {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>(\"Load failed\", action.result.errorMessage);\n    }\n});\n</code></pre>\n\n<p>a <strong>success response</strong> packet may look like this:</p>\n\n<pre><code>{\n    success: true,\n    data: {\n        clientName: \"Fred. Olsen Lines\",\n        portOfLoading: \"FXT\",\n        portOfDischarge: \"OSL\"\n    }\n}\n</code></pre>\n\n<p>while a <strong>failure response</strong> packet may look like this:</p>\n\n<pre><code>{\n    success: false,\n    errorMessage: \"Consignment reference not found\"\n}\n</code></pre>\n\n<p>Other data may be placed into the response for processing the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>'s callback or event handler\nmethods. The object decoded from this JSON is available in the <a href=\"#!/api/Ext.form.action.Action-property-result\" rel=\"Ext.form.action.Action-property-result\" class=\"docClass\">result</a> property.</p>\n"},"DirectSubmit":{"!doc":"<p>Provides Ext.direct support for submitting form data.</p>\n\n<p>This example illustrates usage of Ext.direct.Direct to <strong>submit</strong> a form through <a href=\"#!/api/Ext.direct.Manager\" rel=\"Ext.direct.Manager\" class=\"docClass\">Ext.Direct</a>.</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    // configs for FormPanel\n    title: 'Basic Information',\n    renderTo: document.body,\n    width: 300, height: 160,\n    padding: 10,\n    buttons:[{\n        text: 'Submit',\n        handler: function(){\n            myFormPanel.getForm().submit({\n                params: {\n                    foo: 'bar',\n                    uid: 34\n                }\n            });\n        }\n    }],\n\n    // configs apply to child items\n    defaults: {anchor: '100%'},\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'Name',\n        name: 'name'\n    },{\n        fieldLabel: 'Email',\n        name: 'email'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }],\n\n    // configs for BasicForm\n    api: {\n        // The server-side method to call for load() requests\n        load: Profile.getBasicInfo,\n        // The server-side must mark the submit handler as a 'formHandler'\n        submit: Profile.updateBasicInfo\n    },\n    // specify the order for the passed params\n    paramOrder: ['uid', 'foo']\n});\n</code></pre>\n\n<p>The data packet sent to the server will resemble something like:</p>\n\n<pre><code>{\n    \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\n    \"result\":{\n        \"success\":true,\n        \"id\":{\n            \"extAction\":\"Profile\",\"extMethod\":\"updateBasicInfo\",\n            \"extType\":\"rpc\",\"extTID\":\"6\",\"extUpload\":\"false\",\n            \"name\":\"Aaron Conran\",\"email\":\"aaron@sencha.com\",\"company\":\"Sencha Inc.\"\n        }\n    }\n}\n</code></pre>\n\n<p>The form will process a data packet returned by the server that is similar to the following:</p>\n\n<pre><code>// sample success packet (batched requests)\n[\n    {\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":3,\n        \"result\":{\n            \"success\":true\n        }\n    }\n]\n\n// sample failure packet (one request)\n{\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\n        \"result\":{\n            \"errors\":{\n                \"email\":\"already taken\"\n            },\n            \"success\":false,\n            \"foo\":\"bar\"\n        }\n}\n</code></pre>\n\n<p>Also see the discussion in <a href=\"#!/api/Ext.form.action.DirectLoad\" rel=\"Ext.form.action.DirectLoad\" class=\"docClass\">Ext.form.action.DirectLoad</a>.</p>\n"},"Submit":{"!doc":"<p>A class which handles submission of data from <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s and processes the returned response.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>ting.</p>\n\n<h1>Response Packet Criteria</h1>\n\n<p>A response packet may contain:</p>\n\n<ul>\n<li><p><strong><code>success</code></strong> property : Boolean - required.</p></li>\n<li><p><strong><code>errors</code></strong> property : Object - optional, contains error messages for invalid fields.</p></li>\n</ul>\n\n\n<h1>JSON Packets</h1>\n\n<p>By default, response packets are assumed to be JSON, so a typical response packet may look like this:</p>\n\n<pre><code>{\n    success: false,\n    errors: {\n        clientCode: \"Client not found\",\n        portOfLoading: \"This field must not be null\"\n    }\n}\n</code></pre>\n\n<p>Other data may be placed into the response for processing by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>'s callback or event handler\nmethods. The object decoded from this JSON is available in the <a href=\"#!/api/Ext.form.action.Action-property-result\" rel=\"Ext.form.action.Action-property-result\" class=\"docClass\">result</a> property.</p>\n\n<p>Alternatively, if an <a href=\"#!/api/Ext.form.Basic-cfg-errorReader\" rel=\"Ext.form.Basic-cfg-errorReader\" class=\"docClass\">errorReader</a> is specified as an\n<a href=\"#!/api/Ext.data.reader.Xml\" rel=\"Ext.data.reader.Xml\" class=\"docClass\">XmlReader</a>:</p>\n\n<pre><code>errorReader: new <a href=\"#!/api/Ext.data.reader.Xml\" rel=\"Ext.data.reader.Xml\" class=\"docClass\">Ext.data.reader.Xml</a>({\n        record : 'field',\n        success: '@success'\n    }, [\n        'id', 'msg'\n    ]\n)\n</code></pre>\n\n<p>then the results may be sent back in XML format:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;message success=\"false\"&gt;\n&lt;errors&gt;\n    &lt;field&gt;\n        &lt;id&gt;clientCode&lt;/id&gt;\n        &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\n    &lt;/field&gt;\n    &lt;field&gt;\n        &lt;id&gt;portOfLoading&lt;/id&gt;\n        &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\n    &lt;/field&gt;\n&lt;/errors&gt;\n&lt;/message&gt;\n</code></pre>\n\n<p>Other elements may be placed into the response XML for processing by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>'s callback or event\nhandler methods. The XML document is available in the <a href=\"#!/api/Ext.form.Basic-cfg-errorReader\" rel=\"Ext.form.Basic-cfg-errorReader\" class=\"docClass\">errorReader</a>'s\n<a href=\"#!/api/Ext.data.reader.Xml-property-xmlData\" rel=\"Ext.data.reader.Xml-property-xmlData\" class=\"docClass\">xmlData</a> property.</p>\n"},"StandardSubmit":{"!doc":"<p>A class which handles submission of data from <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s using a standard <code>&lt;form&gt;</code> element submit.\nIt does not handle the response from the submit.</p>\n\n<p>If validation of the form fields fails, the Form's afterAction method will be called. Otherwise, afterAction will not\nbe called.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>ting, when the form's <a href=\"#!/api/Ext.form.Basic-cfg-standardSubmit\" rel=\"Ext.form.Basic-cfg-standardSubmit\" class=\"docClass\">Ext.form.Basic.standardSubmit</a> config option is true.</p>\n"}},"Basic":{"!doc":"<p>Provides input field management, validation, submission, and form loading services for the collection\nof <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Field</a> instances within a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>. It is recommended\nthat you use a <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> as the form container, as that has logic to automatically\nhook up an instance of <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> (plus other conveniences related to field configuration.)</p>\n\n<h2>Form Actions</h2>\n\n<p>The Basic class delegates the handling of form loads and submits to instances of <a href=\"#!/api/Ext.form.action.Action\" rel=\"Ext.form.action.Action\" class=\"docClass\">Ext.form.action.Action</a>.\nSee the various Action implementations for specific details of each one's functionality, as well as the\ndocumentation for <a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a> which details the configuration options that can be specified in\neach action call.</p>\n\n<p>The default submit Action is <a href=\"#!/api/Ext.form.action.Submit\" rel=\"Ext.form.action.Submit\" class=\"docClass\">Ext.form.action.Submit</a>, which uses an Ajax request to submit the\nform's values to a configured URL. To enable normal browser submission of an Ext form, use the\n<a href=\"#!/api/Ext.form.Basic-cfg-standardSubmit\" rel=\"Ext.form.Basic-cfg-standardSubmit\" class=\"docClass\">standardSubmit</a> config option.</p>\n\n<h2>File uploads</h2>\n\n<p>File uploads are not performed using normal 'Ajax' techniques; see the description for\n<a href=\"#!/api/Ext.form.Basic-method-hasUpload\" rel=\"Ext.form.Basic-method-hasUpload\" class=\"docClass\">hasUpload</a> for details. If you're using file uploads you should read the method description.</p>\n\n<h2>Example usage:</h2>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Basic Form',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    bodyPadding: 5,\n    width: 350,\n\n    // Any configuration items here will be automatically passed along to\n    // the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> instance when it gets created.\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Field',\n        name: 'theField'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            // The getForm() method returns the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> instance:\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                // Submit the Ajax request and handle the response\n                form.submit({\n                    success: function(form, action) {\n                       <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', action.result.message);\n                    },\n                    failure: function(form, action) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Failed', action.result ? action.result.message : 'No response');\n                    }\n                });\n            }\n        }\n    }]\n});\n</code></pre>\n"},"CheckboxGroup":{"!doc":"<p>A <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">field container</a> which has a specialized layout for arranging\n<a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a> controls into columns, and provides convenience\n<a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> methods for <a href=\"#!/api/Ext.form.CheckboxGroup-method-getValue\" rel=\"Ext.form.CheckboxGroup-method-getValue\" class=\"docClass\">getting</a>, <a href=\"#!/api/Ext.form.CheckboxGroup-method-setValue\" rel=\"Ext.form.CheckboxGroup-method-setValue\" class=\"docClass\">setting</a>,\nand <a href=\"#!/api/Ext.form.CheckboxGroup-method-validate\" rel=\"Ext.form.CheckboxGroup-method-validate\" class=\"docClass\">validating</a> the group of checkboxes as a whole.</p>\n\n<h1>Validation</h1>\n\n<p>Individual checkbox fields themselves have no default validation behavior, but\nsometimes you want to require a user to select at least one of a group of checkboxes. CheckboxGroup\nallows this by setting the config <code><a href=\"#!/api/Ext.form.CheckboxGroup-cfg-allowBlank\" rel=\"Ext.form.CheckboxGroup-cfg-allowBlank\" class=\"docClass\">allowBlank</a>:false</code>; when the user does not check at\nleast one of the checkboxes, the entire group will be highlighted as invalid and the\n<a href=\"#!/api/Ext.form.CheckboxGroup-cfg-blankText\" rel=\"Ext.form.CheckboxGroup-cfg-blankText\" class=\"docClass\">error message</a> will be displayed according to the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-msgTarget\" rel=\"Ext.form.CheckboxGroup-cfg-msgTarget\" class=\"docClass\">msgTarget</a> config.</p>\n\n<h1>Layout</h1>\n\n<p>The default layout for CheckboxGroup makes it easy to arrange the checkboxes into\ncolumns; see the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-columns\" rel=\"Ext.form.CheckboxGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-vertical\" rel=\"Ext.form.CheckboxGroup-cfg-vertical\" class=\"docClass\">vertical</a> config documentation for details. You may also\nuse a completely different layout by setting the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-layout\" rel=\"Ext.form.CheckboxGroup-cfg-layout\" class=\"docClass\">layout</a> to one of the other supported layout\ntypes; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case\nthe checkbox components at any depth will still be managed by the CheckboxGroup's validation.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Checkbox Group',\n    width: 300,\n    height: 125,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items:[{\n        xtype: 'checkboxgroup',\n        fieldLabel: 'Two Columns',\n        // Arrange checkboxes into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true },\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n</code></pre>\n"},"Labelable":{"!doc":"<p>A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for form fields. This is used by e.g. <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> and <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>\nto let them be managed by the Field layout.</p>\n\n<p>NOTE: This mixin is mainly for internal library use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> or <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>.</p>\n\n<p>Use of this mixin does not make a component a field in the logical sense, meaning it does not provide any\nlogic or state related to values or validation; that is handled by the related <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nmixin. These two mixins may be used separately (for example <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a> is Labelable but not a\nField), or in combination (for example <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> implements both and has logic for connecting the\ntwo.)</p>\n\n<p>Component classes which use this mixin should use the Field layout\nor a derivation thereof to properly size and position the label and message according to the component config.\nThey must also call the <a href=\"#!/api/Ext.form.Labelable-method-initLabelable\" rel=\"Ext.form.Labelable-method-initLabelable\" class=\"docClass\">initLabelable</a> method during component initialization to ensure the mixin gets\nset up correctly.</p>\n"},"FieldContainer":{"!doc":"<p>FieldContainer is a derivation of <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a> that implements the\n<a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Labelable</a> mixin. This allows it to be configured so that it is rendered with\na <a href=\"#!/api/Ext.form.FieldContainer-cfg-fieldLabel\" rel=\"Ext.form.FieldContainer-cfg-fieldLabel\" class=\"docClass\">field label</a> and optional <a href=\"#!/api/Ext.form.FieldContainer-cfg-msgTarget\" rel=\"Ext.form.FieldContainer-cfg-msgTarget\" class=\"docClass\">error message</a> around its sub-items.\nThis is useful for arranging a group of fields or other components within a single item in a form, so\nthat it lines up nicely with other fields. A common use is for grouping a set of related fields under\na single label in a form.</p>\n\n<p>The container's configured <a href=\"#!/api/Ext.form.FieldContainer-cfg-items\" rel=\"Ext.form.FieldContainer-cfg-items\" class=\"docClass\">items</a> will be layed out within the field body area according to the\nconfigured <a href=\"#!/api/Ext.form.FieldContainer-cfg-layout\" rel=\"Ext.form.FieldContainer-cfg-layout\" class=\"docClass\">layout</a> type. The default layout is <code>'autocontainer'</code>.</p>\n\n<p>Like regular fields, FieldContainer can inherit its decoration configuration from the\n<a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> of an enclosing FormPanel. In addition,\nFieldContainer itself can pass <a href=\"#!/api/Ext.form.FieldContainer-cfg-fieldDefaults\" rel=\"Ext.form.FieldContainer-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> to any <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">fields</a>\nit may itself contain.</p>\n\n<p>If you are grouping a set of <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Checkbox</a> or <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Radio</a>\nfields in a single labeled container, consider using a <a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a>\nor <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a> instead as they are specialized for handling those types.</p>\n\n<h1>Example</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'FieldContainer Example',\n    width: 550,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Last Three Jobs',\n        labelWidth: 100,\n\n        // The body area will contain three text fields, arranged\n        // horizontally, separated by draggable splitters.\n        layout: 'hbox',\n        items: [{\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }]\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<h1>Usage of fieldDefaults</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'FieldContainer Example',\n    width: 350,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Your Name',\n        labelWidth: 75,\n        defaultType: 'textfield',\n\n        // Arrange fields vertically, stretched to full width\n        layout: 'anchor',\n        defaults: {\n            layout: '100%'\n        },\n\n        // These config values will be applied to both sub-fields, except\n        // for Last Name which will use its own msgTarget.\n        fieldDefaults: {\n            msgTarget: 'under',\n            labelAlign: 'top'\n        },\n\n        items: [{\n            fieldLabel: 'First Name',\n            name: 'firstName'\n        }, {\n            fieldLabel: 'Last Name',\n            name: 'lastName',\n            msgTarget: 'under'\n        }]\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"field":{"Field":{"!doc":"<p>This mixin provides a common interface for the logical behavior and state of form fields, including:</p>\n\n<ul>\n<li>Getter and setter methods for field values</li>\n<li>Events and methods for tracking value and validity changes</li>\n<li>Methods for triggering validation</li>\n</ul>\n\n\n<p><strong>NOTE</strong>: When implementing custom fields, it is most likely that you will want to extend the <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>\ncomponent class rather than using this mixin directly, as BaseField contains additional logic for generating an\nactual DOM complete with <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">label and error message</a> display and a form input field,\nplus methods that bind the Field value getters and setters to the input field's value.</p>\n\n<p>If you do want to implement this mixin directly and don't want to extend <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>, then\nyou will most likely want to override the following methods with custom implementations: <a href=\"#!/api/Ext.form.field.Field-method-getValue\" rel=\"Ext.form.field.Field-method-getValue\" class=\"docClass\">getValue</a>,\n<a href=\"#!/api/Ext.form.field.Field-method-setValue\" rel=\"Ext.form.field.Field-method-setValue\" class=\"docClass\">setValue</a>, and <a href=\"#!/api/Ext.form.field.Field-method-getErrors\" rel=\"Ext.form.field.Field-method-getErrors\" class=\"docClass\">getErrors</a>. Other methods may be overridden as needed but their base\nimplementations should be sufficient for common cases. You will also need to make sure that <a href=\"#!/api/Ext.form.field.Field-method-initField\" rel=\"Ext.form.field.Field-method-initField\" class=\"docClass\">initField</a>\nis called during the component's initialization.</p>\n"},"Base":{"!doc":"<p>Base class for form fields that provides default event handling, rendering, and other common functionality\nneeded by all form field types. Utilizes the <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> mixin for value handling and validation,\nand the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> mixin to provide label and error message display.</p>\n\n<p>In most cases you will want to use a subclass, such as <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> or <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a>,\nrather than creating instances of this class directly. However if you are implementing a custom form field,\nusing this as the parent class is recommended.</p>\n\n<h1>Values and Conversions</h1>\n\n<p>Because Base implements the Field mixin, it has a main value that can be initialized with the\n<a href=\"#!/api/Ext.form.field.Base-cfg-value\" rel=\"Ext.form.field.Base-cfg-value\" class=\"docClass\">value</a> config and manipulated via the <a href=\"#!/api/Ext.form.field.Base-method-getValue\" rel=\"Ext.form.field.Base-method-getValue\" class=\"docClass\">getValue</a> and <a href=\"#!/api/Ext.form.field.Base-method-setValue\" rel=\"Ext.form.field.Base-method-setValue\" class=\"docClass\">setValue</a> methods. This main\nvalue can be one of many data types appropriate to the current field, for instance a <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Date</a>\nfield would use a JavaScript Date object as its value type. However, because the field is rendered as a HTML\ninput, this value data type can not always be directly used in the rendered field.</p>\n\n<p>Therefore Base introduces the concept of a \"raw value\". This is the value of the rendered HTML input field,\nand is normally a String. The <a href=\"#!/api/Ext.form.field.Base-method-getRawValue\" rel=\"Ext.form.field.Base-method-getRawValue\" class=\"docClass\">getRawValue</a> and <a href=\"#!/api/Ext.form.field.Base-method-setRawValue\" rel=\"Ext.form.field.Base-method-setRawValue\" class=\"docClass\">setRawValue</a> methods can be used to directly\nwork with the raw value, though it is recommended to use getValue and setValue in most cases.</p>\n\n<p>Conversion back and forth between the main value and the raw value is handled by the <a href=\"#!/api/Ext.form.field.Base-method-valueToRaw\" rel=\"Ext.form.field.Base-method-valueToRaw\" class=\"docClass\">valueToRaw</a> and\n<a href=\"#!/api/Ext.form.field.Base-method-rawToValue\" rel=\"Ext.form.field.Base-method-rawToValue\" class=\"docClass\">rawToValue</a> methods. If you are implementing a subclass that uses a non-String value data type, you\nshould override these methods to handle the conversion.</p>\n\n<h1>Rendering</h1>\n\n<p>The content of the field body is defined by the <a href=\"#!/api/Ext.form.field.Base-cfg-fieldSubTpl\" rel=\"Ext.form.field.Base-cfg-fieldSubTpl\" class=\"docClass\">fieldSubTpl</a> XTemplate, with its argument data\ncreated by the <a href=\"#!/api/Ext.form.field.Base-method-getSubTplData\" rel=\"Ext.form.field.Base-method-getSubTplData\" class=\"docClass\">getSubTplData</a> method. Override this template and/or method to create custom\nfield renderings.</p>\n\n<h1>Example usage:</h1>\n\n<pre class='inline-example '><code>// A simple subclass of Base that creates a HTML5 search field. Redirects to the\n// searchUrl when the Enter key is pressed.222\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.form.SearchField', {\n    extend: '<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>',\n    alias: 'widget.searchfield',\n\n    inputType: 'search',\n\n    // Config defining the search URL\n    searchUrl: 'http://www.google.com/search?q={0}',\n\n    // Add specialkey listener\n    initComponent: function() {\n        this.callParent();\n        this.on('specialkey', this.checkEnterKey, this);\n    },\n\n    // Handle enter key presses, execute the search if the field has a value\n    checkEnterKey: function(field, e) {\n        var value = this.getValue();\n        if (e.getKey() === e.ENTER &amp;&amp; !<a href=\"#!/api/Ext-method-isEmpty\" rel=\"Ext-method-isEmpty\" class=\"docClass\">Ext.isEmpty</a>(value)) {\n            location.href = <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>(this.searchUrl, value);\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Base Example',\n    bodyPadding: 5,\n    width: 250,\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n    items: [{\n        xtype: 'searchfield',\n        fieldLabel: 'Search',\n        name: 'query'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Checkbox":{"!doc":"<p>Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. Also serves as a\nparent class for <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">radio buttons</a>.</p>\n\n<h1>Labeling</h1>\n\n<p>In addition to the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">standard field labeling options</a>, checkboxes\nmay be given an optional <a href=\"#!/api/Ext.form.field.Checkbox-cfg-boxLabel\" rel=\"Ext.form.field.Checkbox-cfg-boxLabel\" class=\"docClass\">boxLabel</a> which will be displayed immediately after checkbox. Also see\n<a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a> for a convenient method of grouping related checkboxes.</p>\n\n<h1>Values</h1>\n\n<p>The main value of a checkbox is a boolean, indicating whether or not the checkbox is checked.\nThe following values will check the checkbox:</p>\n\n<ul>\n<li><code>true</code></li>\n<li><code>'true'</code></li>\n<li><code>'1'</code></li>\n<li><code>'on'</code></li>\n</ul>\n\n\n<p>Any other value will uncheck the checkbox.</p>\n\n<p>In addition to the main boolean value, you may also specify a separate <a href=\"#!/api/Ext.form.field.Checkbox-cfg-inputValue\" rel=\"Ext.form.field.Checkbox-cfg-inputValue\" class=\"docClass\">inputValue</a>. This will be\nsent as the parameter value when the form is <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitted</a>. You will want to set\nthis value if you have multiple checkboxes with the same <a href=\"#!/api/Ext.form.field.Checkbox-cfg-name\" rel=\"Ext.form.field.Checkbox-cfg-name\" class=\"docClass\">name</a>. If not specified, the value <code>on</code>\nwill be used.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    bodyPadding: 10,\n    width: 300,\n    title: 'Pizza Order',\n    items: [\n        {\n            xtype: 'fieldcontainer',\n            fieldLabel: 'Toppings',\n            defaultType: 'checkboxfield',\n            items: [\n                {\n                    boxLabel  : 'Anchovies',\n                    name      : 'topping',\n                    inputValue: '1',\n                    id        : 'checkbox1'\n                }, {\n                    boxLabel  : 'Artichoke Hearts',\n                    name      : 'topping',\n                    inputValue: '2',\n                    checked   : true,\n                    id        : 'checkbox2'\n                }, {\n                    boxLabel  : 'Bacon',\n                    name      : 'topping',\n                    inputValue: '3',\n                    id        : 'checkbox3'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Select Bacon',\n            handler: function() {\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox3').setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select All',\n            handler: function() {\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox1').setValue(true);\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox2').setValue(true);\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox3').setValue(true);\n            }\n        },\n        {\n            text: 'Deselect All',\n            handler: function() {\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox1').setValue(false);\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox2').setValue(false);\n                <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('checkbox3').setValue(false);\n            }\n        }\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"ComboBox":{"!doc":"<p>A combobox control with support for autocomplete, remote loading, and many other features.</p>\n\n<p>A ComboBox is like a combination of a traditional HTML text <code>&lt;input&gt;</code> field and a <code>&lt;select&gt;</code>\nfield; the user is able to type freely into the field, and/or pick values from a dropdown selection\nlist. The user can input any value by default, even if it does not appear in the selection list;\nto prevent free-form values and restrict them to items in the list, set <a href=\"#!/api/Ext.form.field.ComboBox-cfg-forceSelection\" rel=\"Ext.form.field.ComboBox-cfg-forceSelection\" class=\"docClass\">forceSelection</a> to <code>true</code>.</p>\n\n<p>The selection list's options are populated from any <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>, including remote\nstores. The data items in the store are mapped to each option's displayed text and backing value via\nthe <a href=\"#!/api/Ext.form.field.ComboBox-cfg-valueField\" rel=\"Ext.form.field.ComboBox-cfg-valueField\" class=\"docClass\">valueField</a> and <a href=\"#!/api/Ext.form.field.ComboBox-cfg-displayField\" rel=\"Ext.form.field.ComboBox-cfg-displayField\" class=\"docClass\">displayField</a> configurations, respectively.</p>\n\n<p>If your store is not remote, i.e. it depends only on local data and is loaded up front, you should be\nsure to set the <a href=\"#!/api/Ext.form.field.ComboBox-cfg-queryMode\" rel=\"Ext.form.field.ComboBox-cfg-queryMode\" class=\"docClass\">queryMode</a> to <code>'local'</code>, as this will improve responsiveness for the user.</p>\n\n<h1>Example usage:</h1>\n\n<pre class='inline-example '><code>// The data store containing the list of states\nvar states = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n        //...\n    ]\n});\n\n// Create the combo box, attached to the states data store\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    displayField: 'name',\n    valueField: 'abbr',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<h1>Events</h1>\n\n<p>To do something when something in ComboBox is selected, configure the select event:</p>\n\n<pre><code>var cb = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    // all of your config options\n    listeners:{\n         scope: yourScope,\n         'select': yourFunction\n    }\n});\n\n// Alternatively, you can assign events after the object is created:\nvar cb = new <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a>(yourOptions);\ncb.on('select', yourFunction, yourScope);\n</code></pre>\n\n<h1>Multiple Selection</h1>\n\n<p>ComboBox also allows selection of multiple items from the list; to enable multi-selection set the\n<a href=\"#!/api/Ext.form.field.ComboBox-cfg-multiSelect\" rel=\"Ext.form.field.ComboBox-cfg-multiSelect\" class=\"docClass\">multiSelect</a> config to <code>true</code>.</p>\n\n<h1>Filtered Stores</h1>\n\n<p>If you have a local store that is already filtered, you can use the <a href=\"#!/api/Ext.form.field.ComboBox-property-lastQuery\" rel=\"Ext.form.field.ComboBox-property-lastQuery\" class=\"docClass\">lastQuery</a> config option\nto prevent the store from having the filter being cleared on first expand.</p>\n\n<h2>Customized combobox</h2>\n\n<p>Both the text shown in dropdown menu and text field can be easily customized:</p>\n\n<pre class='inline-example '><code>var states = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    valueField: 'abbr',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    // Template for the dropdown menu.\n    // Note the use of \"x-boundlist-item\" class,\n    // this is required to make the items selectable.\n    tpl: <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>',\n        '&lt;tpl for=\".\"&gt;',\n            '&lt;div class=\"x-boundlist-item\"&gt;{abbr} - {name}&lt;/div&gt;',\n        '&lt;/tpl&gt;'\n    ),\n    // template for the content inside text field\n    displayTpl: <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>',\n        '&lt;tpl for=\".\"&gt;',\n            '{abbr} - {name}',\n        '&lt;/tpl&gt;'\n    )\n});\n</code></pre>\n\n<p>See also the <a href=\"#!/api/Ext.form.field.ComboBox-cfg-listConfig\" rel=\"Ext.form.field.ComboBox-cfg-listConfig\" class=\"docClass\">listConfig</a> option for additional configuration of the dropdown.</p>\n"},"Text":{"!doc":"<p>A basic text field.  Can be used as a direct replacement for traditional text inputs,\nor as the base class for more sophisticated input controls (like <a href=\"#!/api/Ext.form.field.TextArea\" rel=\"Ext.form.field.TextArea\" class=\"docClass\">Ext.form.field.TextArea</a>\nand <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a>). Has support for empty-field placeholder values (see <a href=\"#!/api/Ext.form.field.Text-cfg-emptyText\" rel=\"Ext.form.field.Text-cfg-emptyText\" class=\"docClass\">emptyText</a>).</p>\n\n<h1>Validation</h1>\n\n<p>The Text field has a useful set of validations built in:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-allowBlank\" rel=\"Ext.form.field.Text-cfg-allowBlank\" class=\"docClass\">allowBlank</a> for making the field required</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-minLength\" rel=\"Ext.form.field.Text-cfg-minLength\" class=\"docClass\">minLength</a> for requiring a minimum value length</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-maxLength\" rel=\"Ext.form.field.Text-cfg-maxLength\" class=\"docClass\">maxLength</a> for setting a maximum value length (with <a href=\"#!/api/Ext.form.field.Text-cfg-enforceMaxLength\" rel=\"Ext.form.field.Text-cfg-enforceMaxLength\" class=\"docClass\">enforceMaxLength</a> to add it\nas the <code>maxlength</code> attribute on the input element)</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-regex\" rel=\"Ext.form.field.Text-cfg-regex\" class=\"docClass\">regex</a> to specify a custom regular expression for validation</li>\n</ul>\n\n\n<p>In addition, custom validations may be added:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a> specifies a virtual type implementation from <a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a> which can contain\ncustom validation logic</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-validator\" rel=\"Ext.form.field.Text-cfg-validator\" class=\"docClass\">validator</a> allows a custom arbitrary function to be called during validation</li>\n</ul>\n\n\n<p>The details around how and when each of these validation options get used are described in the\ndocumentation for <a href=\"#!/api/Ext.form.field.Text-method-getErrors\" rel=\"Ext.form.field.Text-method-getErrors\" class=\"docClass\">getErrors</a>.</p>\n\n<p>By default, the field value is checked for validity immediately while the user is typing in the\nfield. This can be controlled with the <a href=\"#!/api/Ext.form.field.Text-cfg-validateOnChange\" rel=\"Ext.form.field.Text-cfg-validateOnChange\" class=\"docClass\">validateOnChange</a>, <a href=\"#!/api/Ext.form.field.Text-cfg-checkChangeEvents\" rel=\"Ext.form.field.Text-cfg-checkChangeEvents\" class=\"docClass\">checkChangeEvents</a>, and\n<a href=\"#!/api/Ext.form.field.Text-cfg-checkChangeBuffer\" rel=\"Ext.form.field.Text-cfg-checkChangeBuffer\" class=\"docClass\">checkChangeBuffer</a> configurations. Also see the details on Form Validation in the\n<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> class documentation.</p>\n\n<h1>Masking and Character Stripping</h1>\n\n<p>Text fields can be configured with custom regular expressions to be applied to entered values before\nvalidation: see <a href=\"#!/api/Ext.form.field.Text-cfg-maskRe\" rel=\"Ext.form.field.Text-cfg-maskRe\" class=\"docClass\">maskRe</a> and <a href=\"#!/api/Ext.form.field.Text-cfg-stripCharsRe\" rel=\"Ext.form.field.Text-cfg-stripCharsRe\" class=\"docClass\">stripCharsRe</a> for details.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Contact Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'textfield',\n        name: 'name',\n        fieldLabel: 'Name',\n        allowBlank: false  // requires a non-empty value\n    }, {\n        xtype: 'textfield',\n        name: 'email',\n        fieldLabel: 'Email Address',\n        vtype: 'email'  // requires value to be a valid email address format\n    }]\n});\n</code></pre>\n"},"Picker":{"!doc":"<p>An abstract class for fields that have a single trigger which opens a \"picker\" popup below the field, e.g. a combobox\nmenu list or a date picker. It provides a base implementation for toggling the picker's visibility when the trigger\nis clicked, as well as keyboard navigation and some basic events. Sizing and alignment of the picker can be\ncontrolled via the <a href=\"#!/api/Ext.form.field.Picker-cfg-matchFieldWidth\" rel=\"Ext.form.field.Picker-cfg-matchFieldWidth\" class=\"docClass\">matchFieldWidth</a> and <a href=\"#!/api/Ext.form.field.Picker-cfg-pickerAlign\" rel=\"Ext.form.field.Picker-cfg-pickerAlign\" class=\"docClass\">pickerAlign</a>/<a href=\"#!/api/Ext.form.field.Picker-cfg-pickerOffset\" rel=\"Ext.form.field.Picker-cfg-pickerOffset\" class=\"docClass\">pickerOffset</a> config properties\nrespectively.</p>\n\n<p>You would not normally use this class directly, but instead use it as the parent class for a specific picker field\nimplementation. Subclasses must implement the <a href=\"#!/api/Ext.form.field.Picker-method-createPicker\" rel=\"Ext.form.field.Picker-method-createPicker\" class=\"docClass\">createPicker</a> method to create a picker component appropriate\nfor the field.</p>\n"},"Trigger":{"!doc":"<p>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).\nThe trigger has no default action, so you must assign a function to implement the trigger click handler by overriding\n<a href=\"#!/api/Ext.form.field.Trigger-method-onTriggerClick\" rel=\"Ext.form.field.Trigger-method-onTriggerClick\" class=\"docClass\">onTriggerClick</a>. You can create a Trigger field directly, as it renders exactly like a combobox for which you\ncan provide a custom implementation.</p>\n\n<p>For example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.ux.CustomTrigger', {\n    extend: '<a href=\"#!/api/Ext.form.field.Trigger\" rel=\"Ext.form.field.Trigger\" class=\"docClass\">Ext.form.field.Trigger</a>',\n    alias: 'widget.customtrigger',\n\n    // override onTriggerClick\n    onTriggerClick: function() {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Status', 'You clicked my trigger!');\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.FormPanel</a>', {\n    title: 'Form with TriggerField',\n    bodyPadding: 5,\n    width: 350,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items:[{\n        xtype: 'customtrigger',\n        fieldLabel: 'Sample Trigger',\n        emptyText: 'click the trigger'\n    }]\n});\n</code></pre>\n\n<p>However, in general you will most likely want to use Trigger as the base class for a reusable component.\n<a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> and <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a> are perfect examples of this.</p>\n"},"Date":{"!doc":"<p>Provides a date input field with a <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">date picker</a> dropdown and automatic date\nvalidation.</p>\n\n<p>This field recognizes and uses the JavaScript Date object as its main <a href=\"#!/api/Ext.form.field.Date-cfg-value\" rel=\"Ext.form.field.Date-cfg-value\" class=\"docClass\">value</a> type. In addition,\nit recognizes string values which are parsed according to the <a href=\"#!/api/Ext.form.field.Date-cfg-format\" rel=\"Ext.form.field.Date-cfg-format\" class=\"docClass\">format</a> and/or <a href=\"#!/api/Ext.form.field.Date-cfg-altFormats\" rel=\"Ext.form.field.Date-cfg-altFormats\" class=\"docClass\">altFormats</a>\nconfigs. These may be reconfigured to use date formats appropriate for the user's locale.</p>\n\n<p>The field may be limited to a certain range of dates by using the <a href=\"#!/api/Ext.form.field.Date-cfg-minValue\" rel=\"Ext.form.field.Date-cfg-minValue\" class=\"docClass\">minValue</a>, <a href=\"#!/api/Ext.form.field.Date-cfg-maxValue\" rel=\"Ext.form.field.Date-cfg-maxValue\" class=\"docClass\">maxValue</a>,\n<a href=\"#!/api/Ext.form.field.Date-cfg-disabledDays\" rel=\"Ext.form.field.Date-cfg-disabledDays\" class=\"docClass\">disabledDays</a>, and <a href=\"#!/api/Ext.form.field.Date-cfg-disabledDates\" rel=\"Ext.form.field.Date-cfg-disabledDates\" class=\"docClass\">disabledDates</a> config parameters. These configurations will be used both\nin the field's validation, and in the date picker dropdown by preventing invalid dates from being selected.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'From',\n        name: 'from_date',\n        maxValue: new Date()  // limited to the current date or prior\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'To',\n        name: 'to_date',\n        value: new Date()  // defaults to today\n    }]\n});\n</code></pre>\n\n<h1>Date Formats Examples</h1>\n\n<p>This example shows a couple of different date format parsing scenarios. Both use custom date format\nconfigurations; the first one matches the configured <code>format</code> while the second matches the <code>altFormats</code>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value matches the format; will be parsed and displayed using that format.\n        format: 'm d Y',\n        value: '2 4 1978'\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value does not match the format, but does match an altFormat; will be parsed\n        // using the altFormat and displayed using the format.\n        format: 'm d Y',\n        altFormats: 'm,d,Y|m.d.Y',\n        value: '2.4.1978'\n    }]\n});\n</code></pre>\n"},"Display":{"!doc":"<p>A display-only text field which is not validated and not submitted. This is useful for when you want to display a\nvalue from a form's <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">loaded data</a> but do not want to allow the user to edit or submit that\nvalue. The value can be optionally <a href=\"#!/api/Ext.form.field.Display-cfg-htmlEncode\" rel=\"Ext.form.field.Display-cfg-htmlEncode\" class=\"docClass\">HTML encoded</a> if it contains HTML markup that you do not want\nto be rendered.</p>\n\n<p>If you have more complex content, or need to include components within the displayed content, also consider using a\n<a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a> instead.</p>\n\n<p>Example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 175,\n    height: 120,\n    bodyPadding: 10,\n    title: 'Final Score',\n    items: [{\n        xtype: 'displayfield',\n        fieldLabel: 'Home',\n        name: 'home_score',\n        value: '10'\n    }, {\n        xtype: 'displayfield',\n        fieldLabel: 'Visitor',\n        name: 'visitor_score',\n        value: '11'\n    }],\n    buttons: [{\n        text: 'Update'\n    }]\n});\n</code></pre>\n"},"File":{"!doc":"<p>A file upload field which has custom styling and allows control over the button text and other\nfeatures of <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">text fields</a> like <a href=\"#!/api/Ext.form.field.Text-cfg-emptyText\" rel=\"Ext.form.field.Text-cfg-emptyText\" class=\"docClass\">empty text</a>.\nIt uses a hidden file input element behind the scenes to allow user selection of a file and to\nperform the actual upload during <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">form submit</a>.</p>\n\n<p>Because there is no secure cross-browser way to programmatically set the value of a file input,\nthe standard Field <code>setValue</code> method is not implemented. The <code><a href=\"#!/api/Ext.form.field.File-method-getValue\" rel=\"Ext.form.field.File-method-getValue\" class=\"docClass\">getValue</a></code> method will return\na value that is browser-dependent; some have just the file name, some have a full path, some use\na fake path.</p>\n\n<p><strong>IMPORTANT:</strong> File uploads are not performed using normal 'Ajax' techniques; see the description for\n<a href=\"#!/api/Ext.form.Basic-method-hasUpload\" rel=\"Ext.form.Basic-method-hasUpload\" class=\"docClass\">Ext.form.Basic.hasUpload</a> for details.</p>\n\n<h1>Example Usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Upload a Photo',\n    width: 400,\n    bodyPadding: 10,\n    frame: true,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'filefield',\n        name: 'photo',\n        fieldLabel: 'Photo',\n        labelWidth: 50,\n        msgTarget: 'side',\n        allowBlank: false,\n        anchor: '100%',\n        buttonText: 'Select Photo...'\n    }],\n\n    buttons: [{\n        text: 'Upload',\n        handler: function() {\n            var form = this.up('form').getForm();\n            if(form.isValid()){\n                form.submit({\n                    url: 'photo-upload.php',\n                    waitMsg: 'Uploading your photo...',\n                    success: function(fp, o) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', 'Your photo \"' + o.result.file + '\" has been uploaded.');\n                    }\n                });\n            }\n        }\n    }]\n});\n</code></pre>\n"},"FileButton":{"!doc":"\n"},"Hidden":{"!doc":"<p>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.</p>\n\n<p>This creates an actual input element with type=\"submit\" in the DOM. While its label is\n<a href=\"#!/api/Ext.form.field.Hidden-cfg-hideLabel\" rel=\"Ext.form.field.Hidden-cfg-hideLabel\" class=\"docClass\">not rendered</a> by default, it is still a real component and may be sized according\nto its owner container's layout.</p>\n\n<p>Because of this, in most cases it is more convenient and less problematic to simply\n<a href=\"#!/api/Ext.form.action.Action-cfg-params\" rel=\"Ext.form.action.Action-cfg-params\" class=\"docClass\">pass hidden parameters</a> directly when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitting the form</a>.</p>\n\n<p>Example:</p>\n\n<pre><code>new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    title: 'My Form',\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Text Field',\n        name: 'text_field',\n        value: 'value from text field'\n    }, {\n        xtype: 'hiddenfield',\n        name: 'hidden_field_1',\n        value: 'value from hidden field'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            this.up('form').getForm().submit({\n                params: {\n                    hidden_field_2: 'value from submit call'\n                }\n            });\n        }\n    }]\n});\n</code></pre>\n\n<p>Submitting the above form will result in three values sent to the server:</p>\n\n<pre><code>text_field=value+from+text+field&amp;hidden;_field_1=value+from+hidden+field&amp;hidden_field_2=value+from+submit+call\n</code></pre>\n"},"HtmlEditor":{"!doc":"<p>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be\nautomatically hidden when needed. These are noted in the config options where appropriate.</p>\n\n<p>The editor's toolbar buttons have tooltips defined in the <a href=\"#!/api/Ext.form.field.HtmlEditor-property-buttonTips\" rel=\"Ext.form.field.HtmlEditor-property-buttonTips\" class=\"docClass\">buttonTips</a> property, but they are not\nenabled by default unless the global <a href=\"#!/api/Ext.tip.QuickTipManager\" rel=\"Ext.tip.QuickTipManager\" class=\"docClass\">Ext.tip.QuickTipManager</a> singleton is\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">initialized</a>.</p>\n\n<p>An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an\nEditor within any element that has display set to 'none' can cause problems in Safari and Firefox due to their\ndefault iframe reloading bugs.</p>\n\n<h1>Example usage</h1>\n\n<p>Simple example rendered with default options:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();  // enable tooltips\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.HtmlEditor\" rel=\"Ext.form.field.HtmlEditor\" class=\"docClass\">Ext.form.HtmlEditor</a>', {\n    width: 580,\n    height: 250,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Passed via xtype into a container and with custom options:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();  // enable tooltips\nnew <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>({\n    title: 'HTML Editor',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 550,\n    height: 250,\n    frame: true,\n    layout: 'fit',\n    items: {\n        xtype: 'htmleditor',\n        enableColors: false,\n        enableAlignments: false\n    }\n});\n</code></pre>\n\n<h1>Reflow issues</h1>\n\n<p>In some browsers, a layout reflow will cause the underlying editor iframe to be reset. This\nis most commonly seen when using the editor in collapsed panels with animation. In these cases\nit is best to avoid animation. More information can be found here: https://bugzilla.mozilla.org/show_bug.cgi?id=90268</p>\n"},"Number":{"!doc":"<p>A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,\nand numeric validation to limit the value to a range of valid numbers. The range of acceptable number\nvalues can be controlled by setting the <a href=\"#!/api/Ext.form.field.Number-cfg-minValue\" rel=\"Ext.form.field.Number-cfg-minValue\" class=\"docClass\">minValue</a> and <a href=\"#!/api/Ext.form.field.Number-cfg-maxValue\" rel=\"Ext.form.field.Number-cfg-maxValue\" class=\"docClass\">maxValue</a> configs, and fractional\ndecimals can be disallowed by setting <a href=\"#!/api/Ext.form.field.Number-cfg-allowDecimals\" rel=\"Ext.form.field.Number-cfg-allowDecimals\" class=\"docClass\">allowDecimals</a> to <code>false</code>.</p>\n\n<p>By default, the number field is also rendered with a set of up/down spinner buttons and has\nup/down arrow key and mouse wheel event listeners attached for incrementing/decrementing the value by the\n<a href=\"#!/api/Ext.form.field.Number-cfg-step\" rel=\"Ext.form.field.Number-cfg-step\" class=\"docClass\">step</a> value. To hide the spinner buttons set <code><a href=\"#!/api/Ext.form.field.Number-cfg-hideTrigger\" rel=\"Ext.form.field.Number-cfg-hideTrigger\" class=\"docClass\">hideTrigger</a>:true</code>; to disable\nthe arrow key and mouse wheel handlers set <code><a href=\"#!/api/Ext.form.field.Number-cfg-keyNavEnabled\" rel=\"Ext.form.field.Number-cfg-keyNavEnabled\" class=\"docClass\">keyNavEnabled</a>:false</code> and\n<code><a href=\"#!/api/Ext.form.field.Number-cfg-mouseWheelEnabled\" rel=\"Ext.form.field.Number-cfg-mouseWheelEnabled\" class=\"docClass\">mouseWheelEnabled</a>:false</code>. See the example below.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'On The Wall',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'bottles',\n        fieldLabel: 'Bottles of Beer',\n        value: 99,\n        maxValue: 99,\n        minValue: 0\n    }],\n    buttons: [{\n        text: 'Take one down, pass it around',\n        handler: function() {\n            this.up('form').down('[name=bottles]').spinDown();\n        }\n    }]\n});\n</code></pre>\n\n<h1>Removing UI Enhancements</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Personal Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'age',\n        fieldLabel: 'Age',\n        minValue: 0, //prevents negative numbers\n\n        // Remove spinner buttons, and arrow key and mouse wheel listeners\n        hideTrigger: true,\n        keyNavEnabled: false,\n        mouseWheelEnabled: false\n    }]\n});\n</code></pre>\n\n<h1>Using Step</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    title: 'Step',\n    width: 300,\n    bodyPadding: 10,\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'evens',\n        fieldLabel: 'Even Numbers',\n\n        // Set step so it skips every other number\n        step: 2,\n        value: 0,\n\n        // Add change handler to force user-entered numbers to evens\n        listeners: {\n            change: function(field, value) {\n                value = parseInt(value, 10);\n                field.setValue(value + value % 2);\n            }\n        }\n    }]\n});\n</code></pre>\n"},"Spinner":{"!doc":"<p>A field with a pair of up/down spinner buttons. This class is not normally instantiated directly,\ninstead it is subclassed and the <a href=\"#!/api/Ext.form.field.Spinner-method-onSpinUp\" rel=\"Ext.form.field.Spinner-method-onSpinUp\" class=\"docClass\">onSpinUp</a> and <a href=\"#!/api/Ext.form.field.Spinner-method-onSpinDown\" rel=\"Ext.form.field.Spinner-method-onSpinDown\" class=\"docClass\">onSpinDown</a> methods are implemented\nto handle when the buttons are clicked. A good example of this is the <a href=\"#!/api/Ext.form.field.Number\" rel=\"Ext.form.field.Number\" class=\"docClass\">Ext.form.field.Number</a>\nfield which uses the spinner to increment and decrement the field's value by its\n<a href=\"#!/api/Ext.form.field.Number-cfg-step\" rel=\"Ext.form.field.Number-cfg-step\" class=\"docClass\">step</a> config value.</p>\n\n<p>For example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.ux.CustomSpinner', {\n    extend: '<a href=\"#!/api/Ext.form.field.Spinner\" rel=\"Ext.form.field.Spinner\" class=\"docClass\">Ext.form.field.Spinner</a>',\n    alias: 'widget.customspinner',\n\n    // override onSpinUp (using step isn't neccessary)\n    onSpinUp: function() {\n        var me = this;\n        if (!me.readOnly) {\n            var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n            me.setValue((val + me.step) + ' Pack');\n        }\n    },\n\n    // override onSpinDown\n    onSpinDown: function() {\n        var me = this;\n        if (!me.readOnly) {\n           var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n           if (val &lt;= me.step) {\n               me.setValue('Dry!');\n           } else {\n               me.setValue((val - me.step) + ' Pack');\n           }\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.FormPanel</a>', {\n    title: 'Form with SpinnerField',\n    bodyPadding: 5,\n    width: 350,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items:[{\n        xtype: 'customspinner',\n        fieldLabel: 'How Much Beer?',\n        step: 6\n    }]\n});\n</code></pre>\n\n<p>By default, pressing the up and down arrow keys will also trigger the onSpinUp and onSpinDown methods;\nto prevent this, set <code><a href=\"#!/api/Ext.form.field.Spinner-cfg-keyNavEnabled\" rel=\"Ext.form.field.Spinner-cfg-keyNavEnabled\" class=\"docClass\">keyNavEnabled</a> = false</code>.</p>\n"},"Radio":{"!doc":"<p>Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked\nat a time within a group of radios with the same name.</p>\n\n<h1>Labeling</h1>\n\n<p>In addition to the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">standard field labeling options</a>, radio buttons\nmay be given an optional <a href=\"#!/api/Ext.form.field.Radio-cfg-boxLabel\" rel=\"Ext.form.field.Radio-cfg-boxLabel\" class=\"docClass\">boxLabel</a> which will be displayed immediately to the right of the input. Also\nsee <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a> for a convenient method of grouping related radio buttons.</p>\n\n<h1>Values</h1>\n\n<p>The main value of a Radio field is a boolean, indicating whether or not the radio is checked.</p>\n\n<p>The following values will check the radio:</p>\n\n<ul>\n<li><code>true</code></li>\n<li><code>'true'</code></li>\n<li><code>'1'</code></li>\n<li><code>'on'</code></li>\n</ul>\n\n\n<p>Any other value will uncheck it.</p>\n\n<p>In addition to the main boolean value, you may also specify a separate <a href=\"#!/api/Ext.form.field.Radio-cfg-inputValue\" rel=\"Ext.form.field.Radio-cfg-inputValue\" class=\"docClass\">inputValue</a>. This will be sent\nas the parameter value when the form is <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitted</a>. You will want to set this\nvalue if you have multiple radio buttons with the same <a href=\"#!/api/Ext.form.field.Radio-cfg-name\" rel=\"Ext.form.field.Radio-cfg-name\" class=\"docClass\">name</a>, as is almost always the case.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title      : 'Order Form',\n    width      : 300,\n    bodyPadding: 10,\n    renderTo   : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Size',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'M',\n                    name      : 'size',\n                    inputValue: 'm',\n                    id        : 'radio1'\n                }, {\n                    boxLabel  : 'L',\n                    name      : 'size',\n                    inputValue: 'l',\n                    id        : 'radio2'\n                }, {\n                    boxLabel  : 'XL',\n                    name      : 'size',\n                    inputValue: 'xl',\n                    id        : 'radio3'\n                }\n            ]\n        },\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Color',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'Blue',\n                    name      : 'color',\n                    inputValue: 'blue',\n                    id        : 'radio4'\n                }, {\n                    boxLabel  : 'Grey',\n                    name      : 'color',\n                    inputValue: 'grey',\n                    id        : 'radio5'\n                }, {\n                    boxLabel  : 'Black',\n                    name      : 'color',\n                    inputValue: 'black',\n                    id        : 'radio6'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Smaller Size',\n            handler: function() {\n                var radio1 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio1'),\n                    radio2 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio2'),\n                    radio3 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio3');\n\n                //if L is selected, change to M\n                if (radio2.getValue()) {\n                    radio1.setValue(true);\n                    return;\n                }\n\n                //if XL is selected, change to L\n                if (radio3.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to S\n                radio1.setValue(true);\n            }\n        },\n        {\n            text: 'Larger Size',\n            handler: function() {\n                var radio1 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio1'),\n                    radio2 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio2'),\n                    radio3 = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio3');\n\n                //if M is selected, change to L\n                if (radio1.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if L is selected, change to XL\n                if (radio2.getValue()) {\n                    radio3.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to XL\n                radio3.setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select color',\n            menu: {\n                indent: false,\n                items: [\n                    {\n                        text: 'Blue',\n                        handler: function() {\n                            var radio = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio4');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Grey',\n                        handler: function() {\n                            var radio = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio5');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Black',\n                        handler: function() {\n                            var radio = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('radio6');\n                            radio.setValue(true);\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n});\n</code></pre>\n"},"TextArea":{"!doc":"<p>This class creates a multiline text field, which can be used as a direct replacement for traditional\ntextarea fields. In addition, it supports automatically <a href=\"#!/api/Ext.form.field.TextArea-cfg-grow\" rel=\"Ext.form.field.TextArea-cfg-grow\" class=\"docClass\">growing</a> the height of the textarea to\nfit its content.</p>\n\n<p>All of the configuration options from <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> can be used on TextArea.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.FormPanel</a>', {\n    title      : 'Sample TextArea',\n    width      : 400,\n    bodyPadding: 10,\n    renderTo   : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype     : 'textareafield',\n        grow      : true,\n        name      : 'message',\n        fieldLabel: 'Message',\n        anchor    : '100%'\n    }]\n});\n</code></pre>\n\n<p>Some other useful configuration options when using <a href=\"#!/api/Ext.form.field.TextArea-cfg-grow\" rel=\"Ext.form.field.TextArea-cfg-grow\" class=\"docClass\">grow</a> are <a href=\"#!/api/Ext.form.field.TextArea-cfg-growMin\" rel=\"Ext.form.field.TextArea-cfg-growMin\" class=\"docClass\">growMin</a> and <a href=\"#!/api/Ext.form.field.TextArea-cfg-growMax\" rel=\"Ext.form.field.TextArea-cfg-growMax\" class=\"docClass\">growMax</a>.\nThese allow you to set the minimum and maximum grow heights for the textarea.</p>\n\n<p><strong>NOTE:</strong> In some browsers, carriage returns ('\\r', not to be confused with new lines)\nwill be automatically stripped out the value is set to the textarea. Since we cannot\nuse any reasonable method to attempt to re-insert these, they will automatically be\nstripped out to ensure the behaviour is consistent across browser.</p>\n"},"Time":{"!doc":"<p>Provides a time input field with a time dropdown and automatic time validation.</p>\n\n<p>This field recognizes and uses JavaScript Date objects as its main <a href=\"#!/api/Ext.form.field.Time-cfg-value\" rel=\"Ext.form.field.Time-cfg-value\" class=\"docClass\">value</a> type (only the time portion of the\ndate is used; the month/day/year are ignored). In addition, it recognizes string values which are parsed according to\nthe <a href=\"#!/api/Ext.form.field.Time-cfg-format\" rel=\"Ext.form.field.Time-cfg-format\" class=\"docClass\">format</a> and/or <a href=\"#!/api/Ext.form.field.Time-cfg-altFormats\" rel=\"Ext.form.field.Time-cfg-altFormats\" class=\"docClass\">altFormats</a> configs. These may be reconfigured to use time formats appropriate for\nthe user's locale.</p>\n\n<p>The field may be limited to a certain range of times by using the <a href=\"#!/api/Ext.form.field.Time-cfg-minValue\" rel=\"Ext.form.field.Time-cfg-minValue\" class=\"docClass\">minValue</a> and <a href=\"#!/api/Ext.form.field.Time-cfg-maxValue\" rel=\"Ext.form.field.Time-cfg-maxValue\" class=\"docClass\">maxValue</a> configs,\nand the interval between time options in the dropdown can be changed with the <a href=\"#!/api/Ext.form.field.Time-cfg-increment\" rel=\"Ext.form.field.Time-cfg-increment\" class=\"docClass\">increment</a> config.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Time Card',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'timefield',\n        name: 'in',\n        fieldLabel: 'Time In',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n    }, {\n        xtype: 'timefield',\n        name: 'out',\n        fieldLabel: 'Time Out',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n   }]\n});\n</code></pre>\n"},"VTypes":{"!doc":"<p>This is a singleton object which contains a set of commonly used field validation functions\nand provides a mechanism for creating reusable custom field validations.\nThe following field validation functions are provided out of the box:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-alpha\" rel=\"Ext.form.field.VTypes-method-alpha\" class=\"docClass\">alpha</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-alphanum\" rel=\"Ext.form.field.VTypes-method-alphanum\" class=\"docClass\">alphanum</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-email\" rel=\"Ext.form.field.VTypes-method-email\" class=\"docClass\">email</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-url\" rel=\"Ext.form.field.VTypes-method-url\" class=\"docClass\">url</a></li>\n</ul>\n\n\n<p>VTypes can be applied to a <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Text Field</a> using the <code><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a></code> configuration:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n    fieldLabel: 'Email Address',\n    name: 'email',\n    vtype: 'email' // applies email validation rules to this field\n});\n</code></pre>\n\n<p>To create custom VTypes:</p>\n\n<pre><code>// custom Vtype for vtype:'time'\nvar timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\\s[a|p]m)$/i;\n<a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply</a>(<a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a>, {\n    //  vtype validation function\n    time: function(val, field) {\n        return timeTest.test(val);\n    },\n    // vtype Text property: The error text to display when the validation function returns false\n    timeText: 'Not a valid time.  Must be in the format \"12:34 PM\".',\n    // vtype Mask property: The keystroke filter mask\n    timeMask: /[\\d\\s:amp]/i\n});\n</code></pre>\n\n<p>In the above example the <code>time</code> function is the validator that will run when field validation occurs,\n<code>timeText</code> is the error message, and <code>timeMask</code> limits what characters can be typed into the field.\nNote that the <code>Text</code> and <code>Mask</code> functions must begin with the same name as the validator function.</p>\n\n<p>Using a custom validator is the same as using one of the build-in validators - just use the name of the validator function\nas the <code><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a></code> configuration on a <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Text Field</a>:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n    fieldLabel: 'Departure Time',\n    name: 'departureTime',\n    vtype: 'time' // applies custom time validation rules to this field\n});\n</code></pre>\n\n<p>Another example of a custom validator:</p>\n\n<pre><code>// custom Vtype for vtype:'IPAddress'\n<a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply</a>(<a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a>, {\n    IPAddress:  function(v) {\n        return /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(v);\n    },\n    IPAddressText: 'Must be a numeric IP address',\n    IPAddressMask: /[\\d\\.]/i\n});\n</code></pre>\n\n<p>It's important to note that using <a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply()</a> means that the custom validator function\nas well as <code>Text</code> and <code>Mask</code> fields are added as properties of the <code><a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a></code> singleton.</p>\n"}},"FieldAncestor":{"!doc":"<p>A mixin for <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> components that are likely to have form fields in their\nitems subtree. Adds the following capabilities:</p>\n\n<ul>\n<li>Methods for handling the addition and removal of <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> and <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\ninstances at any depth within the container.</li>\n<li>Events (<a href=\"#!/api/Ext.form.FieldAncestor-event-fieldvaliditychange\" rel=\"Ext.form.FieldAncestor-event-fieldvaliditychange\" class=\"docClass\">fieldvaliditychange</a> and <a href=\"#!/api/Ext.form.FieldAncestor-event-fielderrorchange\" rel=\"Ext.form.FieldAncestor-event-fielderrorchange\" class=\"docClass\">fielderrorchange</a>) for handling changes to the state\nof individual fields at the container level.</li>\n<li>Automatic application of <a href=\"#!/api/Ext.form.FieldAncestor-cfg-fieldDefaults\" rel=\"Ext.form.FieldAncestor-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config properties to each field added within the\ncontainer, to facilitate uniform configuration of all fields.</li>\n</ul>\n\n\n<p>This mixin is primarily for internal use by <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> and <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>,\nand should not normally need to be used directly.</p>\n"},"CheckboxManager":{"!doc":"<p>Private utility class for managing all <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a> fields grouped by name.</p>\n"},"FieldSet":{"!doc":"<p>A container for grouping sets of fields, rendered as a HTML <code>fieldset</code> element. The <a href=\"#!/api/Ext.form.FieldSet-cfg-title\" rel=\"Ext.form.FieldSet-cfg-title\" class=\"docClass\">title</a>\nconfig will be rendered as the fieldset's <code>legend</code>.</p>\n\n<p>While FieldSets commonly contain simple groups of fields, they are general <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Containers</a>\nand may therefore contain any type of components in their <a href=\"#!/api/Ext.form.FieldSet-cfg-items\" rel=\"Ext.form.FieldSet-cfg-items\" class=\"docClass\">items</a>, including other nested containers.\nThe default <a href=\"#!/api/Ext.form.FieldSet-cfg-layout\" rel=\"Ext.form.FieldSet-cfg-layout\" class=\"docClass\">layout</a> for the FieldSet's items is <code>'anchor'</code>, but it can be configured to use any other\nlayout type.</p>\n\n<p>FieldSets may also be collapsed if configured to do so; this can be done in two ways:</p>\n\n<ol>\n<li>Set the <a href=\"#!/api/Ext.form.FieldSet-cfg-collapsible\" rel=\"Ext.form.FieldSet-cfg-collapsible\" class=\"docClass\">collapsible</a> config to true; this will result in a collapse button being rendered next to\nthe <a href=\"#!/api/Ext.form.FieldSet-cfg-title\" rel=\"Ext.form.FieldSet-cfg-title\" class=\"docClass\">legend title</a>, or:</li>\n<li>Set the <a href=\"#!/api/Ext.form.FieldSet-cfg-checkboxToggle\" rel=\"Ext.form.FieldSet-cfg-checkboxToggle\" class=\"docClass\">checkboxToggle</a> config to true; this is similar to using <a href=\"#!/api/Ext.form.FieldSet-cfg-collapsible\" rel=\"Ext.form.FieldSet-cfg-collapsible\" class=\"docClass\">collapsible</a> but renders\na <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">checkbox</a> in place of the toggle button. The fieldset will be expanded when the\ncheckbox is checked and collapsed when it is unchecked. The checkbox will also be included in the\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">form submit parameters</a> using the <a href=\"#!/api/Ext.form.FieldSet-cfg-checkboxName\" rel=\"Ext.form.FieldSet-cfg-checkboxName\" class=\"docClass\">checkboxName</a> as its parameter name.</li>\n</ol>\n\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Simple Form with FieldSets',\n    labelWidth: 75, // label settings here cascade unless overridden\n    url: 'save-form.php',\n    frame: true,\n    bodyStyle: 'padding:5px 5px 0',\n    width: 550,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    layout: 'column', // arrange fieldsets side by side\n    items: [{\n        // Fieldset in Column 1 - collapsible via toggle button\n        xtype:'fieldset',\n        columnWidth: 0.5,\n        title: 'Fieldset 1',\n        collapsible: true,\n        defaultType: 'textfield',\n        defaults: {anchor: '100%'},\n        layout: 'anchor',\n        items :[{\n            fieldLabel: 'Field 1',\n            name: 'field1'\n        }, {\n            fieldLabel: 'Field 2',\n            name: 'field2'\n        }]\n    }, {\n        // Fieldset in Column 2 - collapsible via checkbox, collapsed by default, contains a panel\n        xtype:'fieldset',\n        title: 'Show Panel', // title or checkboxToggle creates fieldset header\n        columnWidth: 0.5,\n        checkboxToggle: true,\n        collapsed: true, // fieldset initially collapsed\n        layout:'anchor',\n        items :[{\n            xtype: 'panel',\n            anchor: '100%',\n            title: 'Panel inside a fieldset',\n            frame: true,\n            height: 52\n        }]\n    }]\n});\n</code></pre>\n"},"Label":{"!doc":"<p>Produces a standalone <code>&lt;label /&gt;</code> element which can be inserted into a form and be associated with a field\nin that form using the <a href=\"#!/api/Ext.form.Label-cfg-forId\" rel=\"Ext.form.Label-cfg-forId\" class=\"docClass\">forId</a> property.</p>\n\n<p><strong>NOTE:</strong> in most cases it will be more appropriate to use the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a>\nand associated config properties (<a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">Ext.form.Labelable.labelAlign</a>, <a href=\"#!/api/Ext.form.Labelable-cfg-labelWidth\" rel=\"Ext.form.Labelable-cfg-labelWidth\" class=\"docClass\">Ext.form.Labelable.labelWidth</a>,\netc.) in field components themselves, as that allows labels to be uniformly sized throughout the form.\n<a href=\"#!/api/Ext.form.Label\" rel=\"Ext.form.Label\" class=\"docClass\">Ext.form.Label</a> should only be used when your layout can not be achieved with the standard\n<a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">field layout</a>.</p>\n\n<p>You will likely be associating the label with a field component that extends <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>, so\nyou should make sure the <a href=\"#!/api/Ext.form.Label-cfg-forId\" rel=\"Ext.form.Label-cfg-forId\" class=\"docClass\">forId</a> is set to the same value as the <a href=\"#!/api/Ext.form.field.Base-cfg-inputId\" rel=\"Ext.form.field.Base-cfg-inputId\" class=\"docClass\">inputId</a>\nof that field.</p>\n\n<p>The label's text can be set using either the <a href=\"#!/api/Ext.form.Label-cfg-text\" rel=\"Ext.form.Label-cfg-text\" class=\"docClass\">text</a> or <a href=\"#!/api/Ext.form.Label-cfg-html\" rel=\"Ext.form.Label-cfg-html\" class=\"docClass\">html</a> configuration properties; the\ndifference between the two is that the former will automatically escape HTML characters when rendering, while\nthe latter will not.</p>\n\n<h1>Example</h1>\n\n<p>This example creates a Label after its associated Text field, an arrangement that cannot currently\nbe achieved using the standard Field layout's labelAlign.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Field with Label',\n    width: 400,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    layout: {\n        type: 'hbox',\n        align: 'middle'\n    },\n    items: [{\n        xtype: 'textfield',\n        hideLabel: true,\n        flex: 1\n    }, {\n        xtype: 'label',\n        forId: 'myFieldId',\n        text: 'My Awesome Field',\n        margin: '0 0 0 10'\n    }]\n});\n</code></pre>\n"},"Panel":{"!doc":"<p>FormPanel provides a standard container for forms. It is essentially a standard <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> which\nautomatically creates a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">BasicForm</a> for managing any <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nobjects that are added as descendants of the panel. It also includes conveniences for configuring and\nworking with the BasicForm and the collection of Fields.</p>\n\n<h1>Layout</h1>\n\n<p>By default, FormPanel is configured with <code><a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">layout:'anchor'</a></code> for\nthe layout of its immediate child items. This can be changed to any of the supported container layouts.\nThe layout of sub-containers is configured in <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">the standard way</a>.</p>\n\n<h1>BasicForm</h1>\n\n<p>Although <strong>not listed</strong> as configuration options of FormPanel, the FormPanel class accepts all\nof the config options supported by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> class, and will pass them along to\nthe internal BasicForm when it is created.</p>\n\n<p>The following events fired by the BasicForm will be re-fired by the FormPanel and can therefore be\nlistened for on the FormPanel itself:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.Basic-event-beforeaction\" rel=\"Ext.form.Basic-event-beforeaction\" class=\"docClass\">beforeaction</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-actionfailed\" rel=\"Ext.form.Basic-event-actionfailed\" class=\"docClass\">actionfailed</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-actioncomplete\" rel=\"Ext.form.Basic-event-actioncomplete\" class=\"docClass\">actioncomplete</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-validitychange\" rel=\"Ext.form.Basic-event-validitychange\" class=\"docClass\">validitychange</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-dirtychange\" rel=\"Ext.form.Basic-event-dirtychange\" class=\"docClass\">dirtychange</a></li>\n</ul>\n\n\n<h1>Field Defaults</h1>\n\n<p>The <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config option conveniently allows centralized configuration of default values\nfor all fields added as descendants of the FormPanel. Any config option recognized by implementations\nof <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> may be included in this object. See the <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> documentation\nfor details of how the defaults are applied.</p>\n\n<h1>Form Validation</h1>\n\n<p>With the default configuration, form fields are validated on-the-fly while the user edits their values.\nThis can be controlled on a per-field basis (or via the <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config) with the field\nconfig properties <a href=\"#!/api/Ext.form.field.Field-cfg-validateOnChange\" rel=\"Ext.form.field.Field-cfg-validateOnChange\" class=\"docClass\">Ext.form.field.Field.validateOnChange</a> and <a href=\"#!/api/Ext.form.field.Base-cfg-checkChangeEvents\" rel=\"Ext.form.field.Base-cfg-checkChangeEvents\" class=\"docClass\">Ext.form.field.Base.checkChangeEvents</a>,\nand the FormPanel's config properties <a href=\"#!/api/Ext.form.Panel-cfg-pollForChanges\" rel=\"Ext.form.Panel-cfg-pollForChanges\" class=\"docClass\">pollForChanges</a> and <a href=\"#!/api/Ext.form.Panel-cfg-pollInterval\" rel=\"Ext.form.Panel-cfg-pollInterval\" class=\"docClass\">pollInterval</a>.</p>\n\n<p>Any component within the FormPanel can be configured with <code>formBind: true</code>. This will cause that\ncomponent to be automatically disabled when the form is invalid, and enabled when it is valid. This is most\ncommonly used for Button components to prevent submitting the form in an invalid state, but can be used on\nany component type.</p>\n\n<p>For more information on form validation see the following:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Field-cfg-validateOnChange\" rel=\"Ext.form.field.Field-cfg-validateOnChange\" class=\"docClass\">Ext.form.field.Field.validateOnChange</a></li>\n<li><a href=\"#!/api/Ext.form.Panel-cfg-pollForChanges\" rel=\"Ext.form.Panel-cfg-pollForChanges\" class=\"docClass\">pollForChanges</a> and <a href=\"#!/api/Ext.form.Panel-cfg-pollInterval\" rel=\"Ext.form.Panel-cfg-pollInterval\" class=\"docClass\">pollInterval</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">BasicForm.doAction clientValidation notes</a></li>\n</ul>\n\n\n<h1>Form Submission</h1>\n\n<p>By default, Ext Forms are submitted through Ajax, using <a href=\"#!/api/Ext.form.action.Action\" rel=\"Ext.form.action.Action\" class=\"docClass\">Ext.form.action.Action</a>. See the documentation for\n<a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> for details.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Simple Form',\n    bodyPadding: 5,\n    width: 350,\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n\n    // The fields\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank: false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last',\n        allowBlank: false\n    }],\n\n    // Reset and Submit buttons\n    buttons: [{\n        text: 'Reset',\n        handler: function() {\n            this.up('form').getForm().reset();\n        }\n    }, {\n        text: 'Submit',\n        formBind: true, //only enabled once the form is valid\n        disabled: true,\n        handler: function() {\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                form.submit({\n                    success: function(form, action) {\n                       <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', action.result.msg);\n                    },\n                    failure: function(form, action) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Failed', action.result.msg);\n                    }\n                });\n            }\n        }\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"RadioGroup":{"!doc":"<p>A <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">field container</a> which has a specialized layout for arranging\n<a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Ext.form.field.Radio</a> controls into columns, and provides convenience <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nmethods for <a href=\"#!/api/Ext.form.RadioGroup-method-getValue\" rel=\"Ext.form.RadioGroup-method-getValue\" class=\"docClass\">getting</a>, <a href=\"#!/api/Ext.form.RadioGroup-method-setValue\" rel=\"Ext.form.RadioGroup-method-setValue\" class=\"docClass\">setting</a>, and <a href=\"#!/api/Ext.form.RadioGroup-method-validate\" rel=\"Ext.form.RadioGroup-method-validate\" class=\"docClass\">validating</a> the\ngroup of radio buttons as a whole.</p>\n\n<h1>Validation</h1>\n\n<p>Individual radio buttons themselves have no default validation behavior, but\nsometimes you want to require a user to select one of a group of radios. RadioGroup\nallows this by setting the config <code><a href=\"#!/api/Ext.form.RadioGroup-cfg-allowBlank\" rel=\"Ext.form.RadioGroup-cfg-allowBlank\" class=\"docClass\">allowBlank</a>:false</code>; when the user does not check at\none of the radio buttons, the entire group will be highlighted as invalid and the\n<a href=\"#!/api/Ext.form.RadioGroup-cfg-blankText\" rel=\"Ext.form.RadioGroup-cfg-blankText\" class=\"docClass\">error message</a> will be displayed according to the <a href=\"#!/api/Ext.form.RadioGroup-cfg-msgTarget\" rel=\"Ext.form.RadioGroup-cfg-msgTarget\" class=\"docClass\">msgTarget</a> config.</p>\n\n<h1>Layout</h1>\n\n<p>The default layout for RadioGroup makes it easy to arrange the radio buttons into\ncolumns; see the <a href=\"#!/api/Ext.form.RadioGroup-cfg-columns\" rel=\"Ext.form.RadioGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.RadioGroup-cfg-vertical\" rel=\"Ext.form.RadioGroup-cfg-vertical\" class=\"docClass\">vertical</a> config documentation for details. You may also\nuse a completely different layout by setting the <a href=\"#!/api/Ext.form.RadioGroup-cfg-layout\" rel=\"Ext.form.RadioGroup-cfg-layout\" class=\"docClass\">layout</a> to one of the other supported layout\ntypes; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case\nthe Radio components at any depth will still be managed by the RadioGroup's validation.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'RadioGroup Example',\n    width: 300,\n    height: 125,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items:[{\n        xtype: 'radiogroup',\n        fieldLabel: 'Two Columns',\n        // Arrange radio buttons into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true},\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n</code></pre>\n"},"RadioManager":{"!doc":"<p>Private utility class for managing all <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Ext.form.field.Radio</a> fields grouped by name.</p>\n"}},"Function":{"!doc":"<p>A collection of useful static methods to deal with function callbacks</p>\n"},"fx":{"Anim":{"!doc":"<p>This class manages animation for a specific <a href=\"#!/api/Ext.fx.Anim-cfg-target\" rel=\"Ext.fx.Anim-cfg-target\" class=\"docClass\">target</a>. The animation allows\nanimation of various properties on the target, such as size, position, color and others.</p>\n\n<h2>Starting Conditions</h2>\n\n<p>The starting conditions for the animation are provided by the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> configuration.\nAny/all of the properties in the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> configuration can be specified. If a particular\nproperty is not defined, the starting value for that property will be read directly from the target.</p>\n\n<h2>End Conditions</h2>\n\n<p>The ending conditions for the animation are provided by the <a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> configuration. These mark\nthe final values once the animations has finished. The values in the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> can mirror\nthose in the <a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> configuration to provide a starting point.</p>\n\n<h2>Other Options</h2>\n\n<ul>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-duration\" rel=\"Ext.fx.Anim-cfg-duration\" class=\"docClass\">duration</a>: Specifies the time period of the animation.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">easing</a>: Specifies the easing of the animation.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-iterations\" rel=\"Ext.fx.Anim-cfg-iterations\" class=\"docClass\">iterations</a>: Allows the animation to repeat a number of times.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-alternate\" rel=\"Ext.fx.Anim-cfg-alternate\" class=\"docClass\">alternate</a>: Used in conjunction with <a href=\"#!/api/Ext.fx.Anim-cfg-iterations\" rel=\"Ext.fx.Anim-cfg-iterations\" class=\"docClass\">iterations</a>, reverses the direction every second iteration.</li>\n</ul>\n\n\n<h2>Example Code</h2>\n\n<pre class='inline-example '><code>var myComponent = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    style: 'border: 1px solid red;'\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a>', {\n    target: myComponent,\n    duration: 1000,\n    from: {\n        width: 400 //starting width 400\n    },\n    to: {\n        width: 300, //end width 300\n        height: 300 // end height 300\n    }\n});\n</code></pre>\n"},"Animator":{"!doc":"<p>This class is used to run keyframe based animations, which follows the CSS3 based animation structure.\nKeyframe animations differ from typical from/to animations in that they offer the ability to specify values\nat various points throughout the animation.</p>\n\n<h2>Using Keyframes</h2>\n\n<p>The <a href=\"#!/api/Ext.fx.Animator-cfg-keyframes\" rel=\"Ext.fx.Animator-cfg-keyframes\" class=\"docClass\">keyframes</a> option is the most important part of specifying an animation when using this\nclass. A key frame is a point in a particular animation. We represent this as a percentage of the\ntotal animation duration. At each key frame, we can specify the target values at that time. Note that\nyou <em>must</em> specify the values at 0% and 100%, the start and ending values. There is also a <a href=\"#!/api/Ext.fx.Animator-event-keyframe\" rel=\"Ext.fx.Animator-event-keyframe\" class=\"docClass\">keyframe</a>\nevent that fires after each key frame is reached.</p>\n\n<h2>Example</h2>\n\n<p>In the example below, we modify the values of the element at each fifth throughout the animation.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.fx.Animator\" rel=\"Ext.fx.Animator\" class=\"docClass\">Ext.fx.Animator</a>', {\n    target: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>().createChild({\n        style: {\n            width: '100px',\n            height: '100px',\n            'background-color': 'red'\n        }\n    }),\n    duration: 10000, // 10 seconds\n    keyframes: {\n        0: {\n            opacity: 1,\n            backgroundColor: 'FF0000'\n        },\n        20: {\n            x: 30,\n            opacity: 0.5\n        },\n        40: {\n            x: 130,\n            backgroundColor: '0000FF'\n        },\n        60: {\n            y: 80,\n            opacity: 0.3\n        },\n        80: {\n            width: 200,\n            y: 200\n        },\n        100: {\n            opacity: 1,\n            backgroundColor: '00FF00'\n        }\n    }\n});\n</code></pre>\n"},"CubicBezier":{"!doc":"\n"},"Easing":{"!doc":"<p>This class contains a series of function definitions used to modify values during an animation.\nThey describe how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration. The following options are available:</p>\n\n<ul>\n<li>linear The default easing type</li>\n<li>backIn</li>\n<li>backOut</li>\n<li>bounceIn</li>\n<li>bounceOut</li>\n<li>ease</li>\n<li>easeIn</li>\n<li>easeOut</li>\n<li>easeInOut</li>\n<li>elasticIn</li>\n<li>elasticOut</li>\n<li>cubic-bezier(x1, y1, x2, y2)</li>\n</ul>\n\n\n<p>Note that cubic-bezier will create a custom easing curve following the CSS3 <a href=\"http://www.w3.org/TR/css3-transitions/#transition-timing-function_tag\">transition-timing-function</a>\nspecification.  The four values specify points P1 and P2 of the curve as (x1, y1, x2, y2). All values must\nbe in the range [0, 1] or the definition is invalid.</p>\n"},"Manager":{"!doc":"<p>Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.</p>\n"},"Queue":{"!doc":"<p>Animation Queue mixin to handle chaining and queueing by target.</p>\n"},"PropertyHandler":{"!doc":"\n"},"target":{"Component":{"!doc":"<p>This class represents a animation target for a <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>. In general this class will not be\ncreated directly, the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Target":{"!doc":"<p>This class specifies a generic target for an animation. It provides a wrapper around a\nseries of different types of objects to allow for a generic animation API.\nA target can be a single object or a Composite object containing other objects that are\nto be animated. This class and it's subclasses are generally not created directly, the\nunderlying animation will create the appropriate <a href=\"#!/api/Ext.fx.target.Target\" rel=\"Ext.fx.target.Target\" class=\"docClass\">Ext.fx.target.Target</a> object by passing\nthe instance to be animated.</p>\n\n<p>The following types of objects can be animated:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.fx.target.Component\" rel=\"Ext.fx.target.Component\" class=\"docClass\">Components</a></li>\n<li><a href=\"#!/api/Ext.fx.target.Element\" rel=\"Ext.fx.target.Element\" class=\"docClass\">Elements</a></li>\n<li><a href=\"#!/api/Ext.fx.target.Sprite\" rel=\"Ext.fx.target.Sprite\" class=\"docClass\">Sprites</a></li>\n</ul>\n\n"},"CompositeElement":{"!doc":"<p>This class represents a animation target for a <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a>. It allows\neach <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> in the group to be animated as a whole. In general this class will not be\ncreated directly, the <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a> will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Element":{"!doc":"<p>This class represents a animation target for an <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>. In general this class will not be\ncreated directly, the <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"CompositeElementCSS":{"!doc":"<p>This class represents a animation target for a <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a>, where the\nconstituent elements support CSS based animation. It allows each <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> in\nthe group to be animated as a whole. In general this class will not be created directly,\nthe <a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.CompositeElement</a> will be passed to the animation and the appropriate target\nwill be created.</p>\n"},"CompositeSprite":{"!doc":"<p>This class represents a animation target for a <a href=\"#!/api/Ext.draw.CompositeSprite\" rel=\"Ext.draw.CompositeSprite\" class=\"docClass\">Ext.draw.CompositeSprite</a>. It allows\neach <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a> in the group to be animated as a whole. In general this class will not be\ncreated directly, the <a href=\"#!/api/Ext.draw.CompositeSprite\" rel=\"Ext.draw.CompositeSprite\" class=\"docClass\">Ext.draw.CompositeSprite</a> will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Sprite":{"!doc":"<p>This class represents an animation target for a <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a>. In general this class will not be\n created directly, the <a href=\"#!/api/Ext.draw.Sprite\" rel=\"Ext.draw.Sprite\" class=\"docClass\">Ext.draw.Sprite</a> will be passed to the animation and\n and the appropriate target will be created.</p>\n"},"ElementCSS":{"!doc":"<p>This class represents a animation target for an <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a> that supports CSS\nbased animation. In general this class will not be created directly, the <a href=\"#!/api/Ext.dom.Element\" rel=\"Ext.dom.Element\" class=\"docClass\">Ext.Element</a>\nwill be passed to the animation and the appropriate target will be created.</p>\n"}}},"grid":{"CellContext":{"!doc":"<p>Internal utility class that provides a unique cell context.</p>\n"},"CellEditor":{"!doc":"<p>Internal utility class that provides default configuration for cell editing.</p>\n"},"column":{"Action":{"!doc":"<p>A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click\nhandler for each icon.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\"},\n        {firstname:\"Jim\", lastname:\"Halpert\"},\n        {firstname:\"Kevin\", lastname:\"Malone\"},\n        {firstname:\"Angela\", lastname:\"Martin\"}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Action Column Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {\n            xtype:'actioncolumn',\n            width:50,\n            items: [{\n                icon: 'extjs/examples/shared/icons/fam/cog_edit.png',  // Use a URL in the icon config\n                tooltip: 'Edit',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Edit \" + rec.get('firstname'));\n                }\n            },{\n                icon: 'extjs/examples/restful/images/delete.png',\n                tooltip: 'Delete',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Terminate \" + rec.get('firstname'));\n                }\n            }]\n        }\n    ],\n    width: 250,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The action column can be at any index in the columns array, and a grid can have any number of\naction columns.</p>\n"},"Column":{"!doc":"<p>This class specifies the definition for a column inside a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>. It encompasses\nboth the grid header configuration as well as displaying data within the grid itself. If the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-columns\" rel=\"Ext.grid.column.Column-cfg-columns\" class=\"docClass\">columns</a> configuration is specified, this column will become a column group and can\ncontain other columns inside. In general, this class will not be created directly, rather\nan array of column configurations will be passed to the grid:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\", seniority:7, dep:\"Management\", hired:\"01/10/2004\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, dep:\"Sales\", hired:\"04/01/2004\"},\n        {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, dep:\"Sales\", hired:\"02/22/2006\"},\n        {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, dep:\"Accounting\", hired:\"06/10/2007\"},\n        {firstname:\"Angela\", lastname:\"Martin\", seniority:5, dep:\"Accounting\", hired:\"10/21/2008\"}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Column Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired', xtype:'datecolumn', format:'M'},\n        {text: 'Department (Yrs)', xtype:'templatecolumn', tpl:'{dep} ({seniority})'}\n    ],\n    width: 400,\n    forceFit: true,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<h1>Convenience Subclasses</h1>\n\n<p>There are several column subclasses that provide default rendering for various data types</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Action\" rel=\"Ext.grid.column.Action\" class=\"docClass\">Ext.grid.column.Action</a>: Renders icons that can respond to click events inline</li>\n<li><a href=\"#!/api/Ext.grid.column.Boolean\" rel=\"Ext.grid.column.Boolean\" class=\"docClass\">Ext.grid.column.Boolean</a>: Renders for boolean values</li>\n<li><a href=\"#!/api/Ext.grid.column.Date\" rel=\"Ext.grid.column.Date\" class=\"docClass\">Ext.grid.column.Date</a>: Renders for date values</li>\n<li><a href=\"#!/api/Ext.grid.column.Number\" rel=\"Ext.grid.column.Number\" class=\"docClass\">Ext.grid.column.Number</a>: Renders for numeric values</li>\n<li><a href=\"#!/api/Ext.grid.column.Template\" rel=\"Ext.grid.column.Template\" class=\"docClass\">Ext.grid.column.Template</a>: Renders a value using an <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a> using the record data</li>\n</ul>\n\n\n<h1>Setting Sizes</h1>\n\n<p>The columns are laid out by a <a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">Ext.layout.container.HBox</a> layout, so a column can either\nbe given an explicit width value or a flex configuration. If no width is specified the grid will\nautomatically the size the column to 100px. For column groups, the size is calculated by measuring\nthe width of the child columns, so a width option should not be specified in that case.</p>\n\n<h1>Header Options</h1>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-text\" rel=\"Ext.grid.column.Column-cfg-text\" class=\"docClass\">text</a>: Sets the header text for the column</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-sortable\" rel=\"Ext.grid.column.Column-cfg-sortable\" class=\"docClass\">sortable</a>: Specifies whether the column can be sorted by clicking the header or using the column menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-hideable\" rel=\"Ext.grid.column.Column-cfg-hideable\" class=\"docClass\">hideable</a>: Specifies whether the column can be hidden using the column menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-menuDisabled\" rel=\"Ext.grid.column.Column-cfg-menuDisabled\" class=\"docClass\">menuDisabled</a>: Disables the column header menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-draggable\" rel=\"Ext.grid.column.Column-cfg-draggable\" class=\"docClass\">draggable</a>: Specifies whether the column header can be reordered by dragging</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-groupable\" rel=\"Ext.grid.column.Column-cfg-groupable\" class=\"docClass\">groupable</a>: Specifies whether the grid can be grouped by the column dataIndex. See also <a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a></li>\n</ul>\n\n\n<h1>Data Options</h1>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-dataIndex\" rel=\"Ext.grid.column.Column-cfg-dataIndex\" class=\"docClass\">dataIndex</a>: The dataIndex is the field in the underlying <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> to use as the value for the column.</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-renderer\" rel=\"Ext.grid.column.Column-cfg-renderer\" class=\"docClass\">renderer</a>: Allows the underlying store value to be transformed before being displayed in the grid</li>\n</ul>\n\n"},"Boolean":{"!doc":"<p>A Column definition class which renders boolean data fields.  See the <a href=\"#!/api/Ext.grid.column.Column-cfg-xtype\" rel=\"Ext.grid.column.Column-cfg-xtype\" class=\"docClass\">xtype</a>\nconfig option of <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">Ext.grid.column.Column</a> for more details.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n   storeId:'sampleStore',\n   fields:[\n       {name: 'framework', type: 'string'},\n       {name: 'rocks', type: 'boolean'}\n   ],\n   data:{'items':[\n       { 'framework': \"Ext JS 4\",     'rocks': true  },\n       { 'framework': \"Sencha Touch\", 'rocks': true  },\n       { 'framework': \"Ext GWT\",      'rocks': true  }, \n       { 'framework': \"Other Guys\",   'rocks': false } \n   ]},\n   proxy: {\n       type: 'memory',\n       reader: {\n           type: 'json',\n           root: 'items'\n       }\n   }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Boolean Column Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('sampleStore'),\n    columns: [\n        { text: 'Framework',  dataIndex: 'framework', flex: 1 },\n        {\n            xtype: 'booleancolumn', \n            text: 'Rocks',\n            trueText: 'Yes',\n            falseText: 'No', \n            dataIndex: 'rocks'\n        }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"CheckColumn":{"!doc":"<p>A Column subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data field on click.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    fields : ['name', 'email', 'phone', 'active'],\n    data   : {\n        items : [\n            { name : 'Lisa',  email : 'lisa@simpsons.com',  phone : '555-111-1224', active : true  },\n            { name : 'Bart',  email : 'bart@simpsons.com',  phone : '555-222-1234', active : true  },\n            { name : 'Homer', email : 'home@simpsons.com',  phone : '555-222-1244', active : false },\n            { name : 'Marge', email : 'marge@simpsons.com', phone : '555-222-1254', active : true  }\n        ]\n    },\n    proxy  : {\n        type   : 'memory',\n        reader : {\n            type : 'json',\n            root : 'items'\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title    : 'Simpsons',\n    height   : 200,\n    width    : 400,\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    store    : store,\n    columns  : [\n        { text : 'Name', dataIndex : 'name' },\n        { text : 'Email', dataIndex : 'email', flex : 1 },\n        { text : 'Phone', dataIndex : 'phone' },\n        { xtype : 'checkcolumn', text : 'Active', dataIndex : 'active' }\n    ]\n});\n</code></pre>\n\n<p>The check column can be at any index in the columns array.</p>\n"},"Date":{"!doc":"<p>A Column definition class which renders a passed date according to the default locale, or a configured\n<a href=\"#!/api/Ext.grid.column.Date-cfg-format\" rel=\"Ext.grid.column.Date-cfg-format\" class=\"docClass\">format</a>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'sampleStore',\n    fields:[\n        { name: 'symbol', type: 'string' },\n        { name: 'date',   type: 'date' },\n        { name: 'change', type: 'number' },\n        { name: 'volume', type: 'number' },\n        { name: 'topday', type: 'date' }                        \n    ],\n    data:[\n        { symbol: \"msft\",   date: '2011/04/22', change: 2.43, volume: 61606325, topday: '04/01/2010' },\n        { symbol: \"goog\",   date: '2011/04/22', change: 0.81, volume: 3053782,  topday: '04/11/2010' },\n        { symbol: \"apple\",  date: '2011/04/22', change: 1.35, volume: 24484858, topday: '04/28/2010' },            \n        { symbol: \"sencha\", date: '2011/04/22', change: 8.85, volume: 5556351,  topday: '04/22/2010' }            \n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Date Column Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('sampleStore'),\n    columns: [\n        { text: 'Symbol',   dataIndex: 'symbol', flex: 1 },\n        { text: 'Date',     dataIndex: 'date',   xtype: 'datecolumn',   format:'Y-m-d' },\n        { text: 'Change',   dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',   dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' },\n        { text: 'Top Day',  dataIndex: 'topday', xtype: 'datecolumn',   format:'l' }            \n    ],\n    height: 200,\n    width: 450,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Number":{"!doc":"<p>A Column definition class which renders a numeric data field according to a <a href=\"#!/api/Ext.grid.column.Number-cfg-format\" rel=\"Ext.grid.column.Number-cfg-format\" class=\"docClass\">format</a> string.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n   storeId:'sampleStore',\n   fields:[\n       { name: 'symbol', type: 'string' },\n       { name: 'price',  type: 'number' },\n       { name: 'change', type: 'number' },\n       { name: 'volume', type: 'number' }\n   ],\n   data:[\n       { symbol: \"msft\",   price: 25.76,  change: 2.43, volume: 61606325 },\n       { symbol: \"goog\",   price: 525.73, change: 0.81, volume: 3053782  },\n       { symbol: \"apple\",  price: 342.41, change: 1.35, volume: 24484858 },\n       { symbol: \"sencha\", price: 142.08, change: 8.85, volume: 5556351  }\n   ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Number Column Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('sampleStore'),\n    columns: [\n        { text: 'Symbol',         dataIndex: 'symbol', flex: 1 },\n        { text: 'Current Price',  dataIndex: 'price',  renderer: <a href=\"#!/api/Ext.util.Format-method-usMoney\" rel=\"Ext.util.Format-method-usMoney\" class=\"docClass\">Ext.util.Format.usMoney</a> },\n        { text: 'Change',         dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',         dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"RowNumberer":{"!doc":"<p>A special type of Grid <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">Ext.grid.column.Column</a> that provides automatic\nrow numbering.</p>\n\n<p>Usage:</p>\n\n<pre><code>columns: [\n    {xtype: 'rownumberer'},\n    {text: \"Company\", flex: 1, sortable: true, dataIndex: 'company'},\n    {text: \"Price\", width: 120, sortable: true, renderer: <a href=\"#!/api/Ext.util.Format-method-usMoney\" rel=\"Ext.util.Format-method-usMoney\" class=\"docClass\">Ext.util.Format.usMoney</a>, dataIndex: 'price'},\n    {text: \"Change\", width: 120, sortable: true, dataIndex: 'change'},\n    {text: \"% Change\", width: 120, sortable: true, dataIndex: 'pctChange'},\n    {text: \"Last Updated\", width: 120, sortable: true, renderer: <a href=\"#!/api/Ext.util.Format-method-dateRenderer\" rel=\"Ext.util.Format-method-dateRenderer\" class=\"docClass\">Ext.util.Format.dateRenderer</a>('m/d/Y'), dataIndex: 'lastChange'}\n]\n</code></pre>\n"},"Template":{"!doc":"<p>A Column definition class which renders a value by processing a <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>'s\n<a href=\"#!/api/Ext.data.Model-cfg-persistenceProperty\" rel=\"Ext.data.Model-cfg-persistenceProperty\" class=\"docClass\">data</a> using a <a href=\"#!/api/Ext.grid.column.Template-cfg-tpl\" rel=\"Ext.grid.column.Template-cfg-tpl\" class=\"docClass\">configured</a>\n<a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">XTemplate</a>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'department'],\n    groupField: 'department',\n    data:[\n        { firstname: \"Michael\", lastname: \"Scott\",   seniority: 7, department: \"Management\" },\n        { firstname: \"Dwight\",  lastname: \"Schrute\", seniority: 2, department: \"Sales\" },\n        { firstname: \"Jim\",     lastname: \"Halpert\", seniority: 3, department: \"Sales\" },\n        { firstname: \"Kevin\",   lastname: \"Malone\",  seniority: 4, department: \"Accounting\" },\n        { firstname: \"Angela\",  lastname: \"Martin\",  seniority: 5, department: \"Accounting\" }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Column Template Demo',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('employeeStore'),\n    columns: [\n        { text: 'Full Name',       xtype: 'templatecolumn', tpl: '{firstname} {lastname}', flex:1 },\n        { text: 'Department (Yrs)', xtype: 'templatecolumn', tpl: '{department} ({seniority})' }\n    ],\n    height: 200,\n    width: 300,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"header":{"Container":{"!doc":"<p>Container which holds headers and is docked at the top or bottom of a TablePanel.\nThe HeaderContainer drives resizing/moving/hiding of columns within the TableView.\nAs headers are hidden, moved or resized the headercontainer is responsible for\ntriggering changes within the view.</p>\n"},"DragZone":{"!doc":"\n"},"DropZone":{"!doc":"\n"}},"ColumnComponentLayout":{"!doc":"<p>Component layout for grid column headers which have a title element at the top followed by content.</p>\n"},"ColumnLayout":{"!doc":"<p>This class is used only by the grid's HeaderContainer docked child.</p>\n\n<p>It adds the ability to shrink the vertical size of the inner container element back if a grouped\ncolumn header has all its child columns dragged out, and the whole HeaderContainer needs to shrink back down.</p>\n\n<p>Also, after every layout, after all headers have attained their 'stretchmax' height, it goes through and calls\n<code>setPadding</code> on the columns so that they lay out correctly.</p>\n"},"ColumnManager":{"!doc":"<p>Manages and provides information about a TablePanel's <em>visible leaf</em> columns.</p>\n"},"feature":{"AbstractSummary":{"!doc":"<p>A small abstract class that contains the shared behaviour for any summary\ncalculations to be used in the grid.</p>\n"},"Feature":{"!doc":"<p>A feature is a type of plugin that is specific to the <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>. It provides several\nhooks that allows the developer to inject additional functionality at certain points throughout the\ngrid creation cycle. This class provides the base template methods that are available to the developer,\nit should be extended.</p>\n\n<p>There are several built in features that extend this class, for example:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a> - Shows grid rows in groups as specified by the <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.RowBody\" rel=\"Ext.grid.feature.RowBody\" class=\"docClass\">Ext.grid.feature.RowBody</a> - Adds a body section for each grid row that can contain markup.</li>\n<li><a href=\"#!/api/Ext.grid.feature.Summary\" rel=\"Ext.grid.feature.Summary\" class=\"docClass\">Ext.grid.feature.Summary</a> - Adds a summary row at the bottom of the grid with aggregate totals for a column.</li>\n</ul>\n\n\n<h2>Using Features</h2>\n\n<p>A feature is added to the grid by specifying it an array of features in the configuration:</p>\n\n<pre><code>var groupingFeature = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a>');\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    features: [groupingFeature]\n});\n</code></pre>\n\n<h2>Writing Features</h2>\n\n<p>A Feature may add new DOM structure within the structure of a grid.</p>\n\n<p>A grid is essentially a <code>&lt;table&gt;</code> element. A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> instance uses three <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">XTemplates</a>\nto render the grid, <code>tableTpl</code>, <code>rowTpl</code>, <code>cellTpl</code>.</p>\n\n<ul>\n<li>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>tableTpl</code> to emit the <code>&lt;table&gt;</code> and <code>&lt;tbody&gt;</code> HTML tags into its output stream. It also emits a <code>&lt;thead&gt;</code> which contains a\nsizing row. To ender the rows, it invokes <a href=\"#!/api/Ext.view.Table-method-renderRows\" rel=\"Ext.view.Table-method-renderRows\" class=\"docClass\">Ext.view.Table.renderRows</a> passing the <code>rows</code> member of its data object.</li>\n</ul>\n\n\n<p>The <code>tableTpl</code>'s data object Looks like this:\n    {\n        view: owningTableView,\n        rows: recordsToRender,\n        viewStartIndex: indexOfFirstRecordInStore,\n        tableStyle: styleString\n    }</p>\n\n<ul>\n<li>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>rowTpl</code> to emit a <code>&lt;tr&gt;</code> HTML tag to its output stream. To render cells,\nit invokes <a href=\"#!/api/Ext.view.Table-method-renderCell\" rel=\"Ext.view.Table-method-renderCell\" class=\"docClass\">Ext.view.Table.renderCell</a> passing the <code>rows</code> member of its data object.</li>\n</ul>\n\n\n<p>The <code>rowTpl</code>'s data object looks like this:</p>\n\n<pre><code>{\n    view:        owningTableView,\n    record:      recordToRender,\n    recordIndex: indexOfRecordInStore,\n    columns:     arrayOfColumnDefinitions,\n    itemClasses: arrayOfClassNames, // For outermost row in case of wrapping\n    rowClasses:  arrayOfClassNames,  // For internal data bearing row in case of wrapping\n    rowStyle:    styleString\n}\n</code></pre>\n\n<ul>\n<li>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>cellTpl</code> to emit a <code>&lt;td&gt;</code> HTML tag to its output stream.</li>\n</ul>\n\n\n<p>The <code>cellTpl's</code> data object looks like this:</p>\n\n<pre><code>{\n    record: recordToRender\n    column: columnToRender;\n    recordIndex: indexOfRecordInStore,\n    columnIndex: columnIndex,\n    align: columnAlign,\n    tdCls: classForCell\n}\n</code></pre>\n\n<p>A Feature may inject its own tableTpl or rowTpl or cellTpl into the <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a>'s rendering by\ncalling <a href=\"#!/api/Ext.view.Table-method-addTableTpl\" rel=\"Ext.view.Table-method-addTableTpl\" class=\"docClass\">Ext.view.Table.addTableTpl</a> or <a href=\"#!/api/Ext.view.Table-method-addRowTpl\" rel=\"Ext.view.Table-method-addRowTpl\" class=\"docClass\">Ext.view.Table.addRowTpl</a> or <a href=\"#!/api/Ext.view.Table-method-addCellTpl\" rel=\"Ext.view.Table-method-addCellTpl\" class=\"docClass\">Ext.view.Table.addCellTpl</a>.</p>\n\n<p>The passed XTemplate is added <em>upstream</em> of the default template for the table element in a link list of XTemplates which contribute\nto the element's HTML. It may emit appropriate HTML strings into the output stream <em>around</em> a call to</p>\n\n<pre><code>this.nextTpl.apply(values, out, parent);\n</code></pre>\n\n<p>This passes the current value context, output stream and the parent value context to the next XTemplate in the list.</p>\n"},"Grouping":{"!doc":"<p>This feature allows to display the grid rows aggregated into groups as specified by the <a href=\"#!/api/Ext.data.Store-cfg-groupers\" rel=\"Ext.data.Store-cfg-groupers\" class=\"docClass\">Ext.data.Store.groupers</a>\nspecified on the Store. The group will show the title for the group name and then the appropriate records for the group\nunderneath. The groups can also be expanded and collapsed.</p>\n\n<h2>Extra Events</h2>\n\n<p>This feature adds several extra events that will be fired on the grid to interact with the groups:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupclick\" rel=\"Ext.grid.feature.Grouping-event-groupclick\" class=\"docClass\">groupclick</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupdblclick\" rel=\"Ext.grid.feature.Grouping-event-groupdblclick\" class=\"docClass\">groupdblclick</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupcontextmenu\" rel=\"Ext.grid.feature.Grouping-event-groupcontextmenu\" class=\"docClass\">groupcontextmenu</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupexpand\" rel=\"Ext.grid.feature.Grouping-event-groupexpand\" class=\"docClass\">groupexpand</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupcollapse\" rel=\"Ext.grid.feature.Grouping-event-groupcollapse\" class=\"docClass\">groupcollapse</a></li>\n</ul>\n\n\n<h2>Menu Augmentation</h2>\n\n<p>This feature adds extra options to the grid column menu to provide the user with functionality to modify the grouping.\nThis can be disabled by setting the <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-enableGroupingMenu\" rel=\"Ext.grid.feature.Grouping-cfg-enableGroupingMenu\" class=\"docClass\">enableGroupingMenu</a> option. The option to disallow grouping from being turned off\nby the user is <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-enableNoGroups\" rel=\"Ext.grid.feature.Grouping-cfg-enableNoGroups\" class=\"docClass\">enableNoGroups</a>.</p>\n\n<h2>Controlling Group Text</h2>\n\n<p>The <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-groupHeaderTpl\" rel=\"Ext.grid.feature.Grouping-cfg-groupHeaderTpl\" class=\"docClass\">groupHeaderTpl</a> is used to control the rendered title for each group. It can modified to customized\nthe default display.</p>\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'employeeStore',\n    fields:['name', 'seniority', 'department'],\n    groupField: 'department',\n    data: {'employees':[\n        { \"name\": \"Michael Scott\",  \"seniority\": 7, \"department\": \"Management\" },\n        { \"name\": \"Dwight Schrute\", \"seniority\": 2, \"department\": \"Sales\" },\n        { \"name\": \"Jim Halpert\",    \"seniority\": 3, \"department\": \"Sales\" },\n        { \"name\": \"Kevin Malone\",   \"seniority\": 4, \"department\": \"Accounting\" },\n        { \"name\": \"Angela Martin\",  \"seniority\": 5, \"department\": \"Accounting\" }\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            root: 'employees'\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Employees',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('employeeStore'),\n    columns: [\n        { text: 'Name',     dataIndex: 'name' },\n        { text: 'Seniority', dataIndex: 'seniority' }\n    ],\n    features: [{ftype:'grouping'}],\n    width: 200,\n    height: 275,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p><strong>Note:</strong> To use grouping with a grid that has <a href=\"#!/api/Ext.grid.column.Column-cfg-locked\" rel=\"Ext.grid.column.Column-cfg-locked\" class=\"docClass\">locked columns</a>, you need to supply\nthe grouping feature as a config object - so the grid can create two instances of the grouping feature.</p>\n"},"GroupingSummary":{"!doc":"<p>This feature adds an aggregate summary row at the bottom of each group that is provided\nby the <a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a> feature. There are two aspects to the summary:</p>\n\n<h2>Calculation</h2>\n\n<p>The summary value needs to be calculated for each column in the grid. This is controlled\nby the summaryType option specified on the column. There are several built in summary types,\nwhich can be specified as a string on the column configuration. These call underlying methods\non the store:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.Store-method-count\" rel=\"Ext.data.Store-method-count\" class=\"docClass\">count</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-sum\" rel=\"Ext.data.Store-method-sum\" class=\"docClass\">sum</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-min\" rel=\"Ext.data.Store-method-min\" class=\"docClass\">min</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-max\" rel=\"Ext.data.Store-method-max\" class=\"docClass\">max</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-average\" rel=\"Ext.data.Store-method-average\" class=\"docClass\">average</a></li>\n</ul>\n\n\n<p>Alternatively, the summaryType can be a function definition. If this is the case,\nthe function is called with an array of records to calculate the summary value.</p>\n\n<h2>Rendering</h2>\n\n<p>Similar to a column, the summary also supports a summaryRenderer function. This\nsummaryRenderer is called before displaying a value. The function is optional, if\nnot specified the default calculated value is shown. The summaryRenderer is called with:</p>\n\n<ul>\n<li>value {Object} - The calculated value.</li>\n<li>summaryData {Object} - Contains all raw summary values for the row.</li>\n<li>field {String} - The name of the field we are calculating</li>\n</ul>\n\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('TestResult', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['student', 'subject', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 200,\n    height: 240,\n    renderTo: document.body,\n    features: [{\n        groupHeaderTpl: 'Subject: {name}',\n        ftype: 'groupingsummary'\n    }],\n    store: {\n        model: 'TestResult',\n        groupField: 'subject',\n        data: [{\n            student: 'Student 1',\n            subject: 'Math',\n            mark: 84\n        },{\n            student: 'Student 1',\n            subject: 'Science',\n            mark: 72\n        },{\n            student: 'Student 2',\n            subject: 'Math',\n            mark: 96\n        },{\n            student: 'Student 2',\n            subject: 'Science',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value){\n            return <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>('{0} student{1}', value, value !== 1 ? 's' : '');\n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n</code></pre>\n"},"GroupStore":{"!doc":"<p>Private record store class which takes the place of the view's data store to provide a grouped\nview of the data when the Grouping feature is used.</p>\n\n<p>Relays granular mutation events from the underlying store as refresh events to the view.</p>\n\n<p>On mutation events from the underlying store, updates the summary rows by firing update events on the corresponding\nsummary records.</p>\n"},"RowBody":{"!doc":"<p>The rowbody feature enhances the grid's markup to have an additional\ntr -> td -> div which spans the entire width of the original row.</p>\n\n<p>This is useful to to associate additional information with a particular\nrecord in a grid.</p>\n\n<p>Rowbodies are initially hidden unless you override setupRowData.</p>\n\n<p>Will expose additional events on the gridview with the prefix of 'rowbody'.\nFor example: 'rowbodyclick', 'rowbodydblclick', 'rowbodycontextmenu'.</p>\n\n<h1>Example</h1>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Animal', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['name', 'latin', 'desc']\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 400,\n    height: 300,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    store: {\n        model: 'Animal',\n        data: [\n            {name: 'Tiger', latin: 'Panthera tigris',\n             desc: 'The largest cat species, weighing up to 306 kg (670 lb).'},\n            {name: 'Roman snail', latin: 'Helix pomatia',\n             desc: 'A species of large, edible, air-breathing land snail.'},\n            {name: 'Yellow-winged darter', latin: 'Sympetrum flaveolum',\n             desc: 'A dragonfly found in Europe and mid and Northern China.'},\n            {name: 'Superb Fairy-wren', latin: 'Malurus cyaneus',\n             desc: 'Common and familiar across south-eastern Australia.'}\n        ]\n    },\n    columns: [{\n        dataIndex: 'name',\n        text: 'Common name',\n        width: 125\n    }, {\n        dataIndex: 'latin',\n        text: 'Scientific name',\n        flex: 1\n    }],\n    features: [{\n        ftype: 'rowbody',\n        setupRowData: function(record, rowIndex, rowValues) {\n            var headerCt = this.view.headerCt,\n                colspan = headerCt.getColumnCount();\n            // Usually you would style the my-body-class in CSS file\n            return {\n                rowBody: '&lt;div style=\"padding: 1em\"&gt;'+record.get(\"desc\")+'&lt;/div&gt;',\n                rowBodyCls: \"my-body-class\",\n                rowBodyColspan: colspan\n            };\n        }\n    }]\n});\n</code></pre>\n"},"RowWrap":{"!doc":"\n"},"Summary":{"!doc":"<p>This feature is used to place a summary row at the bottom of the grid. If using a grouping,\nsee <a href=\"#!/api/Ext.grid.feature.GroupingSummary\" rel=\"Ext.grid.feature.GroupingSummary\" class=\"docClass\">Ext.grid.feature.GroupingSummary</a>. There are 2 aspects to calculating the summaries,\ncalculation and rendering.</p>\n\n<h2>Calculation</h2>\n\n<p>The summary value needs to be calculated for each column in the grid. This is controlled\nby the summaryType option specified on the column. There are several built in summary types,\nwhich can be specified as a string on the column configuration. These call underlying methods\non the store:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.data.Store-method-count\" rel=\"Ext.data.Store-method-count\" class=\"docClass\">count</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-sum\" rel=\"Ext.data.Store-method-sum\" class=\"docClass\">sum</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-min\" rel=\"Ext.data.Store-method-min\" class=\"docClass\">min</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-max\" rel=\"Ext.data.Store-method-max\" class=\"docClass\">max</a></li>\n<li><a href=\"#!/api/Ext.data.Store-method-average\" rel=\"Ext.data.Store-method-average\" class=\"docClass\">average</a></li>\n</ul>\n\n\n<p>Alternatively, the summaryType can be a function definition. If this is the case,\nthe function is called with an array of records to calculate the summary value.</p>\n\n<h2>Rendering</h2>\n\n<p>Similar to a column, the summary also supports a summaryRenderer function. This\nsummaryRenderer is called before displaying a value. The function is optional, if\nnot specified the default calculated value is shown. The summaryRenderer is called with:</p>\n\n<ul>\n<li>value {Object} - The calculated value.</li>\n<li>summaryData {Object} - Contains all raw summary values for the row.</li>\n<li>field {String} - The name of the field we are calculating</li>\n</ul>\n\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('TestResult', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['student', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 400,\n    height: 200,\n    title: 'Summary Test',\n    style: 'padding: 20px',\n    renderTo: document.body,\n    features: [{\n        ftype: 'summary'\n    }],\n    store: {\n        model: 'TestResult',\n        data: [{\n            student: 'Student 1',\n            mark: 84\n        },{\n            student: 'Student 2',\n            mark: 72\n        },{\n            student: 'Student 3',\n            mark: 96\n        },{\n            student: 'Student 4',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value, summaryData, dataIndex) {\n            return <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>('{0} student{1}', value, value !== 1 ? 's' : ''); \n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n</code></pre>\n"}},"locking":{"HeaderContainer":{"!doc":"<p>Private class which acts as a HeaderContainer for the Lockable which aggregates all columns\nfrom both sides of the Loackable. It is never rendered, it's just used to interrogate the\ncolumn collection.</p>\n"},"Lockable":{"!doc":"<p>Lockable is a private mixin which injects lockable behavior into any\nTablePanel subclass such as GridPanel or TreePanel. TablePanel will\nautomatically inject the <a href=\"#!/api/Ext.grid.locking.Lockable\" rel=\"Ext.grid.locking.Lockable\" class=\"docClass\">Ext.grid.locking.Lockable</a> mixin in when one of the\nthese conditions are met:</p>\n\n<ul>\n<li>The TablePanel has the lockable configuration set to true</li>\n<li>One of the columns in the TablePanel has locked set to true/false</li>\n</ul>\n\n\n<p>Each TablePanel subclass must register an alias. It should have an array\nof configurations to copy to the 2 separate tablepanel's that will be generated\nto note what configurations should be copied. These are named normalCfgCopy and\nlockedCfgCopy respectively.</p>\n\n<p>Columns which are locked must specify a fixed width. They do NOT support a\nflex width.</p>\n\n<p>Configurations which are specified in this class will be available on any grid or\ntree which is using the lockable functionality.</p>\n"},"View":{"!doc":"<p>This class is used internally to provide a single interface when using\na locking grid. Internally, the locking grid creates two separate grids,\nso this class is used to map calls appropriately.</p>\n"}},"Panel":{"!doc":"<p>Grids are an excellent way of showing large amounts of tabular data on the client side. Essentially a supercharged\n<code>&lt;table&gt;</code>, GridPanel makes it easy to fetch, sort and filter large amounts of data.</p>\n\n<p>Grids are composed of two main pieces - a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> full of data and a set of columns to render.</p>\n\n<h2>Basic GridPanel</h2>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data:{'items':[\n        { 'name': 'Lisa',  \"email\":\"lisa@simpsons.com\",  \"phone\":\"555-111-1224\"  },\n        { 'name': 'Bart',  \"email\":\"bart@simpsons.com\",  \"phone\":\"555-222-1234\" },\n        { 'name': 'Homer', \"email\":\"home@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n        { 'name': 'Marge', \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"  }\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            root: 'items'\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('simpsonsStore'),\n    columns: [\n        { text: 'Name',  dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The code above produces a simple grid with three columns. We specified a Store which will load JSON data inline.\nIn most apps we would be placing the grid inside another container and wouldn't need to use the\n<a href=\"#!/api/Ext.grid.Panel-cfg-height\" rel=\"Ext.grid.Panel-cfg-height\" class=\"docClass\">height</a>, <a href=\"#!/api/Ext.grid.Panel-cfg-width\" rel=\"Ext.grid.Panel-cfg-width\" class=\"docClass\">width</a> and <a href=\"#!/api/Ext.grid.Panel-cfg-renderTo\" rel=\"Ext.grid.Panel-cfg-renderTo\" class=\"docClass\">renderTo</a> configurations but they are included here to make it easy to get\nup and running.</p>\n\n<p>The grid we created above will contain a header bar with a title ('Simpsons'), a row of column headers directly underneath\nand finally the grid rows under the headers.</p>\n\n<h2>Configuring columns</h2>\n\n<p>By default, each column is sortable and will toggle between ASC and DESC sorting when you click on its header. Each\ncolumn header is also reorderable by default, and each gains a drop-down menu with options to hide and show columns.\nIt's easy to configure each column - here we use the same example as above and just modify the columns config:</p>\n\n<pre><code>columns: [\n    {\n        text: 'Name',\n        dataIndex: 'name',\n        sortable: false,\n        hideable: false,\n        flex: 1\n    },\n    {\n        text: 'Email',\n        dataIndex: 'email',\n        hidden: true\n    },\n    {\n        text: 'Phone',\n        dataIndex: 'phone',\n        width: 100\n    }\n]\n</code></pre>\n\n<p>We turned off sorting and hiding on the 'Name' column so clicking its header now has no effect. We also made the Email\ncolumn hidden by default (it can be shown again by using the menu on any other column). We also set the Phone column to\na fixed with of 100px and flexed the Name column, which means it takes up all remaining width after the other columns\nhave been accounted for. See the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column docs</a> for more details.</p>\n\n<h2>Renderers</h2>\n\n<p>As well as customizing columns, it's easy to alter the rendering of individual cells using renderers. A renderer is\ntied to a particular column and is passed the value that would be rendered into each cell in that column. For example,\nwe could define a renderer function for the email column to turn each email address into a mailto link:</p>\n\n<pre><code>columns: [\n    {\n        text: 'Email',\n        dataIndex: 'email',\n        renderer: function(value) {\n            return <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>('&lt;a href=\"mailto:{0}\"&gt;{1}&lt;/a&gt;', value, value);\n        }\n    }\n]\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column docs</a> for more information on renderers.</p>\n\n<h2>Selection Models</h2>\n\n<p>Sometimes all you want is to render data onto the screen for viewing, but usually it's necessary to interact with or\nupdate that data. Grids use a concept called a Selection Model, which is simply a mechanism for selecting some part of\nthe data in the grid. The two main types of Selection Model are RowSelectionModel, where entire rows are selected, and\nCellSelectionModel, where individual cells are selected.</p>\n\n<p>Grids use a Row Selection Model by default, but this is easy to customise like so:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    selType: 'cellmodel',\n    store: ...\n});\n</code></pre>\n\n<p>Specifying the <code>cellmodel</code> changes a couple of things. Firstly, clicking on a cell now\nselects just that cell (using a <a href=\"#!/api/Ext.selection.RowModel\" rel=\"Ext.selection.RowModel\" class=\"docClass\">rowmodel</a> will select the entire row), and secondly the\nkeyboard navigation will walk from cell to cell instead of row to row. Cell-based selection models are usually used in\nconjunction with editing.</p>\n\n<h2>Sorting &amp; Filtering</h2>\n\n<p>Every grid is attached to a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>, which provides multi-sort and filtering capabilities. It's\neasy to set up a grid to be sorted from the start:</p>\n\n<pre><code>var myGrid = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: {\n        fields: ['name', 'email', 'phone'],\n        sorters: ['name', 'phone']\n    },\n    columns: [\n        { text: 'Name',  dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email' }\n    ]\n});\n</code></pre>\n\n<p>Sorting at run time is easily accomplished by simply clicking each column header. If you need to perform sorting on\nmore than one field at run time it's easy to do so by adding new sorters to the store:</p>\n\n<pre><code>myGrid.store.sort([\n    { property: 'name',  direction: 'ASC' },\n    { property: 'email', direction: 'DESC' }\n]);\n</code></pre>\n\n<p>See <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> for examples of filtering.</p>\n\n<h2>State saving</h2>\n\n<p>When configured <a href=\"#!/api/Ext.grid.Panel-cfg-stateful\" rel=\"Ext.grid.Panel-cfg-stateful\" class=\"docClass\">stateful</a>, grids save their column state (order and width) encapsulated within the default\nPanel state of changed width and height and collapsed/expanded state.</p>\n\n<p>Each <a href=\"#!/api/Ext.grid.Panel-cfg-columns\" rel=\"Ext.grid.Panel-cfg-columns\" class=\"docClass\">column</a> of the grid may be configured with a <a href=\"#!/api/Ext.grid.column.Column-cfg-stateId\" rel=\"Ext.grid.column.Column-cfg-stateId\" class=\"docClass\">stateId</a> which\nidentifies that column locally within the grid.</p>\n\n<h2>Plugins and Features</h2>\n\n<p>Grid supports addition of extra functionality through features and plugins:</p>\n\n<ul>\n<li><p><a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">CellEditing</a> - editing grid contents one cell at a time.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">RowEditing</a> - editing grid contents an entire row at a time.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">DragDrop</a> - drag-drop reordering of grid rows.</p></li>\n<li><p><a href=\"#!/api/Ext.toolbar.Paging\" rel=\"Ext.toolbar.Paging\" class=\"docClass\">Paging toolbar</a> - paging through large sets of data.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.BufferedRenderer\" rel=\"Ext.grid.plugin.BufferedRenderer\" class=\"docClass\">Infinite scrolling</a> - another way to handle large sets of data.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.column.RowNumberer\" rel=\"Ext.grid.column.RowNumberer\" class=\"docClass\">RowNumberer</a> - automatically numbered rows.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Grouping</a> - grouping together rows having the same value in a particular field.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.Summary\" rel=\"Ext.grid.feature.Summary\" class=\"docClass\">Summary</a> - a summary row at the bottom of a grid.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.GroupingSummary\" rel=\"Ext.grid.feature.GroupingSummary\" class=\"docClass\">GroupingSummary</a> - a summary row at the bottom of each group.</p></li>\n</ul>\n\n"},"plugin":{"BufferedRenderer":{"!doc":"<p>Implements buffered rendering of a grid, allowing users can scroll\nthrough thousands of records without the performance penalties of\nrenderering all the records on screen at once.</p>\n\n<p>The number of rows rendered outside the visible area, and the\nbuffering of pages of data from the remote server for immediate\nrendering upon scroll can be controlled by configuring the plugin.</p>\n\n<p>You can tell it to create a larger table to provide more scrolling\nbefore new rows need to be added to the leading edge of the table.</p>\n\n<pre><code>var myStore = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    // ...\n    pageSize: 100,\n    // ...\n});\n\nvar grid = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // ...\n    autoLoad: true,\n    plugins: {\n        ptype: 'bufferedrenderer',\n        trailingBufferZone: 20,  // Keep 20 rows rendered in the table behind scroll\n        leadingBufferZone: 50   // Keep 50 rows rendered in the table ahead of scroll\n    },\n    // ...\n});\n</code></pre>\n\n<h2>Implementation notes</h2>\n\n<p>This class monitors scrolling of the <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> within a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a> to render a small section of\nthe dataset.</p>\n"},"CellEditing":{"!doc":"<p>The <a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a> plugin injects editing at a cell level for a Grid. Only a single\ncell will be editable at a time. The field that will be used for the editor is defined at the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>. The editor can be a field instance or a field configuration.</p>\n\n<p>If an editor is not specified for a particular column then that cell will not be editable and it will\nbe skipped when activated via the mouse or the keyboard.</p>\n\n<p>The editor may be shared for each column in the grid, or a different one may be specified for each column.\nAn appropriate field type should be chosen to match the data structure that it will be editing. For example,\nto edit a date, it would be useful to specify <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> as the editor.</p>\n\n<h2>Example</h2>\n\n<p>A grid with editor for the name and the email columns:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data:{'items':[\n        {\"name\":\"Lisa\", \"email\":\"lisa@simpsons.com\", \"phone\":\"555-111-1224\"},\n        {\"name\":\"Bart\", \"email\":\"bart@simpsons.com\", \"phone\":\"555-222-1234\"},\n        {\"name\":\"Homer\", \"email\":\"home@simpsons.com\", \"phone\":\"555-222-1244\"},\n        {\"name\":\"Marge\", \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"}\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            root: 'items'\n        }\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('simpsonsStore'),\n    columns: [\n        {header: 'Name',  dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                xtype: 'textfield',\n                allowBlank: false\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selType: 'cellmodel',\n    plugins: [\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a>', {\n            clicksToEdit: 1\n        })\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>This requires a little explanation. We're passing in <code>store</code> and <code>columns</code> as normal, but\nwe also specify a <a href=\"#!/api/Ext.grid.column.Column-cfg-field\" rel=\"Ext.grid.column.Column-cfg-field\" class=\"docClass\">field</a> on two of our columns. For the\nName column we just want a default textfield to edit the value, so we specify 'textfield'.\nFor the Email column we customized the editor slightly by passing allowBlank: false, which\nwill provide inline validation.</p>\n\n<p>To support cell editing, we also specified that the grid should use the 'cellmodel'\n<a href=\"#!/api/Ext.grid.Panel-cfg-selType\" rel=\"Ext.grid.Panel-cfg-selType\" class=\"docClass\">selType</a>, and created an instance of the CellEditing plugin,\nwhich we configured to activate each editor after a single click.</p>\n"},"Editing":{"!doc":"<p>This class provides an abstract grid editing plugin on selected <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">columns</a>.\nThe editable columns are specified by providing an <a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>\nin the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column configuration</a>.</p>\n\n<p><strong>Note:</strong> This class should not be used directly. See <a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a> and\n<a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a>.</p>\n"},"DragDrop":{"!doc":"<p>This plugin provides drag and/or drop functionality for a <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>.</p>\n\n<p>It creates a specialized instance of <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> which knows how to drag out of a <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a> and loads the data object which is passed to a cooperating <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>'s\nmethods with the following properties:</p>\n\n<ul>\n<li><p><code>copy</code> : Boolean</p>\n\n<p>The value of the <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>'s <code>copy</code> property, or <code>true</code> if the GridView was configured with <code>allowCopy: true</code> <em>and</em>\nthe control key was pressed when the drag operation was begun.</p></li>\n<li><p><code>view</code> : <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a></p>\n\n<p>The source GridView from which the drag originated.</p></li>\n<li><p><code>ddel</code> : HtmlElement</p>\n\n<p>The drag proxy element which moves with the mouse</p></li>\n<li><p><code>item</code> : HtmlElement</p>\n\n<p>The GridView node upon which the mousedown event was registered.</p></li>\n<li><p><code>records</code> : Array</p>\n\n<p>An Array of <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a>s representing the selected data being dragged from the source <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>.</p></li>\n</ul>\n\n\n<p>It also creates a specialized instance of <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a> which cooperates with other DropZones which are\nmembers of the same ddGroup which processes such data objects.</p>\n\n<p>Adding this plugin to a view means that two new events may be fired from the client GridView, <code><a href=\"#!/api/Ext.grid.plugin.DragDrop-event-beforedrop\" rel=\"Ext.grid.plugin.DragDrop-event-beforedrop\" class=\"docClass\">beforedrop</a></code> and <code><a href=\"#!/api/Ext.grid.plugin.DragDrop-event-drop\" rel=\"Ext.grid.plugin.DragDrop-event-drop\" class=\"docClass\">drop</a></code></p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'simpsonsStore',\n    fields:['name'],\n    data: [[\"Lisa\"], [\"Bart\"], [\"Homer\"], [\"Marge\"]],\n    proxy: {\n        type: 'memory',\n        reader: 'array'\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: 'simpsonsStore',\n    columns: [\n        {header: 'Name',  dataIndex: 'name', flex: true}\n    ],\n    viewConfig: {\n        plugins: {\n            ptype: 'gridviewdragdrop',\n            dragText: 'Drag and drop to reorganize'\n        }\n    },\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"HeaderReorderer":{"!doc":"\n"},"HeaderResizer":{"!doc":"<p>Plugin to add header resizing functionality to a HeaderContainer.\nAlways resizing header to the left of the splitter you are resizing.</p>\n"},"RowEditing":{"!doc":"<p>The <a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a> plugin injects editing at a row level for a Grid. When editing begins,\na small floating dialog will be shown for the appropriate row. Each editable column will show a field\nfor editing. There is a button to save or cancel all changes for the edit.</p>\n\n<p>The field that will be used for the editor is defined at the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>. The editor can be a field instance or a field configuration.\nIf an editor is not specified for a particular column then that column won't be editable and the value of\nthe column will be displayed. To provide a custom renderer for non-editable values, use the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editRenderer\" rel=\"Ext.grid.column.Column-cfg-editRenderer\" class=\"docClass\">editRenderer</a> configuration on the column.</p>\n\n<p>The editor may be shared for each column in the grid, or a different one may be specified for each column.\nAn appropriate field type should be chosen to match the data structure that it will be editing. For example,\nto edit a date, it would be useful to specify <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> as the editor.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data: [\n        {\"name\":\"Lisa\", \"email\":\"lisa@simpsons.com\", \"phone\":\"555-111-1224\"},\n        {\"name\":\"Bart\", \"email\":\"bart@simpsons.com\", \"phone\":\"555-222-1234\"},\n        {\"name\":\"Homer\", \"email\":\"home@simpsons.com\", \"phone\":\"555-222-1244\"},\n        {\"name\":\"Marge\", \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"}\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('simpsonsStore'),\n    columns: [\n        {header: 'Name',  dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                xtype: 'textfield',\n                allowBlank: false\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selType: 'rowmodel',\n    plugins: [\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a>', {\n            clicksToEdit: 1\n        })\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"RowExpander":{"!doc":"<p>Plugin (ptype = 'rowexpander') that adds the ability to have a Column in a grid which enables\na second row body which expands/contracts.  The expand/contract behavior is configurable to react\non clicking of the column, double click of the row, and/or hitting enter while a row is selected.</p>\n"}},"property":{"Grid":{"!doc":"<p>A specialized grid implementation intended to mimic the traditional property grid as typically seen in\ndevelopment IDEs.  Each row in the grid represents a property of some object, and the data is stored\nas a set of name/value pairs in <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Properties</a>. By default, the editors\nshown are inferred from the data in the cell. More control over this can be specified by using the\n<a href=\"#!/api/Ext.grid.property.Grid-cfg-sourceConfig\" rel=\"Ext.grid.property.Grid-cfg-sourceConfig\" class=\"docClass\">sourceConfig</a> option. Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>', {\n    title: 'Properties Grid',\n    width: 300,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    source: {\n        \"(name)\": \"My Object\",\n        \"Created\": <a href=\"#!/api/Ext.Date-method-parse\" rel=\"Ext.Date-method-parse\" class=\"docClass\">Ext.Date.parse</a>('10/15/2006', 'm/d/Y'),\n        \"Available\": false,\n        \"Version\": 0.01,\n        \"Description\": \"A test object\"\n    }\n});\n</code></pre>\n"},"HeaderContainer":{"!doc":"<p>A custom HeaderContainer for the <a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>.\nGenerally it should not need to be used directly.</p>\n"},"Property":{"!doc":"<p>A specific <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> type that represents a name/value pair and is made to work with the\n<a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>. Typically, Properties do not need to be created directly as they can be\ncreated implicitly by simply using the appropriate data configs either via the\n<a href=\"#!/api/Ext.grid.property.Grid-cfg-source\" rel=\"Ext.grid.property.Grid-cfg-source\" class=\"docClass\">Ext.grid.property.Grid.source</a> config property or by calling <a href=\"#!/api/Ext.grid.property.Grid-method-setSource\" rel=\"Ext.grid.property.Grid-method-setSource\" class=\"docClass\">Ext.grid.property.Grid.setSource</a>.\nHowever, if the need arises, these records can also be created explicitly as shown below. Example usage:</p>\n\n<pre><code>var rec = new <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Ext.grid.property.Property</a>({\n    name: 'birthday',\n    value: <a href=\"#!/api/Ext.Date-method-parse\" rel=\"Ext.Date-method-parse\" class=\"docClass\">Ext.Date.parse</a>('17/06/1962', 'd/m/Y')\n});\n// Add record to an already populated grid\ngrid.store.addSorted(rec);\n</code></pre>\n"},"Store":{"!doc":"<p>A custom <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> for the <a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>. This class handles the mapping\nbetween the custom data source objects supported by the grid and the <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Ext.grid.property.Property</a> format\nused by the <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> base class.</p>\n"}},"RowEditor":{"!doc":"<p>Internal utility class used to provide row editing functionality. For developers, they should use\nthe RowEditing plugin to use this functionality with a grid.</p>\n"},"RowEditorButtons":{"!doc":"<p>Private Container class used by the <a href=\"#!/api/Ext.grid.RowEditor\" rel=\"Ext.grid.RowEditor\" class=\"docClass\">Ext.grid.RowEditor</a> to hold its buttons.</p>\n"},"View":{"!doc":"<p>The grid View class provides extra <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a> specific functionality to the\n<a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">Ext.view.Table</a>. In general, this class is not instanced directly, instead a viewConfig\noption is passed to the grid:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    viewConfig: {\n        stripeRows: false\n    }\n});\n</code></pre>\n\n<h2>Drag Drop</h2>\n\n<p>Drag and drop functionality can be achieved in the grid by attaching a <a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">Ext.grid.plugin.DragDrop</a> plugin\nwhen creating the view.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    viewConfig: {\n        plugins: {\n            ddGroup: 'people-group',\n            ptype: 'gridviewdragdrop',\n            enableDrop: false\n        }\n    }\n});\n</code></pre>\n"},"ViewDropZone":{"!doc":"\n"}},"layout":{"component":{"Auto":{"!doc":"<p>The class is the default component layout for <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> when no explicit\n<code><a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">componentLayout</a></code> is configured.</p>\n\n<p>This class uses template methods to perform the individual aspects of measurement,\ncalculation and publication of results. The methods called depend on the component's\n<a href=\"#!/api/Ext.AbstractComponent-method-getSizeModel\" rel=\"Ext.AbstractComponent-method-getSizeModel\" class=\"docClass\">size model</a>.</p>\n\n<h2>configured / calculated</h2>\n\n<p>In either of these size models, the dimension of the outer element is of a known size.\nThe size is found in the <code>ownerContext</code> (the <a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">Ext.layout.ContextItem</a> for the owner\ncomponent) as either \"width\" or \"height\". This value, if available, is passed to the\n<code>publishInnerWidth</code> or <code>publishInnerHeight</code> method, respectively.</p>\n\n<h2>shrinkWrap</h2>\n\n<p>When a dimension uses the <code>shrinkWrap</code> size model, that means the content is measured,\nthen the outer (owner) size is calculated and published.</p>\n\n<p>For example, for a shrinkWrap width, the following sequence of calls are made:</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.layout.component.Component-method-measureContentWidth\" rel=\"Ext.layout.component.Component-method-measureContentWidth\" class=\"docClass\">Ext.layout.component.Component.measureContentWidth</a></code></li>\n<li><code>publishOwnerWidth</code>\n\n<ul>\n<li><code>calculateOwnerWidthFromContentWidth</code></li>\n<li><code>publishInnerWidth</code> (in the event of hitting a min/maxWidth constraint)</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>natural</h2>\n\n<p>When a dimension uses the <code>natural</code> size model, the measurement is made on the outer\n(owner) element. This size is then used to determine the content area in much the same\nway as if the outer element had a <code>configured</code> or <code>calculated</code> size model.</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.layout.component.Component-method-measureOwnerWidth\" rel=\"Ext.layout.component.Component-method-measureOwnerWidth\" class=\"docClass\">Ext.layout.component.Component.measureOwnerWidth</a></code></li>\n<li><code>publishInnerWidth</code></li>\n</ul>\n\n"},"Component":{"!doc":"<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">Ext.Component.componentLayout</a> for additional details.</p>\n"},"Body":{"!doc":"<p>Component layout for components which maintain an inner body element which must be resized to synchronize with the\nComponent size.</p>\n"},"BoundList":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">Ext.view.BoundList</a>.</p>\n"},"Button":{"!doc":"<p>Component layout for buttons</p>\n"},"Dock":{"!doc":"<p>This ComponentLayout handles docking for Panels. It takes care of panels that are\npart of a ContainerLayout that sets this Panel's size and Panels that are part of\nan AutoContainerLayout in which this panel get his height based of the CSS or\nor its content.</p>\n"},"Draw":{"!doc":"\n"},"field":{"ComboBox":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a> fields. Handles sizing the input field.</p>\n"},"Trigger":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.Trigger\" rel=\"Ext.form.field.Trigger\" class=\"docClass\">Ext.form.field.Trigger</a> fields. Adjusts the input field size to accommodate\nthe trigger button(s).</p>\n"},"Field":{"!doc":"<p>Layout class for components with <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">field labeling</a>, handling the sizing and alignment of\nthe form control, label, and error message treatment.</p>\n"},"FieldContainer":{"!doc":"\n"},"HtmlEditor":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.HtmlEditor\" rel=\"Ext.form.field.HtmlEditor\" class=\"docClass\">Ext.form.field.HtmlEditor</a> fields. Sizes textarea and iframe elements.</p>\n"},"Slider":{"!doc":"\n"},"Text":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> fields. Handles sizing the input field.</p>\n"},"TextArea":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.TextArea\" rel=\"Ext.form.field.TextArea\" class=\"docClass\">Ext.form.field.TextArea</a> fields. Handles sizing the textarea field.</p>\n"}},"FieldSet":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.form.FieldSet\" rel=\"Ext.form.FieldSet\" class=\"docClass\">Ext.form.FieldSet</a> components</p>\n"},"ProgressBar":{"!doc":"\n"}},"Layout":{"!doc":"<p>This class is the base for all layout types: component and container.</p>\n"},"container":{"HBox":{"!doc":"<p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal\nspace between child items containing a numeric <code>flex</code> configuration.</p>\n\n<p>This layout may also be used to set the heights of child items by configuring it with the <a href=\"#!/api/Ext.layout.container.HBox-cfg-align\" rel=\"Ext.layout.container.HBox-cfg-align\" class=\"docClass\">align</a> option.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: \"HBoxLayout Panel\",\n    layout: {\n        type: 'hbox',\n        align: 'stretch'\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        flex: 2\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        flex: 1\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        flex: 1\n    }]\n});\n</code></pre>\n"},"Box":{"!doc":"<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>\n"},"Container":{"!doc":"<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> for additional details.</p>\n"},"Absolute":{"!doc":"<p>This is a layout that inherits the anchoring of <a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">Ext.layout.container.Anchor</a> and adds the\nability for x/y positioning using the standard x and y component config options.</p>\n\n<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> for additional details.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Absolute Layout',\n    width: 300,\n    height: 275,\n    layout: {\n        type: 'absolute'\n        // layout-specific configs go here\n        //itemCls: 'x-abs-layout-item',\n    },\n    url:'save-form.php',\n    defaultType: 'textfield',\n    items: [{\n        x: 10,\n        y: 10,\n        xtype:'label',\n        text: 'Send To:'\n    },{\n        x: 80,\n        y: 10,\n        name: 'to',\n        anchor:'90%'  // anchor width by percentage\n    },{\n        x: 10,\n        y: 40,\n        xtype:'label',\n        text: 'Subject:'\n    },{\n        x: 80,\n        y: 40,\n        name: 'subject',\n        anchor: '90%'  // anchor width by percentage\n    },{\n        x:0,\n        y: 80,\n        xtype: 'textareafield',\n        name: 'msg',\n        anchor: '100% 100%'  // anchor width and height\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Anchor":{"!doc":"<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.\nIf the container is resized, all anchored items are automatically rerendered according to their\n<code><a href=\"#!/api/Ext.layout.container.Anchor-cfg-anchor\" rel=\"Ext.layout.container.Anchor-cfg-anchor\" class=\"docClass\">anchor</a></code> rules.</p>\n\n<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.AbstractContainer-cfg-layout\" rel=\"Ext.container.AbstractContainer-cfg-layout\" class=\"docClass\">layout</a>: 'anchor'\nconfig, and should generally not need to be created directly via the new keyword.</p>\n\n<p>AnchorLayout does not have any direct config options (other than inherited ones). By default,\nAnchorLayout will calculate anchor measurements based on the size of the container itself. However, the\ncontainer using the AnchorLayout can supply an anchoring-specific config property of <code>anchorSize</code>.</p>\n\n<p>If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating\nanchor measurements based on it instead, allowing the container to be sized independently of the anchoring\nlogic if necessary.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 400,\n    title: \"AnchorLayout Panel\",\n    layout: 'anchor',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [\n        {\n            xtype: 'panel',\n            title: '75% Width and 20% Height',\n            anchor: '75% 20%'\n        },\n        {\n            xtype: 'panel',\n            title: 'Offset -300 Width &amp; -200 Height',\n            anchor: '-300 -200'     \n        },\n        {\n            xtype: 'panel',\n            title: 'Mixed Offset and Percent',\n            anchor: '-250 20%'\n        }\n    ]\n});\n</code></pre>\n"},"Auto":{"!doc":"<p>The AutoLayout is the default layout manager delegated by <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> to\nrender any child Components when no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> is configured into\na <code><a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>.</code> AutoLayout provides only a passthrough of any layout calls\nto any child containers.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 280,\n    title: \"AutoLayout Panel\",\n    layout: 'auto',\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Top Inner Panel',\n        width: '75%',\n        height: 90\n    },\n    {\n        xtype: 'panel',\n        title: 'Bottom Inner Panel',\n        width: '75%',\n        height: 90\n    }]\n});\n</code></pre>\n"},"Accordion":{"!doc":"<p>This is a layout that manages multiple Panels in an expandable accordion style such that by default only\none Panel can be expanded at any given time (set <a href=\"#!/api/Ext.layout.container.Accordion-cfg-multi\" rel=\"Ext.layout.container.Accordion-cfg-multi\" class=\"docClass\">multi</a> config to have more open). Each Panel has\nbuilt-in support for expanding and collapsing.</p>\n\n<p>Note: Only Ext Panels and all subclasses of <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> may be used in an accordion layout Container.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Accordion Layout',\n    width: 300,\n    height: 300,\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:15px'\n    },\n    layout: {\n        // layout-specific configs go here\n        type: 'accordion',\n        titleCollapse: false,\n        animate: true,\n        activeOnTop: true\n    },\n    items: [{\n        title: 'Panel 1',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 2',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 3',\n        html: 'Panel content!'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"VBox":{"!doc":"<p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical space\nbetween child items containing a numeric <code>flex</code> configuration.</p>\n\n<p>This layout may also be used to set the widths of child items by configuring it with the <a href=\"#!/api/Ext.layout.container.VBox-cfg-align\" rel=\"Ext.layout.container.VBox-cfg-align\" class=\"docClass\">align</a> option.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 400,\n    title: \"VBoxLayout Panel\",\n    layout: {\n        type: 'vbox',\n        align: 'center'\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        width: 250,\n        flex: 2\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        width: 250,\n        flex: 4\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        width: '50%',\n        flex: 4\n    }]\n});\n</code></pre>\n"},"Border":{"!doc":"<p>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars\nbetween regions and built-in <a href=\"#!/api/Ext.panel.Panel-cfg-collapsible\" rel=\"Ext.panel.Panel-cfg-collapsible\" class=\"docClass\">expanding and collapsing</a> of regions.</p>\n\n<p>This class is intended to be extended or created via the <code>layout:'border'</code> <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a>\nconfig, and should generally not need to be created directly via the new keyword.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: 'Border Layout',\n    layout: 'border',\n    items: [{\n        title: 'South Region is resizable',\n        region: 'south',     // position for region\n        xtype: 'panel',\n        height: 100,\n        split: true,         // enable resizing\n        margins: '0 5 5 5'\n    },{\n        // xtype: 'panel' implied by default\n        title: 'West Region is collapsible',\n        region:'west',\n        xtype: 'panel',\n        margins: '5 0 0 5',\n        width: 200,\n        collapsible: true,   // make collapsible\n        id: 'west-region-container',\n        layout: 'fit'\n    },{\n        title: 'Center Region',\n        region: 'center',     // center region is required, no width/height specified\n        xtype: 'panel',\n        layout: 'fit',\n        margins: '5 5 0 0'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<h1>Notes</h1>\n\n<ul>\n<li><p>When using the split option, the layout will automatically insert a <a href=\"#!/api/Ext.resizer.Splitter\" rel=\"Ext.resizer.Splitter\" class=\"docClass\">Ext.resizer.Splitter</a>\ninto the appropriate place. This will modify the underlying\n<a href=\"#!/api/Ext.container.Container-property-items\" rel=\"Ext.container.Container-property-items\" class=\"docClass\">items</a> collection in the container.</p></li>\n<li><p>Any Container using the Border layout <strong>must</strong> have a child item with <code>region:'center'</code>.\nThe child item in the center region will always be resized to fill the remaining space\nnot used by the other regions in the layout.</p></li>\n<li><p>Any child items with a region of <code>west</code> or <code>east</code> may be configured with either an initial\n<code>width</code>, or a <a href=\"#!/api/Ext.layout.container.Box-cfg-flex\" rel=\"Ext.layout.container.Box-cfg-flex\" class=\"docClass\">Ext.layout.container.Box.flex</a> value, or an initial percentage width\n<strong>string</strong> (Which is simply divided by 100 and used as a flex value).\nThe 'center' region has a flex value of <code>1</code>.</p></li>\n<li><p>Any child items with a region of <code>north</code> or <code>south</code> may be configured with either an initial\n<code>height</code>, or a <a href=\"#!/api/Ext.layout.container.Box-cfg-flex\" rel=\"Ext.layout.container.Box-cfg-flex\" class=\"docClass\">Ext.layout.container.Box.flex</a> value, or an initial percentage height\n<strong>string</strong> (Which is simply divided by 100 and used as a flex value).\nThe 'center' region has a flex value of <code>1</code>.</p></li>\n<li><p><strong>There is no BorderLayout.Region class in ExtJS 4.0+</strong></p></li>\n</ul>\n\n"},"boxOverflow":{"Menu":{"!doc":"\n"},"None":{"!doc":"<p>Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout\n(either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)\nfor its container.</p>\n"},"Scroller":{"!doc":"\n"}},"Card":{"!doc":"<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be\nvisible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.\nThis class is intended to be extended or created via the layout:'card' <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config,\nand should generally not need to be created directly via the new keyword.</p>\n\n<p>The CardLayout's focal method is <a href=\"#!/api/Ext.layout.container.Card-method-setActiveItem\" rel=\"Ext.layout.container.Card-method-setActiveItem\" class=\"docClass\">setActiveItem</a>.  Since only one panel is displayed at a time,\nthe only way to move from one Component to the next is by calling setActiveItem, passing the next panel to display\n(or its id or index).  The layout itself does not provide a user interface for handling this navigation,\nso that functionality must be provided by the developer.</p>\n\n<p>To change the active card of a container, call the setActiveItem method of its layout:</p>\n\n<pre class='inline-example '><code>var p = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    layout: 'card',\n    items: [\n        { html: 'Card 1' },\n        { html: 'Card 2' }\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\np.getLayout().setActiveItem(1);\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.Component-event-beforedeactivate\" rel=\"Ext.Component-event-beforedeactivate\" class=\"docClass\">beforedeactivate</a> and <a href=\"#!/api/Ext.Component-event-beforeactivate\" rel=\"Ext.Component-event-beforeactivate\" class=\"docClass\">beforeactivate</a>\nevents can be used to prevent a card from activating or deactivating by returning <code>false</code>.</p>\n\n<pre class='inline-example '><code>var active = 0;\nvar main = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    layout: 'card',\n    tbar: [{\n        text: 'Next',\n        handler: function(){\n            var layout = main.getLayout();\n            ++active;\n            layout.setActiveItem(active);\n            active = main.items.indexOf(layout.getActiveItem());\n        }\n    }],\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3',\n        listeners: {\n            beforeactivate: function(){\n                return false;\n            }\n        }\n    }]\n});\n</code></pre>\n\n<p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added\nto the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a\ncommon navigation routine.  Note that other uses of a CardLayout (like a tab control) would require a\ncompletely different implementation.  For serious implementations, a better approach would be to extend\nCardLayout to provide the custom functionality needed.</p>\n\n<pre class='inline-example '><code>var navigate = function(panel, direction){\n    // This routine could contain business logic required to manage the navigation steps.\n    // It would call setActiveItem as needed, manage navigation button state, handle any\n    // branching logic that might be required, handle alternate actions like cancellation\n    // or finalization, etc.  A complete wizard implementation could get pretty\n    // sophisticated depending on the complexity required, and should probably be\n    // done as a subclass of CardLayout in a real-world implementation.\n    var layout = panel.getLayout();\n    layout[direction]();\n    <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('move-prev').setDisabled(!layout.getPrev());\n    <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('move-next').setDisabled(!layout.getNext());\n};\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Example Wizard',\n    width: 300,\n    height: 200,\n    layout: 'card',\n    bodyStyle: 'padding:15px',\n    defaults: {\n        // applied to each contained panel\n        border: false\n    },\n    // just an example of one possible navigation scheme, using buttons\n    bbar: [\n        {\n            id: 'move-prev',\n            text: 'Back',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"prev\");\n            },\n            disabled: true\n        },\n        '-&gt;', // greedy spacer so that the buttons are aligned to each side\n        {\n            id: 'move-next',\n            text: 'Next',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"next\");\n            }\n        }\n    ],\n    // the panels (or \"cards\") within the layout\n    items: [{\n        id: 'card-0',\n        html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'\n    },{\n        id: 'card-1',\n        html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'\n    },{\n        id: 'card-2',\n        html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Fit":{"!doc":"<p>This is a base class for layouts that contain a single item that automatically expands to fill the layout's\ncontainer. This class is intended to be extended or created via the layout:'fit'\n<a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config, and should generally not need to be created directly via the new keyword.</p>\n\n<p>Fit layout does not have any direct config options (other than inherited ones). To fit a panel to a container using\nFit layout, simply set <code>layout: 'fit'</code> on the container and add a single panel to it.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Fit Layout',\n    width: 300,\n    height: 150,\n    layout:'fit',\n    items: {\n        title: 'Inner Panel',\n        html: 'This is the inner panel content',\n        bodyPadding: 20,\n        border: false\n    },\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>If the container has multiple items, all of the items will all be equally sized. This is usually not\ndesired, so to avoid this, place only a <strong>single</strong> item in the container. This sizing of all items\ncan be used to provide a background <a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">image</a> that is \"behind\" another item\nsuch as a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">dataview</a> if you also absolutely position the items.</p>\n"},"CheckboxGroup":{"!doc":"<p>This layout implements the column arrangement for <a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a> and <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a>.\nIt groups the component's sub-items into columns based on the component's\n<a href=\"#!/api/Ext.form.CheckboxGroup-cfg-columns\" rel=\"Ext.form.CheckboxGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-vertical\" rel=\"Ext.form.CheckboxGroup-cfg-vertical\" class=\"docClass\">Ext.form.CheckboxGroup.vertical</a> config properties.</p>\n"},"Column":{"!doc":"<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of each\ncolumn can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This\nclass is intended to be extended or created via the layout:'column' <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config,\nand should generally not need to be created directly via the new keyword.</p>\n\n<p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a specific\nconfig property of <code>columnWidth</code> that can be included in the config of any panel added to it. The layout will use\nthe columnWidth (if present) or width of each panel during layout to determine how to size each panel. If width or\ncolumnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>\n\n<p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1. The columnWidth\nproperty is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1 (e.g., .25).</p>\n\n<p>The basic rules for specifying column widths are pretty simple. The logic makes two passes through the set of\ncontained panels. During the first layout pass, all panels that either have a fixed width or none specified (auto)\nare skipped, but their widths are subtracted from the overall container width.</p>\n\n<p>During the second pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages\nbased on the total <strong>remaining</strong> container width. In other words, percentage width panels are designed to fill\nthe space left over by all the fixed-width and/or auto-width panels. Because of this, while you can specify any\nnumber of columns with different percentages, the columnWidths must always add up to 1 (or 100%) when added\ntogether, otherwise your layout may not render as expected.</p>\n\n<pre class='inline-example '><code>// All columns are percentages -- they must add up to 1\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Column Layout - Percentage Only',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        columnWidth: 0.25\n    },{\n        title: 'Column 2',\n        columnWidth: 0.55\n    },{\n        title: 'Column 3',\n        columnWidth: 0.20\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n// Mix of width and columnWidth -- all columnWidth values must add up\n// to 1. The first column will take up exactly 120px, and the last two\n// columns will fill the remaining container width.\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    title: 'Column Layout - Mixed',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        width: 120\n    },{\n        title: 'Column 2',\n        columnWidth: 0.7\n    },{\n        title: 'Column 3',\n        columnWidth: 0.3\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Editor":{"!doc":"<p>Component layout for editors</p>\n"},"Form":{"!doc":"<p>This is a layout that will render form Fields, one under the other all stretched to the Container width.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: \"FormLayout Panel\",\n    layout: 'form',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    bodyPadding: 5,\n    defaultType: 'textfield',\n    items: [{\n       fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank:false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }, {\n        fieldLabel: 'Email',\n        name: 'email',\n        vtype:'email'\n    }, {\n        fieldLabel: 'DOB',\n        name: 'dob',\n        xtype: 'datefield'\n    }, {\n        fieldLabel: 'Age',\n        name: 'age',\n        xtype: 'numberfield',\n        minValue: 0,\n        maxValue: 100\n    }, {\n        xtype: 'timefield',\n        fieldLabel: 'Time',\n        name: 'time',\n        minValue: '8:00am',\n        maxValue: '6:00pm'\n    }]\n});\n</code></pre>\n\n<p>Note that any configured <a href=\"#!/api/Ext.Component-cfg-padding\" rel=\"Ext.Component-cfg-padding\" class=\"docClass\">padding</a> will be ignored on items within a Form layout.</p>\n"},"Table":{"!doc":"<p>This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and\nrowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or\ncreated via the <code>layout: {type: 'table'}</code> <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config, and should generally not\nneed to be created directly via the new keyword.</p>\n\n<p>Note that when creating a layout via config, the layout-specific config properties must be passed in via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> object which will then be applied internally to the layout. In the case of\nTableLayout, the only valid layout config properties are <a href=\"#!/api/Ext.layout.container.Table-cfg-columns\" rel=\"Ext.layout.container.Table-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.layout.container.Table-cfg-tableAttrs\" rel=\"Ext.layout.container.Table-cfg-tableAttrs\" class=\"docClass\">tableAttrs</a>. However, the items\nadded to a TableLayout can supply the following table-specific config properties:</p>\n\n<ul>\n<li><strong>rowspan</strong> Applied to the table cell containing the item.</li>\n<li><strong>colspan</strong> Applied to the table cell containing the item.</li>\n<li><strong>cellId</strong> An id applied to the table cell containing the item.</li>\n<li><strong>cellCls</strong> A CSS class name added to the table cell containing the item.</li>\n</ul>\n\n\n<p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard HTML table. You\nsimply add each panel (or \"cell\") that you want to include along with any span attributes specified as the special\nconfig properties of rowspan and colspan which work exactly like their HTML counterparts. Rather than explicitly\ncreating and nesting rows and columns as you would in HTML, you simply specify the total column count in the\nlayout config and start adding panels in their natural order from left to right, top to bottom. The layout will\nautomatically figure out, based on the column count, rowspans and colspans, how to position each panel within the\ntable. Just like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or you'll\nend up with missing and/or extra cells! Example usage:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Table Layout',\n    width: 300,\n    height: 150,\n    layout: {\n        type: 'table',\n        // The total column count must be specified here\n        columns: 3\n    },\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:20px'\n    },\n    items: [{\n        html: 'Cell A content',\n        rowspan: 2\n    },{\n        html: 'Cell B content',\n        colspan: 2\n    },{\n        html: 'Cell C content',\n        cellCls: 'highlight'\n    },{\n        html: 'Cell D content'\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"ClassList":{"!doc":"<p>This class provides a DOM ClassList API to buffer access to an element's class.\nInstances of this class are created by <a href=\"#!/api/Ext.layout.ContextItem-method-getClassList\" rel=\"Ext.layout.ContextItem-method-getClassList\" class=\"docClass\">Ext.layout.ContextItem.getClassList</a>.</p>\n"},"Context":{"!doc":"<p>Manages context information during a layout.</p>\n\n<h1>Algorithm</h1>\n\n<p>This class performs the following jobs:</p>\n\n<ul>\n<li>Cache DOM reads to avoid reading the same values repeatedly.</li>\n<li>Buffer DOM writes and flush them as a block to avoid read/write interleaving.</li>\n<li>Track layout dependencies so each layout does not have to figure out the source of\nits dependent values.</li>\n<li>Intelligently run layouts when the values on which they depend change (a trigger).</li>\n<li>Allow layouts to avoid processing when required values are unavailable (a block).</li>\n</ul>\n\n\n<p>Work done during layout falls into either a \"read phase\" or a \"write phase\" and it is\nessential to always be aware of the current phase. Most methods in\n<a href=\"#!/api/Ext.layout.Layout\" rel=\"Ext.layout.Layout\" class=\"docClass\">Layout</a> are called during a read phase:\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>,\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> and\n<a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a>. The exceptions to this are\n<a href=\"#!/api/Ext.layout.Layout-method-beginLayout\" rel=\"Ext.layout.Layout-method-beginLayout\" class=\"docClass\">beginLayout</a>,\n<a href=\"#!/api/Ext.layout.Layout-method-beginLayoutCycle\" rel=\"Ext.layout.Layout-method-beginLayoutCycle\" class=\"docClass\">beginLayoutCycle</a> and\n<a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> which are called during\na write phase. While <a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> is called\na write phase, it is really intended to be a catch-all for post-processing after a\nlayout run.</p>\n\n<p>In a read phase, it is OK to read the DOM but this should be done using the appropriate\n<a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a> where possible since that provides a cache\nto avoid redundant reads. No writes should be made to the DOM in a read phase! Instead,\nthe values should be written to the proper ContextItem for later write-back.</p>\n\n<p>The rules flip-flop in a write phase. The only difference is that ContextItem methods\nlike <a href=\"#!/api/Ext.layout.ContextItem-method-getStyle\" rel=\"Ext.layout.ContextItem-method-getStyle\" class=\"docClass\">getStyle</a> will still read the DOM unless the\nvalue was previously read. This detail is unknowable from the outside of ContextItem, so\nread calls to ContextItem should also be avoided in a write phase.</p>\n\n<p>Calculating interdependent layouts requires a certain amount of iteration. In a given\ncycle, some layouts will contribute results that allow other layouts to proceed. The\ngeneral flow then is to gather all of the layouts (both component and container) in a\ncomponent tree and queue them all for processing. The initial queue order is bottom-up\nand component layout first, then container layout (if applicable) for each component.</p>\n\n<p>This initial step also calls the beginLayout method on all layouts to clear any values\nfrom the DOM that might interfere with calculations and measurements. In other words,\nthis is a \"write phase\" and reads from the DOM should be strictly avoided.</p>\n\n<p>Next the layout enters into its iterations or \"cycles\". Each cycle consists of calling\nthe <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> method on all layouts in the\n<a href=\"#!/api/Ext.layout.Context-property-layoutQueue\" rel=\"Ext.layout.Context-property-layoutQueue\" class=\"docClass\">layoutQueue</a>. These calls are part of a \"read phase\" and writes to the DOM should\nbe strictly avoided.</p>\n\n<h1>Considerations</h1>\n\n<p><strong>RULE 1</strong>: Respect the read/write cycles. Always use the <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a>\nor <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a> methods to get calculated values;\nonly use the <a href=\"#!/api/Ext.layout.ContextItem-method-getStyle\" rel=\"Ext.layout.ContextItem-method-getStyle\" class=\"docClass\">getStyle</a> method to read styles; use\n<a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a> to set DOM values. Some reads will, of\ncourse, still go directly to the DOM, but if there is a method in\n<a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a> to do a certain job, it should be used instead\nof a lower-level equivalent.</p>\n\n<p>The basic logic flow in <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> consists of gathering\nvalues by calling <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>, calculating results and publishing\nthem by calling <a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a>. It is important to realize\nthat <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> will return <code>undefined</code> if the value\nis not yet known. But the act of calling the method is enough to track the fact that the\ncalling layout depends (in some way) on this value. In other words, the calling layout is\n\"triggered\" by the properties it requests.</p>\n\n<p><strong>RULE 2</strong>: Avoid calling <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> unless the value\nis needed. Gratuitous calls cause inefficiency because the layout will appear to depend on\nvalues that it never actually uses. This applies equally to\n<a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a> and the test-only methods\n<a href=\"#!/api/Ext.layout.ContextItem-method-hasProp\" rel=\"Ext.layout.ContextItem-method-hasProp\" class=\"docClass\">hasProp</a> and <a href=\"#!/api/Ext.layout.ContextItem-method-hasDomProp\" rel=\"Ext.layout.ContextItem-method-hasDomProp\" class=\"docClass\">hasDomProp</a>.</p>\n\n<p>Because <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> can return <code>undefined</code>, it is often\nthe case that subsequent math will produce NaN's. This is usually not a problem as the\nNaN's simply propagate along and result in final results that are NaN. Both <code>undefined</code>\nand NaN are ignored by <a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">Ext.layout.ContextItem.setProp</a>, so it is often not necessary\nto even know that this is happening. It does become important for determining if a layout\nis not done or if it might lead to publishing an incorrect (but not NaN or <code>undefined</code>)\nvalue.</p>\n\n<p><strong>RULE 3</strong>: If a layout has not calculated all the values it is required to calculate, it\nmust set <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> to <code>false</code> before returning from\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>. This value is always <code>true</code> on entry because\nit is simpler to detect the incomplete state rather than the complete state (especially up\nand down a class hierarchy).</p>\n\n<p><strong>RULE 4</strong>: A layout must never publish an incomplete (wrong) result. Doing so would cause\ndependent layouts to run their calculations on those wrong values, producing more wrong\nvalues and some layouts may even incorrectly flag themselves as <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a>\nbefore the correct values are determined and republished. Doing this will poison the\ncalculations.</p>\n\n<p><strong>RULE 5</strong>: Each value should only be published by one layout. If multiple layouts attempt\nto publish the same values, it would be nearly impossible to avoid breaking <strong>RULE 4</strong>. To\nhelp detect this problem, the layout diagnostics will trap on an attempt to set a value\nfrom different layouts.</p>\n\n<p>Complex layouts can produce many results as part of their calculations. These values are\nimportant for other layouts to proceed and need to be published by the earliest possible\ncall to <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">Ext.layout.Layout.calculate</a> to avoid unnecessary cycles and poor performance. It is\nalso possible, however, for some results to be related in a way such that publishing them\nmay be an all-or-none proposition (typically to avoid breaking <em>RULE 4</em>).</p>\n\n<p><strong>RULE 6</strong>: Publish results as soon as they are known to be correct rather than wait for\nall values to be calculated. Waiting for everything to be complete can lead to deadlock.\nThe key here is not to forget <strong>RULE 4</strong> in the process.</p>\n\n<p>Some layouts depend on certain critical values as part of their calculations. For example,\nHBox depends on width and cannot do anything until the width is known. In these cases, it\nis best to use <a href=\"#!/api/Ext.layout.ContextItem-method-block\" rel=\"Ext.layout.ContextItem-method-block\" class=\"docClass\">block</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a> and thereby avoid processing the layout\nuntil the needed value is available.</p>\n\n<p><strong>RULE 7</strong>: Use <a href=\"#!/api/Ext.layout.ContextItem-method-block\" rel=\"Ext.layout.ContextItem-method-block\" class=\"docClass\">block</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a> when values are required to make progress.\nThis will mimize wasted recalculations.</p>\n\n<p><strong>RULE 8</strong>: Blocks should only be used when no forward progress can be made. If even one\nvalue could still be calculated, a block could result in a deadlock.</p>\n\n<p>Historically, layouts have been invoked directly by component code, sometimes in places\nlike an <code>afterLayout</code> method for a child component. With the flexibility now available\nto solve complex, iterative issues, such things should be done in a responsible layout\n(be it component or container).</p>\n\n<p><strong>RULE 9</strong>: Use layouts to solve layout issues and don't wait for the layout to finish to\nperform further layouts. This is especially important now that layouts process entire\ncomponent trees and not each layout in isolation.</p>\n\n<h1>Sequence Diagram</h1>\n\n<p>The simplest sequence diagram for a layout run looks roughly like this:</p>\n\n<pre><code>  Context         Layout 1     Item 1     Layout 2     Item 2\n     |               |           |           |           |\n----&gt;X--------------&gt;X           |           |           |\nrun  X---------------|-----------|----------&gt;X           |\n     X beginLayout   |           |           |           |\n     X               |           |           |           |\n   A X--------------&gt;X           |           |           |\n     X  calculate    X----------&gt;X           |           |\n     X             C X  getProp  |           |           |\n   B X               X----------&gt;X           |           |\n     X               |  setProp  |           |           |\n     X               |           |           |           |\n   D X---------------|-----------|----------&gt;X           |\n     X  calculate    |           |           X----------&gt;X\n     X               |           |           |  setProp  |\n   E X               |           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X completeLayout|           |         F |           |\n     X               |           |           |           |\n   G X               |           |           |           |\n   H X--------------&gt;X           |           |           |\n     X  calculate    X----------&gt;X           |           |\n     X             I X  getProp  |           |           |\n     X               X----------&gt;X           |           |\n     X               |  setProp  |           |           |\n   J X--------------&gt;X           |           |           |\n     X completeLayout|           |           |           |\n     X               |           |           |           |\n   K X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X finalizeLayout|           |           |           |\n     X               |           |           |           |\n   L X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X finishedLayout|           |           |           |\n     X               |           |           |           |\n   M X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X notifyOwner   |           |           |           |\n   N |               |           |           |           |\n     -               -           -           -           -\n</code></pre>\n\n<p>Notes:</p>\n\n<p><strong>A.</strong> This is a call from the <a href=\"#!/api/Ext.layout.Context-method-run\" rel=\"Ext.layout.Context-method-run\" class=\"docClass\">run</a> method to the <a href=\"#!/api/Ext.layout.Context-method-runCycle\" rel=\"Ext.layout.Context-method-runCycle\" class=\"docClass\">runCycle</a> method.\nEach layout in the queue will have its <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>\nmethod called.</p>\n\n<p><strong>B.</strong> After each <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> method is called the\n<a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> flag is checked to see if the Layout has completed.\nIf it has completed and that layout object implements a\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> method, this layout is queued to\nreceive its call. Otherwise, the layout will be queued again unless there are blocks or\ntriggers that govern its requeueing.</p>\n\n<p><strong>C.</strong> The call to <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> is made to the Item\nand that will be tracked as a trigger (keyed by the name of the property being requested).\nChanges to this property will cause this layout to be requeued. The call to\n<a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a> will place a value in the item and not\ndirectly into the DOM.</p>\n\n<p><strong>D.</strong> Call the other layouts now in the first cycle (repeat <strong>B</strong> and <strong>C</strong> for each\nlayout).</p>\n\n<p><strong>E.</strong> After completing a cycle, if progress was made (new properties were written to\nthe context) and if the <a href=\"#!/api/Ext.layout.Context-property-layoutQueue\" rel=\"Ext.layout.Context-property-layoutQueue\" class=\"docClass\">layoutQueue</a> is not empty, the next cycle is run. If no\nprogress was made or no layouts are ready to run, all buffered values are written to\nthe DOM (a flush).</p>\n\n<p><strong>F.</strong> After flushing, any layouts that were marked as <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a>\nthat also have a <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> method are called.\nThis can cause them to become no longer done (see <a href=\"#!/api/Ext.layout.Context-method-invalidate\" rel=\"Ext.layout.Context-method-invalidate\" class=\"docClass\">invalidate</a>). As with\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>, this is considered a \"read phase\" and\ndirect DOM writes should be avoided.</p>\n\n<p><strong>G.</strong> Flushing and calling any pending <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a>\nmethods will likely trigger layouts that called <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>\nand unblock layouts that have called <a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a>.\nThese variants are used when a layout needs the value to be correct in the DOM and not\nsimply known. If this does not cause at least one layout to enter the queue, we have a\nlayout FAILURE. Otherwise, we continue with the next cycle.</p>\n\n<p><strong>H.</strong> Call <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> on any layouts in the queue\nat the start of this cycle. Just a repeat of <strong>B</strong> through <strong>G</strong>.</p>\n\n<p><strong>I.</strong> Once the layout has calculated all that it is resposible for, it can leave itself\nin the <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> state. This is the value on entry to\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> and must be cleared in that call if the\nlayout has more work to do.</p>\n\n<p><strong>J.</strong> Now that all layouts are done, flush any DOM values and\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> calls. This can again cause\nlayouts to become not done, and so we will be back on another cycle if that happens.</p>\n\n<p><strong>K.</strong> After all layouts are done, call the <a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a>\nmethod on any layouts that have one. As with <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a>,\nthis can cause layouts to become no longer done. This is less desirable than using\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> because it will cause all\n<a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a> methods to be called again\nwhen we think things are all wrapped up.</p>\n\n<p><strong>L.</strong> After finishing the last iteration, layouts that have a\n<a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.</p>\n\n<p><strong>M.</strong> After calling finahedLayout, layouts that have a\n<a href=\"#!/api/Ext.layout.Layout-method-notifyOwner\" rel=\"Ext.layout.Layout-method-notifyOwner\" class=\"docClass\">notifyOwner</a> method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.</p>\n\n<p><strong>N.</strong> One last flush to make sure everything has been written to the DOM.</p>\n\n<h1>Inter-Layout Collaboration</h1>\n\n<p>Many layout problems require collaboration between multiple layouts. In some cases, this\nis as simple as a component's container layout providing results used by its component\nlayout or vise-versa. A slightly more distant collaboration occurs in a box layout when\nstretchmax is used: the child item's component layout provides results that are consumed\nby the ownerCt's box layout to determine the size of the children.</p>\n\n<p>The various forms of interdependence between a container and its children are described by\neach components' <a href=\"#!/api/Ext.AbstractComponent-method-getSizeModel\" rel=\"Ext.AbstractComponent-method-getSizeModel\" class=\"docClass\">size model</a>.</p>\n\n<p>To facilitate this collaboration, the following pairs of properties are published to the\ncomponent's <a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a>:</p>\n\n<ul>\n<li>width/height: These hold the final size of the component. The layout indicated by the\n<a href=\"#!/api/Ext.AbstractComponent-method-getSizeModel\" rel=\"Ext.AbstractComponent-method-getSizeModel\" class=\"docClass\">size model</a> is responsible for setting these.</li>\n<li>contentWidth/contentHeight: These hold size information published by the container\nlayout or from DOM measurement. These describe the content only. These values are\nused by the component layout to determine the outer width/height when that component\nis <a href=\"#!/api/Ext.AbstractComponent-cfg-shrinkWrap\" rel=\"Ext.AbstractComponent-cfg-shrinkWrap\" class=\"docClass\">shrink-wrapped</a>. They are also used to\ndetermine overflow. All container layouts must publish these values for dimensions\nthat are shrink-wrapped. If a component has raw content (not container items), the\ncomponentLayout must publish these values instead.</li>\n</ul>\n\n"},"ContextItem":{"!doc":"<p>This class manages state information for a component or element during a layout.</p>\n\n<h1>Blocks</h1>\n\n<p>A \"block\" is a required value that is preventing further calculation. When a layout has\nencountered a situation where it cannot possibly calculate results, it can associate\nitself with the context item and missing property so that it will not be rescheduled\nuntil that property is set.</p>\n\n<p>Blocks are a one-shot registration. Once the property changes, the block is removed.</p>\n\n<p>Be careful with blocks. If <em>any</em> further calculations can be made, a block is not the\nright choice.</p>\n\n<h1>Triggers</h1>\n\n<p>Whenever any call to <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a>, <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>, <a href=\"#!/api/Ext.layout.ContextItem-method-hasProp\" rel=\"Ext.layout.ContextItem-method-hasProp\" class=\"docClass\">hasProp</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-hasDomProp\" rel=\"Ext.layout.ContextItem-method-hasDomProp\" class=\"docClass\">hasDomProp</a> is made, the current layout is automatically registered as being\ndependent on that property in the appropriate state. Any changes to the property will\ntrigger the layout and it will be queued in the <a href=\"#!/api/Ext.layout.Context\" rel=\"Ext.layout.Context\" class=\"docClass\">Ext.layout.Context</a>.</p>\n\n<p>Triggers, once added, remain for the entire layout. Any changes to the property will\nreschedule all unfinished layouts in their trigger set.</p>\n"},"SizeModel":{"!doc":"<p>This class describes a size determination strategy or algorithm used by the layout\nsystem. There are special instances of this class stored as static properties to\navoid needless object instantiation. These instances should be treated as readonly.</p>\n\n<ul>\n<li><code>calculated</code></li>\n<li><code>configured</code></li>\n<li><code>constrainedMax</code></li>\n<li><code>constrainedMin</code></li>\n<li><code>natural</code></li>\n<li><code>shrinkWrap</code></li>\n<li><code>calculatedFromConfigured</code></li>\n<li><code>calculatedFromNatural</code></li>\n<li><code>calculatedFromShrinkWrap</code></li>\n</ul>\n\n\n<p>Using one of these instances is simply:</p>\n\n<pre><code>  var calculated = <a href=\"#!/api/Ext.layout.SizeModel-property-calculated\" rel=\"Ext.layout.SizeModel-property-calculated\" class=\"docClass\">Ext.layout.SizeModel.calculated</a>;\n</code></pre>\n"},"SizePolicy":{"!doc":"<p>This class describes how a layout will interact with a component it manages.</p>\n\n<p>There are special instances of this class stored as static properties to avoid object\ninstantiation. All instances of this class should be treated as readonly objects.</p>\n"}},"view":{"Table":{"!doc":"<p>This class encapsulates the user interface for a tabular data set.\nIt acts as a centralized manager for controlling the various interface\nelements of the view. This includes handling events, such as row and cell\nlevel based DOM events. It also reacts to events from the underlying <a href=\"#!/api/Ext.selection.Model\" rel=\"Ext.selection.Model\" class=\"docClass\">Ext.selection.Model</a>\nto provide visual feedback to the user.</p>\n\n<p>This class does not provide ways to manipulate the underlying data of the configured\n<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>.</p>\n\n<p>This is the base class for both <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">Ext.grid.View</a> and <a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">Ext.tree.View</a> and is not\nto be used directly.</p>\n\n<p><strong>From override Ext.grid.plugin.BufferedRendererTableView:</strong> A set of overrides required by the presence of the BufferedRenderer plugin.</p>\n\n<p>These overrides of <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">Ext.view.Table</a> take into account the affect of a buffered renderer and\ndivert execution from the default course where necessary.</p>\n"},"AbstractView":{"!doc":"<p>This is an abstract superclass and should not be used directly. Please see <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>.</p>\n"},"View":{"!doc":"<p>A mechanism for displaying data using custom layout templates and formatting.</p>\n\n<p>The View uses an <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a> as its internal templating mechanism, and is bound to an\n<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> so that as the data in the store changes the view is automatically updated\nto reflect the changes. The view also provides built-in behavior for many common events that can\noccur for its contained items including click, doubleclick, mouseover, mouseout, etc. as well as a\nbuilt-in selection model. <strong>In order to use these features, an <a href=\"#!/api/Ext.view.View-cfg-itemSelector\" rel=\"Ext.view.View-cfg-itemSelector\" class=\"docClass\">itemSelector</a> config must\nbe provided for the View to determine what nodes it will be working with.</strong></p>\n\n<p>The example below binds a View to a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> and renders it into an <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Image', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: [\n        { name:'src', type:'string' },\n        { name:'caption', type:'string' }\n    ]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    id:'imagesStore',\n    model: 'Image',\n    data: [\n        { src:'http://www.sencha.com/img/20110215-feat-drawing.png', caption:'Drawing &amp; Charts' },\n        { src:'http://www.sencha.com/img/20110215-feat-data.png', caption:'Advanced Data' },\n        { src:'http://www.sencha.com/img/20110215-feat-html5.png', caption:'Overhauled Theme' },\n        { src:'http://www.sencha.com/img/20110215-feat-perf.png', caption:'Performance Tuned' }\n    ]\n});\n\nvar imageTpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;tpl for=\".\"&gt;',\n        '&lt;div style=\"margin-bottom: 10px;\" class=\"thumb-wrap\"&gt;',\n          '&lt;img src=\"{src}\" /&gt;',\n          '&lt;br/&gt;&lt;span&gt;{caption}&lt;/span&gt;',\n        '&lt;/div&gt;',\n    '&lt;/tpl&gt;'\n);\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>', {\n    store: <a href=\"#!/api/Ext.data.StoreManager-method-lookup\" rel=\"Ext.data.StoreManager-method-lookup\" class=\"docClass\">Ext.data.StoreManager.lookup</a>('imagesStore'),\n    tpl: imageTpl,\n    itemSelector: 'div.thumb-wrap',\n    emptyText: 'No images available',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"DropZone":{"!doc":"\n"},"BoundList":{"!doc":"<p>An internally used DataView for <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">ComboBox</a>.</p>\n"},"DragZone":{"!doc":"\n"},"BoundListKeyNav":{"!doc":"<p>A specialized <a href=\"#!/api/Ext.util.KeyNav\" rel=\"Ext.util.KeyNav\" class=\"docClass\">Ext.util.KeyNav</a> implementation for navigating a <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">Ext.view.BoundList</a> using\nthe keyboard. The up, down, pageup, pagedown, home, and end keys move the active highlight\nthrough the list. The enter key invokes the selection model's select action using the highlighted item.</p>\n"},"NodeCache":{"!doc":"<p>A cache of View elements keyed using the index of the associated record in the store.</p>\n\n<p>This implements the methods of {<a href=\"#!/api/Ext.dom.CompositeElement\" rel=\"Ext.dom.CompositeElement\" class=\"docClass\">Ext.dom.CompositeElement</a>} which are used by <a href=\"#!/api/Ext.view.AbstractView\" rel=\"Ext.view.AbstractView\" class=\"docClass\">Ext.view.AbstractView</a>\nto privide a map of record nodes and methods to manipulate the nodes.</p>\n"},"TableLayout":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">Ext.view.Table</a></p>\n"}},"Img":{"!doc":"<p>Simple helper class for easily creating image components. This renders an image tag to\nthe DOM with the configured src.</p>\n\n<p><p><img src=\"\" alt=\"Ext.Img component\" width=\"\" height=\"\"></p></p>\n\n<h2>Example usage:</h2>\n\n<pre><code>var changingImage = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">Ext.Img</a>', {\n    src: 'http://www.sencha.com/img/20110215-feat-html5.png',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n// change the src of the image programmatically\nchangingImage.setSrc('http://www.sencha.com/img/20110215-feat-perf.png');\n</code></pre>\n\n<p>By default, only an img element is rendered and that is this component's primary\n<a href=\"#!/api/Ext.AbstractComponent-method-getEl\" rel=\"Ext.AbstractComponent-method-getEl\" class=\"docClass\">element</a>. If the <a href=\"#!/api/Ext.AbstractComponent-cfg-autoEl\" rel=\"Ext.AbstractComponent-cfg-autoEl\" class=\"docClass\">Ext.AbstractComponent.autoEl</a> property\nis other than 'img' (the default), the a child img element will be added to the primary\nelement. This can be used to create a wrapper element around the img.</p>\n\n<h2>Wrapping the img in a div:</h2>\n\n<pre><code>var wrappedImage = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">Ext.Img</a>', {\n    src: 'http://www.sencha.com/img/20110215-feat-html5.png',\n    autoEl: 'div', // wrap in a div\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"is":{"!doc":"<p>Determines information about the current platform the application is running on.</p>\n"},"!doc":"<p>The Ext namespace (global object) encapsulates all classes, singletons, and\nutility methods provided by Sencha's libraries.</p>\n\n<p>Most user interface Components are at a lower level of nesting in the namespace,\nbut many common utility functions are provided as direct properties of the Ext namespace.</p>\n\n<p>Also many frequently used methods from other classes are provided as shortcuts\nwithin the Ext namespace. For example <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a> aliases\n<a href=\"#!/api/Ext.ComponentManager-method-get\" rel=\"Ext.ComponentManager-method-get\" class=\"docClass\">Ext.ComponentManager.get</a>.</p>\n\n<p>Many applications are initiated with <a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a> which is\ncalled once the DOM is ready. This ensures all scripts have been loaded,\npreventing dependency issues. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(function(){\n    new <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>({\n        renderTo: document.body,\n        html: 'DOM ready!'\n    });\n});\n</code></pre>\n\n<p>For more information about how to use the Ext classes, see:</p>\n\n<ul>\n<li><a href=\"http://www.sencha.com/learn/\">The Learning Center</a></li>\n<li><a href=\"http://www.sencha.com/learn/Ext_FAQ\">The FAQ</a></li>\n<li><a href=\"http://www.sencha.com/forum/\">The forums</a></li>\n</ul>\n\n","JSON":{"!doc":"<p>Modified version of <a href=\"http://www.json.org/js.html\">Douglas Crockford's JSON.js</a> that doesn't\nmess with the Object prototype.</p>\n"},"Loader":{"!doc":"<p><a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> is the heart of the new dynamic dependency loading capability in Ext JS 4+. It is most commonly used\nvia the <a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a> shorthand. <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> supports both asynchronous and synchronous loading\napproaches, and leverage their advantages for the best development flow. We'll discuss about the pros and cons of each approach:</p>\n\n<h1>Asynchronous Loading</h1>\n\n<ul>\n<li><p>Advantages:</p>\n\n<ul>\n<li>Cross-domain</li>\n<li>No web server needed: you can run the application via the file system protocol (i.e: <code>file://path/to/your/index\n.html</code>)</li>\n<li>Best possible debugging experience: error messages come with the exact file name and line number</li>\n</ul>\n</li>\n<li><p>Disadvantages:</p>\n\n<ul>\n<li>Dependencies need to be specified before-hand</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>Method 1: Explicitly include what you need:</h3>\n\n<pre><code>// Syntax\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>({String/Array} expressions);\n\n// Example: Single alias\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('widget.window');\n\n// Example: Single class name\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>');\n\n// Example: Multiple aliases / class names mix\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>(['widget.window', 'layout.border', '<a href=\"#!/api/Ext.data.Connection\" rel=\"Ext.data.Connection\" class=\"docClass\">Ext.data.Connection</a>']);\n\n// Wildcards\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>(['widget.*', 'layout.*', 'Ext.data.*']);\n</code></pre>\n\n<h3>Method 2: Explicitly exclude what you don't need:</h3>\n\n<pre><code>// Syntax: Note that it must be in this chaining format.\n<a href=\"#!/api/Ext-method-exclude\" rel=\"Ext-method-exclude\" class=\"docClass\">Ext.exclude</a>({String/Array} expressions)\n   .require({String/Array} expressions);\n\n// Include everything except Ext.data.*\n<a href=\"#!/api/Ext-method-exclude\" rel=\"Ext-method-exclude\" class=\"docClass\">Ext.exclude</a>('Ext.data.*').require('*');\n\n// Include all widgets except widget.checkbox*,\n// which will match widget.checkbox, widget.checkboxfield, widget.checkboxgroup, etc.\n<a href=\"#!/api/Ext-method-exclude\" rel=\"Ext-method-exclude\" class=\"docClass\">Ext.exclude</a>('widget.checkbox*').require('widget.*');\n</code></pre>\n\n<h1>Synchronous Loading on Demand</h1>\n\n<ul>\n<li><p>Advantages:</p>\n\n<ul>\n<li>There's no need to specify dependencies before-hand, which is always the convenience of including ext-all.js\nbefore</li>\n</ul>\n</li>\n<li><p>Disadvantages:</p>\n\n<ul>\n<li>Not as good debugging experience since file name won't be shown (except in Firebug at the moment)</li>\n<li>Must be from the same domain due to XHR restriction</li>\n<li>Need a web server, same reason as above</li>\n</ul>\n</li>\n</ul>\n\n\n<p>There's one simple rule to follow: Instantiate everything with <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a> instead of the <code>new</code> keyword</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('widget.window', { ... }); // Instead of new <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>({...});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>', {}); // Same as above, using full class name instead of alias\n\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('window', {}); // Same as above, all you need is the traditional `xtype`\n</code></pre>\n\n<p>Behind the scene, <a href=\"#!/api/Ext.ClassManager\" rel=\"Ext.ClassManager\" class=\"docClass\">Ext.ClassManager</a> will automatically check whether the given class name / alias has already\n existed on the page. If it's not, <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> will immediately switch itself to synchronous mode and automatic load the given\n class and all its dependencies.</p>\n\n<h1>Hybrid Loading - The Best of Both Worlds</h1>\n\n<p>It has all the advantages combined from asynchronous and synchronous loading. The development flow is simple:</p>\n\n<h3>Step 1: Start writing your application using synchronous approach.</h3>\n\n<p><a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> will automatically fetch all dependencies on demand as they're needed during run-time. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(function(){\n    var window = <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('window', {\n        width: 500,\n        height: 300,\n        layout: {\n            type: 'border',\n            padding: 5\n        },\n        title: 'Hello Dialog',\n        items: [{\n            title: 'Navigation',\n            collapsible: true,\n            region: 'west',\n            width: 200,\n            html: 'Hello',\n            split: true\n        }, {\n            title: 'TabPanel',\n            region: 'center'\n        }]\n    });\n\n    window.show();\n})\n</code></pre>\n\n<h3>Step 2: Along the way, when you need better debugging ability, watch the console for warnings like these:</h3>\n\n<pre><code>[<a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>] Synchronously loading '<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>'; consider adding <a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>') before your application's code\nClassManager.js:432\n[<a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>] Synchronously loading '<a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a>'; consider adding <a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a>') before your application's code\n</code></pre>\n\n<p>Simply copy and paste the suggested code above <code><a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a></code>, i.e:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>');\n<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a>');\n\n<a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>(...);\n</code></pre>\n\n<p>Everything should now load via asynchronous mode.</p>\n\n<h1>Deployment</h1>\n\n<p>It's important to note that dynamic loading should only be used during development on your local machines.\nDuring production, all dependencies should be combined into one single JavaScript file. <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a> makes\nthe whole process of transitioning from / to between development / maintenance and production as easy as\npossible. Internally <a href=\"#!/api/Ext.Loader-property-history\" rel=\"Ext.Loader-property-history\" class=\"docClass\">Ext.Loader.history</a> maintains the list of all dependencies your application\nneeds in the exact loading sequence. It's as simple as concatenating all files in this array into one,\nthen include it on top of your application.</p>\n\n<p>This process will be automated with Sencha Command, to be released and documented towards Ext JS 4 Final.</p>\n"},"LoadMask":{"!doc":"<p>A modal, floating Component which may be shown above a specified <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> while loading data.\nWhen shown, the configured owning Component will be covered with a modality mask, and the LoadMask's <a href=\"#!/api/Ext.LoadMask-cfg-msg\" rel=\"Ext.LoadMask-cfg-msg\" class=\"docClass\">msg</a> will be\ndisplayed centered, accompanied by a spinner image.</p>\n\n<p>If the <a href=\"#!/api/Ext.LoadMask-cfg-store\" rel=\"Ext.LoadMask-cfg-store\" class=\"docClass\">store</a> config option is specified, the masking will be automatically shown and then hidden synchronized with\nthe Store's loading process.</p>\n\n<p>Because this is a floating Component, its z-index will be managed by the global <a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">ZIndexManager</a>\nobject, and upon show, it will place itsef at the top of the hierarchy.</p>\n\n<p>Example usage:</p>\n\n<pre><code>// Basic mask:\nvar myMask = new <a href=\"#!/api/Ext.LoadMask\" rel=\"Ext.LoadMask\" class=\"docClass\">Ext.LoadMask</a>(myPanel, {msg:\"Please wait...\"});\nmyMask.show();\n</code></pre>\n"},"menu":{"CheckItem":{"!doc":"<p>A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 110,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        xtype: 'menucheckitem',\n        text: 'select all'\n    },{\n        xtype: 'menucheckitem',\n        text: 'select specific'\n    },{\n        iconCls: 'add16',\n        text: 'icon item'\n    },{\n        text: 'regular item'\n    }]\n});\n</code></pre>\n"},"Item":{"!doc":"<p>A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        text: 'text item'\n    },{\n        text: 'plain item',\n        plain: true\n    }]\n});\n</code></pre>\n"},"ColorPicker":{"!doc":"<p>A menu containing a <a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a> Component.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Although not listed here, the <strong>constructor</strong> for this class accepts all of the\nconfiguration options of <a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a>.</li>\n<li>If subclassing ColorMenu, any configuration options for the ColorPicker must be\napplied to the <strong>initialConfig</strong> property of the ColorMenu. Applying\n<a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">ColorPicker</a> configuration settings to <code>this</code> will <strong>not</strong>\naffect the ColorPicker's configuration.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>var colorPicker = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.ColorPicker\" rel=\"Ext.menu.ColorPicker\" class=\"docClass\">Ext.menu.ColorPicker</a>', {\n    value: '000000'\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 90,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'choose a color',\n        menu: colorPicker\n    },{\n        iconCls: 'add16',\n        text: 'icon item'\n    },{\n        text: 'regular item'\n    }]\n});\n</code></pre>\n"},"Menu":{"!doc":"<p>A menu object. This is the container to which you may add <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a>.</p>\n\n<p>Menus may contain either <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a>, or general <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Components</a>.\nMenus may also contain <a href=\"#!/api/Ext.panel.AbstractPanel-cfg-dockedItems\" rel=\"Ext.panel.AbstractPanel-cfg-dockedItems\" class=\"docClass\">docked items</a> because it extends <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>.</p>\n\n<p>By default, non <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a> are indented so that they line up with the text of menu items. clearing\nthe icon column. To make a contained general <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> left aligned configure the child\nComponent with `indent: false.</p>\n\n<p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with <code><a href=\"#!/api/Ext.menu.Menu-cfg-floating\" rel=\"Ext.menu.Menu-cfg-floating\" class=\"docClass\">floating</a>: false</code>,\na Menu may be used as a child of a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    margin: '0 0 10 0',\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'regular item 1'\n    },{\n        text: 'regular item 2'\n    },{\n        text: 'regular item 3'\n    }]\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    plain: true,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'plain item 1'\n    },{\n        text: 'plain item 2'\n    },{\n        text: 'plain item 3'\n    }]\n});\n</code></pre>\n"},"DatePicker":{"!doc":"<p>A menu containing an <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Ext.picker.Date</a> Component.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Although not listed here, the <strong>constructor</strong> for this class accepts all of the\nconfiguration options of <strong><a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Ext.picker.Date</a></strong>.</li>\n<li>If subclassing DateMenu, any configuration options for the DatePicker must be applied\nto the <strong>initialConfig</strong> property of the DateMenu. Applying <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Date Picker</a>\nconfiguration settings to <strong>this</strong> will <strong>not</strong> affect the Date Picker's configuration.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>var dateMenu = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.DatePicker\" rel=\"Ext.menu.DatePicker\" class=\"docClass\">Ext.menu.DatePicker</a>', {\n    handler: function(dp, date){\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Date Selected', 'You selected ' + <a href=\"#!/api/Ext.Date-method-format\" rel=\"Ext.Date-method-format\" class=\"docClass\">Ext.Date.format</a>(date, 'M j, Y'));\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 90,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'choose a date',\n        menu: dateMenu\n    },{\n        iconCls: 'add16',\n        text: 'icon item'\n    },{\n        text: 'regular item'\n    }]\n});\n</code></pre>\n"},"KeyNav":{"!doc":"\n"},"Manager":{"!doc":"<p>Provides a common registry of all menus on a page.</p>\n"},"Separator":{"!doc":"<p>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will\nadd one of these by using \"-\" in your call to add() or in your items config rather than creating one directly.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        xtype: 'menuseparator'\n    },{\n       text: 'separator above'\n    },{\n       text: 'regular item'\n    }]\n});\n</code></pre>\n"}},"MessageBox":{"!doc":"<p>Singleton instance of <a href=\"#!/api/Ext.window.MessageBox\" rel=\"Ext.window.MessageBox\" class=\"docClass\">Ext.window.MessageBox</a>.</p>\n"},"window":{"Window":{"!doc":"<p>A specialized panel intended for use as an application window. Windows are floated, <a href=\"#!/api/Ext.window.Window-cfg-resizable\" rel=\"Ext.window.Window-cfg-resizable\" class=\"docClass\">resizable</a>, and\n<a href=\"#!/api/Ext.window.Window-cfg-draggable\" rel=\"Ext.window.Window-cfg-draggable\" class=\"docClass\">draggable</a> by default. Windows can be <a href=\"#!/api/Ext.window.Window-cfg-maximizable\" rel=\"Ext.window.Window-cfg-maximizable\" class=\"docClass\">maximized</a> to fill the viewport, restored to\ntheir prior size, and can be <a href=\"#!/api/Ext.window.Window-method-minimize\" rel=\"Ext.window.Window-method-minimize\" class=\"docClass\">minimize</a>d.</p>\n\n<p>Windows can also be linked to a <a href=\"#!/api/Ext.ZIndexManager\" rel=\"Ext.ZIndexManager\" class=\"docClass\">Ext.ZIndexManager</a> or managed by the <a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">Ext.WindowManager</a> to provide\ngrouping, activation, to front, to back and other application-specific behavior.</p>\n\n<p>By default, Windows will be rendered to document.body. To <a href=\"#!/api/Ext.window.Window-cfg-constrain\" rel=\"Ext.window.Window-cfg-constrain\" class=\"docClass\">constrain</a> a Window to another element specify\n<a href=\"#!/api/Ext.Component-cfg-renderTo\" rel=\"Ext.Component-cfg-renderTo\" class=\"docClass\">renderTo</a>.</p>\n\n<p><strong>As with all <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>s, it is important to consider how you want the Window to size\nand arrange any child Components. Choose an appropriate <a href=\"#!/api/Ext.window.Window-cfg-layout\" rel=\"Ext.window.Window-cfg-layout\" class=\"docClass\">layout</a> configuration which lays out child Components\nin the required manner.</strong></p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>', {\n    title: 'Hello',\n    height: 200,\n    width: 400,\n    layout: 'fit',\n    items: {  // Let's put an empty grid in just to illustrate fit layout\n        xtype: 'grid',\n        border: false,\n        columns: [{header: 'World'}],                 // One header just for show. There's no data,\n        store: <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.ArrayStore\" rel=\"Ext.data.ArrayStore\" class=\"docClass\">Ext.data.ArrayStore</a>', {}) // A dummy empty data store\n    }\n}).show();\n</code></pre>\n"},"MessageBox":{"!doc":"<p>Utility class for generating different styles of message boxes.  The singleton instance, <a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.MessageBox</a>\nalias <code><a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.Msg</a></code> can also be used.</p>\n\n<p>Note that a MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt\nbrowser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code\nthat should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function\n(see the <code>function</code> parameter for <a href=\"#!/api/Ext.window.MessageBox-method-show\" rel=\"Ext.window.MessageBox-method-show\" class=\"docClass\">show</a> for more details).</p>\n\n<p>Basic alert</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Status', 'Changes saved successfully.');\n</code></pre>\n\n<p>Prompt for user data and process the result using a callback</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-prompt\" rel=\"Ext.MessageBox-method-prompt\" class=\"docClass\">Ext.Msg.prompt</a>('Name', 'Please enter your name:', function(btn, text){\n    if (btn == 'ok'){\n        // process text value and close...\n    }\n});\n</code></pre>\n\n<p>Show a dialog using config options</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-show\" rel=\"Ext.MessageBox-method-show\" class=\"docClass\">Ext.Msg.show</a>({\n     title:'Save Changes?',\n     msg: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\n     buttons: <a href=\"#!/api/Ext.MessageBox-property-YESNOCANCEL\" rel=\"Ext.MessageBox-property-YESNOCANCEL\" class=\"docClass\">Ext.Msg.YESNOCANCEL</a>,\n     icon: <a href=\"#!/api/Ext.MessageBox-property-QUESTION\" rel=\"Ext.MessageBox-property-QUESTION\" class=\"docClass\">Ext.Msg.QUESTION</a>\n});\n</code></pre>\n"}},"ModelManager":{"!doc":"<p>The ModelManager keeps track of all <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a> types defined in your application.</p>\n\n<p><strong>Creating Model Instances</strong></p>\n\n<p>Model instances can be created by using the <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a> method. <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a> replaces\nthe deprecated <a href=\"#!/api/Ext.ModelManager-method-create\" rel=\"Ext.ModelManager-method-create\" class=\"docClass\">Ext.ModelManager.create</a> method. It is also possible to create a model instance\nthis by using the Model type directly. The following 3 snippets are equivalent:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['first', 'last']\n});\n\n// method 1, create using <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a> (recommended)\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('User', {\n    first: 'Ed',\n    last: 'Spencer'\n});\n\n// method 2, create through the manager (deprecated)\n<a href=\"#!/api/Ext.ModelManager-method-create\" rel=\"Ext.ModelManager-method-create\" class=\"docClass\">Ext.ModelManager.create</a>({\n    first: 'Ed',\n    last: 'Spencer'\n}, 'User');\n\n// method 3, create on the type directly\nnew User({\n    first: 'Ed',\n    last: 'Spencer'\n});\n</code></pre>\n\n<p><strong>Accessing Model Types</strong></p>\n\n<p>A reference to a Model type can be obtained by using the <a href=\"#!/api/Ext.ModelManager-method-getModel\" rel=\"Ext.ModelManager-method-getModel\" class=\"docClass\">getModel</a> function. Since models types\nare normal classes, you can access the type directly. The following snippets are equivalent:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    fields: ['first', 'last']\n});\n\n// method 1, access model type through the manager\nvar UserType = <a href=\"#!/api/Ext.ModelManager-method-getModel\" rel=\"Ext.ModelManager-method-getModel\" class=\"docClass\">Ext.ModelManager.getModel</a>('User');\n\n// method 2, reference the type directly\nvar UserType = User;\n</code></pre>\n"},"Number":{"!doc":"<p>A collection of useful static methods to deal with numbers</p>\n"},"Object":{"!doc":"<p>A collection of useful static methods to deal with objects.</p>\n"},"perf":{"Accumulator":{"!doc":"\n"},"Monitor":{"!doc":"\n"}},"picker":{"Color":{"!doc":"<p>Color picker provides a simple color palette for choosing colors. The picker can be rendered to any container. The\navailable default to a standard 40-color palette; this can be customized with the <a href=\"#!/api/Ext.picker.Color-property-colors\" rel=\"Ext.picker.Color-property-colors\" class=\"docClass\">colors</a> config.</p>\n\n<p>Typically you will need to implement a handler function to be notified when the user chooses a color from the picker;\nyou can register the handler using the <a href=\"#!/api/Ext.picker.Color-event-select\" rel=\"Ext.picker.Color-event-select\" class=\"docClass\">select</a> event, or by implementing the <a href=\"#!/api/Ext.picker.Color-cfg-handler\" rel=\"Ext.picker.Color-cfg-handler\" class=\"docClass\">handler</a> method.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a>', {\n    value: '993300',  // initial selected color\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    listeners: {\n        select: function(picker, selColor) {\n            alert(selColor);\n        }\n    }\n});\n</code></pre>\n"},"Date":{"!doc":"<p>A date picker. This class is used by the <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> field to allow browsing and selection of valid\ndates in a popup next to the field, but may also be used with other components.</p>\n\n<p>Typically you will need to implement a handler function to be notified when the user chooses a date from the picker;\nyou can register the handler using the <a href=\"#!/api/Ext.picker.Date-event-select\" rel=\"Ext.picker.Date-event-select\" class=\"docClass\">select</a> event, or by implementing the <a href=\"#!/api/Ext.picker.Date-cfg-handler\" rel=\"Ext.picker.Date-cfg-handler\" class=\"docClass\">handler</a> method.</p>\n\n<p>By default the user will be allowed to pick any date; this can be changed by using the <a href=\"#!/api/Ext.picker.Date-cfg-minDate\" rel=\"Ext.picker.Date-cfg-minDate\" class=\"docClass\">minDate</a>,\n<a href=\"#!/api/Ext.picker.Date-cfg-maxDate\" rel=\"Ext.picker.Date-cfg-maxDate\" class=\"docClass\">maxDate</a>, <a href=\"#!/api/Ext.picker.Date-cfg-disabledDays\" rel=\"Ext.picker.Date-cfg-disabledDays\" class=\"docClass\">disabledDays</a>, <a href=\"#!/api/Ext.picker.Date-cfg-disabledDatesRE\" rel=\"Ext.picker.Date-cfg-disabledDatesRE\" class=\"docClass\">disabledDatesRE</a>, and/or <a href=\"#!/api/Ext.picker.Date-cfg-disabledDates\" rel=\"Ext.picker.Date-cfg-disabledDates\" class=\"docClass\">disabledDates</a> configs.</p>\n\n<p>All the string values documented below may be overridden by including an Ext locale file in your page.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Choose a future date:',\n    width: 200,\n    bodyPadding: 10,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    items: [{\n        xtype: 'datepicker',\n        minDate: new Date(),\n        handler: function(picker, date) {\n            // do something with the selected date\n        }\n    }]\n});\n</code></pre>\n"},"Month":{"!doc":"<p>A month picker component. This class is used by the <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Date picker</a> class\nto allow browsing and selection of year/months combinations.</p>\n"},"Time":{"!doc":"<p>A time picker which provides a list of times from which to choose. This is used by the <a href=\"#!/api/Ext.form.field.Time\" rel=\"Ext.form.field.Time\" class=\"docClass\">Ext.form.field.Time</a>\nclass to allow browsing and selection of valid times, but could also be used with other components.</p>\n\n<p>By default, all times starting at midnight and incrementing every 15 minutes will be presented. This list of\navailable times can be controlled using the <a href=\"#!/api/Ext.picker.Time-cfg-minValue\" rel=\"Ext.picker.Time-cfg-minValue\" class=\"docClass\">minValue</a>, <a href=\"#!/api/Ext.picker.Time-cfg-maxValue\" rel=\"Ext.picker.Time-cfg-maxValue\" class=\"docClass\">maxValue</a>, and <a href=\"#!/api/Ext.picker.Time-cfg-increment\" rel=\"Ext.picker.Time-cfg-increment\" class=\"docClass\">increment</a>\nconfiguration properties. The format of the times presented in the list can be customized with the <a href=\"#!/api/Ext.picker.Time-cfg-format\" rel=\"Ext.picker.Time-cfg-format\" class=\"docClass\">format</a>\nconfig.</p>\n\n<p>To handle when the user selects a time from the list, you can subscribe to the <a href=\"#!/api/Ext.picker.Time-event-selectionchange\" rel=\"Ext.picker.Time-event-selectionchange\" class=\"docClass\">selectionchange</a> event.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.picker.Time\" rel=\"Ext.picker.Time\" class=\"docClass\">Ext.picker.Time</a>', {\n   width: 60,\n   minValue: <a href=\"#!/api/Ext.Date-method-parse\" rel=\"Ext.Date-method-parse\" class=\"docClass\">Ext.Date.parse</a>('04:30:00 AM', 'h:i:s A'),\n   maxValue: <a href=\"#!/api/Ext.Date-method-parse\" rel=\"Ext.Date-method-parse\" class=\"docClass\">Ext.Date.parse</a>('08:00:00 AM', 'h:i:s A'),\n   renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"PluginManager":{"!doc":"<p>Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin's ptype.</p>\n\n<p>A plugin may be specified simply as a <em>config object</em> as long as the correct <code>ptype</code> is specified:</p>\n\n<pre><code>{\n    ptype: 'gridviewdragdrop',\n    dragText: 'Drag and drop to reorganize'\n}\n</code></pre>\n\n<p>Or just use the ptype on its own:</p>\n\n<pre><code>'gridviewdragdrop'\n</code></pre>\n\n<p>Alternatively you can instantiate the plugin with <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">Ext.grid.plugin.DragDrop</a>', {\n    dragText: 'Drag and drop to reorganize'\n})\n</code></pre>\n"},"ProgressBar":{"!doc":"<p>An updateable progress bar component. The progress bar supports two different modes: manual and automatic.</p>\n\n<p>In manual mode, you are responsible for showing, updating (via <a href=\"#!/api/Ext.ProgressBar-method-updateProgress\" rel=\"Ext.ProgressBar-method-updateProgress\" class=\"docClass\">updateProgress</a>) and clearing the progress bar\nas needed from your own code. This method is most appropriate when you want to show progress throughout an operation\nthat has predictable points of interest at which you can update the control.</p>\n\n<p>In automatic mode, you simply call <a href=\"#!/api/Ext.ProgressBar-method-wait\" rel=\"Ext.ProgressBar-method-wait\" class=\"docClass\">wait</a> and let the progress bar run indefinitely, only clearing it once the\noperation is complete. You can optionally have the progress bar wait for a specific amount of time and then clear\nitself. Automatic mode is most appropriate for timed operations or asynchronous operations in which you have no need\nfor indicating intermediate progress.</p>\n\n<pre class='inline-example '><code>var p = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.ProgressBar\" rel=\"Ext.ProgressBar\" class=\"docClass\">Ext.ProgressBar</a>', {\n   renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n   width: 300\n});\n\n// Wait for 5 seconds, then update the status el (progress bar will auto-reset)\np.wait({\n    interval: 500, //bar will move fast!\n    duration: 50000,\n    increment: 15,\n    text: 'Updating...',\n    scope: this,\n    fn: function(){\n        p.updateText('Done!');\n    }\n});\n</code></pre>\n"},"resizer":{"BorderSplitter":{"!doc":"<p>Private utility class for <a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a>.</p>\n"},"Splitter":{"!doc":"<p>This class functions <strong>between siblings of a <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">VBox</a> or <a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">HBox</a>\nlayout</strong> to resize both immediate siblings.</p>\n\n<p>A Splitter will preserve the flex ratio of any flexed siblings it is required to resize. It does this by setting the <code>flex</code> property of <em>all</em> flexed siblings\nto equal their pixel size. The actual numerical <code>flex</code> property in the Components will change, but the <strong>ratio</strong> to the total flex value will be preserved.</p>\n\n<p>A Splitter may be configured to show a centered mini-collapse tool orientated to collapse the <a href=\"#!/api/Ext.resizer.Splitter-cfg-collapseTarget\" rel=\"Ext.resizer.Splitter-cfg-collapseTarget\" class=\"docClass\">collapseTarget</a>.\nThe Splitter will then call that sibling Panel's <a href=\"#!/api/Ext.panel.Panel-method-collapse\" rel=\"Ext.panel.Panel-method-collapse\" class=\"docClass\">collapse</a> or <a href=\"#!/api/Ext.panel.Panel-method-expand\" rel=\"Ext.panel.Panel-method-expand\" class=\"docClass\">expand</a> method\nto perform the appropriate operation (depending on the sibling collapse state). To create the mini-collapse tool but take care\nof collapsing yourself, configure the splitter with <code><a href=\"#!/api/Ext.resizer.Splitter-cfg-performCollapse\" rel=\"Ext.resizer.Splitter-cfg-performCollapse\" class=\"docClass\">performCollapse</a>: false</code>.</p>\n"},"BorderSplitterTracker":{"!doc":"<p>Private utility class for Ext.BorderSplitter.</p>\n"},"SplitterTracker":{"!doc":"<p>Private utility class for Ext.Splitter.</p>\n"},"Handle":{"!doc":"<p>Provides a handle for 9-point resizing of Elements or Components.</p>\n"},"Resizer":{"!doc":"<p>Applies drag handles to an element or component to make it resizable. The drag handles are inserted into the element\n(or component's element) and positioned absolute.</p>\n\n<p>Textarea and img elements will be wrapped with an additional div because these elements do not support child nodes.\nThe original element can be accessed through the originalTarget property.</p>\n\n<p>Here is the list of valid resize handles:</p>\n\n<pre><code>Value   Description\n------  -------------------\n 'n'     north\n 's'     south\n 'e'     east\n 'w'     west\n 'nw'    northwest\n 'sw'    southwest\n 'se'    southeast\n 'ne'    northeast\n 'all'   all\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Ext.resizer.Resizer component\" width=\"\" height=\"\"></p></p>\n\n<p>Here's an example showing the creation of a typical Resizer:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.resizer.Resizer\" rel=\"Ext.resizer.Resizer\" class=\"docClass\">Ext.resizer.Resizer</a>', {\n    el: 'elToResize',\n    handles: 'all',\n    minWidth: 200,\n    minHeight: 100,\n    maxWidth: 500,\n    maxHeight: 400,\n    pinned: true\n});\n</code></pre>\n"},"ResizeTracker":{"!doc":"<p>Private utility class for <a href=\"#!/api/Ext.resizer.Resizer\" rel=\"Ext.resizer.Resizer\" class=\"docClass\">Ext.resizer.Resizer</a>.</p>\n"}},"selection":{"CellModel":{"!doc":"\n"},"Model":{"!doc":"<p>Tracks what records are currently selected in a databound component.</p>\n\n<p>This is an abstract class and is not meant to be directly used. Databound UI widgets such as\n<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> and <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Tree</a> should subclass <a href=\"#!/api/Ext.selection.Model\" rel=\"Ext.selection.Model\" class=\"docClass\">Ext.selection.Model</a>\nand provide a way to binding to the component.</p>\n\n<p>The abstract methods <code>onSelectChange</code> and <code>onLastFocusChanged</code> should be implemented in these\nsubclasses to update the UI widget.</p>\n"},"CheckboxModel":{"!doc":"<p>A selection model that renders a column of checkboxes that can be toggled to\nselect or deselect rows. The default mode for this selection model is MULTI.</p>\n\n<p>The selection model will inject a header for the checkboxes in the first view\nand according to the <a href=\"#!/api/Ext.selection.CheckboxModel-cfg-injectCheckbox\" rel=\"Ext.selection.CheckboxModel-cfg-injectCheckbox\" class=\"docClass\">injectCheckbox</a> configuration.</p>\n"},"RowModel":{"!doc":"<p>Implements row based navigation via keyboard.</p>\n\n<p>Must synchronize across grid sections.</p>\n"},"DataViewModel":{"!doc":"\n"},"TreeModel":{"!doc":"<p>Adds custom behavior for left/right keyboard navigation for use with a tree.\nDepends on the view having an expand and collapse method which accepts a\nrecord. This selection model is created by default for <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>.</p>\n"}},"Shadow":{"!doc":"<p>Simple class that can provide a shadow effect for any element.  Note that the element\nMUST be absolutely positioned, and the shadow does not provide any shimming.  This\nshould be used only in simple cases - for more advanced functionality that can also\nprovide the same shadow effect, see the <a href=\"#!/api/Ext.dom.Layer\" rel=\"Ext.dom.Layer\" class=\"docClass\">Ext.Layer</a> class.</p>\n"},"ShadowPool":{"!doc":"<p>Private utility class that manages the internal Shadow cache.</p>\n"},"slider":{"Multi":{"!doc":"<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>\n\n<p>Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>', {\n    width: 200,\n    values: [25, 50, 75],\n    increment: 5,\n    minValue: 0,\n    maxValue: 100,\n\n    // this defaults to true, setting to false allows the thumbs to pass each other\n    constrainThumbs: false,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Single":{"!doc":"<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 200,\n    value: 50,\n    increment: 10,\n    minValue: 0,\n    maxValue: 100,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The class <a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a> is aliased to <a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.Slider</a> for backwards compatibility.</p>\n"},"Thumb":{"!doc":"<p>Represents a single thumb element on a Slider. This would not usually be created manually and would instead\nbe created internally by an <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Multi slider</a>.</p>\n"},"Tip":{"!doc":"<p>Simple plugin for using an <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> with a slider to show the slider value. In general this class is not created\ndirectly, instead pass the <a href=\"#!/api/Ext.slider.Multi-cfg-useTips\" rel=\"Ext.slider.Multi-cfg-useTips\" class=\"docClass\">Ext.slider.Multi.useTips</a> and <a href=\"#!/api/Ext.slider.Multi-cfg-tipText\" rel=\"Ext.slider.Multi-cfg-tipText\" class=\"docClass\">Ext.slider.Multi.tipText</a> configuration\noptions to the slider directly.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Optionally provide your own tip text by passing tipText:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    tipText: function(thumb){\n        return <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>('**{0}% complete**', thumb.value);\n    },\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"tip":{"Tip":{"!doc":"<p>This is the base class for <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> and <a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a> that provides the basic layout and\npositioning that all tip-based classes require. This class can be used directly for simple, statically-positioned\ntips that are displayed programmatically, or it can be extended to provide custom tip implementations.</p>\n"},"QuickTip":{"!doc":"<p>A specialized tooltip class for tooltips that can be specified in markup and automatically managed\nby the global <a href=\"#!/api/Ext.tip.QuickTipManager\" rel=\"Ext.tip.QuickTipManager\" class=\"docClass\">Ext.tip.QuickTipManager</a> instance.  See the QuickTipManager documentation for\nadditional usage details and examples.</p>\n"},"ToolTip":{"!doc":"<p>ToolTip is a <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> implementation that handles the common case of displaying a\ntooltip when hovering over a certain element or elements on the page. It allows fine-grained\ncontrol over the tooltip's alignment relative to the target element or mouse, and the timing\nof when it is automatically shown and hidden.</p>\n\n<p>This implementation does <strong>not</strong> have a built-in method of automatically populating the tooltip's\ntext based on the target element; you must either configure a fixed <a href=\"#!/api/Ext.tip.ToolTip-cfg-html\" rel=\"Ext.tip.ToolTip-cfg-html\" class=\"docClass\">html</a> value for each\nToolTip instance, or implement custom logic (e.g. in a <a href=\"#!/api/Ext.tip.ToolTip-event-beforeshow\" rel=\"Ext.tip.ToolTip-event-beforeshow\" class=\"docClass\">beforeshow</a> event listener) to\ngenerate the appropriate tooltip content on the fly. See <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> for a more\nconvenient way of automatically populating and configuring a tooltip based on specific DOM\nattributes of each target element.</p>\n\n<h1>Basic Example</h1>\n\n<pre><code>var tip = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>', {\n    target: 'clearButton',\n    html: 'Press this button to clear the form'\n});\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Basic Ext.tip.ToolTip\" width=\"\" height=\"\"></p></p>\n\n<h1>Delegation</h1>\n\n<p>In addition to attaching a ToolTip to a single element, you can also use delegation to attach\none ToolTip to many elements under a common parent. This is more efficient than creating many\nToolTip instances. To do this, point the <a href=\"#!/api/Ext.tip.ToolTip-cfg-target\" rel=\"Ext.tip.ToolTip-cfg-target\" class=\"docClass\">target</a> config to a common ancestor of all the\nelements, and then set the <a href=\"#!/api/Ext.tip.ToolTip-cfg-delegate\" rel=\"Ext.tip.ToolTip-cfg-delegate\" class=\"docClass\">delegate</a> config to a CSS selector that will select all the\nappropriate sub-elements.</p>\n\n<p>When using delegation, it is likely that you will want to programmatically change the content\nof the ToolTip based on each delegate element; you can do this by implementing a custom\nlistener for the <a href=\"#!/api/Ext.tip.ToolTip-event-beforeshow\" rel=\"Ext.tip.ToolTip-event-beforeshow\" class=\"docClass\">beforeshow</a> event. Example:</p>\n\n<pre><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.ArrayStore\" rel=\"Ext.data.ArrayStore\" class=\"docClass\">Ext.data.ArrayStore</a>', {\n    fields: ['company', 'price', 'change'],\n    data: [\n        ['3m Co',                               71.72, 0.02],\n        ['Alcoa Inc',                           29.01, 0.42],\n        ['Altria Group Inc',                    83.81, 0.28],\n        ['American Express Company',            52.55, 0.01],\n        ['American International Group, Inc.',  64.13, 0.31],\n        ['AT&amp;T Inc.',                           31.61, -0.48]\n    ]\n});\n\nvar grid = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Array Grid',\n    store: store,\n    columns: [\n        {text: 'Company', flex: 1, dataIndex: 'company'},\n        {text: 'Price', width: 75, dataIndex: 'price'},\n        {text: 'Change', width: 75, dataIndex: 'change'}\n    ],\n    height: 200,\n    width: 400,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\nvar view = grid.getView();\nvar tip = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>', {\n    // The overall target element.\n    target: view.el,\n    // Each grid row causes its own separate show and hide.\n    delegate: view.itemSelector,\n    // Moving within the row should not hide the tip.\n    trackMouse: true,\n    // Render immediately so that tip.body can be referenced prior to the first show.\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    listeners: {\n        // Change content dynamically depending on which element triggered the show.\n        beforeshow: function updateTipBody(tip) {\n            tip.update('Over company \"' + view.getRecord(tip.triggerElement).get('company') + '\"');\n        }\n    }\n});\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Ext.tip.ToolTip with delegation\" width=\"\" height=\"\"></p></p>\n\n<h1>Alignment</h1>\n\n<p>The following configuration properties allow control over how the ToolTip is aligned relative to\nthe target element and/or mouse pointer:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchor\" rel=\"Ext.tip.ToolTip-cfg-anchor\" class=\"docClass\">anchor</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchorToTarget\" rel=\"Ext.tip.ToolTip-cfg-anchorToTarget\" class=\"docClass\">anchorToTarget</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchorOffset\" rel=\"Ext.tip.ToolTip-cfg-anchorOffset\" class=\"docClass\">anchorOffset</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-trackMouse\" rel=\"Ext.tip.ToolTip-cfg-trackMouse\" class=\"docClass\">trackMouse</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-mouseOffset\" rel=\"Ext.tip.ToolTip-cfg-mouseOffset\" class=\"docClass\">mouseOffset</a></li>\n</ul>\n\n\n<h1>Showing/Hiding</h1>\n\n<p>The following configuration properties allow control over how and when the ToolTip is automatically\nshown and hidden:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-autoHide\" rel=\"Ext.tip.ToolTip-cfg-autoHide\" class=\"docClass\">autoHide</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-showDelay\" rel=\"Ext.tip.ToolTip-cfg-showDelay\" class=\"docClass\">showDelay</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-hideDelay\" rel=\"Ext.tip.ToolTip-cfg-hideDelay\" class=\"docClass\">hideDelay</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-dismissDelay\" rel=\"Ext.tip.ToolTip-cfg-dismissDelay\" class=\"docClass\">dismissDelay</a></li>\n</ul>\n\n"},"QuickTipManager":{"!doc":"<p>Provides attractive and customizable tooltips for any element. The QuickTips\nsingleton is used to configure and manage tooltips globally for multiple elements\nin a generic manner.  To create individual tooltips with maximum customizability,\nyou should consider either <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> or <a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>.</p>\n\n<p>Quicktips can be configured via tag attributes directly in markup, or by\nregistering quick tips programmatically via the <a href=\"#!/api/Ext.tip.QuickTipManager-method-register\" rel=\"Ext.tip.QuickTipManager-method-register\" class=\"docClass\">register</a> method.</p>\n\n<p>The singleton's instance of <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> is available via\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-getQuickTip\" rel=\"Ext.tip.QuickTipManager-method-getQuickTip\" class=\"docClass\">getQuickTip</a>, and supports all the methods, and all the all the\nconfiguration properties of <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a>. These settings will apply to all\ntooltips shown by the singleton.</p>\n\n<p>Below is the summary of the configuration properties which can be used.\nFor detailed descriptions see the config options for the\n<a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">QuickTip</a> class</p>\n\n<h2>QuickTips singleton configs (all are optional)</h2>\n\n<ul>\n<li><code>dismissDelay</code></li>\n<li><code>hideDelay</code></li>\n<li><code>maxWidth</code></li>\n<li><code>minWidth</code></li>\n<li><code>showDelay</code></li>\n<li><code>trackMouse</code></li>\n</ul>\n\n\n<h2>Target element configs (optional unless otherwise noted)</h2>\n\n<ul>\n<li><code>autoHide</code></li>\n<li><code>cls</code></li>\n<li><code>dismissDelay</code> (overrides singleton value)</li>\n<li><code>target</code> (required)</li>\n<li><code>text</code> (required)</li>\n<li><code>title</code></li>\n<li><code>width</code></li>\n</ul>\n\n\n<p>Here is an example showing how some of these config options could be used:</p>\n\n<pre class='inline-example '><code>// Init the singleton.  Any tag-based quick tips will start working.\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();\n\n// Apply a set of config properties to the singleton\n<a href=\"#!/api/Ext-method-apply\" rel=\"Ext-method-apply\" class=\"docClass\">Ext.apply</a>(<a href=\"#!/api/Ext.tip.QuickTipManager-method-getQuickTip\" rel=\"Ext.tip.QuickTipManager-method-getQuickTip\" class=\"docClass\">Ext.tip.QuickTipManager.getQuickTip</a>(), {\n    maxWidth: 200,\n    minWidth: 100,\n    showDelay: 50      // Show 50ms after entering target\n});\n\n// Create a small panel to add a quick tip to\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>', {\n    id: 'quickTipContainer',\n    width: 200,\n    height: 150,\n    style: {\n        backgroundColor:'#000000'\n    },\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n\n// Manually register a quick tip for a specific element\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-register\" rel=\"Ext.tip.QuickTipManager-method-register\" class=\"docClass\">Ext.tip.QuickTipManager.register</a>({\n    target: 'quickTipContainer',\n    title: 'My Tooltip',\n    text: 'This tooltip was added in code',\n    width: 100,\n    dismissDelay: 10000 // Hide after 10 seconds hover\n});\n</code></pre>\n\n<p>To register a quick tip in markup, you simply add one or more of the valid QuickTip\nattributes prefixed with the <strong>data-</strong> namespace.  The HTML element itself is\nautomatically set as the quick tip target. Here is the summary of supported attributes\n(optional unless otherwise noted):</p>\n\n<ul>\n<li><code>hide</code>: Specifying \"user\" is equivalent to setting autoHide = false.\n Any other value will be the same as autoHide = true.</li>\n<li><code>qclass</code>: A CSS class to be applied to the quick tip\n (equivalent to the 'cls' target element config).</li>\n<li><code>qtip (required)</code>: The quick tip text (equivalent to the 'text' target element config).</li>\n<li><code>qtitle</code>: The quick tip title (equivalent to the 'title' target element config).</li>\n<li><code>qwidth</code>: The quick tip width (equivalent to the 'width' target element config).</li>\n</ul>\n\n\n<p>Here is an example of configuring an HTML element to display a tooltip from markup:</p>\n\n<pre><code>// Add a quick tip to an HTML button\n&lt;input type=\"button\" value=\"OK\" data-qtitle=\"OK Button\" data-qwidth=\"100\"\n     data-qtip=\"This is a quick tip from markup!\"&gt;&lt;/input&gt;\n</code></pre>\n"}},"String":{"!doc":"<p>A collection of useful static methods to deal with strings.</p>\n"},"supports":{"!doc":"<p>Determines information about features are supported in the current environment</p>\n"},"tab":{"Bar":{"!doc":"<p>TabBar is used internally by a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a> and typically should not need to be created manually.\nThe tab bar automatically removes the default title provided by <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">Ext.panel.Header</a></p>\n"},"Panel":{"!doc":"<p>A basic tab container. TabPanels can be used exactly like a standard <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> for\nlayout purposes, but also have special support for containing child Components\n(<code><a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a></code>) that are managed using a\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">CardLayout layout manager</a>, and displayed as separate tabs.</p>\n\n<p><strong>Note:</strong> By default, a tab's close tool <em>destroys</em> the child tab Component and all its descendants.\nThis makes the child tab Component, and all its descendants <strong>unusable</strong>.  To enable re-use of a tab,\nconfigure the TabPanel with <code><a href=\"#!/api/Ext.tab.Panel-cfg-autoDestroy\" rel=\"Ext.tab.Panel-cfg-autoDestroy\" class=\"docClass\">autoDestroy: false</a></code>.</p>\n\n<h2>TabPanel's layout</h2>\n\n<p>TabPanels use a Dock layout to position the <a href=\"#!/api/Ext.tab.Bar\" rel=\"Ext.tab.Bar\" class=\"docClass\">TabBar</a> at the top of the widget.\nPanels added to the TabPanel will have their header hidden by default because the Tab will\nautomatically take the Panel's configured title and icon.</p>\n\n<p>TabPanels use their <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">header</a> or <a href=\"#!/api/Ext.panel.Panel-cfg-fbar\" rel=\"Ext.panel.Panel-cfg-fbar\" class=\"docClass\">footer</a>\nelement (depending on the <a href=\"#!/api/Ext.tab.Panel-cfg-tabPosition\" rel=\"Ext.tab.Panel-cfg-tabPosition\" class=\"docClass\">tabPosition</a> configuration) to accommodate the tab selector buttons.\nThis means that a TabPanel will not display any configured title, and will not display any configured\nheader <a href=\"#!/api/Ext.panel.Panel-cfg-tools\" rel=\"Ext.panel.Panel-cfg-tools\" class=\"docClass\">tools</a>.</p>\n\n<p>To display a header, embed the TabPanel in a <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Panel</a> which uses\n<code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout: 'fit'</a></code>.</p>\n\n<h2>Controlling tabs</h2>\n\n<p>Configuration options for the <a href=\"#!/api/Ext.tab.Tab\" rel=\"Ext.tab.Tab\" class=\"docClass\">Ext.tab.Tab</a> that represents the component can be passed in\nby specifying the tabConfig option:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Foo'\n    }, {\n        title: 'Bar',\n        tabConfig: {\n            title: 'Custom Title',\n            tooltip: 'A button tooltip'\n        }\n    }]\n});\n</code></pre>\n\n<h2>Vetoing Changes</h2>\n\n<p>User interaction when changing the tabs can be vetoed by listening to the <a href=\"#!/api/Ext.tab.Panel-event-beforetabchange\" rel=\"Ext.tab.Panel-event-beforetabchange\" class=\"docClass\">beforetabchange</a> event.\nBy returning <code>false</code>, the tab change will not occur.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    width: 200,\n    height: 200,\n    listeners: {\n        beforetabchange: function(tabs, newTab, oldTab) {\n            return newTab.title != 'P2';\n        }\n    },\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3'\n    }]\n}); \n</code></pre>\n\n<h1>Examples</h1>\n\n<p>Here is a basic TabPanel rendered to the body. This also shows the useful configuration <a href=\"#!/api/Ext.tab.Panel-cfg-activeTab\" rel=\"Ext.tab.Panel-cfg-activeTab\" class=\"docClass\">activeTab</a>,\nwhich allows you to set the active tab on render. If you do not set an <a href=\"#!/api/Ext.tab.Panel-cfg-activeTab\" rel=\"Ext.tab.Panel-cfg-activeTab\" class=\"docClass\">activeTab</a>, no tabs will be\nactive by default.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>It is easy to control the visibility of items in the tab bar. Specify hidden: true to have the\ntab button hidden initially. Items can be subsequently hidden and show by accessing the\ntab property on the child item.</p>\n\n<pre class='inline-example '><code>var tabs = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Home',\n        html: 'Home',\n        itemId: 'home'\n    }, {\n        title: 'Users',\n        html: 'Users',\n        itemId: 'users',\n        hidden: true\n    }, {\n        title: 'Tickets',\n        html: 'Tickets',\n        itemId: 'tickets'\n    }]\n});\n\nsetTimeout(function(){\n    tabs.child('#home').tab.hide();\n    var users = tabs.child('#users');\n    users.tab.show();\n    tabs.setActiveTab(users);\n}, 1000);\n</code></pre>\n\n<p>You can remove the background of the TabBar by setting the <a href=\"#!/api/Ext.tab.Panel-cfg-plain\" rel=\"Ext.tab.Panel-cfg-plain\" class=\"docClass\">plain</a> property to <code>true</code>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    plain: true,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Another useful configuration of TabPanel is <a href=\"#!/api/Ext.tab.Panel-cfg-tabPosition\" rel=\"Ext.tab.Panel-cfg-tabPosition\" class=\"docClass\">tabPosition</a>. This allows you to change the\nposition where the tabs are displayed. The available options for this are <code>'top'</code> (default) and\n<code>'bottom'</code>.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    bodyPadding: 10,\n    tabPosition: 'bottom',\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.tab.Panel-method-setActiveTab\" rel=\"Ext.tab.Panel-method-setActiveTab\" class=\"docClass\">setActiveTab</a> is a very useful method in TabPanel which will allow you to change the\ncurrent active tab. You can either give it an index or an instance of a tab. For example:</p>\n\n<pre class='inline-example '><code>var tabs = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            id   : 'my-tab',\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\nvar tab = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('my-tab');\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text    : 'Select the first tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(tab);\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Select the second tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(1);\n    },\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.tab.Panel-method-getActiveTab\" rel=\"Ext.tab.Panel-method-getActiveTab\" class=\"docClass\">getActiveTab</a> is a another useful method in TabPanel which will return the current active tab.</p>\n\n<pre class='inline-example '><code>var tabs = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Get active tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.getActiveTab();\n        alert('Current tab: ' + tab.title);\n    },\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Adding a new tab is very simple with a TabPanel. You simple call the <a href=\"#!/api/Ext.tab.Panel-method-add\" rel=\"Ext.tab.Panel-method-add\" class=\"docClass\">add</a> method with an config\nobject for a panel.</p>\n\n<pre class='inline-example '><code>var tabs = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'New tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.add({\n            // we use the tabs.items property to get the length of current items/tabs\n            title: 'Tab ' + (tabs.items.length + 1),\n            html : 'Another one'\n        });\n\n        tabs.setActiveTab(tab);\n    },\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>Additionally, removing a tab is very also simple with a TabPanel. You simple call the <a href=\"#!/api/Ext.tab.Panel-method-remove\" rel=\"Ext.tab.Panel-method-remove\" class=\"docClass\">remove</a> method\nwith an config object for a panel.</p>\n\n<pre class='inline-example '><code>var tabs = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            id   : 'remove-this-tab',\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Remove tab',\n    scope   : this,\n    handler : function() {\n        var tab = <a href=\"#!/api/Ext-method-getCmp\" rel=\"Ext-method-getCmp\" class=\"docClass\">Ext.getCmp</a>('remove-this-tab');\n        tabs.remove(tab);\n    },\n    renderTo : <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Tab":{"!doc":"<p>Represents a single Tab in a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a>. A Tab is simply a slightly customized <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Button</a>,\nstyled to look like a tab. Tabs are optionally closable, and can also be disabled. 99% of the time you will not\nneed to create Tabs manually as the framework does so automatically when you use a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a></p>\n"}},"Template":{"!doc":"<p>Represents an HTML fragment template. Templates may be <a href=\"#!/api/Ext.Template-method-compile\" rel=\"Ext.Template-method-compile\" class=\"docClass\">precompiled</a> for greater performance.</p>\n\n<p>An instance of this class may be created by passing to the constructor either a single argument, or multiple\narguments:</p>\n\n<h1>Single argument: String/Array</h1>\n\n<p>The single argument may be either a String or an Array:</p>\n\n<ul>\n<li><p>String:</p>\n\n<pre><code>var t = new <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a>(\"&lt;div&gt;Hello {0}.&lt;/div&gt;\");\nt.<a href=\"#!/api/Ext.Template-method-append\" rel=\"Ext.Template-method-append\" class=\"docClass\">append</a>('some-element', ['foo']);\n</code></pre></li>\n<li><p>Array:</p>\n\n<p>An Array will be combined with <code>join('')</code>.</p>\n\n<pre><code>var t = new <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a>([\n    '&lt;div name=\"{id}\"&gt;',\n        '&lt;span class=\"{cls}\"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',\n    '&lt;/div&gt;',\n]);\nt.<a href=\"#!/api/Ext.Template-method-compile\" rel=\"Ext.Template-method-compile\" class=\"docClass\">compile</a>();\nt.<a href=\"#!/api/Ext.Template-method-append\" rel=\"Ext.Template-method-append\" class=\"docClass\">append</a>('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});\n</code></pre></li>\n</ul>\n\n\n<h1>Multiple arguments: String, Object, Array, ...</h1>\n\n<p>Multiple arguments will be combined with <code>join('')</code>.</p>\n\n<pre><code>var t = new <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a>(\n    '&lt;div name=\"{id}\"&gt;',\n        '&lt;span class=\"{cls}\"&gt;{name} {value}&lt;/span&gt;',\n    '&lt;/div&gt;',\n    // a configuration object:\n    {\n        compiled: true,      // <a href=\"#!/api/Ext.Template-method-compile\" rel=\"Ext.Template-method-compile\" class=\"docClass\">compile</a> immediately\n    }\n);\n</code></pre>\n\n<h1>Notes</h1>\n\n<ul>\n<li>For a list of available format functions, see <a href=\"#!/api/Ext.util.Format\" rel=\"Ext.util.Format\" class=\"docClass\">Ext.util.Format</a>.</li>\n<li><code>disableFormats</code> reduces <code><a href=\"#!/api/Ext.Template-method-apply\" rel=\"Ext.Template-method-apply\" class=\"docClass\">apply</a></code> time when no formatting is required.</li>\n</ul>\n\n"},"toolbar":{"Fill":{"!doc":"<p>A non-rendering placeholder item which instructs the Toolbar's Layout to begin using\nthe right-justified button container.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n     title: 'Toolbar Fill Example',\n     width: 300,\n     height: 200,\n     tbar : [\n         'Item 1',\n         { xtype: 'tbfill' },\n         'Item 2'\n     ],\n     renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n });\n</code></pre>\n"},"Item":{"!doc":"<p>The base class that other non-interacting Toolbar Item classes should extend in order to\nget some basic common toolbar item functionality.</p>\n"},"Paging":{"!doc":"<p>As the number of records increases, the time required for the browser to render them increases. Paging is used to\nreduce the amount of data exchanged with the client. Note: if there are more records/rows than can be viewed in the\navailable screen area, vertical scrollbars will be added.</p>\n\n<p>Paging is typically handled on the server side (see exception below). The client sends parameters to the server side,\nwhich the server needs to interpret and then respond with the appropriate data.</p>\n\n<p><a href=\"#!/api/Ext.toolbar.Paging\" rel=\"Ext.toolbar.Paging\" class=\"docClass\">Ext.toolbar.Paging</a> is a specialized toolbar that is bound to a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a> and provides automatic\npaging control. This Component <a href=\"#!/api/Ext.data.Store-method-load\" rel=\"Ext.data.Store-method-load\" class=\"docClass\">load</a>s blocks of data into the <a href=\"#!/api/Ext.toolbar.Paging-cfg-store\" rel=\"Ext.toolbar.Paging-cfg-store\" class=\"docClass\">store</a> by passing\nparameters used for paging criteria.</p>\n\n<p><p><img src=\"\" alt=\"Ext.toolbar.Paging component\" width=\"\" height=\"\"></p></p>\n\n<p>Paging Toolbar is typically used as one of the Grid's toolbars:</p>\n\n<pre class='inline-example '><code>var itemsPerPage = 2;   // set the number of items you want per page\n\nvar store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    id:'simpsonsStore',\n    autoLoad: false,\n    fields:['name', 'email', 'phone'],\n    pageSize: itemsPerPage, // items per page\n    proxy: {\n        type: 'ajax',\n        url: 'pagingstore.js',  // url that will load data with respect to start and limit params\n        reader: {\n            type: 'json',\n            root: 'items',\n            totalProperty: 'total'\n        }\n    }\n});\n\n// specify segment of data you want to load using params\nstore.load({\n    params:{\n        start:0,\n        limit: itemsPerPage\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: store,\n    columns: [\n        { header: 'Name',  dataIndex: 'name' },\n        { header: 'Email', dataIndex: 'email', flex: 1 },\n        { header: 'Phone', dataIndex: 'phone' }\n    ],\n    width: 400,\n    height: 125,\n    dockedItems: [{\n        xtype: 'pagingtoolbar',\n        store: store,   // same store GridPanel is using\n        dock: 'bottom',\n        displayInfo: true\n    }],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>To use paging, you need to set a pageSize configuration on the Store, and pass the paging requirements to\nthe server when the store is first loaded.</p>\n\n<pre><code>store.load({\n    params: {\n        // specify params for the first page load if using paging\n        start: 0,\n        limit: myPageSize,\n        // other params\n        foo:   'bar'\n    }\n});\n</code></pre>\n\n<p>If using <a href=\"#!/api/Ext.data.Store-cfg-autoLoad\" rel=\"Ext.data.Store-cfg-autoLoad\" class=\"docClass\">store's autoLoad</a> configuration:</p>\n\n<pre><code>var myStore = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a>', {\n    <a href=\"#!/api/Ext.data.Store-cfg-autoLoad\" rel=\"Ext.data.Store-cfg-autoLoad\" class=\"docClass\">autoLoad</a>: {start: 0, limit: 25},\n    ...\n});\n</code></pre>\n\n<p>The packet sent back from the server would have this form:</p>\n\n<pre><code>{\n    \"success\": true,\n    \"results\": 2000,\n    \"rows\": [ // ***Note:** this must be an Array\n        { \"id\":  1, \"name\": \"Bill\", \"occupation\": \"Gardener\" },\n        { \"id\":  2, \"name\":  \"Ben\", \"occupation\": \"Horticulturalist\" },\n        ...\n        { \"id\": 25, \"name\":  \"Sue\", \"occupation\": \"Botanist\" }\n    ]\n}\n</code></pre>\n\n<h2>Paging with Local Data</h2>\n\n<p>Paging can also be accomplished with local data using extensions:</p>\n\n<ul>\n<li><a href=\"http://sencha.com/forum/showthread.php?t=71532\">Ext.ux.data.PagingStore</a></li>\n<li>Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)</li>\n</ul>\n\n"},"Toolbar":{"!doc":"<p>Basic Toolbar class. Although the <a href=\"#!/api/Ext.container.Container-cfg-defaultType\" rel=\"Ext.container.Container-cfg-defaultType\" class=\"docClass\">defaultType</a> for\nToolbar is <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">button</a>, Toolbar elements (child items for the Toolbar container)\nmay be virtually any type of Component. Toolbar elements can be created explicitly via their\nconstructors, or implicitly via their xtypes, and can be <a href=\"#!/api/Ext.toolbar.Toolbar-method-add\" rel=\"Ext.toolbar.Toolbar-method-add\" class=\"docClass\">add</a>ed dynamically.</p>\n\n<h2>Some items have shortcut strings for creation:</h2>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left;\"> Shortcut </th>\n<th style=\"text-align:left;\"> xtype         </th>\n<th style=\"text-align:left;\"> Class                         </th>\n<th style=\"text-align:left;\"> Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left;\"> '->'     </td>\n<td style=\"text-align:left;\"> <code>tbfill</code>      </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Fill\" rel=\"Ext.toolbar.Fill\" class=\"docClass\">Ext.toolbar.Fill</a>      </td>\n<td style=\"text-align:left;\"> begin using the right-justified button container</td>\n</tr>\n<tr>\n<td style=\"text-align:left;\"> '-'      </td>\n<td style=\"text-align:left;\"> <code>tbseparator</code> </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Separator\" rel=\"Ext.toolbar.Separator\" class=\"docClass\">Ext.toolbar.Separator</a> </td>\n<td style=\"text-align:left;\"> add a vertical separator bar between toolbar items</td>\n</tr>\n<tr>\n<td style=\"text-align:left;\"> ' '      </td>\n<td style=\"text-align:left;\"> <code>tbspacer</code>    </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Spacer\" rel=\"Ext.toolbar.Spacer\" class=\"docClass\">Ext.toolbar.Spacer</a>    </td>\n<td style=\"text-align:left;\"> add horizontal space between elements</td>\n</tr>\n</tbody>\n</table>\n\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 500,\n    items: [\n        {\n            // xtype: 'button', // default for Toolbars\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        // begin using the right-justified button container\n        '-&gt;', // same as { xtype: 'tbfill' }\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        },\n        // add a vertical separator bar between toolbar items\n        '-', // same as {xtype: 'tbseparator'} to create <a href=\"#!/api/Ext.toolbar.Separator\" rel=\"Ext.toolbar.Separator\" class=\"docClass\">Ext.toolbar.Separator</a>\n        'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create <a href=\"#!/api/Ext.toolbar.TextItem\" rel=\"Ext.toolbar.TextItem\" class=\"docClass\">Ext.toolbar.TextItem</a>\n        { xtype: 'tbspacer' },// same as ' ' to create <a href=\"#!/api/Ext.toolbar.Spacer\" rel=\"Ext.toolbar.Spacer\" class=\"docClass\">Ext.toolbar.Spacer</a>\n        'text 2',\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'text 3'\n    ]\n});\n</code></pre>\n\n<p>Toolbars have <a href=\"#!/api/Ext.toolbar.Toolbar-method-enable\" rel=\"Ext.toolbar.Toolbar-method-enable\" class=\"docClass\">enable</a> and <a href=\"#!/api/Ext.toolbar.Toolbar-method-disable\" rel=\"Ext.toolbar.Toolbar-method-disable\" class=\"docClass\">disable</a> methods which when called, will\nenable/disable all items within your toolbar.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 400,\n    items: [\n        {\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        '-&gt;',\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        }\n    ]\n});\n</code></pre>\n\n<p>Example</p>\n\n<pre class='inline-example '><code>var enableBtn = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Enable All Items',\n    disabled: true,\n    scope   : this,\n    handler : function() {\n        //disable the enable button and enable the disable button\n        enableBtn.disable();\n        disableBtn.enable();\n\n        //enable the toolbar\n        toolbar.enable();\n    }\n});\n\nvar disableBtn = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Disable All Items',\n    scope   : this,\n    handler : function() {\n        //enable the enable button and disable button\n        disableBtn.disable();\n        enableBtn.enable();\n\n        //disable the toolbar\n        toolbar.disable();\n    }\n});\n\nvar toolbar = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 400,\n    margin  : '5 0 0 0',\n    items   : [enableBtn, disableBtn]\n});\n</code></pre>\n\n<p>Adding items to and removing items from a toolbar is as simple as calling the <a href=\"#!/api/Ext.toolbar.Toolbar-method-add\" rel=\"Ext.toolbar.Toolbar-method-add\" class=\"docClass\">add</a>\nand <a href=\"#!/api/Ext.toolbar.Toolbar-method-remove\" rel=\"Ext.toolbar.Toolbar-method-remove\" class=\"docClass\">remove</a> methods. There is also a <a href=\"#!/api/Ext.toolbar.Toolbar-method-removeAll\" rel=\"Ext.toolbar.Toolbar-method-removeAll\" class=\"docClass\">removeAll</a> method\nwhich remove all items within the toolbar.</p>\n\n<pre class='inline-example '><code>var toolbar = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 700,\n    items: [\n        {\n            text: 'Example Button'\n        }\n    ]\n});\n\nvar addedItems = [];\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 700,\n    margin  : '5 0 0 0',\n    items   : [\n        {\n            text   : 'Add a button',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your button:');\n                addedItems.push(toolbar.add({\n                    text: text\n                }));\n            }\n        },\n        {\n            text   : 'Add a text item',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your item:');\n                addedItems.push(toolbar.add(text));\n            }\n        },\n        {\n            text   : 'Add a toolbar separator',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('-'));\n            }\n        },\n        {\n            text   : 'Add a toolbar spacer',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('-&gt;'));\n            }\n        },\n        '-&gt;',\n        {\n            text   : 'Remove last inserted item',\n            scope  : this,\n            handler: function() {\n                if (addedItems.length) {\n                    toolbar.remove(addedItems.pop());\n                } else if (toolbar.items.length) {\n                    toolbar.remove(toolbar.items.last());\n                } else {\n                    alert('No items in the toolbar');\n                }\n            }\n        },\n        {\n            text   : 'Remove all items',\n            scope  : this,\n            handler: function() {\n                toolbar.removeAll();\n            }\n        }\n    ]\n});\n</code></pre>\n"},"Separator":{"!doc":"<p>A simple class that adds a vertical separator bar between toolbar items (css class: 'x-toolbar-separator').</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Toolbar Separator Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbseparator' },\n        'Item 2'\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"Spacer":{"!doc":"<p>A simple element that adds extra horizontal space between items in a toolbar.\nBy default a 2px wide space is added via CSS specification:</p>\n\n<pre><code>.x-toolbar .x-toolbar-spacer {\n    width: 2px;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Toolbar Spacer Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbspacer' }, // or ' '\n        'Item 2',\n        // space width is also configurable via javascript\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'Item 3'\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"},"TextItem":{"!doc":"<p>A simple class that renders text directly into a toolbar.</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Panel with TextItem',\n    width: 300,\n    height: 200,\n    tbar: [\n        { xtype: 'tbtext', text: 'Sample Text Item' }\n    ],\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n"}},"tree":{"Column":{"!doc":"<p>Provides indentation and folder structure markup for a Tree taking into account\ndepth and position within the tree hierarchy.</p>\n"},"Panel":{"!doc":"<p>The TreePanel provides tree-structured UI representation of tree-structured data.\nA TreePanel must be bound to a <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">Ext.data.TreeStore</a>. TreePanel's support\nmultiple columns through the <a href=\"#!/api/Ext.tree.Panel-cfg-columns\" rel=\"Ext.tree.Panel-cfg-columns\" class=\"docClass\">columns</a> configuration.</p>\n\n<p>Simple TreePanel using inline data:</p>\n\n<pre class='inline-example '><code>var store = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">Ext.data.TreeStore</a>', {\n    root: {\n        expanded: true,\n        children: [\n            { text: \"detention\", leaf: true },\n            { text: \"homework\", expanded: true, children: [\n                { text: \"book report\", leaf: true },\n                { text: \"algebra\", leaf: true}\n            ] },\n            { text: \"buy lottery tickets\", leaf: true }\n        ]\n    }\n});\n\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>', {\n    title: 'Simple Tree',\n    width: 200,\n    height: 150,\n    store: store,\n    rootVisible: false,\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>()\n});\n</code></pre>\n\n<p>For the tree node config options (like <code>text</code>, <code>leaf</code>, <code>expanded</code>), see the documentation of\n<a href=\"#!/api/Ext.data.NodeInterface\" rel=\"Ext.data.NodeInterface\" class=\"docClass\">NodeInterface</a> config options.</p>\n"},"plugin":{"TreeViewDragDrop":{"!doc":"<p>This plugin provides drag and/or drop functionality for a TreeView.</p>\n\n<p>It creates a specialized instance of <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> which knows how to drag out of a\n<a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">TreeView</a> and loads the data object which is passed to a cooperating\n<a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>'s methods with the following properties:</p>\n\n<ul>\n<li><p>copy : Boolean</p>\n\n<p>The value of the TreeView's <code>copy</code> property, or <code>true</code> if the TreeView was configured with <code>allowCopy: true</code> <em>and</em>\nthe control key was pressed when the drag operation was begun.</p></li>\n<li><p>view : TreeView</p>\n\n<p>The source TreeView from which the drag originated.</p></li>\n<li><p>ddel : HtmlElement</p>\n\n<p>The drag proxy element which moves with the mouse</p></li>\n<li><p>item : HtmlElement</p>\n\n<p>The TreeView node upon which the mousedown event was registered.</p></li>\n<li><p>records : Array</p>\n\n<p>An Array of <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Models</a> representing the selected data being dragged from the source TreeView.</p></li>\n</ul>\n\n\n<p>It also creates a specialized instance of <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a> which cooperates with other DropZones which are\nmembers of the same ddGroup which processes such data objects.</p>\n\n<p>Adding this plugin to a view means that two new events may be fired from the client TreeView, <a href=\"#!/api/Ext.tree.plugin.TreeViewDragDrop-event-beforedrop\" rel=\"Ext.tree.plugin.TreeViewDragDrop-event-beforedrop\" class=\"docClass\">beforedrop</a> and\n<a href=\"#!/api/Ext.tree.plugin.TreeViewDragDrop-event-drop\" rel=\"Ext.tree.plugin.TreeViewDragDrop-event-drop\" class=\"docClass\">drop</a>.</p>\n\n<p>Note that the plugin must be added to the tree view, not to the tree panel. For example using viewConfig:</p>\n\n<pre><code>viewConfig: {\n    plugins: { ptype: 'treeviewdragdrop' }\n}\n</code></pre>\n"}},"View":{"!doc":"<p>Used as a view by <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a>.</p>\n\n<p><strong>From override Ext.grid.plugin.BufferedRendererTreeView:</strong> A set of overrides required by the presence of the BufferedRenderer plugin.</p>\n\n<p>These overrides of <a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">Ext.tree.View</a> take into account the affect of a buffered renderer and\ndivert execution from the default course where necessary.</p>\n"},"ViewDragZone":{"!doc":"\n"},"ViewDropZone":{"!doc":"\n"}},"Version":{"!doc":"<p>A utility class that wrap around a string version number and provide convenient\nmethod to perform comparison. See also: <a href=\"#!/api/Ext.Version-static-method-compare\" rel=\"Ext.Version-static-method-compare\" class=\"docClass\">compare</a>. Example:</p>\n\n<pre><code>var version = new <a href=\"#!/api/Ext.Version\" rel=\"Ext.Version\" class=\"docClass\">Ext.Version</a>('1.0.2beta');\nconsole.log(\"Version is \" + version); // Version is 1.0.2beta\n\nconsole.log(version.getMajor()); // 1\nconsole.log(version.getMinor()); // 0\nconsole.log(version.getPatch()); // 2\nconsole.log(version.getBuild()); // 0\nconsole.log(version.getRelease()); // beta\n\nconsole.log(version.isGreaterThan('1.0.1')); // True\nconsole.log(version.isGreaterThan('1.0.2alpha')); // True\nconsole.log(version.isGreaterThan('1.0.2RC')); // False\nconsole.log(version.isGreaterThan('1.0.2')); // False\nconsole.log(version.isLessThan('1.0.2')); // True\n\nconsole.log(version.match(1.0)); // True\nconsole.log(version.match('1.0.2')); // True\n</code></pre>\n"},"WindowManager":{"!doc":"<p>The default global floating Component group that is available automatically.</p>\n\n<p>This manages instances of floating Components which were rendered programatically without\nbeing added to a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>, and for floating Components\nwhich were added into non-floating Containers.</p>\n\n<p><em>Floating</em> Containers create their own instance of ZIndexManager, and floating Components\nadded at any depth below there are managed by that ZIndexManager.</p>\n"},"ZIndexManager":{"!doc":"<p>A class that manages a group of <a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Ext.Component.floating</a> Components and provides z-order management,\nand Component activation behavior, including masking below the active (topmost) Component.</p>\n\n<p><a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Floating</a> Components which are rendered directly into the document (such as\n<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Window</a>s) which are <a href=\"#!/api/Ext.Component-method-show\" rel=\"Ext.Component-method-show\" class=\"docClass\">show</a>n are managed by a\n<a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">global instance</a>.</p>\n\n<p><a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Floating</a> Components which are descendants of <a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">floating</a>\n<em>Containers</em> (for example a <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">BoundList</a> within an <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Window</a>,\nor a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Menu</a>), are managed by a ZIndexManager owned by that floating Container. Therefore\nComboBox dropdowns within Windows will have managed z-indices guaranteed to be correct, relative to the Window.</p>\n"},"XTemplate":{"!doc":"<p>A template class that supports advanced functionality like:</p>\n\n<ul>\n<li>Autofilling arrays using templates and sub-templates</li>\n<li>Conditional processing with basic comparison operators</li>\n<li>Basic math function support</li>\n<li>Execute arbitrary inline code with special built-in template variables</li>\n<li>Custom member functions</li>\n<li>Many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created</li>\n</ul>\n\n\n<p>XTemplate provides the templating mechanism built into <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>.</p>\n\n<p>The <a href=\"#!/api/Ext.Template\" rel=\"Ext.Template\" class=\"docClass\">Ext.Template</a> describes the acceptable parameters to pass to the constructor. The following examples\ndemonstrate all of the supported features.</p>\n\n<h1>Sample Data</h1>\n\n<p>This is the data object used for reference in each code example:</p>\n\n<pre><code>var data = {\n    name: 'Don Griffin',\n    title: 'Senior Technomage',\n    company: 'Sencha Inc.',\n    drinks: ['Coffee', 'Water', 'More Coffee'],\n    kids: [\n        { name: 'Aubrey',  age: 17 },\n        { name: 'Joshua',  age: 13 },\n        { name: 'Cale',    age: 10 },\n        { name: 'Nikol',   age: 5 },\n        { name: 'Solomon', age: 0 }\n    ]\n};\n</code></pre>\n\n<h1>Auto filling of arrays</h1>\n\n<p>The <strong>tpl</strong> tag and the <strong>for</strong> operator are used to process the provided data object:</p>\n\n<ul>\n<li>If the value specified in for is an array, it will auto-fill, repeating the template block inside the tpl\ntag for each item in the array.</li>\n<li>If for=\".\" is specified, the data object provided is examined.</li>\n<li>If between=\"...\" is specified, the provided value will be inserted between the items.\nThis is also supported in the \"foreach\" looping template.</li>\n<li>While processing an array, the special variable {#} will provide the current array index + 1 (starts at 1, not 0).</li>\n</ul>\n\n\n<p>Examples:</p>\n\n<pre><code>&lt;tpl for=\".\"&gt;...&lt;/tpl&gt;       // loop through array at root node\n&lt;tpl for=\"foo\"&gt;...&lt;/tpl&gt;     // loop through array at foo node\n&lt;tpl for=\"foo.bar\"&gt;...&lt;/tpl&gt; // loop through array at foo.bar node\n&lt;tpl for=\".\" between=\",\"&gt;...&lt;/tpl&gt; // loop through array at root node and insert ',' between each item\n</code></pre>\n\n<p>Using the sample data above:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\".\"&gt;',       // process the data.kids node\n        '&lt;p&gt;{#}. {name}&lt;/p&gt;',  // use current array index to autonumber\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\ntpl.overwrite(panel.body, data.kids); // pass the kids property of the data object\n</code></pre>\n\n<p>An example illustrating how the <strong>for</strong> property can be leveraged to access specified members of the provided data\nobject to populate the template:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Title: {title}&lt;/p&gt;',\n    '&lt;p&gt;Company: {company}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',     // interrogate the kids property within the data\n        '&lt;p&gt;{name}&lt;/p&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\ntpl.overwrite(panel.body, data);  // pass the root node of the data object\n</code></pre>\n\n<p>Flat arrays that contain values (and not objects) can be auto-rendered using the special <strong><code>{.}</code></strong> variable inside a\nloop. This variable will represent the value of the array at the current index:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;{name}\\'s favorite beverages:&lt;/p&gt;',\n    '&lt;tpl for=\"drinks\"&gt;',\n        '&lt;div&gt; - {.}&lt;/div&gt;',\n    '&lt;/tpl&gt;'\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n\n<p>When processing a sub-template, for example while looping through a child array, you can access the parent object's\nmembers via the <strong>parent</strong> object:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;tpl if=\"age &amp;gt; 1\"&gt;',\n            '&lt;p&gt;{name}&lt;/p&gt;',\n            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n\n<p>The <strong>foreach</strong> operator is used to loop over an object's properties.  The following\nexample demonstrates looping over the main data object's properties:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;dl&gt;',\n        '&lt;tpl foreach=\".\"&gt;',\n            '&lt;dt&gt;{$}&lt;/dt&gt;', // the special **`{$}`** variable contains the property name\n            '&lt;dd&gt;{.}&lt;/dd&gt;', // within the loop, the **`{.}`** variable is set to the property value\n        '&lt;/tpl&gt;',\n    '&lt;/dl&gt;'\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n\n<h1>Conditional processing with basic comparison operators</h1>\n\n<p>The <strong>tpl</strong> tag and the <strong>if</strong> operator are used to provide conditional checks for deciding whether or not to render\nspecific parts of the template.</p>\n\n<p>Using the sample data above:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;tpl if=\"age &amp;gt; 1\"&gt;',\n            '&lt;p&gt;{name}&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n\n<p>More advanced conditionals are also supported:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;p&gt;{name} is a ',\n        '&lt;tpl if=\"age &amp;gt;= 13\"&gt;',\n            '&lt;p&gt;teenager&lt;/p&gt;',\n        '&lt;tpl elseif=\"age &amp;gt;= 2\"&gt;',\n            '&lt;p&gt;kid&lt;/p&gt;',\n        '&lt;tpl else&gt;',\n            '&lt;p&gt;baby&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\n\nvar tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;p&gt;{name} is a ',\n        '&lt;tpl switch=\"name\"&gt;',\n            '&lt;tpl case=\"Aubrey\" case=\"Nikol\"&gt;',\n                '&lt;p&gt;girl&lt;/p&gt;',\n            '&lt;tpl default&gt;',\n                '&lt;p&gt;boy&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\n</code></pre>\n\n<p>A <code>break</code> is implied between each case and default, however, multiple cases can be listed\nin a single &lt;tpl&gt; tag.</p>\n\n<h1>Using double quotes</h1>\n\n<p>Examples:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    \"&lt;tpl if='age &amp;gt; 1 &amp;&amp; age &amp;lt; 10'&gt;Child&lt;/tpl&gt;\",\n    \"&lt;tpl if='age &amp;gt;= 10 &amp;&amp; age &amp;lt; 18'&gt;Teenager&lt;/tpl&gt;\",\n    \"&lt;tpl if='this.isGirl(name)'&gt;...&lt;/tpl&gt;\",\n    '&lt;tpl if=\"id == \\'download\\'\"&gt;...&lt;/tpl&gt;',\n    \"&lt;tpl if='needsIcon'&gt;&lt;img src='{icon}' class='{iconCls}'/&gt;&lt;/tpl&gt;\",\n    \"&lt;tpl if='name == \\\"Don\\\"'&gt;Hello&lt;/tpl&gt;\"\n);\n</code></pre>\n\n<h1>Basic math support</h1>\n\n<p>The following basic math operators may be applied directly on numeric data values:</p>\n\n<pre><code>+ - * /\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;tpl if=\"age &amp;gt; 1\"&gt;',  // &lt;-- Note that the &gt; is encoded\n            '&lt;p&gt;{#}: {name}&lt;/p&gt;',  // &lt;-- Auto-number each item\n            '&lt;p&gt;In 5 Years: {age+5}&lt;/p&gt;',  // &lt;-- Basic math\n            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n\n<h1>Execute arbitrary inline code with special built-in template variables</h1>\n\n<p>Anything between <code>{[ ... ]}</code> is considered code to be executed in the scope of the template.\nThe expression is evaluated and the result is included in the generated result. There are\nsome special variables available in that code:</p>\n\n<ul>\n<li><strong>out</strong>: The output array into which the template is being appended (using <code>push</code> to later\n<code>join</code>).</li>\n<li><strong>values</strong>: The values in the current scope. If you are using scope changing sub-templates,\nyou can change what values is.</li>\n<li><strong>parent</strong>: The scope (values) of the ancestor template.</li>\n<li><strong>xindex</strong>: If you are in a \"for\" or \"foreach\" looping template, the index of the loop you are in (1-based).</li>\n<li><strong>xcount</strong>: If you are in a \"for\" looping template, the total length of the array you are looping.</li>\n<li><strong>xkey</strong>: If you are in a \"foreach\" looping template, the key of the current property\nbeing examined.</li>\n</ul>\n\n\n<p>This example demonstrates basic row striping using an inline code block and the xindex variable:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Company: {[values.company.toUpperCase() + \", \" + values.title]}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;div class=\"{[xindex % 2 === 0 ? \"even\" : \"odd\"]}\"&gt;',\n        '{name}',\n        '&lt;/div&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n );\n</code></pre>\n\n<p>Any code contained in \"verbatim\" blocks (using \"{% ... %}\") will be inserted directly in\nthe generated code for the template. These blocks are not included in the output. This\ncan be used for simple things like break/continue in a loop, or control structures or\nmethod calls (when they don't produce output). The <code>this</code> references the template instance.</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Company: {[values.company.toUpperCase() + \", \" + values.title]}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '{% if (xindex % 2 === 0) continue; %}',\n        '{name}',\n        '{% if (xindex &gt; 100) break; %}',\n        '&lt;/div&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;'\n );\n</code></pre>\n\n<h1>Template member functions</h1>\n\n<p>One or more member functions can be specified in a configuration object passed into the XTemplate constructor for\nmore complex processing:</p>\n\n<pre><code>var tpl = new <a href=\"#!/api/Ext.XTemplate\" rel=\"Ext.XTemplate\" class=\"docClass\">Ext.XTemplate</a>(\n    '&lt;p&gt;Name: {name}&lt;/p&gt;',\n    '&lt;p&gt;Kids: ',\n    '&lt;tpl for=\"kids\"&gt;',\n        '&lt;tpl if=\"this.isGirl(name)\"&gt;',\n            '&lt;p&gt;Girl: {name} - {age}&lt;/p&gt;',\n        '&lt;tpl else&gt;',\n            '&lt;p&gt;Boy: {name} - {age}&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n        '&lt;tpl if=\"this.isBaby(age)\"&gt;',\n            '&lt;p&gt;{name} is a baby!&lt;/p&gt;',\n        '&lt;/tpl&gt;',\n    '&lt;/tpl&gt;&lt;/p&gt;',\n    {\n        // XTemplate configuration:\n        disableFormats: true,\n        // member functions:\n        isGirl: function(name){\n           return name == 'Aubrey' || name == 'Nikol';\n        },\n        isBaby: function(age){\n           return age &lt; 1;\n        }\n    }\n);\ntpl.overwrite(panel.body, data);\n</code></pre>\n"},"XTemplateCompiler":{"!doc":"<p>This class compiles the XTemplate syntax into a function object. The function is used\nlike so:</p>\n\n<pre><code> function (out, values, parent, xindex, xcount) {\n     // out is the output array to store results\n     // values, parent, xindex and xcount have their historical meaning\n }\n</code></pre>\n"},"XTemplateParser":{"!doc":"<p>This class parses the XTemplate syntax and calls abstract methods to process the parts.</p>\n"}}}

});  
