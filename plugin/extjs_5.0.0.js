(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("tern/lib/infer"), require("tern/lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define([ "tern/lib/infer", "tern/lib/tern" ], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";

  tern.registerPlugin("extjs_5.0.0", function(server, options) {
    server._extjs = {};
    return {
      defs : defs
    };
  });

  var defs = {"!name":"extjs","!define":{},"Ext":{"Action":{"!doc":"<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it\ncan be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI\nupdates across any components that support the Action interface (primarily <a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>,\n<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a> and <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a> components).</p>\n\n<p>Use a single Action instance as the config object for any number of UI Components which share the same configuration. The\nAction not only supplies the configuration, but allows all Components based upon it to have a common set of methods\ncalled at once through a single call to the Action.</p>\n\n<p>Any Component that is to be configured with an Action must also support\nthe following methods:</p>\n\n<ul>\n<li>setText(string)</li>\n<li>setIconCls(string)</li>\n<li>setDisabled(boolean)</li>\n<li>setVisible(boolean)</li>\n<li>setHandler(function)</li>\n</ul>\n\n\n<p>This allows the Action to control its associated Components.</p>\n\n<p>Example usage:</p>\n\n<pre><code>// Define the shared Action.  Each Component below will have the same\n// display text and icon, and will display the same message on click.\nvar action = new <a href=\"#!/api/Ext.Action\" rel=\"Ext.Action\" class=\"docClass\">Ext.Action</a>({\n    <a href=\"#!/api/Ext.Action-cfg-text\" rel=\"Ext.Action-cfg-text\" class=\"docClass\">text</a>: 'Do something',\n    <a href=\"#!/api/Ext.Action-cfg-handler\" rel=\"Ext.Action-cfg-handler\" class=\"docClass\">handler</a>: function(){\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Click', 'You did something.');\n    },\n    <a href=\"#!/api/Ext.Action-cfg-iconCls\" rel=\"Ext.Action-cfg-iconCls\" class=\"docClass\">iconCls</a>: 'do-something',\n    <a href=\"#!/api/Ext.Action-cfg-itemId\" rel=\"Ext.Action-cfg-itemId\" class=\"docClass\">itemId</a>: 'myAction'\n});\n\nvar panel = new <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>({\n    title: 'Actions',\n    width: 500,\n    height: 300,\n    tbar: [\n        // Add the Action directly to a toolbar as a menu button\n        action,\n        {\n            text: 'Action Menu',\n            // Add the Action to a menu as a text item\n            menu: [action]\n        }\n    ],\n    items: [\n        // Add the Action to the panel body as a standard button\n        new <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>(action)\n    ],\n    renderTo: Ext.getBody()\n});\n\n// Change the text for all components using the Action\naction.setText('Something else');\n\n// Reference an Action through a container using the itemId\nvar btn = panel.getComponent('myAction');\nvar aRef = btn.baseAction;\naRef.setText('New text');\n</code></pre>\n"},"app":{"Application":{"!doc":"<p>Represents an Ext JS application, which is typically a single page app using a\n<a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Viewport</a>.</p>\n\n<p>An application consists of one or more Views. The behavior of a View is managed by its\ncorresponding <a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">ViewController</a> and ViewModel.</p>\n\n<p>Global activities are coordinated by <a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Controllers</a> which are\nultimately instantiated by an instance of this (or a derived) class.</p>\n\n<pre><code>Ext.application({\n    name: 'MyApp',\n\n    // An instance of this view is created and set as the Viewport:\n    autoCreateViewport: 'MyApp.view.Main'\n});\n</code></pre>\n\n<p>This does several things. First it creates a global variable called 'MyApp' - all of\nyour Application's classes (such as its Models, Views and Controllers) will reside under\nthis single namespace, which drastically lowers the chances of colliding global variables.</p>\n\n<p>The MyApp global will also have a getApplication method to get a reference to the current\napplication:</p>\n\n<pre><code>var app = MyApp.getApplication();\n</code></pre>\n\n<h1>Telling Application about the rest of the app</h1>\n\n<p>Because an <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a> represents an entire app, we should tell it about the other\nparts of the app - namely the Models, Views and Controllers that are bundled with the application. Let's say we have a blog management app; we\nmight have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.\nHere's how we'd tell our Application about all these things:</p>\n\n<pre><code>Ext.application({\n    name: 'Blog',\n\n    models: ['Post', 'Comment'],\n\n    controllers: ['Posts', 'Comments'],\n\n    launch: function() {\n        ...\n    }\n});\n</code></pre>\n\n<p>Note that we didn't actually list the Views directly in the Application itself. This is because Views are managed by\nControllers, so it makes sense to keep those dependencies there. The Application will load each of the specified\nControllers using the pathing conventions laid out in the <a href=\"#/guide/application_architecture\">application architecture guide</a> - in this case\nexpecting the controllers to reside in app/controller/Posts.js and app/controller/Comments.js. In turn, each\nController simply needs to list the Views it uses and they will be automatically loaded. Here's how our Posts\ncontroller like be defined:</p>\n\n<pre><code>Ext.define('MyApp.controller.Posts', {\n    extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n    views: ['posts.List', 'posts.Edit'],\n\n    //the rest of the Controller here\n});\n</code></pre>\n\n<p>Because we told our Application about our Models and Controllers, and our Controllers about their Views, Ext JS will\nautomatically load all of our app files for us. This means we don't have to manually add script tags into our html\nfiles whenever we add a new class, but more importantly it enables us to create a minimized build of our entire\napplication using Sencha Cmd.</p>\n\n<h1>Deriving from <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a></h1>\n\n<p>Typically, applications do not derive directly from <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>. Rather, the\nconfiguration passed to <code>Ext.application</code> mimics what you might do in a derived class.\nIn some cases, however, it can be desirable to share logic by using a derived class\nfrom <code><a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a></code>.</p>\n\n<p>Derivation works as you would expect, but using the derived class should still be the\njob of the <code>Ext.application</code> method.</p>\n\n<pre><code>Ext.define('MyApp.app.Application', {\n    extend: '<a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>',\n    name: 'MyApp',\n    ...\n});\n\nExt.application('MyApp.app.Application');\n</code></pre>\n\n<p>For more information about writing Ext JS applications, please see the <a href=\"#/guide/application_architecture\">application architecture guide</a>.</p>\n"},"Controller":{"!doc":"<p>Controllers are the glue that binds an application together. All they really do is listen for events (usually from\nviews) and take some action. Here's how we might create a Controller to manage Users:</p>\n\n<pre><code> Ext.define('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     init: function() {\n         console.log('Initialized Users! This happens before ' +\n                     'the Application launch() function is called');\n     }\n });\n</code></pre>\n\n<p>The init function is a special method that is called when your application boots. It is called before the\n<a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Application</a>'s launch function is executed so gives a hook point to run any code before\nyour Viewport is created.</p>\n\n<p>The init function is a great place to set up how your controller interacts with the view, and is usually used in\nconjunction with another Controller function - <a href=\"#!/api/Ext.app.BaseController-method-control\" rel=\"Ext.app.BaseController-method-control\" class=\"docClass\">control</a>. The control function\nmakes it easy to listen to events on your view classes and take some action with a handler function. Let's update\nour Users controller to tell us when the panel is rendered:</p>\n\n<pre><code> Ext.define('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     init: function() {\n         this.control({\n             'viewport &gt; panel': {\n                 render: this.onPanelRendered\n             }\n         });\n     },\n\n     onPanelRendered: function() {\n         console.log('The panel was rendered');\n     }\n });\n</code></pre>\n\n<p>We've updated the init function to use <a href=\"#!/api/Ext.app.BaseController-method-control\" rel=\"Ext.app.BaseController-method-control\" class=\"docClass\">control method</a> to set up listeners on views\nin our application. The control method uses the ComponentQuery engine to quickly and easily get references to components\non the page. If you are not familiar with ComponentQuery yet, be sure to check out the\ndocumentation. In brief though, it allows us to pass a CSS-like selector that will find\nevery matching component on the page.</p>\n\n<p>In our init function above we supplied 'viewport > panel', which translates to \"find me every Panel that is a direct\nchild of a Viewport\". We then supplied an object that maps event names (just 'render' in this case) to handler\nfunctions. The overall effect is that whenever any component that matches our selector fires a 'render' event, our\nonPanelRendered function is called.</p>\n\n<h2>Event domains</h2>\n\n<p>In Ext JS 4.2, we introduced the concept of event domains. In terms of MVC, an event domain\nis one or more base classes that fire events to which a Controller wants to listen. Besides\nComponent event domain that encompass <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>-descended Views, Controllers now\ncan listen to events from data Stores, Ext.Direct Providers, other Controllers, and Ext.GlobalEvents.\nThis feature provides a way to communicate between parts of the whole application without the need\nto bind controllers together tightly, and allows to develop and test application parts in isolation.</p>\n\n<p>See usage examples in <a href=\"#!/api/Ext.app.BaseController-method-listen\" rel=\"Ext.app.BaseController-method-listen\" class=\"docClass\">listen</a> method documentation.</p>\n\n<h2>Using refs</h2>\n\n<p>One of the most useful parts of Controllers is the ref system. These use the Ext.ComponentQuery to\nmake it really easy to get references to Views on your page. Let's look at an example of this now:</p>\n\n<pre><code> Ext.define('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     refs: [{\n         ref: 'list',\n         selector: 'grid'\n     }],\n\n     init: function() {\n         this.control({\n             'button': {\n                 click: this.refreshGrid\n             }\n         });\n     },\n\n     refreshGrid: function() {\n         this.getList().store.load();\n     }\n });\n</code></pre>\n\n<p>This example assumes the existence of a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> on the page, which contains a single button to\nrefresh the Grid when clicked. In our refs array, we set up a reference to the grid. There are two parts to this -\nthe 'selector', which is a ComponentQuery selector which finds any grid on the page and\nassigns it to the reference 'list'.</p>\n\n<p>By giving the reference a name, we get a number of things for free. The first is the getList function that we use in\nthe refreshGrid method above. This is generated automatically by the Controller based on the name of our ref, which\nwas capitalized and prepended with get to go from 'list' to 'getList'.</p>\n\n<p>The way this works is that the first time getList is called by your code, the ComponentQuery selector is run and the\nfirst component that matches the selector ('grid' in this case) will be returned. All future calls to getList will\nuse a cached reference to that grid. Usually it is advised to use a specific ComponentQuery selector that will only\nmatch a single View in your application (in the case above our selector will match any grid on the page).</p>\n\n<p>Bringing it all together, our init function is called when the application boots, at which time we call this.control\nto listen to any click on a <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">button</a> and call our refreshGrid function (again, this will\nmatch any button on the page so we advise a more specific selector than just 'button', but have left it this way for\nsimplicity). When the button is clicked we use out getList function to refresh the grid.</p>\n\n<p>You can create any number of refs and control any number of components this way, simply adding more functions to\nyour Controller as you go. For an example of real-world usage of Controllers see the Feed Viewer example in the\nexamples/app/feed-viewer folder in the SDK download.</p>\n\n<h2>Generated getter methods</h2>\n\n<p>Refs aren't the only thing that generate convenient getter methods. Controllers often have to deal with Models and\nStores so the framework offers a couple of easy ways to get access to those too. Let's look at another example:</p>\n\n<pre><code> Ext.define('MyApp.controller.Users', {\n     extend: '<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>',\n\n     models: ['User'],\n     stores: ['AllUsers', 'AdminUsers'],\n\n     init: function() {\n         var User, allUsers, ed;\n\n         User = this.getUserModel();\n         allUsers = this.getAllUsersStore();\n\n         ed = new User({ name: 'Ed' });\n         allUsers.add(ed);\n     }\n });\n</code></pre>\n\n<p>By specifying Models and Stores that the Controller cares about, it again dynamically loads them from the appropriate\nlocations (app/model/User.js, app/store/AllUsers.js and app/store/AdminUsers.js in this case) and creates getter\nfunctions for them all. The example above will create a new User model instance and add it to the AllUsers Store.\nOf course, you could do anything in this function but in this case we just did something simple to demonstrate the\nfunctionality.</p>\n\n<h2>Further Reading</h2>\n\n<p>For more information about writing Ext JS 4 applications, please see the\n<a href=\"#/guide/application_architecture\">application architecture guide</a>. Also see the <a href=\"#!/api/Ext.app.Application\" rel=\"Ext.app.Application\" class=\"docClass\">Ext.app.Application</a>\ndocumentation.</p>\n"},"BaseController":{"!doc":"<p>Base class for Controllers.</p>\n"},"bindinspector":{"Environment":{"!doc":"\n"},"Util":{"!doc":"\n"}},"domain":{"Component":{"!doc":"<p>This class implements the component event domain. All classes extending from\n<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> are included in this domain. The matching criteria uses\nExt.ComponentQuery.</p>\n"},"Controller":{"!doc":"<p>This class implements the controller event domain. All classes extending from\n<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a> are included in this domain. The selectors are simply id's or the\nwildcard \"*\" to match any controller.</p>\n"},"Direct":{"!doc":"<p>This class implements the Ext.Direct event domain. All classes extending from\nExt.direct.Provider are included in this domain. The selectors are simply provider\nid's or the wildcard \"*\" to match any provider.</p>\n"},"Global":{"!doc":"<p>This class implements the global event domain. This domain represents event fired from\nExt.GlobalEvents Observable instance. No selectors are supported for this domain.</p>\n"},"Store":{"!doc":"<p>This class implements the data store event domain. All classes extending from\nExt.data.AbstractStore are included in this domain. The selectors are simply\nstore id's or the wildcard \"*\" to match any store.</p>\n"},"View":{"!doc":"\n"}},"EventDomain":{"!doc":"<p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>\n\n<p>Matching selectors to the firer of an event is one key aspect that defines an event\ndomain. All event domain instances must provide a <code>match</code> method that tests selectors\nagainst the event firer.</p>\n\n<p>When an event domain instance is created (typically as a <code>singleton</code>), its <code>type</code>\nproperty is used to catalog the domain in the\n<a href=\"#!/api/Ext.app.EventDomain-static-property-instances\" rel=\"Ext.app.EventDomain-static-property-instances\" class=\"docClass\">Ext.app.EventDomain.instances</a> map.</p>\n\n<p>There are five event domains provided by default:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.app.domain.Component\" rel=\"Ext.app.domain.Component\" class=\"docClass\">Component domain</a>. This is the primary event domain that\nhas been available since Ext JS MVC was introduced. This domain is defined as any class that\nextends <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>, where the selectors use\nExt.ComponentQuery.</li>\n<li><a href=\"#!/api/Ext.app.domain.Global\" rel=\"Ext.app.domain.Global\" class=\"docClass\">Global domain</a>. This domain provides Controllers with access\nto events fired from Ext.GlobalEvents Observable instance. These events represent\nthe state of the application as a whole, and are always anonymous. Because of this, Global\ndomain does not provide selectors at all.</li>\n<li><a href=\"#!/api/Ext.app.domain.Controller\" rel=\"Ext.app.domain.Controller\" class=\"docClass\">Controller domain</a>. This domain includes all classes\nthat extend <a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Ext.app.Controller</a>. Events fired by Controllers will be available\nwithin this domain; selectors are either Controller's <a href=\"#!/api/Ext.app.Controller-cfg-id\" rel=\"Ext.app.Controller-cfg-id\" class=\"docClass\">id</a> or\n'*' wildcard for any Controller.</li>\n<li><a href=\"#!/api/Ext.app.domain.Store\" rel=\"Ext.app.domain.Store\" class=\"docClass\">Store domain</a>. This domain is for classes extending\nExt.data.AbstractStore. Selectors are either Store's\nstoreId or '*' wildcard for any Store.</li>\n<li><a href=\"#!/api/Ext.app.domain.Direct\" rel=\"Ext.app.domain.Direct\" class=\"docClass\">Direct domain</a>. This domain includes all classes that extend\nExt.direct.Provider. Selectors are either Provider's id\nor '*' wildcard for any Provider. This domain is optional and will be loaded only if\nExt.direct.Manager singleton is required in your application.</li>\n</ul>\n\n"},"EventBus":{"!doc":"<p>This class manages event dispatching for Controllers. The details of connecting classes\nto this dispatching mechanism is delegated to <a href=\"#!/api/Ext.app.EventDomain\" rel=\"Ext.app.EventDomain\" class=\"docClass\">Ext.app.EventDomain</a> instances.</p>\n"},"route":{"Queue":{"!doc":"<p>A Queue is a queue of <a href=\"#!/api/Ext.app.route.Route\" rel=\"Ext.app.route.Route\" class=\"docClass\">Ext.app.route.Route</a> instances managed by the\n<a href=\"#!/api/Ext.app.route.Router\" rel=\"Ext.app.route.Router\" class=\"docClass\">Ext.app.route.Router</a> singleton if queueActions is set to <code>true</code>.</p>\n\n<p>A developer shouldn't need to use this class as <a href=\"#!/api/Ext.app.route.Router\" rel=\"Ext.app.route.Router\" class=\"docClass\">Ext.app.route.Router</a> should\nmanage this class. When a <a href=\"#!/api/Ext.app.route.Route\" rel=\"Ext.app.route.Route\" class=\"docClass\">Ext.app.route.Route</a> is executed,it will automatically\nkeep running the queue until the queue is empty.</p>\n"},"Route":{"!doc":"<p>Represents a mapping between a url and a controller/action pair. May also contain\nadditional params.</p>\n\n<p>This is a private internal class that should not need to be used by end-developer code.\nIts API and existence are subject to change so use at your own risk.</p>\n"},"Router":{"!doc":"<p>The Router is an ordered set of <a href=\"#!/api/Ext.app.route.Route\" rel=\"Ext.app.route.Route\" class=\"docClass\">Ext.app.route.Route</a> definitions that decode a\nurl into a controller function to execute. Each <code>route</code> defines a type of url to match,\nalong with the controller function to call if it is matched. The Router uses the\n<a href=\"#!/api/Ext.util.History\" rel=\"Ext.util.History\" class=\"docClass\">Ext.util.History</a> singleton to find out when the browser's url has changed.</p>\n\n<p>Routes are almost always defined inside a <a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Controller</a>, as\nopposed to on the Router itself. End-developers should not usually need to interact\ndirectly with the Router as the Controllers manage everything automatically. See the\n<a href=\"#!/api/Ext.app.Controller\" rel=\"Ext.app.Controller\" class=\"docClass\">Controller documentation</a> for more information on specifying\nroutes.</p>\n"}},"Util":{"!doc":"\n"},"ViewController":{"!doc":"<p>A view controller is a controller that can be attached to a specific view\ninstance so it can manage the view and it's child components. Each instance of the view\nwill have a new view controller, so the instances are isolated.</p>\n\n<p>When a controller is specified on a view, the view automatically becomes a <a href=\"#!/api/Ext.container.Container-cfg-referenceHolder\" rel=\"Ext.container.Container-cfg-referenceHolder\" class=\"docClass\">Ext.container.Container.referenceHolder</a>,\nso it will receive inline events declared on the view. Sample usage:</p>\n\n<pre class='inline-example '><code>Ext.define('User', {\n   extend: 'Ext.data.Model',\n   fields: ['name', 'phone']    \n});\n\nExt.define('UserListController', {\n    extend : '<a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">Ext.app.ViewController</a>',\n    alias: 'controller.userlist',\n\n    init: function() {\n        this.userCount = 0;\n        var users = [],\n            i;\n\n        for (i = 0; i &lt; 5; ++i) {\n            users.push(this.getUser());\n        }  \n        this.getView().getStore().add(users);\n    },\n\n    onAddClick: function() {\n        this.addUser();\n    },\n\n    onDeleteClick: function() {\n        var view = this.getView(),\n            selected = view.getSelectionModel().getSelection()[0],\n            store = view.getStore();\n\n        store.remove(selected);\n    },\n\n    onSelectionChange: function(selModel, selections) {\n        this.lookupReference('delete').setDisabled(selections.length === 0);\n    },\n\n    getUser: function() {\n        ++this.userCount;\n        return {\n            name: 'User ' + this.userCount,\n            phone: this.generatePhone()\n        };\n    },\n\n    addUser: function() {\n        this.getView().getStore().add(this.getUser());    \n    },\n\n    generatePhone: function() {\n        var num = '',\n            i;\n\n        for (i = 0; i &lt; 7; ++i) {\n            num += Ext.Number.randomInt(0, 9);\n            if (num.length === 3) {\n                num += '-';\n            }\n        }    \n        return num;\n    }\n});\n\nExt.define('UserList', {\n    extend: '<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>',\n    controller: 'userlist',\n\n    tbar: [{\n        text: 'Add',\n        listeners: {\n            click: 'onAddClick'\n        }    \n    }, {\n        text: 'Delete',\n        reference: 'delete',\n        listeners: {\n            click: 'onDeleteClick'\n        }\n    }],\n    store: {\n        model: 'User'\n    },\n    selModel: {\n        type: 'rowmodel',\n        listeners: {\n            selectionchange: 'onSelectionChange'\n        }    \n    },\n    columns: [{\n        flex: 1,\n        dataIndex: 'name',\n        text: 'Name'\n    }, {\n        flex: 1,\n        dataIndex: 'phone',\n        text: 'Phone'\n    }]\n});\n\nExt.onReady(function() {\n    new UserList({\n        renderTo: Ext.getBody(),\n        width: 400,\n        height: 200\n    });\n});\n</code></pre>\n"}},"button":{"Button":{"!doc":"<p>Create simple buttons with this component. Customisations include <a href=\"#!/api/Ext.button.Button-cfg-iconAlign\" rel=\"Ext.button.Button-cfg-iconAlign\" class=\"docClass\">aligned</a>\n<a href=\"#!/api/Ext.button.Button-cfg-iconCls\" rel=\"Ext.button.Button-cfg-iconCls\" class=\"docClass\">icons</a>, <a href=\"#!/api/Ext.button.Button-cfg-menu\" rel=\"Ext.button.Button-cfg-menu\" class=\"docClass\">dropdown menus</a>, <a href=\"#!/api/Ext.button.Button-cfg-tooltip\" rel=\"Ext.button.Button-cfg-tooltip\" class=\"docClass\">tooltips</a>\nand <a href=\"#!/api/Ext.button.Button-cfg-scale\" rel=\"Ext.button.Button-cfg-scale\" class=\"docClass\">sizing options</a>. Specify a <a href=\"#!/api/Ext.button.Button-cfg-handler\" rel=\"Ext.button.Button-cfg-handler\" class=\"docClass\">handler</a> to run code when\na user clicks the button, or use listeners for other events such as\n<a href=\"#!/api/Ext.button.Button-event-mouseover\" rel=\"Ext.button.Button-event-mouseover\" class=\"docClass\">mouseover</a>. Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text: 'Click me',\n    renderTo: Ext.getBody(),\n    handler: function() {\n        alert('You clicked the button!');\n    }\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.button.Button-cfg-handler\" rel=\"Ext.button.Button-cfg-handler\" class=\"docClass\">handler</a> configuration can also be updated dynamically using the <a href=\"#!/api/Ext.button.Button-method-setHandler\" rel=\"Ext.button.Button-method-setHandler\" class=\"docClass\">setHandler</a>\nmethod.  Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text    : 'Dynamic Handler Button',\n    renderTo: Ext.getBody(),\n    handler : function() {\n        // this button will spit out a different number every time you click it.\n        // so firstly we must check if that number is already set:\n        if (this.clickCount) {\n            // looks like the property is already set, so lets just add 1 to that number and alert the user\n            this.clickCount++;\n            alert('You have clicked the button \"' + this.clickCount + '\" times.\\n\\nTry clicking it again..');\n        } else {\n            // if the clickCount property is not set, we will set it and alert the user\n            this.clickCount = 1;\n            alert('You just clicked the button for the first time!\\n\\nTry pressing it again..');\n        }\n    }\n});\n</code></pre>\n\n<p>A button within a container:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.Container</a>', {\n    renderTo: Ext.getBody(),\n    items   : [\n        {\n            xtype: 'button',\n            text : 'My Button'\n        }\n    ]\n});\n</code></pre>\n\n<p>A useful option of Button is the <a href=\"#!/api/Ext.button.Button-cfg-scale\" rel=\"Ext.button.Button-cfg-scale\" class=\"docClass\">scale</a> configuration. This configuration has three different options:</p>\n\n<ul>\n<li><code>'small'</code></li>\n<li><code>'medium'</code></li>\n<li><code>'large'</code></li>\n</ul>\n\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: document.body,\n    text    : 'Click me',\n    scale   : 'large'\n});\n</code></pre>\n\n<p>Buttons can also be toggled. To enable this, you simple set the <a href=\"#!/api/Ext.button.Button-cfg-enableToggle\" rel=\"Ext.button.Button-cfg-enableToggle\" class=\"docClass\">enableToggle</a> property to <code>true</code>.\nExample usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    renderTo: Ext.getBody(),\n    text: 'Click Me',\n    enableToggle: true\n});\n</code></pre>\n\n<p>You can assign a menu to a button by using the <a href=\"#!/api/Ext.button.Button-cfg-menu\" rel=\"Ext.button.Button-cfg-menu\" class=\"docClass\">menu</a> configuration. This standard configuration\ncan either be a reference to a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> object, a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> id or a\n<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">menu</a> config blob. When assigning a menu to a button, an arrow is automatically\nadded to the button.  You can change the alignment of the arrow using the <a href=\"#!/api/Ext.button.Button-cfg-arrowAlign\" rel=\"Ext.button.Button-cfg-arrowAlign\" class=\"docClass\">arrowAlign</a> configuration\non button.  Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text      : 'Menu button',\n    renderTo  : Ext.getBody(),\n    arrowAlign: 'bottom',\n    menu      : [\n        {text: 'Item 1'},\n        {text: 'Item 2'},\n        {text: 'Item 3'},\n        {text: 'Item 4'}\n    ]\n});\n</code></pre>\n\n<p>Using listeners, you can easily listen to events fired by any component, using the listeners\nconfiguration or using the <a href=\"#!/api/Ext.button.Button-method-addListener\" rel=\"Ext.button.Button-method-addListener\" class=\"docClass\">addListener</a> method.  Button has a variety of different listeners:</p>\n\n<ul>\n<li><code>click</code></li>\n<li><code>toggle</code></li>\n<li><code>mouseover</code></li>\n<li><code>mouseout</code></li>\n<li><code>mouseshow</code></li>\n<li><code>menuhide</code></li>\n<li><code>menutriggerover</code></li>\n<li><code>menutriggerout</code></li>\n</ul>\n\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.Button</a>', {\n    text     : 'Button',\n    renderTo : Ext.getBody(),\n    listeners: {\n        click: function() {\n            // this == the button, as we are in the local scope\n            this.setText('I was clicked!');\n        },\n        mouseover: function() {\n            // set a new config which says we moused over, if not already set\n            if (!this.mousedOver) {\n                this.mousedOver = true;\n                alert('You moused over a button!\\n\\nI wont do this again.');\n            }\n        }\n    }\n});\n</code></pre>\n"},"Cycle":{"!doc":"<p>A specialized SplitButton that contains a menu of <a href=\"#!/api/Ext.menu.CheckItem\" rel=\"Ext.menu.CheckItem\" class=\"docClass\">Ext.menu.CheckItem</a> elements. The button automatically\ncycles through each menu item on click, raising the button's <a href=\"#!/api/Ext.button.Cycle-event-change\" rel=\"Ext.button.Cycle-event-change\" class=\"docClass\">change</a> event (or calling the button's\n<a href=\"#!/api/Ext.button.Cycle-cfg-changeHandler\" rel=\"Ext.button.Cycle-cfg-changeHandler\" class=\"docClass\">changeHandler</a> function, if supplied) for the active menu item. Clicking on the arrow section of the\nbutton displays the dropdown menu just like a normal SplitButton.  Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.button.Cycle\" rel=\"Ext.button.Cycle\" class=\"docClass\">Ext.button.Cycle</a>', {\n    showText: true,\n    prependText: 'View as ',\n    renderTo: Ext.getBody(),\n    menu: {\n        id: 'view-type-menu',\n        items: [{\n            text: 'text only',\n            iconCls: 'view-text',\n            checked: true\n        },{\n            text: 'HTML',\n            iconCls: 'view-html'\n        }]\n    },\n    changeHandler: function(cycleBtn, activeItem) {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Change View', activeItem.text);\n    }\n});\n</code></pre>\n"},"Split":{"!doc":"<p>A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event\nof the button. Typically this would be used to display a dropdown menu that provides additional options to the\nprimary button action, but any custom handler can provide the arrowclick implementation.  Example usage:</p>\n\n<pre class='inline-example '><code>// display a dropdown menu:\nExt.create('<a href=\"#!/api/Ext.button.Split\" rel=\"Ext.button.Split\" class=\"docClass\">Ext.button.Split</a>', {\n    renderTo: Ext.getBody(),\n    text: 'Options',\n    // handle a click on the button itself\n    handler: function() {\n        alert(\"The button was clicked\");\n    },\n    menu: new <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>({\n        items: [\n            // these will render as dropdown menu items when the arrow is clicked:\n            {text: 'Item 1', handler: function(){ alert(\"Item 1 clicked\"); }},\n            {text: 'Item 2', handler: function(){ alert(\"Item 2 clicked\"); }}\n        ]\n    })\n});\n</code></pre>\n\n<p>Instead of showing a menu, you can provide any type of custom functionality you want when the dropdown\narrow is clicked:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.button.Split\" rel=\"Ext.button.Split\" class=\"docClass\">Ext.button.Split</a>', {\n    renderTo: 'button-ct',\n    text: 'Options',\n    handler: optionsHandler,\n    arrowHandler: myCustomHandler\n});\n</code></pre>\n"},"Manager":{"!doc":"\n"},"Segmented":{"!doc":"<p>SegmentedButton is a container for a group of <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Button</a>s.</p>\n"}},"Component":{"!doc":"<p>Base class for all Ext components.</p>\n\n<p>The Component base class has built-in support for basic hide/show and enable/disable\nand size control behavior.</p>\n\n<h2>xtypes</h2>\n\n<p>Every component has a specific xtype, which is its Ext-specific type name, along with\nmethods for checking the xtype like <a href=\"#!/api/Ext.Component-method-getXType\" rel=\"Ext.Component-method-getXType\" class=\"docClass\">getXType</a> and <a href=\"#!/api/Ext.Component-method-isXType\" rel=\"Ext.Component-method-isXType\" class=\"docClass\">isXType</a>. See the\n<a href=\"#!/guide/components\">Component Guide</a> for more information on xtypes and the Component hierarchy.</p>\n\n<h2>Finding components</h2>\n\n<p>All Components are registered with the Ext.ComponentManager on construction so\nthat they can be referenced at any time via Ext.getCmp, passing the\n<a href=\"#!/api/Ext.Component-cfg-id\" rel=\"Ext.Component-cfg-id\" class=\"docClass\">id</a>.</p>\n\n<p>Additionally the Ext.ComponentQuery provides a CSS-selectors-like way to look\nup components by their xtype and many other attributes.  For example the following code\nwill find all textfield components inside component with <code>id: 'myform'</code>:</p>\n\n<pre><code>Ext.ComponentQuery.query('#myform textfield');\n</code></pre>\n\n<h2>Extending <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a></h2>\n\n<p>All subclasses of Component may participate in the automated Ext component\nlifecycle of creation, rendering and destruction which is provided by the\n<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a> class. Components may be added to a Container\nthrough the <a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a> config option at the time\nthe Container is created, or they may be added dynamically via the\n<a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">add</a> method.</p>\n\n<p>All user-developed visual widgets that are required to participate in automated\nlifecycle and size management should subclass Component.</p>\n\n<p>See the Creating new UI controls chapter in <a href=\"#!/guide/components\">Component Guide</a> for details on how and\nto either extend or augment Ext JS base classes to create custom Components.</p>\n\n<h2>The <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> class by itself</h2>\n\n<p>Usually one doesn't need to instantiate the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> class. There are subclasses\nwhich implement specialized use cases, covering most application needs. However it is\npossible to instantiate a base Component, and it can be rendered to document, or handled\nby layouts as the child item of a Container:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    html: 'Hello world!',\n    width: 300,\n    height: 200,\n    padding: 20,\n    style: {\n        color: '#FFFFFF',\n        backgroundColor:'#000000'\n    },\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>The Component above creates its encapsulating <code>div</code> upon render, and use the configured\nHTML as content. More complex internal structure may be created using the\n<a href=\"#!/api/Ext.Component-cfg-renderTpl\" rel=\"Ext.Component-cfg-renderTpl\" class=\"docClass\">renderTpl</a> configuration, although to display database-derived mass data, it is\nrecommended that an ExtJS data-backed Component such as a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">View</a>,\n<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a>, or <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a> be used.</p>\n\n<p><strong>From override Ext.layout.container.border.Region:</strong> This override provides extra, border layout specific methods for <code><a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a></code>. The\n<code><a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a></code> class requires this override so that the added functions\nare only included in a build when <code>border</code> layout is used.</p>\n\n<p><strong>From override Ext.rtl.Component:</strong> This override adds RTL support and the <code>rtl</code> config option to AbstactComponent.</p>\n"},"util":{"Floating":{"!doc":"<p>A mixin to add floating capability to a Component.</p>\n"},"Renderable":{"!doc":"<p>Given a component hierarchy of this:</p>\n\n<pre><code> {\n     xtype: 'panel',\n     id: 'ContainerA',\n     layout: 'hbox',\n     renderTo: Ext.getBody(),\n     items: [\n         {\n             id: 'ContainerB',\n             xtype: 'container',\n             items: [\n                 { id: 'ComponentA' }\n             ]\n         }\n     ]\n }\n</code></pre>\n\n<p>The rendering of the above proceeds roughly like this:</p>\n\n<ul>\n<li>ContainerA's initComponent calls <a href=\"#!/api/Ext.util.Renderable-method-render\" rel=\"Ext.util.Renderable-method-render\" class=\"docClass\">render</a> passing the <code>renderTo</code> property as the\ncontainer argument.</li>\n<li><code>render</code> calls the <code>getRenderTree</code> method to get a complete Ext.dom.Helper spec.</li>\n<li><code>getRenderTree</code> fires the \"beforerender\" event and calls the <a href=\"#!/api/Ext.util.Renderable-method-beforeRender\" rel=\"Ext.util.Renderable-method-beforeRender\" class=\"docClass\">beforeRender</a>\nmethod. Its result is obtained by calling <a href=\"#!/api/Ext.util.Renderable-method-getElConfig\" rel=\"Ext.util.Renderable-method-getElConfig\" class=\"docClass\">getElConfig</a>.</li>\n<li>The <a href=\"#!/api/Ext.util.Renderable-method-getElConfig\" rel=\"Ext.util.Renderable-method-getElConfig\" class=\"docClass\">getElConfig</a> method uses the <code>renderTpl</code> and its render data as the content\nof the <code>autoEl</code> described element.</li>\n<li>The result of <code>getRenderTree</code> is passed to Ext.dom.Helper.append.</li>\n<li>The <code>renderTpl</code> contains calls to render things like docked items, container items\nand raw markup (such as the <code>html</code> or <code>tpl</code> config properties). These calls are to\nmethods added to the Ext.XTemplate instance by #setupRenderTpl.</li>\n<li>The #setupRenderTpl method adds methods such as <code>renderItems</code>, <code>renderContent</code>, etc.\nto the template. These are directed to \"doRenderItems\", \"doRenderContent\" etc..</li>\n<li>The #setupRenderTpl calls traverse from components to their <a href=\"#!/api/Ext.layout.Layout\" rel=\"Ext.layout.Layout\" class=\"docClass\">Ext.layout.Layout</a>\nobject.</li>\n<li>When a container is rendered, it also has a <code>renderTpl</code>. This is processed when the\n<code>renderContainer</code> method is called in the component's <code>renderTpl</code>. This call goes to\n<a href=\"#!/api/Ext.layout.container.Container-method-doRenderContainer\" rel=\"Ext.layout.container.Container-method-doRenderContainer\" class=\"docClass\">Ext.layout.container.Container.doRenderContainer</a>. This method repeats this\nprocess for all components in the container.</li>\n<li>After the top-most component's markup is generated and placed in to the DOM, the next\nstep is to link elements to their components and finish calling the component methods\n<code>onRender</code> and <code>afterRender</code> as well as fire the corresponding events.</li>\n<li>The first step in this is to call <a href=\"#!/api/Ext.util.Renderable-method-finishRender\" rel=\"Ext.util.Renderable-method-finishRender\" class=\"docClass\">finishRender</a>. This method descends the\ncomponent hierarchy and calls <code>onRender</code> and fires the <code>render</code> event. These calls\nare delivered top-down to approximate the timing of these calls/events from previous\nversions.</li>\n<li>During the pass, the component's <code>el</code> is set. Likewise, the <code>renderSelectors</code> and\n<code>childEls</code> are applied to capture references to the component's elements.</li>\n<li>These calls are also made on the <a href=\"#!/api/Ext.layout.container.Container\" rel=\"Ext.layout.container.Container\" class=\"docClass\">Ext.layout.container.Container</a> layout to\ncapture its elements. Both of these classes use <a href=\"#!/api/Ext.util.ElementContainer\" rel=\"Ext.util.ElementContainer\" class=\"docClass\">Ext.util.ElementContainer</a> to\nhandle <code>childEls</code> processing.</li>\n</ul>\n\n"},"Animate":{"!doc":"<p>This animation class is a mixin.</p>\n\n<p><a href=\"#!/api/Ext.util.Animate\" rel=\"Ext.util.Animate\" class=\"docClass\">Ext.util.Animate</a> provides an API for the creation of animated transitions of properties and styles.\nThis class is used as a mixin and currently applied to Ext.dom.Element, Ext.CompositeElement,\nExt.draw.sprite.Sprite, Ext.draw.sprite.Composite, and <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>.  Note that Components\nhave a limited subset of what attributes can be animated such as top, left, x, y, height, width, and\nopacity (color, paddings, and margins can not be animated).</p>\n\n<h2>Animation Basics</h2>\n\n<p>All animations require three things - <code>easing</code>, <code>duration</code>, and <code>to</code> (the final end value for each property)\nyou wish to animate. Easing and duration are defaulted values specified below.\nEasing describes how the intermediate values used during a transition will be calculated.\n<a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">Easing</a> allows for a transition to change speed over its duration.\nYou may use the defaults for easing and duration, but you must always set a\n<a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> property which is the end value for all animations.</p>\n\n<p>Popular element 'to' configurations are:</p>\n\n<ul>\n<li>opacity</li>\n<li>x</li>\n<li>y</li>\n<li>color</li>\n<li>height</li>\n<li>width</li>\n</ul>\n\n\n<p>Popular sprite 'to' configurations are:</p>\n\n<ul>\n<li>translation</li>\n<li>path</li>\n<li>scale</li>\n<li>stroke</li>\n<li>rotation</li>\n</ul>\n\n\n<p>The default duration for animations is 250 (which is a 1/4 of a second).  Duration is denoted in\nmilliseconds.  Therefore 1 second is 1000, 1 minute would be 60000, and so on. The default easing curve\nused for all animations is 'ease'.  Popular easing functions are included and can be found in <a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">Easing</a>.</p>\n\n<p>For example, a simple animation to fade out an element with a default easing and duration:</p>\n\n<pre><code>var p1 = Ext.get('myElementId');\n\np1.animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>To make this animation fade out in a tenth of a second:</p>\n\n<pre><code>var p1 = Ext.get('myElementId');\n\np1.animate({\n   duration: 100,\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<h2>Animation Queues</h2>\n\n<p>By default all animations are added to a queue which allows for animation via a chain-style API.\nFor example, the following code will queue 4 animations which occur sequentially (one right after the other):</p>\n\n<pre><code>p1.animate({\n    to: {\n        x: 500\n    }\n}).animate({\n    to: {\n        y: 150\n    }\n}).animate({\n    to: {\n        backgroundColor: '#f00'  //red\n    }\n}).animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>You can change this behavior by calling the <a href=\"#!/api/Ext.util.Animate-method-syncFx\" rel=\"Ext.util.Animate-method-syncFx\" class=\"docClass\">syncFx</a> method and all\nsubsequent animations for the specified target will be run concurrently (at the same time).</p>\n\n<pre><code>p1.syncFx();  //this will make all animations run at the same time\n\np1.animate({\n    to: {\n        x: 500\n    }\n}).animate({\n    to: {\n        y: 150\n    }\n}).animate({\n    to: {\n        backgroundColor: '#f00'  //red\n    }\n}).animate({\n    to: {\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>This works the same as:</p>\n\n<pre><code>p1.animate({\n    to: {\n        x: 500,\n        y: 150,\n        backgroundColor: '#f00'  //red\n        opacity: 0\n    }\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.util.Animate-method-stopAnimation\" rel=\"Ext.util.Animate-method-stopAnimation\" class=\"docClass\">stopAnimation</a> method can be used to stop any\ncurrently running animations and clear any queued animations.</p>\n\n<h2>Animation Keyframes</h2>\n\n<p>You can also set up complex animations with <a href=\"#!/api/Ext.fx.Anim-cfg-keyframes\" rel=\"Ext.fx.Anim-cfg-keyframes\" class=\"docClass\">keyframes</a> which follow the\nCSS3 Animation configuration pattern. Note rotation, translation, and scaling can only be done for sprites.\nThe previous example can be written with the following syntax:</p>\n\n<pre><code>p1.animate({\n    duration: 1000,  //one second total\n    keyframes: {\n        25: {     //from 0 to 250ms (25%)\n            x: 0\n        },\n        50: {   //from 250ms to 500ms (50%)\n            y: 0\n        },\n        75: {  //from 500ms to 750ms (75%)\n            backgroundColor: '#f00'  //red\n        },\n        100: {  //from 750ms to 1sec\n            opacity: 0\n        }\n    }\n});\n</code></pre>\n\n<h2>Animation Events</h2>\n\n<p>Each animation you create has events for <a href=\"#!/api/Ext.fx.Anim-event-beforeanimate\" rel=\"Ext.fx.Anim-event-beforeanimate\" class=\"docClass\">beforeanimate</a>,\n<a href=\"#!/api/Ext.fx.Anim-event-afteranimate\" rel=\"Ext.fx.Anim-event-afteranimate\" class=\"docClass\">afteranimate</a>, and <a href=\"#!/api/Ext.fx.Anim-event-lastframe\" rel=\"Ext.fx.Anim-event-lastframe\" class=\"docClass\">lastframe</a>.\nKeyframed animations adds an additional <a href=\"#!/api/Ext.fx.Animator-event-keyframe\" rel=\"Ext.fx.Animator-event-keyframe\" class=\"docClass\">keyframe</a> event which\nfires for each keyframe in your animation.</p>\n\n<p>All animations support the listeners configuration to attact functions to these events.</p>\n\n<pre><code>startAnimate: function() {\n    var p1 = Ext.get('myElementId');\n    p1.animate({\n       duration: 100,\n        to: {\n            opacity: 0\n        },\n        listeners: {\n            beforeanimate:  function() {\n                // Execute my custom method before the animation\n                this.myBeforeAnimateFn();\n            },\n            afteranimate: function() {\n                // Execute my custom method after the animation\n                this.myAfterAnimateFn();\n            },\n            scope: this\n    });\n},\nmyBeforeAnimateFn: function() {\n  // My custom logic\n},\nmyAfterAnimateFn: function() {\n  // My custom logic\n}\n</code></pre>\n\n<p>Due to the fact that animations run asynchronously, you can determine if an animation is currently\nrunning on any target by using the <a href=\"#!/api/Ext.util.Animate-method-getActiveAnimation\" rel=\"Ext.util.Animate-method-getActiveAnimation\" class=\"docClass\">getActiveAnimation</a>\nmethod.  This method will return false if there are no active animations or return the currently\nrunning <a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a> instance.</p>\n\n<p>In this example, we're going to wait for the current animation to finish, then stop any other\nqueued animations before we fade our element's opacity to 0:</p>\n\n<pre><code>var curAnim = p1.getActiveAnimation();\nif (curAnim) {\n    curAnim.on('afteranimate', function() {\n        p1.stopAnimation();\n        p1.animate({\n            to: {\n                opacity: 0\n            }\n        });\n    });\n}\n</code></pre>\n"},"ElementContainer":{"!doc":"<p>This mixin enables classes to declare relationships to child elements and provides the\nmechanics for acquiring the elements and storing them on an object\ninstance as properties.</p>\n\n<p>This class is used by <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">components</a> and <a href=\"#!/api/Ext.layout.container.Container\" rel=\"Ext.layout.container.Container\" class=\"docClass\">container layouts</a> to\nmanage their child elements.</p>\n\n<p>A typical component that uses these features might look something like this:</p>\n\n<pre><code> Ext.define('Ext.ux.SomeComponent', {\n     extend: '<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>',\n\n     childEls: [\n         'bodyEl'\n     ],\n\n     renderTpl: [\n         '&lt;div id=\"{id}-bodyEl\" data-ref=\"bodyEl\"&gt;&lt;/div&gt;'\n     ],\n\n     // ...\n });\n</code></pre>\n\n<p>The <code><a href=\"#!/api/Ext.util.ElementContainer-cfg-childEls\" rel=\"Ext.util.ElementContainer-cfg-childEls\" class=\"docClass\">childEls</a></code> config lists one or more relationships to child elements managed\nby the component. The items in this array can be objects that more fully specify the\nchild. For example, the above could have used this instead to achieve the same result:</p>\n\n<pre><code> childEls: [\n     { name: 'bodyEl', itemId: 'bodyEl' }\n ]\n</code></pre>\n\n<p>Unlike a <code>renderTpl</code> where there is a single value for an instance, <code>childEls</code> are aggregated\nup the class hierarchy so that they are effectively inherited. In other words, if a\nclass where to derive from <code>Ext.ux.SomeComponent</code> in the example above, it could also\nhave a <code>childEls</code> property in the same way as <code>Ext.ux.SomeComponent</code>.</p>\n\n<pre><code> Ext.define('Ext.ux.AnotherComponent', {\n     extend: 'Ext.ux.SomeComponent',\n\n     childEls: [\n         // 'bodyEl' is inherited\n         'innerEl'\n     ],\n\n     renderTpl: [\n         '&lt;div id=\"{id}-bodyEl\" data-ref=\"bodyEl\"&gt;'\n             '&lt;div id=\"{id}-innerEl\" data-ref=\"innerEl\"&gt;&lt;/div&gt;'\n         '&lt;/div&gt;'\n     ],\n\n     // ...\n });\n</code></pre>\n\n<p><strong>IMPORTANT</strong>\nThe <code>renderTpl</code> contains both child elements and unites them in the desired markup, but\nthe <code>childEls</code> only contains the new child element. The <code>data-ref</code> attribute must be\nrendered on to child elements that do not use <code>select</code> or <code>selectNode</code> options. This\nis done for performance reasons on IE8 where element lookup (even by id) is not very\nefficient.</p>\n"},"StoreHolder":{"!doc":"<p>This class is used as a mixin.</p>\n\n<p>This class is to be used to provide basic methods for binding/unbinding stores to other\nclasses.</p>\n\n<p>This class is not intended for direct use but rather internally by those classes that\nmanage a Store.</p>\n"},"KeyNav":{"!doc":"<p>Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to\nfunction calls that will get called when the keys are pressed, providing an easy way to implement custom navigation\nschemes for any UI component.</p>\n\n<p>The following are all of the possible keys that can be implemented: enter, space, left, right, up, down, tab, esc,\npageUp, pageDown, del, backspace, home, end.</p>\n\n<p>Usage:</p>\n\n<pre><code>var nav = new <a href=\"#!/api/Ext.util.KeyNav\" rel=\"Ext.util.KeyNav\" class=\"docClass\">Ext.util.KeyNav</a>({\n    target : \"my-element\",\n    left   : function(e){\n        this.moveLeft(e.ctrlKey);\n    },\n    right  : function(e){\n        this.moveRight(e.ctrlKey);\n    },\n    enter  : function(e){\n        this.save();\n    },\n\n    // Binding may be a function specifiying fn, scope and defaultAction\n    esc: {\n        fn: this.onEsc,\n        defaultEventAction: false\n    },\n\n    // Binding may be keyed by a single character\n    A: {\n        ctrl: true,\n        fn: selectAll\n    },\n\n    // Binding may be keyed by a key code (45 = INSERT)\n    45: {\n        fn: doInsert\n    }\n    scope : this\n});\n</code></pre>\n"},"ClickRepeater":{"!doc":"<p>A wrapper class which can be applied to any element. Fires a \"click\" event while the\nmouse is pressed. The interval between firings may be specified in the config but\ndefaults to 20 milliseconds.</p>\n\n<p>Optionally, a CSS class may be applied to the element during the time it is pressed.</p>\n"},"ComponentDragger":{"!doc":"<p>A subclass of <a href=\"#!/api/Ext.dd.DragTracker\" rel=\"Ext.dd.DragTracker\" class=\"docClass\">Ext.dd.DragTracker</a> which handles dragging any Component.</p>\n\n<p>This is configured with a Component to be made draggable, and a config object for the <a href=\"#!/api/Ext.dd.DragTracker\" rel=\"Ext.dd.DragTracker\" class=\"docClass\">Ext.dd.DragTracker</a>\nclass.</p>\n\n<p>A <a href=\"#!/api/Ext.util.ComponentDragger-cfg-delegate\" rel=\"Ext.util.ComponentDragger-cfg-delegate\" class=\"docClass\">delegate</a> may be provided which may be either the element to use as the mousedown target or a\nCSS selector to activate multiple mousedown targets.</p>\n\n<p>When the Component begins to be dragged, its <code>beginDrag</code> method will be called if implemented.</p>\n\n<p>When the drag ends, its <code>endDrag</code> method will be called if implemented.</p>\n"},"Cookies":{"!doc":"<p>Utility class for setting/reading values from browser cookies.\nValues can be written using the <a href=\"#!/api/Ext.util.Cookies-method-set\" rel=\"Ext.util.Cookies-method-set\" class=\"docClass\">set</a> method.\nValues can be read using the <a href=\"#!/api/Ext.util.Cookies-method-get\" rel=\"Ext.util.Cookies-method-get\" class=\"docClass\">get</a> method.\nA cookie can be invalidated on the client machine using the <a href=\"#!/api/Ext.util.Cookies-method-clear\" rel=\"Ext.util.Cookies-method-clear\" class=\"docClass\">clear</a> method.</p>\n"},"CSS":{"!doc":"<p>Utility class for manipulating CSS rules</p>\n"},"History":{"!doc":"<p>History management component that allows you to register arbitrary tokens that signify application\nhistory state on navigation actions.  You can then handle the history <a href=\"#!/api/Ext.util.History-event-change\" rel=\"Ext.util.History-event-change\" class=\"docClass\">change</a> event in order\nto reset your application UI to the appropriate state when the user navigates forward or backward through\nthe browser history stack.</p>\n\n<h2>Initializing</h2>\n\n<p>The <a href=\"#!/api/Ext.util.History-method-init\" rel=\"Ext.util.History-method-init\" class=\"docClass\">init</a> method of the History object must be called before using History. This sets up the internal\nstate and must be the first thing called before using History.</p>\n"},"KeyMap":{"!doc":"<p>Handles mapping key events to handling functions for an element or a Component. One KeyMap can be used for multiple\nactions.</p>\n\n<p>A KeyMap must be configured with a <a href=\"#!/api/Ext.util.KeyMap-cfg-target\" rel=\"Ext.util.KeyMap-cfg-target\" class=\"docClass\">target</a> as an event source which may be an Element or a Component.</p>\n\n<p>If the target is an element, then the <code>keydown</code> event will trigger the invocation of <a href=\"#!/api/Ext.util.KeyMap-cfg-binding\" rel=\"Ext.util.KeyMap-cfg-binding\" class=\"docClass\">binding</a>s.</p>\n\n<p>It is possible to configure the KeyMap with a custom <a href=\"#!/api/Ext.util.KeyMap-cfg-eventName\" rel=\"Ext.util.KeyMap-cfg-eventName\" class=\"docClass\">eventName</a> to listen for. This may be useful when the\n<a href=\"#!/api/Ext.util.KeyMap-cfg-target\" rel=\"Ext.util.KeyMap-cfg-target\" class=\"docClass\">target</a> is a Component.</p>\n\n<p>The KeyMap's event handling requires that the first parameter passed is a key event. So if the Component's event\nsignature is different, specify a <a href=\"#!/api/Ext.util.KeyMap-cfg-processEvent\" rel=\"Ext.util.KeyMap-cfg-processEvent\" class=\"docClass\">processEvent</a> configuration which accepts the event's parameters and\nreturns a key event.</p>\n\n<p>Functions specified in <a href=\"#!/api/Ext.util.KeyMap-cfg-binding\" rel=\"Ext.util.KeyMap-cfg-binding\" class=\"docClass\">binding</a>s are called with this signature : <code>(String key, Ext.event.Event e)</code> (if the\nmatch is a multi-key combination the callback will still be called only once). A KeyMap can also handle a string\nrepresentation of keys. By default KeyMap starts enabled.</p>\n\n<p>Usage:</p>\n\n<pre><code>// map one key by key code\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    key: 13, // or Ext.event.Event.ENTER\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to one action by string\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    key: \"a\\r\\n\\t\",\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to multiple actions by strings and array of codes\nvar map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: \"my-element\",\n    binding: [{\n        key: [10,13],\n        fn: function(){ alert(\"Return was pressed\"); }\n    }, {\n        key: \"abc\",\n        fn: function(){ alert('a, b or c was pressed'); }\n    }, {\n        key: \"\\t\",\n        ctrl:true,\n        shift:true,\n        fn: function(){ alert('Control + shift + tab was pressed.'); }\n    }]\n});\n</code></pre>\n\n<p>Since 4.1.0, KeyMaps can bind to Components and process key-based events fired by Components.</p>\n\n<p>To bind to a Component, use the single parameter form of constructor and include the Component event name\nto listen for, and a <code>processEvent</code> implementation which returns the key event for further processing by\nthe KeyMap:</p>\n\n<pre><code>var map = new <a href=\"#!/api/Ext.util.KeyMap\" rel=\"Ext.util.KeyMap\" class=\"docClass\">Ext.util.KeyMap</a>({\n    target: myGridView,\n    eventName: 'itemkeydown',\n    processEvent: function(view, record, node, index, event) {\n\n        // Load the event with the extra information needed by the mappings\n        event.view = view;\n        event.store = view.getStore();\n        event.record = record;\n        event.index = index;\n        return event;\n    },\n    binding: {\n        key: Ext.event.Event.DELETE,\n        fn: function(keyCode, e) {\n            e.store.remove(e.record);\n\n            // Attempt to select the record that's now in its place\n            e.view.getSelectionModel().select(e.index);\n            e.view.el.focus();\n        }\n    }\n});\n</code></pre>\n"},"Memento":{"!doc":"<p>This class manages a set of captured properties from an object. These captured properties\ncan later be restored to an object.</p>\n"},"ProtoElement":{"!doc":"<p>Manages certain element-like data prior to rendering. These values are passed\non to the render process. This is currently used to manage the \"class\" and \"style\" attributes\nof a component's primary el as well as the bodyEl of panels. This allows things like\naddBodyCls in Panel to share logic with addCls in Component.</p>\n"},"Queue":{"!doc":"<p>An internal Queue class.</p>\n"}},"state":{"Stateful":{"!doc":"<p>A mixin for being able to save the state of an object to an underlying\n<a href=\"#!/api/Ext.state.Provider\" rel=\"Ext.state.Provider\" class=\"docClass\">Ext.state.Provider</a>.</p>\n"},"CookieProvider":{"!doc":"<p>A Provider implementation which saves and retrieves state via cookies. The CookieProvider supports the usual cookie\noptions, such as:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-path\" rel=\"Ext.state.CookieProvider-cfg-path\" class=\"docClass\">path</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-expires\" rel=\"Ext.state.CookieProvider-cfg-expires\" class=\"docClass\">expires</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-domain\" rel=\"Ext.state.CookieProvider-cfg-domain\" class=\"docClass\">domain</a></li>\n<li><a href=\"#!/api/Ext.state.CookieProvider-cfg-secure\" rel=\"Ext.state.CookieProvider-cfg-secure\" class=\"docClass\">secure</a></li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>var cp = Ext.create('<a href=\"#!/api/Ext.state.CookieProvider\" rel=\"Ext.state.CookieProvider\" class=\"docClass\">Ext.state.CookieProvider</a>', {\n    path: \"/cgi-bin/\",\n    expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days\n    domain: \"sencha.com\"\n});\n\n<a href=\"#!/api/Ext.state.Manager-method-setProvider\" rel=\"Ext.state.Manager-method-setProvider\" class=\"docClass\">Ext.state.Manager.setProvider</a>(cp);\n</code></pre>\n"},"Provider":{"!doc":"<p>Abstract base class for state provider implementations. The provider is responsible\nfor setting values  and extracting values to/from the underlying storage source. The \nstorage source can vary and the details should be implemented in a subclass. For example\na provider could use a server side database or the browser localstorage where supported.</p>\n\n\n\n\n<p>This class provides methods for encoding and decoding <b>typed</b> variables including \ndates and defines the Provider interface. By default these methods put the value and the\ntype information into a delimited string that can be stored. These should be overridden in \na subclass if you want to change the format of the encoded value and subsequent decoding.</p>\n\n"},"LocalStorageProvider":{"!doc":"<p>A Provider implementation which saves and retrieves state via the HTML5 localStorage API\nor IE <code>userData</code> storage. For details see <code>Ext.util.LocalStorage</code>.</p>\n\n<p>If the browser does not support local storage, there will be no attempt to read the state.\nBefore creating this class, check Ext.util.LocalStorage.supported.</p>\n"},"Manager":{"!doc":"<p>This is the global state manager. By default all components that are \"state aware\" check this class\nfor state information if you don't pass them a custom state provider. In order for this class\nto be useful, it must be initialized with a provider when your application initializes. Example usage:</p>\n\n<pre><code> // in your initialization function\n init: function() {\n     <a href=\"#!/api/Ext.state.Manager-method-setProvider\" rel=\"Ext.state.Manager-method-setProvider\" class=\"docClass\">Ext.state.Manager.setProvider</a>(new <a href=\"#!/api/Ext.state.CookieProvider\" rel=\"Ext.state.CookieProvider\" class=\"docClass\">Ext.state.CookieProvider</a>());\n }\n</code></pre>\n\n<p>This class passes on calls from components to the underlying <a href=\"#!/api/Ext.state.Provider\" rel=\"Ext.state.Provider\" class=\"docClass\">Ext.state.Provider</a> so that\nthere is a common interface that can be used without needing to refer to a specific provider instance\nin every component.</p>\n"}},"container":{"Container":{"!doc":"<p>Base class for any <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> that may contain other Components. Containers handle the basic behavior of\ncontaining items, namely adding, inserting and removing items.</p>\n\n<p>The most commonly used Container classes are <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>, <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a> and\n<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>. If you do not need the capabilities offered by the aforementioned classes you can create a\nlightweight Container to be encapsulated by an HTML element to your specifications by using the\n<a href=\"#!/api/Ext.Component-cfg-autoEl\" rel=\"Ext.Component-cfg-autoEl\" class=\"docClass\">autoEl</a> config option.</p>\n\n<p>The code below illustrates how to explicitly create a Container:</p>\n\n<pre class='inline-example '><code>// Explicitly create a Container\nExt.create('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>', {\n    layout: {\n        type: 'hbox'\n    },\n    width: 400,\n    renderTo: Ext.getBody(),\n    border: 1,\n    style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},\n    defaults: {\n        labelWidth: 80,\n        // implicitly create Container by specifying xtype\n        xtype: 'datefield',\n        flex: 1,\n        style: {\n            padding: '10px'\n        }\n    },\n    items: [{\n        xtype: 'datefield',\n        name: 'startDate',\n        fieldLabel: 'Start date'\n    },{\n        xtype: 'datefield',\n        name: 'endDate',\n        fieldLabel: 'End date'\n    }]\n});\n</code></pre>\n\n<h2>Layout</h2>\n\n<p>Container classes delegate the rendering of child Components to a layout manager class which must be configured into\nthe Container using the <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> configuration property.</p>\n\n<p>When either specifying child <code><a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a></code> of a Container, or dynamically <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">adding</a> Components to a\nContainer, remember to consider how you wish the Container to arrange those child elements, and whether those child\nelements need to be sized using one of Ext's built-in <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> schemes. By default, Containers use the\n<a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme which only renders child components, appending them one after the other\ninside the Container, and <strong>does not apply any sizing</strong> at all.</p>\n\n<p>A common mistake is when a developer neglects to specify a <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> (e.g. GridPanels or\nTreePanels are added to Containers for which no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> has been specified). If a Container is left to\nuse the default <a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme, none of its child components will be resized, or changed in\nany way when the Container is resized.</p>\n\n<p>Certain layout managers allow dynamic addition of child components. Those that do include\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Ext.layout.container.Card</a>, <a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">Ext.layout.container.Anchor</a>, <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">Ext.layout.container.VBox</a>,\n<a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">Ext.layout.container.HBox</a>, and <a href=\"#!/api/Ext.layout.container.Table\" rel=\"Ext.layout.container.Table\" class=\"docClass\">Ext.layout.container.Table</a>. For example:</p>\n\n<pre><code>//  Create the GridPanel.\nvar myNewGrid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: myStore,\n    headers: myHeaders,\n    title: 'Results', // the title becomes the title of the tab\n});\n\nmyTabPanel.add(myNewGrid); // <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a> implicitly uses <a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Card</a>\nmyTabPanel.<a href=\"#!/api/Ext.tab.Panel-method-setActiveTab\" rel=\"Ext.tab.Panel-method-setActiveTab\" class=\"docClass\">setActiveTab</a>(myNewGrid);\n</code></pre>\n\n<p>The example above adds a newly created GridPanel to a TabPanel. Note that a TabPanel uses <a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">Ext.layout.container.Card</a> as its layout manager which means all its child items are sized to <a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">fit</a> exactly into its client area.</p>\n\n<p><strong><em>Overnesting is a common problem</em></strong>. An example of overnesting occurs when a GridPanel is added to a TabPanel by\nwrapping the GridPanel <em>inside</em> a wrapping Panel (that has no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> specified) and then add that\nwrapping Panel to the TabPanel. The point to realize is that a GridPanel <strong>is</strong> a Component which can be added\ndirectly to a Container. If the wrapping Panel has no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> configuration, then the overnested\nGridPanel will not be sized as expected.</p>\n\n<h2>References and <a href=\"#!/api/Ext.container.Container-cfg-referenceHolder\" rel=\"Ext.container.Container-cfg-referenceHolder\" class=\"docClass\">Reference Holders</a></h2>\n\n<p>Reference holders are used to keep references to child components inside a hierarchy.</p>\n\n<p>This functionality allows the connection of encapsulated references between containers\nand their child components declaratively. Simple usage:</p>\n\n<pre><code>Ext.define('Login', {\n    extend: '<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>',\n\n    // This config is not compatible with the more common \"controller\" config\n    // used to specify a ViewController for the view. When a ViewController is\n    // specified it effectively acts as the \"reference holder\" for the view. In\n    // this example we simply mark this container as the reference holder for\n    // demonstration purposes.\n    referenceHolder: true,\n\n    title: 'Login',\n    items: [{\n        xtype: 'form',\n        items: [{\n            xtype: 'textfield',\n            reference: 'username', // A named reference to be held on the referenceHolder\n            name: 'username',\n            fieldLabel: 'Username'\n        }, {\n            xtype: 'textfield',\n            reference: 'password', // A named reference to be held on the referenceHolder\n            name: 'password',\n            fieldLabel: 'Password'\n        }] \n    }] \n});\nvar w = new Login();\nconsole.log(w.lookupReference('password')); // The password field\n</code></pre>\n\n<p>Reference holders are also encapsulated, so a reference will only be put on the closest\nreference holder above it in the component hierarchy:</p>\n\n<pre><code>var ct = new <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>({\n    referenceHolder: true,\n    items: [{\n        xtype: 'container',\n        referenceHolder: true,\n        reference: 'innerCt1',\n        items: [{\n            xtype: 'component',\n            reference: 'a',\n            id: 'a1'\n        }, {\n            xtype: 'component',\n            reference: 'b',\n            id: 'b1'\n        }]\n    }, {\n        xtype: 'container',\n        referenceHolder: true,\n        reference: 'innerCt2',\n        items: [{\n            xtype: 'component',\n            reference: 'a',\n            id: 'a2'\n        }, {\n            xtype: 'component',\n            reference: 'b',\n            id: 'b2'\n        }]\n    }]\n});\n// The main container will not have references to a/b, each innerCt will\nconsole.log(ct.lookupReference('a'), ct.lookupReference('b'));\nvar inner1 = ct.lookupReference('innerCt1');\nvar inner2 = ct.lookupReference('innerCt2');\n\nconsole.log(inner1.lookupReference('a').id, inner1.lookupReference('b').id);\nconsole.log(inner2.lookupReference('a').id, inner2.lookupReference('b').id);\n</code></pre>\n\n<p>If the view has a controller attached, it will automatically become a <a href=\"#!/api/Ext.container.Container-cfg-referenceHolder\" rel=\"Ext.container.Container-cfg-referenceHolder\" class=\"docClass\">referenceHolder</a>.\nReferences will be available in both the view and the controller:</p>\n\n<pre><code>Ext.define('ProfileController', {\n    extend: '<a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">Ext.app.ViewController</a>',\n    alias: 'controller.profile',\n\n    init: function() {\n        console.log(this.lookupReference('firstName'));\n    }\n});\n\nExt.define('Profile', {\n    extend: '<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>',\n    controller: 'profile',\n    items: [{\n        xtype: 'textfield',\n        reference: 'firstName',\n        fieldLabel: 'First Name'\n    }]\n});\n\nnew Profile(); \n</code></pre>\n\n<h2>Events &amp; defaultListenerScope</h2>\n\n<p>Events can use the default listener scope to determine at runtime the appropriate place\nto fire. This allows for declarative binding of events in a useful way:</p>\n\n<pre><code>Ext.define('MyView', {\n    extend: '<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>',\n    defaultListenerScope: true,\n    referenceHolder: true,\n    items: [{\n        xtype: 'textfield',\n        reference: 'myfield'\n    }, {\n        xtype: 'button',\n        text: 'Set to A',\n        listeners: {\n            click: 'onButtonAClick'\n        }\n    }, {\n        xtype: 'button',\n        text: 'Set to B',\n        listeners: {\n            click: 'onButtonBClick'\n        }\n    }],\n\n    onButtonAClick: function() {\n        this.lookupReference('myfield').setValue('A');\n    },\n\n    onButtonBClick: function() {\n        this.lookupReference('myfield').setValue('B');\n    }\n});\n</code></pre>\n\n<p>Like <a href=\"#!/api/Ext.container.Container-cfg-referenceHolder\" rel=\"Ext.container.Container-cfg-referenceHolder\" class=\"docClass\">referenceHolder</a>, the defaultListenerScope is encapsulated, the scope will\nbe resolved at the closest defaultListenerScope above it in the component hierarchy:</p>\n\n<pre><code>var ct = new <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>({\n    defaultListenerScope: true,\n    onCustomEvent: function() {\n        console.log('Outer called'); // Will NOT be called\n    },\n    items: [{\n        xtype: 'container',\n        defaultListenerScope: true,\n        onCustomEvent: function() {\n            console.log('Inner called'); // Will be called\n        },\n        items: [{\n            xtype: 'component',\n            itemId: 'child',\n            listeners: {\n                customevent: 'onCustomEvent'\n            }\n        }]\n    }]\n});\n// The main container will not have references to a/b, each innerCt will\nconsole.log(ct.lookupReference('a'), ct.lookupReference('b'));\nvar inner1 = ct.lookupReference('innerCt1');\nvar inner2 = ct.lookupReference('innerCt2');\n\nconsole.log(inner1.lookupReference('a').id, inner1.lookupReference('b').id);\nconsole.log(inner2.lookupReference('a').id, inner2.lookupReference('b').id);\n</code></pre>\n\n<p>Similar to references, if a <a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">Ext.app.ViewController</a> is attached to this view, it becomes\nthe defaultListenerScope, which means un-scoped, late bound events will be directed to the\ncontroller. This is powerful as it allows views to be totally declarative:</p>\n\n<pre><code>Ext.define('MyApp.controller.Login', {\n    extend : '<a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">Ext.app.ViewController</a>',\n    alias : 'controller.login',\n\n    init: function() {\n        this.sendCount = 0;    \n    },\n\n    onLoginClick : function(btn) {\n        this.login();\n    },\n\n    onFieldSpecialKey : function(field, e) {\n        if (e.getKey() === e.ENTER) {\n           this.login();\n        }\n    },\n\n    login : function() {\n       var form = this.lookupReference('form');\n        this.lookupReference('error').hide();\n        if (form.isValid()) {\n            console.log('Do the login!');\n            // Server responded...\n            if (++this.sendCount % 2 === 0) {\n                this.onServerSuccess();\n            } else {\n                this.onServerFailure();\n            }\n        }\n    },\n\n    onServerSuccess: function() {\n        // Proceed   \n        console.log('All good');\n    },\n\n    onServerFailure: function() {\n        var error = this.lookupReference('error');\n        error.update('Invalid username/password');\n        error.show();\n    }\n});\n\nExt.define('MyApp.view.Login', {\n    extend : '<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>',\n    controller : 'login',\n    referenceHolder: true,\n\n    title : 'Login',\n    width : 400,\n\n    items : [{\n        xtype : 'form',\n        reference : 'form',\n        border : false,\n        bodyPadding : 10,\n        defaultType : 'textfield',\n        defaults : {\n            anchor : '90%',\n            allowBlank : false,\n            enableKeyEvents : true\n        },\n        items : [{\n            xtype: 'component',\n            reference: 'error',\n            hidden: true,\n            margin: '0 0 10 0',\n            style: 'color: red;'\n        }, {\n            name : 'username',\n            fieldLabel : 'Username',\n            reference : 'username',\n            listeners : {\n                specialkey : 'onFieldSpecialKey'\n            }\n        }, {\n            name : 'password',\n            fieldLabel : 'Password',\n            reference : 'password',\n            inputType : 'password',\n            listeners : {\n                specialkey : 'onFieldSpecialKey'\n            }\n        }]\n    }],\n    buttons : ['-&gt;', {\n       text : 'Login',\n        listeners : {\n            click : 'onLoginClick'\n        }\n    }]\n});\n</code></pre>\n\n<h2>Adding via remote configuration</h2>\n\n<p>A server side script can be used to add Components which are generated dynamically on the server. An example of\nadding a GridPanel to a TabPanel where the GridPanel is generated by the server based on certain parameters:</p>\n\n<pre><code>// execute an Ajax request to invoke server side script:\nExt.Ajax.request({\n    url: 'gen-invoice-grid.php',\n    // send additional parameters to instruct server script\n    params: {\n        startDate: Ext.getCmp('start-date').getValue(),\n        endDate: Ext.getCmp('end-date').getValue()\n    },\n    // process the response object to add it to the TabPanel:\n    success: function(xhr) {\n        var newComponent = eval(xhr.responseText); // see discussion below\n        myTabPanel.add(newComponent); // add the component to the TabPanel\n        myTabPanel.setActiveTab(newComponent);\n    },\n    failure: function() {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>(\"Grid create failed\", \"Server communication failure\");\n    }\n});\n</code></pre>\n\n<p>The server script needs to return a JSON representation of a configuration object, which, when decoded will return a\nconfig object with an <a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtype</a>. The server might return the following JSON:</p>\n\n<pre><code>{\n    \"xtype\": 'grid',\n    \"title\": 'Invoice Report',\n    \"store\": {\n        \"model\": 'Invoice',\n        \"proxy\": {\n            \"type\": 'ajax',\n            \"url\": 'get-invoice-data.php',\n            \"reader\": {\n                \"type\": 'json'\n                \"record\": 'transaction',\n                \"idProperty\": 'id',\n                \"totalRecords\": 'total'\n            })\n        },\n        \"autoLoad\": {\n            \"params\": {\n                \"startDate\": '01/01/2008',\n                \"endDate\": '01/31/2008'\n            }\n        }\n    },\n    \"headers\": [\n        {\"header\": \"Customer\", \"width\": 250, \"dataIndex\": 'customer', \"sortable\": true},\n        {\"header\": \"Invoice Number\", \"width\": 120, \"dataIndex\": 'invNo', \"sortable\": true},\n        {\"header\": \"Invoice Date\", \"width\": 100, \"dataIndex\": 'date', \"renderer\": Ext.util.Format.dateRenderer('M d, y'), \"sortable\": true},\n        {\"header\": \"Value\", \"width\": 120, \"dataIndex\": 'value', \"renderer\": 'usMoney', \"sortable\": true}\n    ]\n}\n</code></pre>\n\n<p>When the above code fragment is passed through the <code>eval</code> function in the success handler of the Ajax request, the\nresult will be a config object which, when added to a Container, will cause instantiation of a GridPanel. <strong>Be sure\nthat the Container is configured with a layout which sizes and positions the child items to your requirements.</strong></p>\n\n<p><strong>Note:</strong> since the code above is <em>generated</em> by a server script, the <code>autoLoad</code> params for the Store, the user's\npreferred date format, the metadata to allow generation of the Model layout, and the ColumnModel can all be generated\ninto the code since these are all known on the server.</p>\n"},"ButtonGroup":{"!doc":"<p>Provides a container for arranging a group of related Buttons in a tabular manner.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Panel with ButtonGroup',\n    width: 300,\n    height:200,\n    renderTo: document.body,\n    bodyPadding: 10,\n    html: 'HTML Panel Content',\n    tbar: [{\n        xtype: 'buttongroup',\n        columns: 3,\n        title: 'Clipboard',\n        items: [{\n            text: 'Paste',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            cls: 'btn-as-arrow'\n        },{\n            xtype:'splitbutton',\n            text: 'Menu Button',\n            scale: 'large',\n            rowspan: 3,\n            iconCls: 'add',\n            iconAlign: 'top',\n            arrowAlign:'bottom',\n            menu: [{ text: 'Menu Item 1' }]\n        },{\n            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]\n        },{\n            text: 'Copy', iconCls: 'add16'\n        },{\n            text: 'Format', iconCls: 'add16'\n        }]\n    }]\n});\n</code></pre>\n"},"DockingContainer":{"!doc":"\n"},"Monitor":{"!doc":"<p>This is a utility class for being able to track all items of a particular type\ninside any level at a container. This can be used in favour of bubbling add/remove events\nwhich can add a large perf cost when implemented globally</p>\n"},"Viewport":{"!doc":"<p>A specialized container representing the viewable application area (the browser viewport).</p>\n\n<p>The Viewport renders itself to the document body, and automatically sizes itself to the size of\nthe browser viewport and manages window resizing. There may only be one Viewport created\nin a page.</p>\n\n<p>Like any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>, a Viewport will only perform sizing and positioning\non its child Components if you configure it with a <a href=\"#!/api/Ext.container.Viewport-cfg-layout\" rel=\"Ext.container.Viewport-cfg-layout\" class=\"docClass\">layout</a>.</p>\n\n<p>A Common layout used with Viewports is <a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">border layout</a>, but if the\nrequired layout is simpler, a different layout should be chosen.</p>\n\n<p>For example, to simply make a single child item occupy all available space, use\n<a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">fit layout</a>.</p>\n\n<p>To display one \"active\" item at full size from a choice of several child items, use\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">card layout</a>.</p>\n\n<p>Inner layouts are available because all <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Panel</a>s\nadded to the Viewport, either through its <a href=\"#!/api/Ext.container.Viewport-cfg-items\" rel=\"Ext.container.Viewport-cfg-items\" class=\"docClass\">items</a>, or the <a href=\"#!/api/Ext.container.Viewport-method-add\" rel=\"Ext.container.Viewport-method-add\" class=\"docClass\">add</a>\nmethod of any of its child Panels may themselves have a layout.</p>\n\n<p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide\nfor scrolling if needed using the <a href=\"#!/api/Ext.container.Viewport-cfg-autoScroll\" rel=\"Ext.container.Viewport-cfg-autoScroll\" class=\"docClass\">autoScroll</a> config.</p>\n\n<p>An example showing a classic application border layout:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Ext.container.Viewport</a>', {\n    layout: 'border',\n    items: [{\n        region: 'north',\n        html: '&lt;h1 class=\"x-panel-header\"&gt;Page Title&lt;/h1&gt;',\n        border: false,\n        margin: '0 0 5 0'\n    }, {\n        region: 'west',\n        collapsible: true,\n        title: 'Navigation',\n        width: 150\n        // could use a TreePanel or AccordionLayout for navigational items\n    }, {\n        region: 'south',\n        title: 'South Panel',\n        collapsible: true,\n        html: 'Information goes here',\n        split: true,\n        height: 100,\n        minHeight: 100\n    }, {\n        region: 'east',\n        title: 'East Panel',\n        collapsible: true,\n        split: true,\n        width: 150\n    }, {\n        region: 'center',\n        xtype: 'tabpanel', // TabPanel itself has no title\n        activeTab: 0,      // First tab active by default\n        items: {\n            title: 'Default Tab',\n            html: 'The first tab\\'s content. Others may be added dynamically'\n        }\n    }]\n});\n</code></pre>\n\n<p>Alternatively you can turn any normal Container (or Component) into a Viewport using\nthe <code><a href=\"#!/api/Ext.plugin.Viewport\" rel=\"Ext.plugin.Viewport\" class=\"docClass\">viewport plugin</a></code>.</p>\n"}},"ComponentLoader":{"!doc":"<p>This class is used to load content via Ajax into a <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>. In general\nthis class will not be instanced directly, rather a loader configuration will be passed to the\nconstructor of the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>.</p>\n\n<h2>HTML Renderer</h2>\n\n<p>By default, the content loaded will be processed as raw html. The response text\nfrom the request is taken and added to the component. This can be used in\nconjunction with the <a href=\"#!/api/Ext.ComponentLoader-cfg-scripts\" rel=\"Ext.ComponentLoader-cfg-scripts\" class=\"docClass\">scripts</a> option to execute any inline scripts in\nthe resulting content. Using this renderer has the same effect as passing the\n<a href=\"#!/api/Ext.Component-cfg-html\" rel=\"Ext.Component-cfg-html\" class=\"docClass\">Ext.Component.html</a> configuration option.</p>\n\n<h2>Data Renderer</h2>\n\n<p>This renderer allows content to be added by using JSON data and a Ext.XTemplate.\nThe content received from the response is passed to the <a href=\"#!/api/Ext.Component-method-update\" rel=\"Ext.Component-method-update\" class=\"docClass\">Ext.Component.update</a> method.\nThis content is run through the attached <a href=\"#!/api/Ext.Component-cfg-tpl\" rel=\"Ext.Component-cfg-tpl\" class=\"docClass\">Ext.Component.tpl</a> and the data is added to\nthe Component. Using this renderer has the same effect as using the <a href=\"#!/api/Ext.Component-cfg-data\" rel=\"Ext.Component-cfg-data\" class=\"docClass\">Ext.Component.data</a>\nconfiguration in conjunction with a <a href=\"#!/api/Ext.Component-cfg-tpl\" rel=\"Ext.Component-cfg-tpl\" class=\"docClass\">Ext.Component.tpl</a>.</p>\n\n<h2>Component Renderer</h2>\n\n<p>This renderer can only be used with a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> and subclasses. It allows for\nComponents to be loaded remotely into a Container. The response is expected to be a single/series of\n<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> configuration objects. When the response is received, the data is decoded\nand then passed to <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">Ext.container.Container.add</a>. Using this renderer has the same effect as specifying\nthe <a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">Ext.container.Container.items</a> configuration on a Container.</p>\n\n<h2>Custom Renderer</h2>\n\n<p>A custom function can be passed to handle any other special case, see the <a href=\"#!/api/Ext.ComponentLoader-cfg-renderer\" rel=\"Ext.ComponentLoader-cfg-renderer\" class=\"docClass\">renderer</a> option.</p>\n\n<h2>Example Usage</h2>\n\n<pre><code>var cmp = Ext.create('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    renderTo: Ext.getBody(),\n    tpl: '{firstName} - {lastName}',\n    loader: {\n        url: 'myPage.php',\n        renderer: 'data',\n        params: {\n            userId: 1\n        }\n    }\n});\n\n// call the loader manually (or use autoLoad:true instead)\ncmp.getLoader().load();\n</code></pre>\n"},"ElementLoader":{"!doc":"<p>A class used to load remote content to an Element. Sample usage:</p>\n\n<pre><code>Ext.get('el').load({\n    url: 'myPage.php',\n    scripts: true,\n    params: {\n        id: 1\n    }\n});\n</code></pre>\n\n<p>In general this class will not be instanced directly, rather the Ext.dom.Element.load method\nwill be used.</p>\n"},"panel":{"Panel":{"!doc":"<p>Panel is a container that has specific functionality and structural components that make it the perfect building\nblock for application-oriented user interfaces.</p>\n\n<p>Panels are, by virtue of their inheritance from <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>, capable of being configured with a\n<a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>, and containing child Components.</p>\n\n<p>When either specifying child <a href=\"#!/api/Ext.panel.Panel-cfg-items\" rel=\"Ext.panel.Panel-cfg-items\" class=\"docClass\">items</a> of a Panel, or dynamically <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">adding</a>\nComponents to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether those\nchild elements need to be sized using one of Ext's built-in <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code>\nschemes. By default, Panels use the <a href=\"#!/api/Ext.layout.container.Auto\" rel=\"Ext.layout.container.Auto\" class=\"docClass\">Auto</a> scheme. This simply renders child\ncomponents, appending them one after the other inside the Container, and <strong>does not apply any sizing</strong> at all.</p>\n\n<p><p><img src=\"\" alt=\"Panel components\" width=\"\" height=\"\"></p></p>\n\n<p>A Panel may also contain <a href=\"#!/api/Ext.panel.Panel-cfg-bbar\" rel=\"Ext.panel.Panel-cfg-bbar\" class=\"docClass\">bottom</a> and <a href=\"#!/api/Ext.panel.Panel-cfg-tbar\" rel=\"Ext.panel.Panel-cfg-tbar\" class=\"docClass\">top</a> toolbars, along with separate <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">header</a>, <a href=\"#!/api/Ext.panel.Panel-cfg-fbar\" rel=\"Ext.panel.Panel-cfg-fbar\" class=\"docClass\">footer</a> and body sections.</p>\n\n<p>Panel also provides built-in <a href=\"#!/api/Ext.panel.Panel-cfg-collapsible\" rel=\"Ext.panel.Panel-cfg-collapsible\" class=\"docClass\">collapsible, expandable</a> and <a href=\"#!/api/Ext.panel.Panel-cfg-closable\" rel=\"Ext.panel.Panel-cfg-closable\" class=\"docClass\">closable</a> behavior. Panels can\nbe easily dropped into any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a> or layout, and the layout and rendering pipeline\nis <a href=\"#!/api/Ext.container.Container-method-add\" rel=\"Ext.container.Container-method-add\" class=\"docClass\">completely managed by the framework</a>.</p>\n\n<p><strong>Note:</strong> By default, the <code><a href=\"#!/api/Ext.panel.Panel-cfg-closable\" rel=\"Ext.panel.Panel-cfg-closable\" class=\"docClass\">close</a></code> header tool <em>destroys</em> the Panel resulting in removal of the\nPanel and the destruction of any descendant Components. This makes the Panel object, and all its descendants\n<strong>unusable</strong>. To enable the close tool to simply <em>hide</em> a Panel for later re-use, configure the Panel with\n<code><a href=\"#!/api/Ext.panel.Panel-cfg-closeAction\" rel=\"Ext.panel.Panel-cfg-closeAction\" class=\"docClass\">closeAction</a>: 'hide'</code>.</p>\n\n<p>Usually, Panels are used as constituents within an application, in which case, they would be used as child items of\nContainers, and would themselves use Ext.Components as child <a href=\"#!/api/Ext.panel.Panel-cfg-items\" rel=\"Ext.panel.Panel-cfg-items\" class=\"docClass\">items</a>. However to illustrate simply rendering a\nPanel into the document, here's how to do it:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Hello',\n    width: 200,\n    html: '&lt;p&gt;World!&lt;/p&gt;',\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>A more realistic scenario is a Panel created to house input fields which will not be rendered, but used as a\nconstituent part of a Container:</p>\n\n<pre class='inline-example '><code>var filterPanel = Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    bodyPadding: 5,  // Don't want content to crunch against the borders\n    width: 300,\n    title: 'Filters',\n    items: [{\n        xtype: 'datefield',\n        fieldLabel: 'Start date'\n    }, {\n        xtype: 'datefield',\n        fieldLabel: 'End date'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>Note that the Panel above is configured to render into the document and assigned a size. In a real world scenario,\nthe Panel will often be added inside a Container which will use a <a href=\"#!/api/Ext.panel.Panel-cfg-layout\" rel=\"Ext.panel.Panel-cfg-layout\" class=\"docClass\">layout</a> to render, size and position its\nchild Components.</p>\n\n<p>Panels will often use specific <a href=\"#!/api/Ext.panel.Panel-cfg-layout\" rel=\"Ext.panel.Panel-cfg-layout\" class=\"docClass\">layout</a>s to provide an application with shape and structure by containing and\narranging child Components:</p>\n\n<pre class='inline-example '><code>var resultsPanel = Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Results',\n    width: 600,\n    height: 400,\n    renderTo: Ext.getBody(),\n    layout: {\n        type: 'vbox',       // Arrange child items vertically\n        align: 'stretch',    // Each takes up full width\n        padding: 5\n    },\n    items: [{               // Results grid specified as a config object with an xtype of 'grid'\n        xtype: 'grid',\n        columns: [{header: 'Column One'}],            // One header just for show. There's no data,\n        store: Ext.create('Ext.data.ArrayStore', {}), // A dummy empty data store\n        flex: 1                                       // Use 1/3 of Container's height (hint to Box layout)\n    }, {\n        xtype: 'splitter'   // A splitter between the two child items\n    }, {                    // Details Panel specified as a config object (no xtype defaults to 'panel').\n        title: 'Details',\n        bodyPadding: 5,\n        items: [{\n            fieldLabel: 'Data item',\n            xtype: 'textfield'\n        }], // An array of form fields\n        flex: 2             // Use 2/3 of Container's height (hint to Box layout)\n    }]\n});\n</code></pre>\n\n<p>The example illustrates one possible method of displaying search results. The Panel contains a grid with the\nresulting data arranged in rows. Each selected row may be displayed in detail in the Panel below. The <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">vbox</a> layout is used to arrange the two vertically. It is configured to stretch child items\nhorizontally to full width. Child items may either be configured with a numeric height, or with a <code>flex</code> value to\ndistribute available space proportionately.</p>\n\n<p>This Panel itself may be a child item of, for exaple, a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a> which will size its child items to fit\nwithin its content area.</p>\n\n<p>Using these techniques, as long as the <strong>layout</strong> is chosen and configured correctly, an application may have any\nlevel of nested containment, all dynamically sized according to configuration, the user's preference and available\nbrowser size.</p>\n"},"Table":{"!doc":"<p>This class is the base class for both <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a> and\n<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a>.</p>\n\n<p>TablePanel aggregates:</p>\n\n<ul>\n<li>a Selection Model</li>\n<li>a View</li>\n<li>a Store</li>\n<li><a href=\"#!/api/Ext.grid.header.Container\" rel=\"Ext.grid.header.Container\" class=\"docClass\">Ext.grid.header.Container</a></li>\n</ul>\n\n"},"Bar":{"!doc":"<p>Abstract base class for common functionality shared between <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">Ext.panel.Header</a>\nand <a href=\"#!/api/Ext.tab.Bar\" rel=\"Ext.tab.Bar\" class=\"docClass\">Ext.tab.Bar</a></p>\n"},"DD":{"!doc":"<p>DD implementation for Panels.</p>\n"},"Header":{"!doc":"<p>Simple header class which is used for on <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> and <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>.</p>\n"},"Pinnable":{"!doc":"<p>This mixin is applied to panels that want to manage a Pin state and corresponding tool.</p>\n"},"Proxy":{"!doc":"<p>A custom drag proxy implementation specific to <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>s. This class\nis primarily used internally for the Panel's drag drop implementation, and\nshould never need to be created directly.</p>\n"},"Title":{"!doc":"<p>A basic title component for a Panel Header</p>\n"},"Tool":{"!doc":"<p>This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the <a href=\"#!/api/Ext.panel.Tool-cfg-type\" rel=\"Ext.panel.Tool-cfg-type\" class=\"docClass\">type</a> config. The <a href=\"#!/api/Ext.panel.Tool-cfg-callback\" rel=\"Ext.panel.Tool-cfg-callback\" class=\"docClass\">callback</a> config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the <a href=\"#!/api/Ext.panel.Panel-cfg-tools\" rel=\"Ext.panel.Panel-cfg-tools\" class=\"docClass\">Ext.panel.Panel.tools</a>\nconfiguration on the Panel itself.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    width: 200,\n    height: 200,\n    renderTo: document.body,\n    title: 'A Panel',\n    tools: [{\n        type: 'help',\n        callback: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        callback: function() {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        callback: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n</code></pre>\n\n<p>The <code>callback</code> config was added in Ext JS 4.2.1 as an alternative to <a href=\"#!/api/Ext.panel.Tool-cfg-handler\" rel=\"Ext.panel.Tool-cfg-handler\" class=\"docClass\">handler</a>\nto provide a more convenient list of arguments. In Ext JS 4.2.1 it is also possible to\npass a method name instead of a direct function:</p>\n\n<pre><code> tools: [{\n     type: 'help',\n     callback: 'onHelp',\n     scope: this\n },\n ...\n</code></pre>\n\n<p>The <code>callback</code> (or <code>handler</code>) name is looked up on the <code>scope</code> which will also be the\n<code>this</code> reference when the method is called.</p>\n"}},"dashboard":{"Column":{"!doc":"<p>This class manages columns in a <code>Dashboard</code>. The primary role here is the <code>defaultType</code>\nconfig which points to <code><a href=\"#!/api/Ext.dashboard.Panel\" rel=\"Ext.dashboard.Panel\" class=\"docClass\">Ext.dashboard.Panel</a></code> and the self-destruct mechanism to get\nrid of empty columns.</p>\n"},"Dashboard":{"!doc":"<p>This class manages a drag-drop Dashboard similar to the legacy Ext JS Portal example.\nThe user-directed layout of the Dashboard is preserved the Ext JS <code>stateful</code> mechanism\nto preserve potentially dynamic user sizing and collapsed states as well as order of\nitems in their columns.</p>\n"},"DropZone":{"!doc":"<p>Internal class that manages drag/drop for the <code>Dashboard</code>.</p>\n"},"Panel":{"!doc":"<p>This class is used to wrap content items in the <code>Dashboard</code>. It uses an\n<code>anchor</code> layout by default and provides resizing on the bottom edge only.</p>\n"},"Part":{"!doc":"<p>This class encapsulates the creation of items for a <code>Dashboard</code>. Generally a <code>Part</code> is a\ncomponent factory that allows all parts of a common type to be easily coordinated as\nneeded for that type. For example, an RSS feed might need certain configuration data to\nproperly initialize. Perahps not all of this data can or should be supplied from the UI\nthat creates new instances for the <code>Dashboard</code>.</p>\n\n<h2>Part Configuration</h2>\n\n<p>The primary role of a <code>Part</code> is to provide an abstract way to define the configuration\nneeded to create views. For example, an RSS Part would at least need the URL for the\nfeed.</p>\n\n<p>To implement this a derived class provides a <code>displayForm</code> method:</p>\n\n<pre><code> Ext.define('App.parts.RSS', {\n     extend: '<a href=\"#!/api/Ext.dashboard.Part\" rel=\"Ext.dashboard.Part\" class=\"docClass\">Ext.dashboard.Part</a>',\n     alias: 'part.rss',\n\n     displayForm: function (instance, currentConfig, callback, scope) {\n         var me = this,\n             title = instance ? 'Edit RSS Feed' : 'Add RSS Feed';\n\n         // Display a prompt using current URL as default text.\n         //\n         <a href=\"#!/api/Ext.MessageBox-method-prompt\" rel=\"Ext.MessageBox-method-prompt\" class=\"docClass\">Ext.Msg.prompt</a>(title, 'RSS Feed URL', function (btn, text) {\n             if (btn === 'ok') {\n                 var config = {\n                     feedUrl: text\n                 };\n\n                 callback.call(scope || me, config);\n             }\n         }, me, false, currentConfig ? currentConfig.feedUrl : '');\n     }\n });\n</code></pre>\n\n<p>The returned configuration object is used to create views. It is also passed back to\n<code>displayForm</code> to allow the user to edit the configuration for an existing view.</p>\n\n<h2>Creating Views</h2>\n\n<p>The next step is to define the view (the components) appropriate for the part. To\ncontinue with the above example.</p>\n\n<pre><code> Ext.define('App.parts.RSS', {\n     extend: '<a href=\"#!/api/Ext.dashboard.Part\" rel=\"Ext.dashboard.Part\" class=\"docClass\">Ext.dashboard.Part</a>',\n     alias: 'part.rss',\n\n     // The viewTemplate is \"component template\" that is evaluated against the\n     // configuration (as returned by displayForm). The top-most component is\n     // a panel specific to the Dashboard so it can be configured but should\n     // not be replaced. Instead, fit an appropriate component to the panel.\n     //\n     viewTemplate: {\n         layout: 'fit',\n         items: [{\n             xtype: 'feedpanel',\n             feedUrl: '{feedUrl}'  // from the configuration object\n         }]\n     },\n\n     displayForm: ...\n });\n</code></pre>\n\n<p>You can instead choose to override the <code>createView</code> method if <code>viewTemplate</code> does not\nprovide enough flexibility. It is usually a better solution to create a class (like\nin the above example) and pass basic configurations to it rather than over-complicate\neither the <code>viewTemplate</code> or a custom <code>createView</code> method.</p>\n"}},"dd":{"DropTarget":{"!doc":"<p>A simple class that provides the basic implementation needed to make any element a drop target that can have\ndraggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</p>\n"},"DragDrop":{"!doc":"<p>Defines the interface and base operation of items that that can be\ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver and onDragOut.\nUp to three html elements can be associated with a DragDrop instance:</p>\n\n<ul>\n<li><p>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with\nother DragDrop objects.</p></li>\n<li><p>handle element(s): The drag operation only occurs if the element that\nwas clicked matches a handle element.  By default this is the linked\nelement, but there are times that you will want only a portion of the\nlinked element to initiate the drag operation, and the setHandleElId()\nmethod provides a way to define this.</p></li>\n<li><p>drag element: this represents the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in <a href=\"#!/api/Ext.dd.DD\" rel=\"Ext.dd.DD\" class=\"docClass\">Ext.dd.DD</a>.  setDragElId() lets you define\na separate element that would be moved, as in <a href=\"#!/api/Ext.dd.DDProxy\" rel=\"Ext.dd.DDProxy\" class=\"docClass\">Ext.dd.DDProxy</a>.</p></li>\n</ul>\n\n\n<p>This class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any\nother DragDrop obj in the \"group1\" group:</p>\n\n<pre><code>dd = new <a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>(\"div1\", \"group1\");\n</code></pre>\n\n<p>Since none of the event handlers have been implemented, nothing would\nactually happen if you were to run the code above.  Normally you would\noverride this class or one of the default implementations, but you can\nalso override the methods you want on an instance of the class...</p>\n\n<pre><code>dd.onDragDrop = function(e, id) {\n    alert(\"dd was dropped on \" + id);\n}\n</code></pre>\n"},"DDTarget":{"!doc":"<p>A DragDrop implementation that does not move, but can be a drop\ntarget.  You would get the same result by simply omitting implementation\nfor the event callbacks, but this way we reduce the processing cost of the\nevent listener and the callbacks.</p>\n"},"DD":{"!doc":"<p>A DragDrop implementation where the linked element follows the\nmouse cursor during a drag.</p>\n"},"DDProxy":{"!doc":"<p>A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.</p>\n\n<p>References to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage.</p>\n"},"DragDropElement":{"!doc":"\n"},"DragDropManager":{"ElementWrapper":{"!doc":"<p>Deprecated inner class for cached elements.</p>\n"},"!doc":"<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.</p>\n"},"DragSource":{"!doc":"<p>A simple class that provides the basic implementation needed to make any element draggable.</p>\n"},"DragTracker":{"!doc":"<p>A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,\nas well as during the drag. This is useful for components such as <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>, where there is\nan element that can be dragged around to change the Slider's value.</p>\n\n<p>DragTracker provides a series of template methods that should be overridden to provide functionality\nin response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.\nSee <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>'s initEvents function for an example implementation.</p>\n"},"DragZone":{"!doc":"<p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>\n\n<p>This class does not move the drag target nodes, but a proxy element which may contain any DOM structure you wish. The\nDOM element to show in the proxy is provided by either a provided implementation of <a href=\"#!/api/Ext.dd.DragZone-method-getDragData\" rel=\"Ext.dd.DragZone-method-getDragData\" class=\"docClass\">getDragData</a>, or by\nregistered draggables registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a></p>\n\n<p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some application\nobject (For example nodes in a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">DataView</a>) then use of this class is the most efficient way to\n\"activate\" those nodes.</p>\n\n<p>By default, this class requires that draggable child nodes are registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a>. However a\nsimpler way to allow a DragZone to manage any number of draggable elements is to configure the DragZone with an\nimplementation of the <a href=\"#!/api/Ext.dd.DragZone-method-getDragData\" rel=\"Ext.dd.DragZone-method-getDragData\" class=\"docClass\">getDragData</a> method which interrogates the passed mouse event to see if it has taken\nplace within an element, or class of elements. This is easily done by using the event's getTarget method to identify a node based on a CSS selector. For example,\nto make the nodes of a DataView draggable, use the following technique. Knowledge of the use of the DataView is\nrequired:</p>\n\n<pre><code>myDataView.on('render', function(v) {\n    myDataView.dragZone = new <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">Ext.dd.DragZone</a>(v.getEl(), {\n\n//      On receipt of a mousedown event, see if it is within a DataView node.\n//      Return a drag data object if so.\n        getDragData: function(e) {\n\n//          Use the DataView's own itemSelector (a mandatory property) to\n//          test if the mousedown is within one of the DataView's nodes.\n            var sourceEl = e.getTarget(v.itemSelector, 10);\n\n//          If the mousedown is within a DataView node, clone the node to produce\n//          a ddel element for use by the drag proxy. Also add application data\n//          to the returned data object.\n            if (sourceEl) {\n                d = sourceEl.cloneNode(true);\n                d.id = Ext.id();\n                return {\n                    ddel: d,\n                    sourceEl: sourceEl,\n                    repairXY: Ext.fly(sourceEl).getXY(),\n                    sourceStore: v.store,\n                    draggedRecord: v.<a href=\"#!/api/Ext.view.View-method-getRecord\" rel=\"Ext.view.View-method-getRecord\" class=\"docClass\">getRecord</a>(sourceEl)\n                }\n            }\n        },\n\n//      Provide coordinates for the proxy to slide back to on failed drag.\n//      This is the original XY coordinates of the draggable element captured\n//      in the getDragData method.\n        getRepairXY: function() {\n            return this.dragData.repairXY;\n        }\n    });\n});\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">DropZone</a> documentation for details about building a DropZone which cooperates with\nthis DragZone.</p>\n"},"DropZone":{"!doc":"<p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>\n\n<p>By default, this class requires that child nodes accepting drop are registered with <a href=\"#!/api/Ext.dd.Registry\" rel=\"Ext.dd.Registry\" class=\"docClass\">Ext.dd.Registry</a>.\nHowever a simpler way to allow a DropZone to manage any number of target elements is to configure the\nDropZone with an implementation of <a href=\"#!/api/Ext.dd.DropZone-method-getTargetFromEvent\" rel=\"Ext.dd.DropZone-method-getTargetFromEvent\" class=\"docClass\">getTargetFromEvent</a> which interrogates the passed\nmouse event to see if it has taken place within an element, or class of elements. This is easily done\nby using the event's getTarget method to identify a node based on a\nCSS selector.</p>\n\n<p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over\na drop target, that target is passed as the first parameter to <a href=\"#!/api/Ext.dd.DropZone-method-onNodeEnter\" rel=\"Ext.dd.DropZone-method-onNodeEnter\" class=\"docClass\">onNodeEnter</a>, <a href=\"#!/api/Ext.dd.DropZone-method-onNodeOver\" rel=\"Ext.dd.DropZone-method-onNodeOver\" class=\"docClass\">onNodeOver</a>,\n<a href=\"#!/api/Ext.dd.DropZone-method-onNodeOut\" rel=\"Ext.dd.DropZone-method-onNodeOut\" class=\"docClass\">onNodeOut</a>, <a href=\"#!/api/Ext.dd.DropZone-method-onNodeDrop\" rel=\"Ext.dd.DropZone-method-onNodeDrop\" class=\"docClass\">onNodeDrop</a>. You may configure the instance of DropZone with implementations\nof these methods to provide application-specific behaviour for these events to update both\napplication state, and UI state.</p>\n\n<p>For example to make a GridPanel a cooperating target with the example illustrated in\n<a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>, the following technique might be used:</p>\n\n<pre><code>myGridPanel.on('render', function() {\n    myGridPanel.dropZone = new <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a>(myGridPanel.getView().scroller, {\n\n        // If the mouse is over a grid row, return that node. This is\n        // provided as the \"target\" parameter in all \"onNodeXXXX\" node event handling functions\n        getTargetFromEvent: function(e) {\n            return e.getTarget(myGridPanel.getView().rowSelector);\n        },\n\n        // On entry into a target node, highlight that node.\n        onNodeEnter : function(target, dd, e, data){\n            Ext.fly(target).addCls('my-row-highlight-class');\n        },\n\n        // On exit from a target node, unhighlight that node.\n        onNodeOut : function(target, dd, e, data){\n            Ext.fly(target).removeCls('my-row-highlight-class');\n        },\n\n        // While over a target node, return the default drop allowed class which\n        // places a \"tick\" icon into the drag proxy.\n        onNodeOver : function(target, dd, e, data){\n            return Ext.dd.DropZone.prototype.dropAllowed;\n        },\n\n        // On node drop we can interrogate the target to find the underlying\n        // application object that is the real target of the dragged data.\n        // In this case, it is a Record in the GridPanel's Store.\n        // We can use the data set up by the DragZone's getDragData method to read\n        // any data we decided to attach in the DragZone's getDragData method.\n        onNodeDrop : function(target, dd, e, data){\n            var rowIndex = myGridPanel.getView().findRowIndex(target);\n            var r = myGridPanel.getStore().getAt(rowIndex);\n            <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +\n                ' on Record id ' + r.id);\n            return true;\n        }\n    });\n}\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> documentation for details about building a DragZone which\ncooperates with this DropZone.</p>\n"},"Registry":{"!doc":"<p>Provides easy access to all drag drop components that are registered on a page. Items can be retrieved either\ndirectly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.</p>\n"},"ScrollManager":{"!doc":"<p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>\n\n<p>The ScrollManager configs will be used as the defaults for any scroll container registered with it, but you can also\noverride most of the configs per scroll container by adding a ddScrollConfig object to the target element that\ncontains these properties: <a href=\"#!/api/Ext.dd.ScrollManager-property-hthresh\" rel=\"Ext.dd.ScrollManager-property-hthresh\" class=\"docClass\">hthresh</a>, <a href=\"#!/api/Ext.dd.ScrollManager-property-vthresh\" rel=\"Ext.dd.ScrollManager-property-vthresh\" class=\"docClass\">vthresh</a>, <a href=\"#!/api/Ext.dd.ScrollManager-property-increment\" rel=\"Ext.dd.ScrollManager-property-increment\" class=\"docClass\">increment</a> and <a href=\"#!/api/Ext.dd.ScrollManager-property-frequency\" rel=\"Ext.dd.ScrollManager-property-frequency\" class=\"docClass\">frequency</a>. Example\nusage:</p>\n\n<pre><code>var el = Ext.get('scroll-ct');\nel.ddScrollConfig = {\n    vthresh: 50,\n    hthresh: -1,\n    frequency: 100,\n    increment: 200\n};\n<a href=\"#!/api/Ext.dd.ScrollManager-method-register\" rel=\"Ext.dd.ScrollManager-method-register\" class=\"docClass\">Ext.dd.ScrollManager.register</a>(el);\n</code></pre>\n\n<p>Note: This class is designed to be used in \"Point Mode</p>\n"},"StatusProxy":{"!doc":"<p>A specialized floating Component that supports a drop status icon, <a href=\"#!/api/Ext.dom.Layer\" rel=\"Ext.dom.Layer\" class=\"docClass\">Ext.Layer</a> styles\nand auto-repair.  This is the default drag proxy used by all Ext.dd components.</p>\n"}},"dom":{"ButtonElement":{"!doc":"<p>A special Ext.dom.Element used by Buttons.  Since buttons use <code>display:table</code> elements\nfor their layout, some special adjustments are needed when the width switches from\nauto to fixed width and back.</p>\n\n<p>When the button has a width other than <code>auto</code>, and a right-aligned arrow, long button\ntext will cause the arrow to disappear off the right edge of the button if the btnWrap\nelement has table-layout:auto.  To prevent this, we need to set table-layout:fixed\non the btnWrap when the button has a width, however, when the button is shrinkwrap\nwidth the btnWrap cannot have table-layout:fixed because its width:100% style will\ncause the button to expand outward.</p>\n\n<p>Additionally, in shrinkWrap height mode, the button css sets a height on the btnEl\nelement, but if the height is being stretched, the btnEl's height will cause the contents\nto be incorrectly vertically centered, so we dynamically set the btnEl's height to\n\"auto\" in fixed-height mode.</p>\n"},"Layer":{"!doc":"<p>An extended Ext.dom.Element object that supports a shadow, constrain to viewport\nand automatic maintaining of shadow position.</p>\n"}},"Editor":{"!doc":"<p>The Editor class is used to provide inline editing for elements on the page. The editor\nis backed by a <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> that will be displayed to edit the underlying content.\nThe editor is a floating Component, when the editor is shown it is automatically aligned to\ndisplay over the top of the bound element it is editing. The Editor contains several options\nfor how to handle key presses:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.Editor-cfg-completeOnEnter\" rel=\"Ext.Editor-cfg-completeOnEnter\" class=\"docClass\">completeOnEnter</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-cancelOnEsc\" rel=\"Ext.Editor-cfg-cancelOnEsc\" class=\"docClass\">cancelOnEsc</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-swallowKeys\" rel=\"Ext.Editor-cfg-swallowKeys\" class=\"docClass\">swallowKeys</a></li>\n</ul>\n\n\n<p>It also has options for how to use the value once the editor has been activated:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.Editor-cfg-revertInvalid\" rel=\"Ext.Editor-cfg-revertInvalid\" class=\"docClass\">revertInvalid</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-ignoreNoChange\" rel=\"Ext.Editor-cfg-ignoreNoChange\" class=\"docClass\">ignoreNoChange</a></li>\n<li><a href=\"#!/api/Ext.Editor-cfg-updateEl\" rel=\"Ext.Editor-cfg-updateEl\" class=\"docClass\">updateEl</a></li>\n</ul>\n\n\n<p>Sample usage:</p>\n\n<pre><code>var editor = new <a href=\"#!/api/Ext.Editor\" rel=\"Ext.Editor\" class=\"docClass\">Ext.Editor</a>({\n    updateEl: true, // update the innerHTML of the bound element when editing completes\n    field: {\n        xtype: 'textfield'\n    }\n});\nvar el = Ext.get('my-text'); // The element to 'edit'\neditor.startEdit(el); // The value of the field will be taken as the innerHTML of the element.\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Ext.Editor component\" width=\"\" height=\"\"></p></p>\n"},"enums":{"Feature":{"!doc":"<p>Enumeration of all ftypes.</p>\n"},"Layout":{"!doc":"<p>Enumeration of all layout types.</p>\n"},"Plugin":{"!doc":"<p>Enumeration of all ptypes.</p>\n"},"Widget":{"!doc":"<p>Enumeration of all xtypes.</p>\n"}},"EventManager":{"!doc":"<p>Registers event handlers on DOM elements.</p>\n\n<p>This class is deprecated.  Please use the Ext.dom.Element api to atach listeners to\nDOM Elements.  For example:</p>\n\n<pre><code>var element = Ext.get('myId');\n\nelement.on('click', function(e) {\n    // event handling logic here\n});\n</code></pre>\n"},"flash":{"Component":{"!doc":"<p>A simple Component for displaying an Adobe Flash SWF movie. The movie will be sized and can participate\nin layout like any other Component.</p>\n\n<p>This component requires the third-party SWFObject library version 2.2 or above. It is not included within\nthe ExtJS distribution, so you will have to include it into your page manually in order to use this component.\nThe SWFObject library can be downloaded from the <a href=\"http://code.google.com/p/swfobject\">SWFObject project page</a>\nand then simply import it into the head of your HTML document:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"path/to/local/swfobject.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h2>Configuration</h2>\n\n<p>This component allows several options for configuring how the target Flash movie is embedded. The most\nimportant is the required <a href=\"#!/api/Ext.flash.Component-cfg-url\" rel=\"Ext.flash.Component-cfg-url\" class=\"docClass\">url</a> which points to the location of the Flash movie to load. Other\nconfigurations include:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-backgroundColor\" rel=\"Ext.flash.Component-cfg-backgroundColor\" class=\"docClass\">backgroundColor</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-wmode\" rel=\"Ext.flash.Component-cfg-wmode\" class=\"docClass\">wmode</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashVars\" rel=\"Ext.flash.Component-cfg-flashVars\" class=\"docClass\">flashVars</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashParams\" rel=\"Ext.flash.Component-cfg-flashParams\" class=\"docClass\">flashParams</a></li>\n<li><a href=\"#!/api/Ext.flash.Component-cfg-flashAttributes\" rel=\"Ext.flash.Component-cfg-flashAttributes\" class=\"docClass\">flashAttributes</a></li>\n</ul>\n\n\n<h2>Example usage:</h2>\n\n<pre><code>var win = Ext.widget('window', {\n    title: \"It's a tiger!\",\n    layout: 'fit',\n    width: 300,\n    height: 300,\n    x: 20,\n    y: 20,\n    resizable: true,\n    items: {\n        xtype: 'flash',\n        url: 'tiger.swf'\n    }\n});\nwin.show();\n</code></pre>\n\n<h2>Express Install</h2>\n\n<p>Adobe provides a tool called <a href=\"http://www.adobe.com/devnet/flashplayer/articles/express_install.html\">Express Install</a>\nthat offers users an easy way to upgrade their Flash player. If you wish to make use of this, you should set\nthe static EXPRESS_INSTALL_URL property to the location of your Express Install SWF file:</p>\n\n<pre><code><a href=\"#!/api/Ext.flash.Component-static-property-EXPRESS_INSTALL_URL\" rel=\"Ext.flash.Component-static-property-EXPRESS_INSTALL_URL\" class=\"docClass\">Ext.flash.Component.EXPRESS_INSTALL_URL</a> = 'path/to/local/expressInstall.swf';\n</code></pre>\n"}},"FocusManager":{"!doc":"<p>The FocusManager is responsible for globally:</p>\n\n<ol>\n<li>Managing component focus</li>\n<li>Providing basic keyboard navigation</li>\n<li>(optional) Provide a visual cue for focused components, in the form of a focus ring/frame.</li>\n</ol>\n\n\n<p>To activate the FocusManager, simply call <code><a href=\"#!/api/Ext.FocusManager-event-enable\" rel=\"Ext.FocusManager-event-enable\" class=\"docClass\">Ext.FocusManager.enable</a>();</code>. In turn, you may\ndeactivate the FocusManager by subsequently calling <code><a href=\"#!/api/Ext.FocusManager-event-disable\" rel=\"Ext.FocusManager-event-disable\" class=\"docClass\">Ext.FocusManager.disable</a>();</code>.  The\nFocusManager is disabled by default.</p>\n\n<p>To enable the optional focus frame, pass <code>true</code> or <code>{focusFrame: true}</code> to <a href=\"#!/api/Ext.FocusManager-method-enable\" rel=\"Ext.FocusManager-method-enable\" class=\"docClass\">enable</a>.</p>\n\n<p>Another feature of the FocusManager is to provide basic keyboard focus navigation scoped to any <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>\nthat would like to have navigation between its child <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>'s.</p>\n"},"form":{"action":{"Action":{"!doc":"<p>The subclasses of this class provide actions to perform upon <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when the Form needs to perform an action\nsuch as submit or load. The Configuration options listed for this class are set through the Form's action methods:\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>, <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a> and <a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a></p>\n\n<p>The instance of Action which performed the action is passed to the success and failure callbacks of the Form's action\nmethods (<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>, <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a> and\n<a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a>), and to the <a href=\"#!/api/Ext.form.Basic-event-actioncomplete\" rel=\"Ext.form.Basic-event-actioncomplete\" class=\"docClass\">actioncomplete</a> and\n<a href=\"#!/api/Ext.form.Basic-event-actionfailed\" rel=\"Ext.form.Basic-event-actionfailed\" class=\"docClass\">actionfailed</a> event handlers.</p>\n"},"DirectLoad":{"!doc":"<p>Provides Ext.direct.Manager support for loading form data.</p>\n\n<p>This example illustrates usage of Ext.direct.Direct to <strong>load</strong> a form through Ext.Direct.</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    // configs for FormPanel\n    title: 'Basic Information',\n    renderTo: document.body,\n    width: 300, height: 160,\n    padding: 10,\n\n    // configs apply to child items\n    defaults: {anchor: '100%'},\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'Name',\n        name: 'name'\n    },{\n        fieldLabel: 'Email',\n        name: 'email'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }],\n\n    // configs for BasicForm\n    api: {\n        // The server-side method to call for load() requests\n        load: Profile.getBasicInfo,\n        // The server-side must mark the submit handler as a 'formHandler'\n        submit: Profile.updateBasicInfo\n    },\n    // specify the order for the passed params\n    paramOrder: ['uid', 'foo']\n});\n\n// load the form\nmyFormPanel.getForm().load({\n    // pass 2 arguments to server side getBasicInfo method (len=2)\n    params: {\n        foo: 'bar',\n        uid: 34\n    }\n});\n</code></pre>\n\n<p>The data packet sent to the server will resemble something like:</p>\n\n<pre><code>[\n    {\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\n        \"data\":[34,\"bar\"] // note the order of the params\n    }\n]\n</code></pre>\n\n<p>The form will process a data packet returned by the server that is similar to the following format:</p>\n\n<pre><code>[\n    {\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\n        \"result\":{\n            \"success\":true,\n            \"data\":{\n                \"name\":\"Fred Flintstone\",\n                \"company\":\"Slate Rock and Gravel\",\n                \"email\":\"fred.flintstone@slaterg.com\"\n            }\n        }\n    }\n]\n</code></pre>\n"},"Load":{"!doc":"<p>A class which handles loading of data from a server into the Fields of an <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a>ing.</p>\n\n<h2>Response Packet Criteria</h2>\n\n<p>A response packet <strong>must</strong> contain:</p>\n\n<ul>\n<li><strong><code>success</code></strong> property : Boolean</li>\n<li><strong><code>data</code></strong> property : Object</li>\n</ul>\n\n\n<p>The <code>data</code> property contains the values of Fields to load. The individual value object for each Field is passed to\nthe Field's <a href=\"#!/api/Ext.form.field.Field-method-setValue\" rel=\"Ext.form.field.Field-method-setValue\" class=\"docClass\">setValue</a> method.</p>\n\n<h2>JSON Packets</h2>\n\n<p>By default, response packets are assumed to be JSON, so for the following form load call:</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    title: 'Client and routing info',\n    renderTo: Ext.getBody(),\n    defaults: {\n        xtype: 'textfield'\n    },\n    items: [{\n        fieldLabel: 'Client',\n        name: 'clientName'\n    }, {\n        fieldLabel: 'Port of loading',\n        name: 'portOfLoading'\n    }, {\n        fieldLabel: 'Port of discharge',\n        name: 'portOfDischarge'\n    }]\n});\nmyFormPanel.<a href=\"#!/api/Ext.form.Panel-method-getForm\" rel=\"Ext.form.Panel-method-getForm\" class=\"docClass\">getForm</a>().<a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">load</a>({\n    url: '/getRoutingInfo.php',\n    params: {\n        consignmentRef: myConsignmentRef\n    },\n    failure: function(form, action) {\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>(\"Load failed\", action.result.errorMessage);\n    }\n});\n</code></pre>\n\n<p>a <strong>success response</strong> packet may look like this:</p>\n\n<pre><code>{\n    success: true,\n    data: {\n        clientName: \"Fred. Olsen Lines\",\n        portOfLoading: \"FXT\",\n        portOfDischarge: \"OSL\"\n    }\n}\n</code></pre>\n\n<p>while a <strong>failure response</strong> packet may look like this:</p>\n\n<pre><code>{\n    success: false,\n    errorMessage: \"Consignment reference not found\"\n}\n</code></pre>\n\n<p>Other data may be placed into the response for processing the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>'s callback or event handler\nmethods. The object decoded from this JSON is available in the <a href=\"#!/api/Ext.form.action.Action-property-result\" rel=\"Ext.form.action.Action-property-result\" class=\"docClass\">result</a> property.</p>\n"},"DirectSubmit":{"!doc":"<p>Provides Ext.direct support for submitting form data.</p>\n\n<p>This example illustrates usage of Ext.direct.Direct to <strong>submit</strong> a form through Ext.Direct.</p>\n\n<pre><code>var myFormPanel = new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    // configs for FormPanel\n    title: 'Basic Information',\n    renderTo: document.body,\n    width: 300, height: 160,\n    padding: 10,\n    buttons:[{\n        text: 'Submit',\n        handler: function(){\n            myFormPanel.getForm().submit({\n                params: {\n                    foo: 'bar',\n                    uid: 34\n                }\n            });\n        }\n    }],\n\n    // configs apply to child items\n    defaults: {anchor: '100%'},\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'Name',\n        name: 'name'\n    },{\n        fieldLabel: 'Email',\n        name: 'email'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }],\n\n    // configs for BasicForm\n    api: {\n        // The server-side method to call for load() requests\n        load: Profile.getBasicInfo,\n        // The server-side must mark the submit handler as a 'formHandler'\n        submit: Profile.updateBasicInfo\n    },\n    // specify the order for the passed params\n    paramOrder: ['uid', 'foo']\n});\n</code></pre>\n\n<p>The data packet sent to the server will resemble something like:</p>\n\n<pre><code>{\n    \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\n    \"result\":{\n        \"success\":true,\n        \"id\":{\n            \"extAction\":\"Profile\",\"extMethod\":\"updateBasicInfo\",\n            \"extType\":\"rpc\",\"extTID\":\"6\",\"extUpload\":\"false\",\n            \"name\":\"Aaron Conran\",\"email\":\"aaron@sencha.com\",\"company\":\"Sencha Inc.\"\n        }\n    }\n}\n</code></pre>\n\n<p>The form will process a data packet returned by the server that is similar to the following:</p>\n\n<pre><code>// sample success packet (batched requests)\n[\n    {\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":3,\n        \"result\":{\n            \"success\":true\n        }\n    }\n]\n\n// sample failure packet (one request)\n{\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\n        \"result\":{\n            \"errors\":{\n                \"email\":\"already taken\"\n            },\n            \"success\":false,\n            \"foo\":\"bar\"\n        }\n}\n</code></pre>\n\n<p>Also see the discussion in <a href=\"#!/api/Ext.form.action.DirectLoad\" rel=\"Ext.form.action.DirectLoad\" class=\"docClass\">Ext.form.action.DirectLoad</a>.</p>\n"},"Submit":{"!doc":"<p>A class which handles submission of data from <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s and processes the returned response.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>ting.</p>\n\n<h1>Response Packet Criteria</h1>\n\n<p>A response packet may contain:</p>\n\n<ul>\n<li><p><strong><code>success</code></strong> property : Boolean - required.</p></li>\n<li><p><strong><code>errors</code></strong> property : Object - optional, contains error messages for invalid fields.</p></li>\n</ul>\n\n\n<h1>JSON Packets</h1>\n\n<p>By default, response packets are assumed to be JSON, so a typical response packet may look like this:</p>\n\n<pre><code>{\n    success: false,\n    errors: {\n        clientCode: \"Client not found\",\n        portOfLoading: \"This field must not be null\"\n    }\n}\n</code></pre>\n\n<p>Other data may be placed into the response for processing by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>'s callback or event handler\nmethods. The object decoded from this JSON is available in the <a href=\"#!/api/Ext.form.action.Action-property-result\" rel=\"Ext.form.action.Action-property-result\" class=\"docClass\">result</a> property.</p>\n\n<p>Alternatively, if an <a href=\"#!/api/Ext.form.Basic-cfg-errorReader\" rel=\"Ext.form.Basic-cfg-errorReader\" class=\"docClass\">errorReader</a> is specified as an\nXmlReader:</p>\n\n<pre><code>errorReader: new Ext.data.reader.Xml({\n        record : 'field',\n        success: '@success'\n    }, [\n        'id', 'msg'\n    ]\n)\n</code></pre>\n\n<p>then the results may be sent back in XML format:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;message success=\"false\"&gt;\n&lt;errors&gt;\n    &lt;field&gt;\n        &lt;id&gt;clientCode&lt;/id&gt;\n        &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\n    &lt;/field&gt;\n    &lt;field&gt;\n        &lt;id&gt;portOfLoading&lt;/id&gt;\n        &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\n    &lt;/field&gt;\n&lt;/errors&gt;\n&lt;/message&gt;\n</code></pre>\n\n<p>Other elements may be placed into the response XML for processing by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a>'s callback or event\nhandler methods. The XML document is available in the <a href=\"#!/api/Ext.form.Basic-cfg-errorReader\" rel=\"Ext.form.Basic-cfg-errorReader\" class=\"docClass\">errorReader</a>'s\nxmlData property.</p>\n"},"StandardSubmit":{"!doc":"<p>A class which handles submission of data from <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a>s using a standard <code>&lt;form&gt;</code> element submit.\nIt does not handle the response from the submit.</p>\n\n<p>If validation of the form fields fails, the Form's afterAction method will be called. Otherwise, afterAction will not\nbe called.</p>\n\n<p>Instances of this class are only created by a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Form</a> when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submit</a>ting, when the form's <a href=\"#!/api/Ext.form.Basic-cfg-standardSubmit\" rel=\"Ext.form.Basic-cfg-standardSubmit\" class=\"docClass\">Ext.form.Basic.standardSubmit</a> config option is true.</p>\n"}},"Basic":{"!doc":"<p>Provides input field management, validation, submission, and form loading services for the collection\nof <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Field</a> instances within a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>. It is recommended\nthat you use a <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> as the form container, as that has logic to automatically\nhook up an instance of <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> (plus other conveniences related to field configuration.)</p>\n\n<h2>Form Actions</h2>\n\n<p>The Basic class delegates the handling of form loads and submits to instances of <a href=\"#!/api/Ext.form.action.Action\" rel=\"Ext.form.action.Action\" class=\"docClass\">Ext.form.action.Action</a>.\nSee the various Action implementations for specific details of each one's functionality, as well as the\ndocumentation for <a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">doAction</a> which details the configuration options that can be specified in\neach action call.</p>\n\n<p>The default submit Action is <a href=\"#!/api/Ext.form.action.Submit\" rel=\"Ext.form.action.Submit\" class=\"docClass\">Ext.form.action.Submit</a>, which uses an Ajax request to submit the\nform's values to a configured URL. To enable normal browser submission of an Ext form, use the\n<a href=\"#!/api/Ext.form.Basic-cfg-standardSubmit\" rel=\"Ext.form.Basic-cfg-standardSubmit\" class=\"docClass\">standardSubmit</a> config option.</p>\n\n<h2>File uploads</h2>\n\n<p>File uploads are not performed using normal 'Ajax' techniques; see the description for\n<a href=\"#!/api/Ext.form.Basic-method-hasUpload\" rel=\"Ext.form.Basic-method-hasUpload\" class=\"docClass\">hasUpload</a> for details. If you're using file uploads you should read the method description.</p>\n\n<h2>Example usage:</h2>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Basic Form',\n    renderTo: Ext.getBody(),\n    bodyPadding: 5,\n    width: 350,\n\n    // Any configuration items here will be automatically passed along to\n    // the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> instance when it gets created.\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Field',\n        name: 'theField'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            // The getForm() method returns the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> instance:\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                // Submit the Ajax request and handle the response\n                form.submit({\n                    success: function(form, action) {\n                       <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', action.result.message);\n                    },\n                    failure: function(form, action) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Failed', action.result ? action.result.message : 'No response');\n                    }\n                });\n            }\n        }\n    }]\n});\n</code></pre>\n"},"CheckboxGroup":{"!doc":"<p>A <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">field container</a> which has a specialized layout for arranging\n<a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a> controls into columns, and provides convenience\n<a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> methods for <a href=\"#!/api/Ext.form.CheckboxGroup-method-getValue\" rel=\"Ext.form.CheckboxGroup-method-getValue\" class=\"docClass\">getting</a>, <a href=\"#!/api/Ext.form.CheckboxGroup-method-setValue\" rel=\"Ext.form.CheckboxGroup-method-setValue\" class=\"docClass\">setting</a>,\nand <a href=\"#!/api/Ext.form.CheckboxGroup-method-validate\" rel=\"Ext.form.CheckboxGroup-method-validate\" class=\"docClass\">validating</a> the group of checkboxes as a whole.</p>\n\n<h1>Validation</h1>\n\n<p>Individual checkbox fields themselves have no default validation behavior, but\nsometimes you want to require a user to select at least one of a group of checkboxes. CheckboxGroup\nallows this by setting the config <code><a href=\"#!/api/Ext.form.CheckboxGroup-cfg-allowBlank\" rel=\"Ext.form.CheckboxGroup-cfg-allowBlank\" class=\"docClass\">allowBlank</a>:false</code>; when the user does not check at\nleast one of the checkboxes, the entire group will be highlighted as invalid and the\n<a href=\"#!/api/Ext.form.CheckboxGroup-cfg-blankText\" rel=\"Ext.form.CheckboxGroup-cfg-blankText\" class=\"docClass\">error message</a> will be displayed according to the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-msgTarget\" rel=\"Ext.form.CheckboxGroup-cfg-msgTarget\" class=\"docClass\">msgTarget</a> config.</p>\n\n<h1>Layout</h1>\n\n<p>The default layout for CheckboxGroup makes it easy to arrange the checkboxes into\ncolumns; see the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-columns\" rel=\"Ext.form.CheckboxGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-vertical\" rel=\"Ext.form.CheckboxGroup-cfg-vertical\" class=\"docClass\">vertical</a> config documentation for details. You may also\nuse a completely different layout by setting the <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-layout\" rel=\"Ext.form.CheckboxGroup-cfg-layout\" class=\"docClass\">layout</a> to one of the other supported layout\ntypes; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case\nthe checkbox components at any depth will still be managed by the CheckboxGroup's validation.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Checkbox Group',\n    width: 300,\n    height: 125,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'checkboxgroup',\n        fieldLabel: 'Two Columns',\n        // Arrange checkboxes into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true },\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n</code></pre>\n"},"Labelable":{"!doc":"<p>A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for form fields. This is used by e.g. <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> and <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>\nto let them be managed by the Field layout.</p>\n\n<p>NOTE: This mixin is mainly for internal library use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> or <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>.</p>\n\n<p>Use of this mixin does not make a component a field in the logical sense, meaning it does not provide any\nlogic or state related to values or validation; that is handled by the related <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nmixin. These two mixins may be used separately (for example <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a> is Labelable but not a\nField), or in combination (for example <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a> implements both and has logic for connecting the\ntwo.)</p>\n\n<p>Component classes which use this mixin should use the Field layout\nor a derivation thereof to properly size and position the label and message according to the component config.\nThey must also call the <a href=\"#!/api/Ext.form.Labelable-method-initLabelable\" rel=\"Ext.form.Labelable-method-initLabelable\" class=\"docClass\">initLabelable</a> method during component initialization to ensure the mixin gets\nset up correctly.</p>\n"},"FieldContainer":{"!doc":"<p>FieldContainer is a derivation of <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a> that implements the\n<a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Labelable</a> mixin. This allows it to be configured so that it is rendered with\na <a href=\"#!/api/Ext.form.FieldContainer-cfg-fieldLabel\" rel=\"Ext.form.FieldContainer-cfg-fieldLabel\" class=\"docClass\">field label</a> and optional <a href=\"#!/api/Ext.form.FieldContainer-cfg-msgTarget\" rel=\"Ext.form.FieldContainer-cfg-msgTarget\" class=\"docClass\">error message</a> around its sub-items.\nThis is useful for arranging a group of fields or other components within a single item in a form, so\nthat it lines up nicely with other fields. A common use is for grouping a set of related fields under\na single label in a form.</p>\n\n<p>The container's configured <a href=\"#!/api/Ext.form.FieldContainer-cfg-items\" rel=\"Ext.form.FieldContainer-cfg-items\" class=\"docClass\">items</a> will be layed out within the field body area according to the\nconfigured <a href=\"#!/api/Ext.form.FieldContainer-cfg-layout\" rel=\"Ext.form.FieldContainer-cfg-layout\" class=\"docClass\">layout</a> type. The default layout is <code>'autocontainer'</code>.</p>\n\n<p>Like regular fields, FieldContainer can inherit its decoration configuration from the\n<a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> of an enclosing FormPanel. In addition,\nFieldContainer itself can pass <a href=\"#!/api/Ext.form.FieldContainer-cfg-fieldDefaults\" rel=\"Ext.form.FieldContainer-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> to any <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">fields</a>\nit may itself contain.</p>\n\n<p>If you are grouping a set of <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Checkbox</a> or <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Radio</a>\nfields in a single labeled container, consider using a <a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a>\nor <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a> instead as they are specialized for handling those types.</p>\n\n<h1>Example</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'FieldContainer Example',\n    width: 550,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Last Three Jobs',\n        labelWidth: 100,\n\n        // The body area will contain three text fields, arranged\n        // horizontally, separated by draggable splitters.\n        layout: 'hbox',\n        items: [{\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }, {\n            xtype: 'splitter'\n        }, {\n            xtype: 'textfield',\n            flex: 1\n        }]\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<h1>Usage of fieldDefaults</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'FieldContainer Example',\n    width: 350,\n    bodyPadding: 10,\n\n    items: [{\n        xtype: 'fieldcontainer',\n        fieldLabel: 'Your Name',\n        labelWidth: 75,\n        defaultType: 'textfield',\n\n        // Arrange fields vertically, stretched to full width\n        layout: 'anchor',\n        defaults: {\n            layout: '100%'\n        },\n\n        // These config values will be applied to both sub-fields, except\n        // for Last Name which will use its own msgTarget.\n        fieldDefaults: {\n            msgTarget: 'under',\n            labelAlign: 'top'\n        },\n\n        items: [{\n            fieldLabel: 'First Name',\n            name: 'firstName'\n        }, {\n            fieldLabel: 'Last Name',\n            name: 'lastName',\n            msgTarget: 'under'\n        }]\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"field":{"Field":{"!doc":"<p>This mixin provides a common interface for the logical behavior and state of form fields, including:</p>\n\n<ul>\n<li>Getter and setter methods for field values</li>\n<li>Events and methods for tracking value and validity changes</li>\n<li>Methods for triggering validation</li>\n</ul>\n\n\n<p><strong>NOTE</strong>: When implementing custom fields, it is most likely that you will want to extend the <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>\ncomponent class rather than using this mixin directly, as BaseField contains additional logic for generating an\nactual DOM complete with <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">label and error message</a> display and a form input field,\nplus methods that bind the Field value getters and setters to the input field's value.</p>\n\n<p>If you do want to implement this mixin directly and don't want to extend <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>, then\nyou will most likely want to override the following methods with custom implementations: <a href=\"#!/api/Ext.form.field.Field-method-getValue\" rel=\"Ext.form.field.Field-method-getValue\" class=\"docClass\">getValue</a>,\n<a href=\"#!/api/Ext.form.field.Field-method-setValue\" rel=\"Ext.form.field.Field-method-setValue\" class=\"docClass\">setValue</a>, and <a href=\"#!/api/Ext.form.field.Field-method-getErrors\" rel=\"Ext.form.field.Field-method-getErrors\" class=\"docClass\">getErrors</a>. Other methods may be overridden as needed but their base\nimplementations should be sufficient for common cases. You will also need to make sure that <a href=\"#!/api/Ext.form.field.Field-method-initField\" rel=\"Ext.form.field.Field-method-initField\" class=\"docClass\">initField</a>\nis called during the component's initialization.</p>\n"},"Base":{"!doc":"<p>Base class for form fields that provides default event handling, rendering, and other common functionality\nneeded by all form field types. Utilizes the <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a> mixin for value handling and validation,\nand the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> mixin to provide label and error message display.</p>\n\n<p>In most cases you will want to use a subclass, such as <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> or <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a>,\nrather than creating instances of this class directly. However if you are implementing a custom form field,\nusing this as the parent class is recommended.</p>\n\n<h1>Values and Conversions</h1>\n\n<p>Because Base implements the Field mixin, it has a main value that can be initialized with the\n<a href=\"#!/api/Ext.form.field.Base-cfg-value\" rel=\"Ext.form.field.Base-cfg-value\" class=\"docClass\">value</a> config and manipulated via the <a href=\"#!/api/Ext.form.field.Base-method-getValue\" rel=\"Ext.form.field.Base-method-getValue\" class=\"docClass\">getValue</a> and <a href=\"#!/api/Ext.form.field.Base-method-setValue\" rel=\"Ext.form.field.Base-method-setValue\" class=\"docClass\">setValue</a> methods. This main\nvalue can be one of many data types appropriate to the current field, for instance a <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Date</a>\nfield would use a JavaScript Date object as its value type. However, because the field is rendered as a HTML\ninput, this value data type can not always be directly used in the rendered field.</p>\n\n<p>Therefore Base introduces the concept of a \"raw value\". This is the value of the rendered HTML input field,\nand is normally a String. The <a href=\"#!/api/Ext.form.field.Base-method-getRawValue\" rel=\"Ext.form.field.Base-method-getRawValue\" class=\"docClass\">getRawValue</a> and <a href=\"#!/api/Ext.form.field.Base-method-setRawValue\" rel=\"Ext.form.field.Base-method-setRawValue\" class=\"docClass\">setRawValue</a> methods can be used to directly\nwork with the raw value, though it is recommended to use getValue and setValue in most cases.</p>\n\n<p>Conversion back and forth between the main value and the raw value is handled by the <a href=\"#!/api/Ext.form.field.Base-method-valueToRaw\" rel=\"Ext.form.field.Base-method-valueToRaw\" class=\"docClass\">valueToRaw</a> and\n<a href=\"#!/api/Ext.form.field.Base-method-rawToValue\" rel=\"Ext.form.field.Base-method-rawToValue\" class=\"docClass\">rawToValue</a> methods. If you are implementing a subclass that uses a non-String value data type, you\nshould override these methods to handle the conversion.</p>\n\n<h1>Rendering</h1>\n\n<p>The content of the field body is defined by the <a href=\"#!/api/Ext.form.field.Base-cfg-fieldSubTpl\" rel=\"Ext.form.field.Base-cfg-fieldSubTpl\" class=\"docClass\">fieldSubTpl</a> XTemplate, with its argument data\ncreated by the <a href=\"#!/api/Ext.form.field.Base-method-getSubTplData\" rel=\"Ext.form.field.Base-method-getSubTplData\" class=\"docClass\">getSubTplData</a> method. Override this template and/or method to create custom\nfield renderings.</p>\n\n<h1>Example usage:</h1>\n\n<pre class='inline-example '><code>// A simple subclass of Base that creates a HTML5 search field. Redirects to the\n// searchUrl when the Enter key is pressed.222\nExt.define('Ext.form.SearchField', {\n    extend: '<a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>',\n    alias: 'widget.searchfield',\n\n    inputType: 'search',\n\n    // Config defining the search URL\n    searchUrl: 'http://www.google.com/search?q={0}',\n\n    // Add specialkey listener\n    initComponent: function() {\n        this.callParent();\n        this.on('specialkey', this.checkEnterKey, this);\n    },\n\n    // Handle enter key presses, execute the search if the field has a value\n    checkEnterKey: function(field, e) {\n        var value = this.getValue();\n        if (e.getKey() === e.ENTER &amp;&amp; !Ext.isEmpty(value)) {\n            location.href = Ext.String.format(this.searchUrl, value);\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Base Example',\n    bodyPadding: 5,\n    width: 250,\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n    items: [{\n        xtype: 'searchfield',\n        fieldLabel: 'Search',\n        name: 'query'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Checkbox":{"!doc":"<p>Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. Also serves as a\nparent class for <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">radio buttons</a>.</p>\n\n<h1>Labeling</h1>\n\n<p>In addition to the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">standard field labeling options</a>, checkboxes\nmay be given an optional <a href=\"#!/api/Ext.form.field.Checkbox-cfg-boxLabel\" rel=\"Ext.form.field.Checkbox-cfg-boxLabel\" class=\"docClass\">boxLabel</a> which will be displayed immediately after checkbox. Also see\n<a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a> for a convenient method of grouping related checkboxes.</p>\n\n<h1>Values</h1>\n\n<p>The main value of a checkbox is a boolean, indicating whether or not the checkbox is checked.\nThe following values will check the checkbox:</p>\n\n<ul>\n<li><code>true</code></li>\n<li><code>'true'</code></li>\n<li><code>'1'</code></li>\n<li><code>'on'</code></li>\n</ul>\n\n\n<p>Any other value will uncheck the checkbox.</p>\n\n<p>In addition to the main boolean value, you may also specify a separate <a href=\"#!/api/Ext.form.field.Checkbox-cfg-inputValue\" rel=\"Ext.form.field.Checkbox-cfg-inputValue\" class=\"docClass\">inputValue</a>. This will be\nsent as the parameter value when the form is <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitted</a>. You will want to set\nthis value if you have multiple checkboxes with the same <a href=\"#!/api/Ext.form.field.Checkbox-cfg-name\" rel=\"Ext.form.field.Checkbox-cfg-name\" class=\"docClass\">name</a>. If not specified, the value <code>on</code>\nwill be used.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    bodyPadding: 10,\n    width: 300,\n    title: 'Pizza Order',\n    items: [\n        {\n            xtype: 'fieldcontainer',\n            fieldLabel: 'Toppings',\n            defaultType: 'checkboxfield',\n            items: [\n                {\n                    boxLabel  : 'Anchovies',\n                    name      : 'topping',\n                    inputValue: '1',\n                    id        : 'checkbox1'\n                }, {\n                    boxLabel  : 'Artichoke Hearts',\n                    name      : 'topping',\n                    inputValue: '2',\n                    checked   : true,\n                    id        : 'checkbox2'\n                }, {\n                    boxLabel  : 'Bacon',\n                    name      : 'topping',\n                    inputValue: '3',\n                    id        : 'checkbox3'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Select Bacon',\n            handler: function() {\n                Ext.getCmp('checkbox3').setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select All',\n            handler: function() {\n                Ext.getCmp('checkbox1').setValue(true);\n                Ext.getCmp('checkbox2').setValue(true);\n                Ext.getCmp('checkbox3').setValue(true);\n            }\n        },\n        {\n            text: 'Deselect All',\n            handler: function() {\n                Ext.getCmp('checkbox1').setValue(false);\n                Ext.getCmp('checkbox2').setValue(false);\n                Ext.getCmp('checkbox3').setValue(false);\n            }\n        }\n    ],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"ComboBox":{"!doc":"<p>A combobox control with support for autocomplete, remote loading, and many other features.</p>\n\n<p>A ComboBox is like a combination of a traditional HTML text <code>&lt;input&gt;</code> field and a <code>&lt;select&gt;</code>\nfield; the user is able to type freely into the field, and/or pick values from a dropdown selection\nlist. The user can input any value by default, even if it does not appear in the selection list;\nto prevent free-form values and restrict them to items in the list, set <a href=\"#!/api/Ext.form.field.ComboBox-cfg-forceSelection\" rel=\"Ext.form.field.ComboBox-cfg-forceSelection\" class=\"docClass\">forceSelection</a> to <code>true</code>.</p>\n\n<p>The selection list's options are populated from any Ext.data.Store, including remote\nstores. The data items in the store are mapped to each option's displayed text and backing value via\nthe <a href=\"#!/api/Ext.form.field.ComboBox-cfg-valueField\" rel=\"Ext.form.field.ComboBox-cfg-valueField\" class=\"docClass\">valueField</a> and <a href=\"#!/api/Ext.form.field.ComboBox-cfg-displayField\" rel=\"Ext.form.field.ComboBox-cfg-displayField\" class=\"docClass\">displayField</a> configurations, respectively.</p>\n\n<p>If your store is not remote, i.e. it depends only on local data and is loaded up front, you should be\nsure to set the <a href=\"#!/api/Ext.form.field.ComboBox-cfg-queryMode\" rel=\"Ext.form.field.ComboBox-cfg-queryMode\" class=\"docClass\">queryMode</a> to <code>'local'</code>, as this will improve responsiveness for the user.</p>\n\n<h1>Example usage:</h1>\n\n<pre class='inline-example '><code>// The data store containing the list of states\nvar states = Ext.create('Ext.data.Store', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n        //...\n    ]\n});\n\n// Create the combo box, attached to the states data store\nExt.create('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    displayField: 'name',\n    valueField: 'abbr',\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<h1>Events</h1>\n\n<p>To do something when something in ComboBox is selected, configure the select event:</p>\n\n<pre><code>var cb = Ext.create('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    // all of your config options\n    listeners:{\n         scope: yourScope,\n         'select': yourFunction\n    }\n});\n\n// Alternatively, you can assign events after the object is created:\nvar cb = new <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a>(yourOptions);\ncb.on('select', yourFunction, yourScope);\n</code></pre>\n\n<h1>Multiple Selection</h1>\n\n<p>ComboBox also allows selection of multiple items from the list; to enable multi-selection set the\n<a href=\"#!/api/Ext.form.field.ComboBox-cfg-multiSelect\" rel=\"Ext.form.field.ComboBox-cfg-multiSelect\" class=\"docClass\">multiSelect</a> config to <code>true</code>.</p>\n\n<h1>Filtered Stores</h1>\n\n<p>If you have a local store that is already filtered, you can use the <a href=\"#!/api/Ext.form.field.ComboBox-property-lastQuery\" rel=\"Ext.form.field.ComboBox-property-lastQuery\" class=\"docClass\">lastQuery</a> config option\nto prevent the store from having the filter being cleared on first expand.</p>\n\n<h2>Customized combobox</h2>\n\n<p>Both the text shown in dropdown menu and text field can be easily customized:</p>\n\n<pre class='inline-example '><code>var states = Ext.create('Ext.data.Store', {\n    fields: ['abbr', 'name'],\n    data : [\n        {\"abbr\":\"AL\", \"name\":\"Alabama\"},\n        {\"abbr\":\"AK\", \"name\":\"Alaska\"},\n        {\"abbr\":\"AZ\", \"name\":\"Arizona\"}\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.ComboBox</a>', {\n    fieldLabel: 'Choose State',\n    store: states,\n    queryMode: 'local',\n    valueField: 'abbr',\n    renderTo: Ext.getBody(),\n    // Template for the dropdown menu.\n    // Note the use of \"x-boundlist-item\" class,\n    // this is required to make the items selectable.\n    tpl: Ext.create('Ext.XTemplate',\n        '&lt;tpl for=\".\"&gt;',\n            '&lt;div class=\"x-boundlist-item\"&gt;{abbr} - {name}&lt;/div&gt;',\n        '&lt;/tpl&gt;'\n    ),\n    // template for the content inside text field\n    displayTpl: Ext.create('Ext.XTemplate',\n        '&lt;tpl for=\".\"&gt;',\n            '{abbr} - {name}',\n        '&lt;/tpl&gt;'\n    )\n});\n</code></pre>\n\n<p>See also the <a href=\"#!/api/Ext.form.field.ComboBox-cfg-listConfig\" rel=\"Ext.form.field.ComboBox-cfg-listConfig\" class=\"docClass\">listConfig</a> option for additional configuration of the dropdown.</p>\n"},"Text":{"!doc":"<p>A basic text field.  Can be used as a direct replacement for traditional text inputs,\nor as the base class for more sophisticated input controls (like <a href=\"#!/api/Ext.form.field.TextArea\" rel=\"Ext.form.field.TextArea\" class=\"docClass\">Ext.form.field.TextArea</a>\nand <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">Ext.form.field.ComboBox</a>). Has support for empty-field placeholder values (see <a href=\"#!/api/Ext.form.field.Text-cfg-emptyText\" rel=\"Ext.form.field.Text-cfg-emptyText\" class=\"docClass\">emptyText</a>).</p>\n\n<h1>Validation</h1>\n\n<p>The Text field has a useful set of validations built in:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-allowBlank\" rel=\"Ext.form.field.Text-cfg-allowBlank\" class=\"docClass\">allowBlank</a> for making the field required</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-minLength\" rel=\"Ext.form.field.Text-cfg-minLength\" class=\"docClass\">minLength</a> for requiring a minimum value length</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-maxLength\" rel=\"Ext.form.field.Text-cfg-maxLength\" class=\"docClass\">maxLength</a> for setting a maximum value length (with <a href=\"#!/api/Ext.form.field.Text-cfg-enforceMaxLength\" rel=\"Ext.form.field.Text-cfg-enforceMaxLength\" class=\"docClass\">enforceMaxLength</a> to add it\nas the <code>maxlength</code> attribute on the input element)</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-regex\" rel=\"Ext.form.field.Text-cfg-regex\" class=\"docClass\">regex</a> to specify a custom regular expression for validation</li>\n</ul>\n\n\n<p>In addition, custom validations may be added:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a> specifies a virtual type implementation from <a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a> which can contain\ncustom validation logic</li>\n<li><a href=\"#!/api/Ext.form.field.Text-cfg-validator\" rel=\"Ext.form.field.Text-cfg-validator\" class=\"docClass\">validator</a> allows a custom arbitrary function to be called during validation</li>\n</ul>\n\n\n<p>The details around how and when each of these validation options get used are described in the\ndocumentation for <a href=\"#!/api/Ext.form.field.Text-method-getErrors\" rel=\"Ext.form.field.Text-method-getErrors\" class=\"docClass\">getErrors</a>.</p>\n\n<p>By default, the field value is checked for validity immediately while the user is typing in the\nfield. This can be controlled with the <a href=\"#!/api/Ext.form.field.Text-cfg-validateOnChange\" rel=\"Ext.form.field.Text-cfg-validateOnChange\" class=\"docClass\">validateOnChange</a>, <a href=\"#!/api/Ext.form.field.Text-cfg-checkChangeEvents\" rel=\"Ext.form.field.Text-cfg-checkChangeEvents\" class=\"docClass\">checkChangeEvents</a>, and\n<a href=\"#!/api/Ext.form.field.Text-cfg-checkChangeBuffer\" rel=\"Ext.form.field.Text-cfg-checkChangeBuffer\" class=\"docClass\">checkChangeBuffer</a> configurations. Also see the details on Form Validation in the\n<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> class documentation.</p>\n\n<h1>Masking and Character Stripping</h1>\n\n<p>Text fields can be configured with custom regular expressions to be applied to entered values before\nvalidation: see <a href=\"#!/api/Ext.form.field.Text-cfg-maskRe\" rel=\"Ext.form.field.Text-cfg-maskRe\" class=\"docClass\">maskRe</a> and <a href=\"#!/api/Ext.form.field.Text-cfg-stripCharsRe\" rel=\"Ext.form.field.Text-cfg-stripCharsRe\" class=\"docClass\">stripCharsRe</a> for details.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Contact Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'textfield',\n        name: 'name',\n        fieldLabel: 'Name',\n        allowBlank: false  // requires a non-empty value\n    }, {\n        xtype: 'textfield',\n        name: 'email',\n        fieldLabel: 'Email Address',\n        vtype: 'email'  // requires value to be a valid email address format\n    }]\n});\n</code></pre>\n"},"Picker":{"!doc":"<p>An abstract class for fields that have a single trigger which opens a \"picker\" popup below the field, e.g. a combobox\nmenu list or a date picker. It provides a base implementation for toggling the picker's visibility when the trigger\nis clicked, as well as keyboard navigation and some basic events. Sizing and alignment of the picker can be\ncontrolled via the <a href=\"#!/api/Ext.form.field.Picker-cfg-matchFieldWidth\" rel=\"Ext.form.field.Picker-cfg-matchFieldWidth\" class=\"docClass\">matchFieldWidth</a> and <a href=\"#!/api/Ext.form.field.Picker-cfg-pickerAlign\" rel=\"Ext.form.field.Picker-cfg-pickerAlign\" class=\"docClass\">pickerAlign</a>/<a href=\"#!/api/Ext.form.field.Picker-cfg-pickerOffset\" rel=\"Ext.form.field.Picker-cfg-pickerOffset\" class=\"docClass\">pickerOffset</a> config properties\nrespectively.</p>\n\n<p>You would not normally use this class directly, but instead use it as the parent class for a specific picker field\nimplementation. Subclasses must implement the <a href=\"#!/api/Ext.form.field.Picker-method-createPicker\" rel=\"Ext.form.field.Picker-method-createPicker\" class=\"docClass\">createPicker</a> method to create a picker component appropriate\nfor the field.</p>\n"},"Date":{"!doc":"<p>Provides a date input field with a <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">date picker</a> dropdown and automatic date\nvalidation.</p>\n\n<p>This field recognizes and uses the JavaScript Date object as its main <a href=\"#!/api/Ext.form.field.Date-cfg-value\" rel=\"Ext.form.field.Date-cfg-value\" class=\"docClass\">value</a> type. In addition,\nit recognizes string values which are parsed according to the <a href=\"#!/api/Ext.form.field.Date-cfg-format\" rel=\"Ext.form.field.Date-cfg-format\" class=\"docClass\">format</a> and/or <a href=\"#!/api/Ext.form.field.Date-cfg-altFormats\" rel=\"Ext.form.field.Date-cfg-altFormats\" class=\"docClass\">altFormats</a>\nconfigs. These may be reconfigured to use date formats appropriate for the user's locale.</p>\n\n<p>The field may be limited to a certain range of dates by using the <a href=\"#!/api/Ext.form.field.Date-cfg-minValue\" rel=\"Ext.form.field.Date-cfg-minValue\" class=\"docClass\">minValue</a>, <a href=\"#!/api/Ext.form.field.Date-cfg-maxValue\" rel=\"Ext.form.field.Date-cfg-maxValue\" class=\"docClass\">maxValue</a>,\n<a href=\"#!/api/Ext.form.field.Date-cfg-disabledDays\" rel=\"Ext.form.field.Date-cfg-disabledDays\" class=\"docClass\">disabledDays</a>, and <a href=\"#!/api/Ext.form.field.Date-cfg-disabledDates\" rel=\"Ext.form.field.Date-cfg-disabledDates\" class=\"docClass\">disabledDates</a> config parameters. These configurations will be used both\nin the field's validation, and in the date picker dropdown by preventing invalid dates from being selected.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: Ext.getBody(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'From',\n        name: 'from_date',\n        maxValue: new Date()  // limited to the current date or prior\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'To',\n        name: 'to_date',\n        value: new Date()  // defaults to today\n    }]\n});\n</code></pre>\n\n<h1>Date Formats Examples</h1>\n\n<p>This example shows a couple of different date format parsing scenarios. Both use custom date format\nconfigurations; the first one matches the configured <code>format</code> while the second matches the <code>altFormats</code>.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: Ext.getBody(),\n    width: 300,\n    bodyPadding: 10,\n    title: 'Dates',\n    items: [{\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value matches the format; will be parsed and displayed using that format.\n        format: 'm d Y',\n        value: '2 4 1978'\n    }, {\n        xtype: 'datefield',\n        anchor: '100%',\n        fieldLabel: 'Date',\n        name: 'date',\n        // The value does not match the format, but does match an altFormat; will be parsed\n        // using the altFormat and displayed using the format.\n        format: 'm d Y',\n        altFormats: 'm,d,Y|m.d.Y',\n        value: '2.4.1978'\n    }]\n});\n</code></pre>\n"},"Display":{"!doc":"<p>A display-only text field which is not validated and not submitted. This is useful for when you want to display a\nvalue from a form's <a href=\"#!/api/Ext.form.Basic-method-load\" rel=\"Ext.form.Basic-method-load\" class=\"docClass\">loaded data</a> but do not want to allow the user to edit or submit that\nvalue. The value can be optionally <a href=\"#!/api/Ext.form.field.Display-cfg-htmlEncode\" rel=\"Ext.form.field.Display-cfg-htmlEncode\" class=\"docClass\">HTML encoded</a> if it contains HTML markup that you do not want\nto be rendered.</p>\n\n<p>If you have more complex content, or need to include components within the displayed content, also consider using a\n<a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a> instead.</p>\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: Ext.getBody(),\n    width: 175,\n    height: 120,\n    bodyPadding: 10,\n    title: 'Final Score',\n    items: [{\n        xtype: 'displayfield',\n        fieldLabel: 'Home',\n        name: 'home_score',\n        value: '10'\n    }, {\n        xtype: 'displayfield',\n        fieldLabel: 'Visitor',\n        name: 'visitor_score',\n        value: '11'\n    }],\n    buttons: [{\n        text: 'Update'\n    }]\n});\n</code></pre>\n"},"File":{"!doc":"<p>A file upload field which has custom styling and allows control over the button text and other\nfeatures of <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">text fields</a> like <a href=\"#!/api/Ext.form.field.Text-cfg-emptyText\" rel=\"Ext.form.field.Text-cfg-emptyText\" class=\"docClass\">empty text</a>.\nIt uses a hidden file input element behind the scenes to allow user selection of a file and to\nperform the actual upload during <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">form submit</a>.</p>\n\n<p>Because there is no secure cross-browser way to programmatically set the value of a file input,\nthe standard Field <code>setValue</code> method is not implemented. The <code><a href=\"#!/api/Ext.form.field.File-method-getValue\" rel=\"Ext.form.field.File-method-getValue\" class=\"docClass\">getValue</a></code> method will return\na value that is browser-dependent; some have just the file name, some have a full path, some use\na fake path.</p>\n\n<p><strong>IMPORTANT:</strong> File uploads are not performed using normal 'Ajax' techniques; see the description for\n<a href=\"#!/api/Ext.form.Basic-method-hasUpload\" rel=\"Ext.form.Basic-method-hasUpload\" class=\"docClass\">Ext.form.Basic.hasUpload</a> for details.</p>\n\n<h1>Example Usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Upload a Photo',\n    width: 400,\n    bodyPadding: 10,\n    frame: true,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'filefield',\n        name: 'photo',\n        fieldLabel: 'Photo',\n        labelWidth: 50,\n        msgTarget: 'side',\n        allowBlank: false,\n        anchor: '100%',\n        buttonText: 'Select Photo...'\n    }],\n\n    buttons: [{\n        text: 'Upload',\n        handler: function() {\n            var form = this.up('form').getForm();\n            if(form.isValid()){\n                form.submit({\n                    url: 'photo-upload.php',\n                    waitMsg: 'Uploading your photo...',\n                    success: function(fp, o) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', 'Your photo \"' + o.result.file + '\" has been uploaded.');\n                    }\n                });\n            }\n        }\n    }]\n});\n</code></pre>\n"},"FileButton":{"!doc":"\n"},"Hidden":{"!doc":"<p>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.</p>\n\n<p>This creates an actual input element with type=\"hidden\" in the DOM. While its label is\n<a href=\"#!/api/Ext.form.field.Hidden-cfg-hideLabel\" rel=\"Ext.form.field.Hidden-cfg-hideLabel\" class=\"docClass\">not rendered</a> by default, it is still a real component and may be sized according\nto its owner container's layout.</p>\n\n<p>Because of this, in most cases it is more convenient and less problematic to simply\n<a href=\"#!/api/Ext.form.action.Action-cfg-params\" rel=\"Ext.form.action.Action-cfg-params\" class=\"docClass\">pass hidden parameters</a> directly when\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitting the form</a>.</p>\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>new <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>({\n    title: 'My Form',\n    items: [{\n        xtype: 'textfield',\n        fieldLabel: 'Text Field',\n        name: 'text_field',\n        value: 'value from text field'\n    }, {\n        xtype: 'hiddenfield',\n        name: 'hidden_field_1',\n        value: 'value from hidden field'\n    }],\n\n    buttons: [{\n        text: 'Submit',\n        handler: function() {\n            this.up('form').getForm().submit({\n                params: {\n                    hidden_field_2: 'value from submit call'\n                }\n            });\n        }\n    }]\n});\n</code></pre>\n\n<p>Submitting the above form will result in three values sent to the server:</p>\n\n<pre><code>text_field=value+from+text+field&amp;hidden;_field_1=value+from+hidden+field&amp;hidden_field_2=value+from+submit+call\n</code></pre>\n"},"HtmlEditor":{"!doc":"<p>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be\nautomatically hidden when needed. These are noted in the config options where appropriate.</p>\n\n<p>The editor's toolbar buttons have tooltips defined in the <a href=\"#!/api/Ext.form.field.HtmlEditor-property-buttonTips\" rel=\"Ext.form.field.HtmlEditor-property-buttonTips\" class=\"docClass\">buttonTips</a> property, but they are not\nenabled by default unless the global <a href=\"#!/api/Ext.tip.QuickTipManager\" rel=\"Ext.tip.QuickTipManager\" class=\"docClass\">Ext.tip.QuickTipManager</a> singleton is\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">initialized</a>.</p>\n\n<p>An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an\nEditor within any element that has display set to 'none' can cause problems in Safari and Firefox due to their\ndefault iframe reloading bugs.</p>\n\n<h1>Example usage</h1>\n\n<p>Simple example rendered with default options:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();  // enable tooltips\nExt.create('<a href=\"#!/api/Ext.form.field.HtmlEditor\" rel=\"Ext.form.field.HtmlEditor\" class=\"docClass\">Ext.form.HtmlEditor</a>', {\n    width: 580,\n    height: 250,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>Passed via xtype into a container and with custom options:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();  // enable tooltips\nnew <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>({\n    title: 'HTML Editor',\n    renderTo: Ext.getBody(),\n    width: 550,\n    height: 250,\n    frame: true,\n    layout: 'fit',\n    items: {\n        xtype: 'htmleditor',\n        enableColors: false,\n        enableAlignments: false\n    }\n});\n</code></pre>\n\n<h1>Reflow issues</h1>\n\n<p>In some browsers, a layout reflow will cause the underlying editor iframe to be reset. This\nis most commonly seen when using the editor in collapsed panels with animation. In these cases\nit is best to avoid animation. More information can be found here: https://bugzilla.mozilla.org/show_bug.cgi?id=90268</p>\n"},"Number":{"!doc":"<p>A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,\nand numeric validation to limit the value to a range of valid numbers. The range of acceptable number\nvalues can be controlled by setting the <a href=\"#!/api/Ext.form.field.Number-cfg-minValue\" rel=\"Ext.form.field.Number-cfg-minValue\" class=\"docClass\">minValue</a> and <a href=\"#!/api/Ext.form.field.Number-cfg-maxValue\" rel=\"Ext.form.field.Number-cfg-maxValue\" class=\"docClass\">maxValue</a> configs, and fractional\ndecimals can be disallowed by setting <a href=\"#!/api/Ext.form.field.Number-cfg-allowDecimals\" rel=\"Ext.form.field.Number-cfg-allowDecimals\" class=\"docClass\">allowDecimals</a> to <code>false</code>.</p>\n\n<p>By default, the number field is also rendered with a set of up/down spinner buttons and has\nup/down arrow key and mouse wheel event listeners attached for incrementing/decrementing the value by the\n<a href=\"#!/api/Ext.form.field.Number-cfg-step\" rel=\"Ext.form.field.Number-cfg-step\" class=\"docClass\">step</a> value. To hide the spinner buttons set <code><a href=\"#!/api/Ext.form.field.Number-cfg-hideTrigger\" rel=\"Ext.form.field.Number-cfg-hideTrigger\" class=\"docClass\">hideTrigger</a>:true</code>; to disable\nthe arrow key and mouse wheel handlers set <code><a href=\"#!/api/Ext.form.field.Number-cfg-keyNavEnabled\" rel=\"Ext.form.field.Number-cfg-keyNavEnabled\" class=\"docClass\">keyNavEnabled</a>:false</code> and\n<code><a href=\"#!/api/Ext.form.field.Number-cfg-mouseWheelEnabled\" rel=\"Ext.form.field.Number-cfg-mouseWheelEnabled\" class=\"docClass\">mouseWheelEnabled</a>:false</code>. See the example below.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'On The Wall',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'bottles',\n        fieldLabel: 'Bottles of Beer',\n        value: 99,\n        maxValue: 99,\n        minValue: 0\n    }],\n    buttons: [{\n        text: 'Take one down, pass it around',\n        handler: function() {\n            this.up('form').down('[name=bottles]').spinDown();\n        }\n    }]\n});\n</code></pre>\n\n<h1>Removing UI Enhancements</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Personal Info',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'age',\n        fieldLabel: 'Age',\n        minValue: 0, //prevents negative numbers\n\n        // Remove spinner buttons, and arrow key and mouse wheel listeners\n        hideTrigger: true,\n        keyNavEnabled: false,\n        mouseWheelEnabled: false\n    }]\n});\n</code></pre>\n\n<h1>Using Step</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    renderTo: Ext.getBody(),\n    title: 'Step',\n    width: 300,\n    bodyPadding: 10,\n    items: [{\n        xtype: 'numberfield',\n        anchor: '100%',\n        name: 'evens',\n        fieldLabel: 'Even Numbers',\n\n        // Set step so it skips every other number\n        step: 2,\n        value: 0,\n\n        // Add change handler to force user-entered numbers to evens\n        listeners: {\n            change: function(field, value) {\n                value = parseInt(value, 10);\n                field.setValue(value + value % 2);\n            }\n        }\n    }]\n});\n</code></pre>\n"},"Spinner":{"!doc":"<p>A field with a pair of up/down spinner buttons. This class is not normally instantiated directly,\ninstead it is subclassed and the <a href=\"#!/api/Ext.form.field.Spinner-method-onSpinUp\" rel=\"Ext.form.field.Spinner-method-onSpinUp\" class=\"docClass\">onSpinUp</a> and <a href=\"#!/api/Ext.form.field.Spinner-method-onSpinDown\" rel=\"Ext.form.field.Spinner-method-onSpinDown\" class=\"docClass\">onSpinDown</a> methods are implemented\nto handle when the buttons are clicked. A good example of this is the <a href=\"#!/api/Ext.form.field.Number\" rel=\"Ext.form.field.Number\" class=\"docClass\">Ext.form.field.Number</a>\nfield which uses the spinner to increment and decrement the field's value by its\n<a href=\"#!/api/Ext.form.field.Number-cfg-step\" rel=\"Ext.form.field.Number-cfg-step\" class=\"docClass\">step</a> config value.</p>\n\n<p>For example:</p>\n\n<pre class='inline-example '><code>Ext.define('Ext.ux.CustomSpinner', {\n    extend: '<a href=\"#!/api/Ext.form.field.Spinner\" rel=\"Ext.form.field.Spinner\" class=\"docClass\">Ext.form.field.Spinner</a>',\n    alias: 'widget.customspinner',\n\n    // override onSpinUp (using step isn't neccessary)\n    onSpinUp: function() {\n        var me = this;\n        if (!me.readOnly) {\n            var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n            me.setValue((val + me.step) + ' Pack');\n        }\n    },\n\n    // override onSpinDown\n    onSpinDown: function() {\n        var me = this;\n        if (!me.readOnly) {\n           var val = parseInt(me.getValue().split(' '), 10)||0; // gets rid of \" Pack\", defaults to zero on parse failure\n           if (val &lt;= me.step) {\n               me.setValue('Dry!');\n           } else {\n               me.setValue((val - me.step) + ' Pack');\n           }\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.FormPanel</a>', {\n    title: 'Form with SpinnerField',\n    bodyPadding: 5,\n    width: 350,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'customspinner',\n        fieldLabel: 'How Much Beer?',\n        step: 6\n    }]\n});\n</code></pre>\n\n<p>By default, pressing the up and down arrow keys will also trigger the onSpinUp and onSpinDown methods;\nto prevent this, set <code><a href=\"#!/api/Ext.form.field.Spinner-cfg-keyNavEnabled\" rel=\"Ext.form.field.Spinner-cfg-keyNavEnabled\" class=\"docClass\">keyNavEnabled</a> = false</code>.</p>\n"},"Radio":{"!doc":"<p>Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked\nat a time within a group of radios with the same name.</p>\n\n<h1>Labeling</h1>\n\n<p>In addition to the <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">standard field labeling options</a>, radio buttons\nmay be given an optional <a href=\"#!/api/Ext.form.field.Radio-cfg-boxLabel\" rel=\"Ext.form.field.Radio-cfg-boxLabel\" class=\"docClass\">boxLabel</a> which will be displayed immediately to the right of the input. Also\nsee <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a> for a convenient method of grouping related radio buttons.</p>\n\n<h1>Values</h1>\n\n<p>The main value of a Radio field is a boolean, indicating whether or not the radio is checked.</p>\n\n<p>The following values will check the radio:</p>\n\n<ul>\n<li><code>true</code></li>\n<li><code>'true'</code></li>\n<li><code>'1'</code></li>\n<li><code>'on'</code></li>\n</ul>\n\n\n<p>Any other value will uncheck it.</p>\n\n<p>In addition to the main boolean value, you may also specify a separate <a href=\"#!/api/Ext.form.field.Radio-cfg-inputValue\" rel=\"Ext.form.field.Radio-cfg-inputValue\" class=\"docClass\">inputValue</a>. This will be sent\nas the parameter value when the form is <a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">submitted</a>. You will want to set this\nvalue if you have multiple radio buttons with the same <a href=\"#!/api/Ext.form.field.Radio-cfg-name\" rel=\"Ext.form.field.Radio-cfg-name\" class=\"docClass\">name</a>, as is almost always the case.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title      : 'Order Form',\n    width      : 300,\n    bodyPadding: 10,\n    renderTo   : Ext.getBody(),\n    items: [\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Size',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'M',\n                    name      : 'size',\n                    inputValue: 'm',\n                    id        : 'radio1'\n                }, {\n                    boxLabel  : 'L',\n                    name      : 'size',\n                    inputValue: 'l',\n                    id        : 'radio2'\n                }, {\n                    boxLabel  : 'XL',\n                    name      : 'size',\n                    inputValue: 'xl',\n                    id        : 'radio3'\n                }\n            ]\n        },\n        {\n            xtype      : 'fieldcontainer',\n            fieldLabel : 'Color',\n            defaultType: 'radiofield',\n            defaults: {\n                flex: 1\n            },\n            layout: 'hbox',\n            items: [\n                {\n                    boxLabel  : 'Blue',\n                    name      : 'color',\n                    inputValue: 'blue',\n                    id        : 'radio4'\n                }, {\n                    boxLabel  : 'Grey',\n                    name      : 'color',\n                    inputValue: 'grey',\n                    id        : 'radio5'\n                }, {\n                    boxLabel  : 'Black',\n                    name      : 'color',\n                    inputValue: 'black',\n                    id        : 'radio6'\n                }\n            ]\n        }\n    ],\n    bbar: [\n        {\n            text: 'Smaller Size',\n            handler: function() {\n                var radio1 = Ext.getCmp('radio1'),\n                    radio2 = Ext.getCmp('radio2'),\n                    radio3 = Ext.getCmp('radio3');\n\n                //if L is selected, change to M\n                if (radio2.getValue()) {\n                    radio1.setValue(true);\n                    return;\n                }\n\n                //if XL is selected, change to L\n                if (radio3.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to S\n                radio1.setValue(true);\n            }\n        },\n        {\n            text: 'Larger Size',\n            handler: function() {\n                var radio1 = Ext.getCmp('radio1'),\n                    radio2 = Ext.getCmp('radio2'),\n                    radio3 = Ext.getCmp('radio3');\n\n                //if M is selected, change to L\n                if (radio1.getValue()) {\n                    radio2.setValue(true);\n                    return;\n                }\n\n                //if L is selected, change to XL\n                if (radio2.getValue()) {\n                    radio3.setValue(true);\n                    return;\n                }\n\n                //if nothing is set, set size to XL\n                radio3.setValue(true);\n            }\n        },\n        '-',\n        {\n            text: 'Select color',\n            menu: {\n                indent: false,\n                items: [\n                    {\n                        text: 'Blue',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio4');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Grey',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio5');\n                            radio.setValue(true);\n                        }\n                    },\n                    {\n                        text: 'Black',\n                        handler: function() {\n                            var radio = Ext.getCmp('radio6');\n                            radio.setValue(true);\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n});\n</code></pre>\n"},"Tag":{"!doc":"<p>The <code>tagfield</code> is a combo box improved for multiple value editing, selection and easy\nmanagement.</p>\n\n<h3>Histroy</h3>\n\n<p>Inspired by the <a href=\"http://technomedia.co.uk/SuperBoxSelect/examples3.html\">SuperBoxSelect component for ExtJS 3</a>,\nwhich in turn was inspired by the <a href=\"http://efattal.fr/en/extjs/extuxboxselect/\">BoxSelect component for ExtJS 2</a>.</p>\n\n<p>Various contributions and suggestions made by many members of the ExtJS community which can be seen\nin the <a href=\"http://www.sencha.com/forum/showthread.php?134751-Ext.ux.form.field.BoxSelect\">user extension forum post</a>.</p>\n\n<p>By: kvee_iv http://www.sencha.com/forum/member.php?29437-kveeiv</p>\n"},"TextArea":{"!doc":"<p>This class creates a multiline text field, which can be used as a direct replacement for traditional\ntextarea fields. In addition, it supports automatically <a href=\"#!/api/Ext.form.field.TextArea-cfg-grow\" rel=\"Ext.form.field.TextArea-cfg-grow\" class=\"docClass\">growing</a> the height of the textarea to\nfit its content.</p>\n\n<p>All of the configuration options from <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> can be used on TextArea.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.FormPanel</a>', {\n    title      : 'Sample TextArea',\n    width      : 400,\n    bodyPadding: 10,\n    renderTo   : Ext.getBody(),\n    items: [{\n        xtype     : 'textareafield',\n        grow      : true,\n        name      : 'message',\n        fieldLabel: 'Message',\n        anchor    : '100%'\n    }]\n});\n</code></pre>\n\n<p>Some other useful configuration options when using <a href=\"#!/api/Ext.form.field.TextArea-cfg-grow\" rel=\"Ext.form.field.TextArea-cfg-grow\" class=\"docClass\">grow</a> are <a href=\"#!/api/Ext.form.field.TextArea-cfg-growMin\" rel=\"Ext.form.field.TextArea-cfg-growMin\" class=\"docClass\">growMin</a> and <a href=\"#!/api/Ext.form.field.TextArea-cfg-growMax\" rel=\"Ext.form.field.TextArea-cfg-growMax\" class=\"docClass\">growMax</a>.\nThese allow you to set the minimum and maximum grow heights for the textarea.</p>\n\n<p><strong>NOTE:</strong> In some browsers, carriage returns ('\\r', not to be confused with new lines)\nwill be automatically stripped out the value is set to the textarea. Since we cannot\nuse any reasonable method to attempt to re-insert these, they will automatically be\nstripped out to ensure the behaviour is consistent across browser.</p>\n"},"Time":{"!doc":"<p>Provides a time input field with a time dropdown and automatic time validation.</p>\n\n<p>This field recognizes and uses JavaScript Date objects as its main <a href=\"#!/api/Ext.form.field.Time-cfg-value\" rel=\"Ext.form.field.Time-cfg-value\" class=\"docClass\">value</a> type (only the time portion of the\ndate is used; the month/day/year are ignored). In addition, it recognizes string values which are parsed according to\nthe <a href=\"#!/api/Ext.form.field.Time-cfg-format\" rel=\"Ext.form.field.Time-cfg-format\" class=\"docClass\">format</a> and/or <a href=\"#!/api/Ext.form.field.Time-cfg-altFormats\" rel=\"Ext.form.field.Time-cfg-altFormats\" class=\"docClass\">altFormats</a> configs. These may be reconfigured to use time formats appropriate for\nthe user's locale.</p>\n\n<p>The field may be limited to a certain range of times by using the <a href=\"#!/api/Ext.form.field.Time-cfg-minValue\" rel=\"Ext.form.field.Time-cfg-minValue\" class=\"docClass\">minValue</a> and <a href=\"#!/api/Ext.form.field.Time-cfg-maxValue\" rel=\"Ext.form.field.Time-cfg-maxValue\" class=\"docClass\">maxValue</a> configs,\nand the interval between time options in the dropdown can be changed with the <a href=\"#!/api/Ext.form.field.Time-cfg-increment\" rel=\"Ext.form.field.Time-cfg-increment\" class=\"docClass\">increment</a> config.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Time Card',\n    width: 300,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'timefield',\n        name: 'in',\n        fieldLabel: 'Time In',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n    }, {\n        xtype: 'timefield',\n        name: 'out',\n        fieldLabel: 'Time Out',\n        minValue: '6:00 AM',\n        maxValue: '8:00 PM',\n        increment: 30,\n        anchor: '100%'\n   }]\n});\n</code></pre>\n"},"Trigger":{"!doc":"\n"},"VTypes":{"!doc":"<p>This is a singleton object which contains a set of commonly used field validation functions\nand provides a mechanism for creating reusable custom field validations.\nThe following field validation functions are provided out of the box:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-alpha\" rel=\"Ext.form.field.VTypes-method-alpha\" class=\"docClass\">alpha</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-alphanum\" rel=\"Ext.form.field.VTypes-method-alphanum\" class=\"docClass\">alphanum</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-email\" rel=\"Ext.form.field.VTypes-method-email\" class=\"docClass\">email</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes-method-url\" rel=\"Ext.form.field.VTypes-method-url\" class=\"docClass\">url</a></li>\n</ul>\n\n\n<p>VTypes can be applied to a <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Text Field</a> using the <code><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a></code> configuration:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n    fieldLabel: 'Email Address',\n    name: 'email',\n    vtype: 'email' // applies email validation rules to this field\n});\n</code></pre>\n\n<p>To create custom VTypes:</p>\n\n<pre><code>// custom Vtype for vtype:'time'\nvar timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\\s[a|p]m)$/i;\nExt.apply(<a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a>, {\n    //  vtype validation function\n    time: function(val, field) {\n        return timeTest.test(val);\n    },\n    // vtype Text property: The error text to display when the validation function returns false\n    timeText: 'Not a valid time.  Must be in the format \"12:34 PM\".',\n    // vtype Mask property: The keystroke filter mask\n    timeMask: /[\\d\\s:amp]/i\n});\n</code></pre>\n\n<p>In the above example the <code>time</code> function is the validator that will run when field validation occurs,\n<code>timeText</code> is the error message, and <code>timeMask</code> limits what characters can be typed into the field.\nNote that the <code>Text</code> and <code>Mask</code> functions must begin with the same name as the validator function.</p>\n\n<p>Using a custom validator is the same as using one of the build-in validators - just use the name of the validator function\nas the <code><a href=\"#!/api/Ext.form.field.Text-cfg-vtype\" rel=\"Ext.form.field.Text-cfg-vtype\" class=\"docClass\">vtype</a></code> configuration on a <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Text Field</a>:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n    fieldLabel: 'Departure Time',\n    name: 'departureTime',\n    vtype: 'time' // applies custom time validation rules to this field\n});\n</code></pre>\n\n<p>Another example of a custom validator:</p>\n\n<pre><code>// custom Vtype for vtype:'IPAddress'\nExt.apply(<a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a>, {\n    IPAddress:  function(v) {\n        return /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(v);\n    },\n    IPAddressText: 'Must be a numeric IP address',\n    IPAddressMask: /[\\d\\.]/i\n});\n</code></pre>\n\n<p>It's important to note that using Ext.apply() means that the custom validator function\nas well as <code>Text</code> and <code>Mask</code> fields are added as properties of the <code><a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a></code> singleton.</p>\n"}},"FieldAncestor":{"!doc":"<p>A mixin for <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> components that are likely to have form fields in their\nitems subtree. Adds the following capabilities:</p>\n\n<ul>\n<li>Methods for handling the addition and removal of <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> and <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\ninstances at any depth within the container.</li>\n<li>Events (<a href=\"#!/api/Ext.form.FieldAncestor-event-fieldvaliditychange\" rel=\"Ext.form.FieldAncestor-event-fieldvaliditychange\" class=\"docClass\">fieldvaliditychange</a> and <a href=\"#!/api/Ext.form.FieldAncestor-event-fielderrorchange\" rel=\"Ext.form.FieldAncestor-event-fielderrorchange\" class=\"docClass\">fielderrorchange</a>) for handling changes to the state\nof individual fields at the container level.</li>\n<li>Automatic application of <a href=\"#!/api/Ext.form.FieldAncestor-cfg-fieldDefaults\" rel=\"Ext.form.FieldAncestor-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config properties to each field added within the\ncontainer, to facilitate uniform configuration of all fields.</li>\n</ul>\n\n\n<p>This mixin is primarily for internal use by <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a> and <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">Ext.form.FieldContainer</a>,\nand should not normally need to be used directly.</p>\n"},"CheckboxManager":{"!doc":"<p>Private utility class for managing all <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">Ext.form.field.Checkbox</a> fields grouped by name.</p>\n"},"FieldSet":{"!doc":"<p>A container for grouping sets of fields, rendered as a HTML <code>fieldset</code> element. The <a href=\"#!/api/Ext.form.FieldSet-cfg-title\" rel=\"Ext.form.FieldSet-cfg-title\" class=\"docClass\">title</a>\nconfig will be rendered as the fieldset's <code>legend</code>.</p>\n\n<p>While FieldSets commonly contain simple groups of fields, they are general <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Containers</a>\nand may therefore contain any type of components in their <a href=\"#!/api/Ext.form.FieldSet-cfg-items\" rel=\"Ext.form.FieldSet-cfg-items\" class=\"docClass\">items</a>, including other nested containers.\nThe default <a href=\"#!/api/Ext.form.FieldSet-cfg-layout\" rel=\"Ext.form.FieldSet-cfg-layout\" class=\"docClass\">layout</a> for the FieldSet's items is <code>'anchor'</code>, but it can be configured to use any other\nlayout type.</p>\n\n<p>FieldSets may also be collapsed if configured to do so; this can be done in two ways:</p>\n\n<ol>\n<li>Set the <a href=\"#!/api/Ext.form.FieldSet-cfg-collapsible\" rel=\"Ext.form.FieldSet-cfg-collapsible\" class=\"docClass\">collapsible</a> config to true; this will result in a collapse button being rendered next to\nthe <a href=\"#!/api/Ext.form.FieldSet-cfg-title\" rel=\"Ext.form.FieldSet-cfg-title\" class=\"docClass\">legend title</a>, or:</li>\n<li>Set the <a href=\"#!/api/Ext.form.FieldSet-cfg-checkboxToggle\" rel=\"Ext.form.FieldSet-cfg-checkboxToggle\" class=\"docClass\">checkboxToggle</a> config to true; this is similar to using <a href=\"#!/api/Ext.form.FieldSet-cfg-collapsible\" rel=\"Ext.form.FieldSet-cfg-collapsible\" class=\"docClass\">collapsible</a> but renders\na <a href=\"#!/api/Ext.form.field.Checkbox\" rel=\"Ext.form.field.Checkbox\" class=\"docClass\">checkbox</a> in place of the toggle button. The fieldset will be expanded when the\ncheckbox is checked and collapsed when it is unchecked. The checkbox will also be included in the\n<a href=\"#!/api/Ext.form.Basic-method-submit\" rel=\"Ext.form.Basic-method-submit\" class=\"docClass\">form submit parameters</a> using the <a href=\"#!/api/Ext.form.FieldSet-cfg-checkboxName\" rel=\"Ext.form.FieldSet-cfg-checkboxName\" class=\"docClass\">checkboxName</a> as its parameter name.</li>\n</ol>\n\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Simple Form with FieldSets',\n    labelWidth: 75, // label settings here cascade unless overridden\n    url: 'save-form.php',\n    frame: true,\n    bodyStyle: 'padding:5px 5px 0',\n    width: 550,\n    renderTo: Ext.getBody(),\n    layout: 'column', // arrange fieldsets side by side\n    items: [{\n        // Fieldset in Column 1 - collapsible via toggle button\n        xtype:'fieldset',\n        columnWidth: 0.5,\n        title: 'Fieldset 1',\n        collapsible: true,\n        defaultType: 'textfield',\n        defaults: {anchor: '100%'},\n        layout: 'anchor',\n        items :[{\n            fieldLabel: 'Field 1',\n            name: 'field1'\n        }, {\n            fieldLabel: 'Field 2',\n            name: 'field2'\n        }]\n    }, {\n        // Fieldset in Column 2 - collapsible via checkbox, collapsed by default, contains a panel\n        xtype:'fieldset',\n        title: 'Show Panel', // title or checkboxToggle creates fieldset header\n        columnWidth: 0.5,\n        checkboxToggle: true,\n        collapsed: true, // fieldset initially collapsed\n        layout:'anchor',\n        items :[{\n            xtype: 'panel',\n            anchor: '100%',\n            title: 'Panel inside a fieldset',\n            frame: true,\n            height: 52\n        }]\n    }]\n});\n</code></pre>\n"},"Label":{"!doc":"<p>Produces a standalone <code>&lt;label /&gt;</code> element which can be inserted into a form and be associated with a field\nin that form using the <a href=\"#!/api/Ext.form.Label-cfg-forId\" rel=\"Ext.form.Label-cfg-forId\" class=\"docClass\">forId</a> property.</p>\n\n<p><strong>NOTE:</strong> in most cases it will be more appropriate to use the <a href=\"#!/api/Ext.form.Labelable-cfg-fieldLabel\" rel=\"Ext.form.Labelable-cfg-fieldLabel\" class=\"docClass\">fieldLabel</a>\nand associated config properties (<a href=\"#!/api/Ext.form.Labelable-cfg-labelAlign\" rel=\"Ext.form.Labelable-cfg-labelAlign\" class=\"docClass\">Ext.form.Labelable.labelAlign</a>, <a href=\"#!/api/Ext.form.Labelable-cfg-labelWidth\" rel=\"Ext.form.Labelable-cfg-labelWidth\" class=\"docClass\">Ext.form.Labelable.labelWidth</a>,\netc.) in field components themselves, as that allows labels to be uniformly sized throughout the form.\n<a href=\"#!/api/Ext.form.Label\" rel=\"Ext.form.Label\" class=\"docClass\">Ext.form.Label</a> should only be used when your layout can not be achieved with the standard\n<a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">field layout</a>.</p>\n\n<p>You will likely be associating the label with a field component that extends <a href=\"#!/api/Ext.form.field.Base\" rel=\"Ext.form.field.Base\" class=\"docClass\">Ext.form.field.Base</a>, so\nyou should make sure the <a href=\"#!/api/Ext.form.Label-cfg-forId\" rel=\"Ext.form.Label-cfg-forId\" class=\"docClass\">forId</a> is set to the same value as the <a href=\"#!/api/Ext.form.field.Base-cfg-inputId\" rel=\"Ext.form.field.Base-cfg-inputId\" class=\"docClass\">inputId</a>\nof that field.</p>\n\n<p>The label's text can be set using either the <a href=\"#!/api/Ext.form.Label-cfg-text\" rel=\"Ext.form.Label-cfg-text\" class=\"docClass\">text</a> or <a href=\"#!/api/Ext.form.Label-cfg-html\" rel=\"Ext.form.Label-cfg-html\" class=\"docClass\">html</a> configuration properties; the\ndifference between the two is that the former will automatically escape HTML characters when rendering, while\nthe latter will not.</p>\n\n<h1>Example</h1>\n\n<p>This example creates a Label after its associated Text field, an arrangement that cannot currently\nbe achieved using the standard Field layout's labelAlign.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Field with Label',\n    width: 400,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    layout: {\n        type: 'hbox',\n        align: 'middle'\n    },\n    items: [{\n        xtype: 'textfield',\n        hideLabel: true,\n        flex: 1\n    }, {\n        xtype: 'label',\n        forId: 'myFieldId',\n        text: 'My Awesome Field',\n        margin: '0 0 0 10'\n    }]\n});\n</code></pre>\n"},"Panel":{"!doc":"<p>FormPanel provides a standard container for forms. It is essentially a standard <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> which\nautomatically creates a <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">BasicForm</a> for managing any <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nobjects that are added as descendants of the panel. It also includes conveniences for configuring and\nworking with the BasicForm and the collection of Fields.</p>\n\n<h1>Layout</h1>\n\n<p>By default, FormPanel is configured with <code><a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">layout:'anchor'</a></code> for\nthe layout of its immediate child items. This can be changed to any of the supported container layouts.\nThe layout of sub-containers is configured in <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">the standard way</a>.</p>\n\n<h1>BasicForm</h1>\n\n<p>FormPanel class accepts all\nof the config options supported by the <a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> class, and will pass them along to\nthe internal BasicForm when it is created.</p>\n\n<p>The following events fired by the BasicForm will be re-fired by the FormPanel and can therefore be\nlistened for on the FormPanel itself:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.Basic-event-beforeaction\" rel=\"Ext.form.Basic-event-beforeaction\" class=\"docClass\">beforeaction</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-actionfailed\" rel=\"Ext.form.Basic-event-actionfailed\" class=\"docClass\">actionfailed</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-actioncomplete\" rel=\"Ext.form.Basic-event-actioncomplete\" class=\"docClass\">actioncomplete</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-validitychange\" rel=\"Ext.form.Basic-event-validitychange\" class=\"docClass\">validitychange</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-event-dirtychange\" rel=\"Ext.form.Basic-event-dirtychange\" class=\"docClass\">dirtychange</a></li>\n</ul>\n\n\n<h1>Field Defaults</h1>\n\n<p>The <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config option conveniently allows centralized configuration of default values\nfor all fields added as descendants of the FormPanel. Any config option recognized by implementations\nof <a href=\"#!/api/Ext.form.Labelable\" rel=\"Ext.form.Labelable\" class=\"docClass\">Ext.form.Labelable</a> may be included in this object. See the <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> documentation\nfor details of how the defaults are applied.</p>\n\n<h1>Form Validation</h1>\n\n<p>With the default configuration, form fields are validated on-the-fly while the user edits their values.\nThis can be controlled on a per-field basis (or via the <a href=\"#!/api/Ext.form.Panel-cfg-fieldDefaults\" rel=\"Ext.form.Panel-cfg-fieldDefaults\" class=\"docClass\">fieldDefaults</a> config) with the field\nconfig properties <a href=\"#!/api/Ext.form.field.Field-cfg-validateOnChange\" rel=\"Ext.form.field.Field-cfg-validateOnChange\" class=\"docClass\">Ext.form.field.Field.validateOnChange</a> and <a href=\"#!/api/Ext.form.field.Base-cfg-checkChangeEvents\" rel=\"Ext.form.field.Base-cfg-checkChangeEvents\" class=\"docClass\">Ext.form.field.Base.checkChangeEvents</a>,\nand the FormPanel's config properties <a href=\"#!/api/Ext.form.Panel-cfg-pollForChanges\" rel=\"Ext.form.Panel-cfg-pollForChanges\" class=\"docClass\">pollForChanges</a> and <a href=\"#!/api/Ext.form.Panel-cfg-pollInterval\" rel=\"Ext.form.Panel-cfg-pollInterval\" class=\"docClass\">pollInterval</a>.</p>\n\n<p>Any component within the FormPanel can be configured with <code>formBind: true</code>. This will cause that\ncomponent to be automatically disabled when the form is invalid, and enabled when it is valid. This is most\ncommonly used for Button components to prevent submitting the form in an invalid state, but can be used on\nany component type.</p>\n\n<p>For more information on form validation see the following:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.form.field.Field-cfg-validateOnChange\" rel=\"Ext.form.field.Field-cfg-validateOnChange\" class=\"docClass\">Ext.form.field.Field.validateOnChange</a></li>\n<li><a href=\"#!/api/Ext.form.Panel-cfg-pollForChanges\" rel=\"Ext.form.Panel-cfg-pollForChanges\" class=\"docClass\">pollForChanges</a> and <a href=\"#!/api/Ext.form.Panel-cfg-pollInterval\" rel=\"Ext.form.Panel-cfg-pollInterval\" class=\"docClass\">pollInterval</a></li>\n<li><a href=\"#!/api/Ext.form.field.VTypes\" rel=\"Ext.form.field.VTypes\" class=\"docClass\">Ext.form.field.VTypes</a></li>\n<li><a href=\"#!/api/Ext.form.Basic-method-doAction\" rel=\"Ext.form.Basic-method-doAction\" class=\"docClass\">BasicForm.doAction clientValidation notes</a></li>\n</ul>\n\n\n<h1>Form Submission</h1>\n\n<p>By default, Ext Forms are submitted through Ajax, using <a href=\"#!/api/Ext.form.action.Action\" rel=\"Ext.form.action.Action\" class=\"docClass\">Ext.form.action.Action</a>. See the documentation for\n<a href=\"#!/api/Ext.form.Basic\" rel=\"Ext.form.Basic\" class=\"docClass\">Ext.form.Basic</a> for details.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Simple Form',\n    bodyPadding: 5,\n    width: 350,\n\n    // The form will submit an AJAX request to this URL when submitted\n    url: 'save-form.php',\n\n    // Fields will be arranged vertically, stretched to full width\n    layout: 'anchor',\n    defaults: {\n        anchor: '100%'\n    },\n\n    // The fields\n    defaultType: 'textfield',\n    items: [{\n        fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank: false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last',\n        allowBlank: false\n    }],\n\n    // Reset and Submit buttons\n    buttons: [{\n        text: 'Reset',\n        handler: function() {\n            this.up('form').getForm().reset();\n        }\n    }, {\n        text: 'Submit',\n        formBind: true, //only enabled once the form is valid\n        disabled: true,\n        handler: function() {\n            var form = this.up('form').getForm();\n            if (form.isValid()) {\n                form.submit({\n                    success: function(form, action) {\n                       <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Success', action.result.msg);\n                    },\n                    failure: function(form, action) {\n                        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Failed', action.result.msg);\n                    }\n                });\n            }\n        }\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"RadioGroup":{"!doc":"<p>A <a href=\"#!/api/Ext.form.FieldContainer\" rel=\"Ext.form.FieldContainer\" class=\"docClass\">field container</a> which has a specialized layout for arranging\n<a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Ext.form.field.Radio</a> controls into columns, and provides convenience <a href=\"#!/api/Ext.form.field.Field\" rel=\"Ext.form.field.Field\" class=\"docClass\">Ext.form.field.Field</a>\nmethods for <a href=\"#!/api/Ext.form.RadioGroup-method-getValue\" rel=\"Ext.form.RadioGroup-method-getValue\" class=\"docClass\">getting</a>, <a href=\"#!/api/Ext.form.RadioGroup-method-setValue\" rel=\"Ext.form.RadioGroup-method-setValue\" class=\"docClass\">setting</a>, and <a href=\"#!/api/Ext.form.RadioGroup-method-validate\" rel=\"Ext.form.RadioGroup-method-validate\" class=\"docClass\">validating</a> the\ngroup of radio buttons as a whole.</p>\n\n<h1>Validation</h1>\n\n<p>Individual radio buttons themselves have no default validation behavior, but\nsometimes you want to require a user to select one of a group of radios. RadioGroup\nallows this by setting the config <code><a href=\"#!/api/Ext.form.RadioGroup-cfg-allowBlank\" rel=\"Ext.form.RadioGroup-cfg-allowBlank\" class=\"docClass\">allowBlank</a>:false</code>; when the user does not check at\none of the radio buttons, the entire group will be highlighted as invalid and the\n<a href=\"#!/api/Ext.form.RadioGroup-cfg-blankText\" rel=\"Ext.form.RadioGroup-cfg-blankText\" class=\"docClass\">error message</a> will be displayed according to the <a href=\"#!/api/Ext.form.RadioGroup-cfg-msgTarget\" rel=\"Ext.form.RadioGroup-cfg-msgTarget\" class=\"docClass\">msgTarget</a> config.</p>\n\n<h1>Layout</h1>\n\n<p>The default layout for RadioGroup makes it easy to arrange the radio buttons into\ncolumns; see the <a href=\"#!/api/Ext.form.RadioGroup-cfg-columns\" rel=\"Ext.form.RadioGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.RadioGroup-cfg-vertical\" rel=\"Ext.form.RadioGroup-cfg-vertical\" class=\"docClass\">vertical</a> config documentation for details. You may also\nuse a completely different layout by setting the <a href=\"#!/api/Ext.form.RadioGroup-cfg-layout\" rel=\"Ext.form.RadioGroup-cfg-layout\" class=\"docClass\">layout</a> to one of the other supported layout\ntypes; for instance you may wish to use a custom arrangement of hbox and vbox containers. In that case\nthe Radio components at any depth will still be managed by the RadioGroup's validation.</p>\n\n<h1>Example usage</h1>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'RadioGroup Example',\n    width: 300,\n    height: 125,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items:[{\n        xtype: 'radiogroup',\n        fieldLabel: 'Two Columns',\n        // Arrange radio buttons into two columns, distributed vertically\n        columns: 2,\n        vertical: true,\n        items: [\n            { boxLabel: 'Item 1', name: 'rb', inputValue: '1' },\n            { boxLabel: 'Item 2', name: 'rb', inputValue: '2', checked: true},\n            { boxLabel: 'Item 3', name: 'rb', inputValue: '3' },\n            { boxLabel: 'Item 4', name: 'rb', inputValue: '4' },\n            { boxLabel: 'Item 5', name: 'rb', inputValue: '5' },\n            { boxLabel: 'Item 6', name: 'rb', inputValue: '6' }\n        ]\n    }]\n});\n</code></pre>\n"},"RadioManager":{"!doc":"<p>Private utility class for managing all <a href=\"#!/api/Ext.form.field.Radio\" rel=\"Ext.form.field.Radio\" class=\"docClass\">Ext.form.field.Radio</a> fields grouped by name.</p>\n"},"trigger":{"Component":{"!doc":"<p>A Text Field Trigger that contains a <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> or Widget.</p>\n"},"Trigger":{"!doc":"<p>Base class for <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Text Field</a> triggers</p>\n"},"Spinner":{"!doc":"<p>A Trigger that contains 2 clickable elements inside in the form of a \"up\" and a \"down\"\ntrigger.</p>\n"}}},"fx":{"Anim":{"!doc":"<p>This class manages animation for a specific <a href=\"#!/api/Ext.fx.Anim-cfg-target\" rel=\"Ext.fx.Anim-cfg-target\" class=\"docClass\">target</a>. The animation allows\nanimation of various properties on the target, such as size, position, color and others.</p>\n\n<h2>Starting Conditions</h2>\n\n<p>The starting conditions for the animation are provided by the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> configuration.\nAny/all of the properties in the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> configuration can be specified. If a particular\nproperty is not defined, the starting value for that property will be read directly from the target.</p>\n\n<h2>End Conditions</h2>\n\n<p>The ending conditions for the animation are provided by the <a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> configuration. These mark\nthe final values once the animations has finished. The values in the <a href=\"#!/api/Ext.fx.Anim-cfg-from\" rel=\"Ext.fx.Anim-cfg-from\" class=\"docClass\">from</a> can mirror\nthose in the <a href=\"#!/api/Ext.fx.Anim-cfg-to\" rel=\"Ext.fx.Anim-cfg-to\" class=\"docClass\">to</a> configuration to provide a starting point.</p>\n\n<h2>Other Options</h2>\n\n<ul>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-duration\" rel=\"Ext.fx.Anim-cfg-duration\" class=\"docClass\">duration</a>: Specifies the time period of the animation.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-easing\" rel=\"Ext.fx.Anim-cfg-easing\" class=\"docClass\">easing</a>: Specifies the easing of the animation.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-iterations\" rel=\"Ext.fx.Anim-cfg-iterations\" class=\"docClass\">iterations</a>: Allows the animation to repeat a number of times.</li>\n<li><a href=\"#!/api/Ext.fx.Anim-cfg-alternate\" rel=\"Ext.fx.Anim-cfg-alternate\" class=\"docClass\">alternate</a>: Used in conjunction with <a href=\"#!/api/Ext.fx.Anim-cfg-iterations\" rel=\"Ext.fx.Anim-cfg-iterations\" class=\"docClass\">iterations</a>, reverses the direction every second iteration.</li>\n</ul>\n\n\n<h2>Example Code</h2>\n\n<pre class='inline-example '><code>var myComponent = Ext.create('<a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>', {\n    renderTo: document.body,\n    width: 200,\n    height: 200,\n    style: 'border: 1px solid red;'\n});\n\nExt.create('<a href=\"#!/api/Ext.fx.Anim\" rel=\"Ext.fx.Anim\" class=\"docClass\">Ext.fx.Anim</a>', {\n    target: myComponent,\n    duration: 1000,\n    from: {\n        width: 400 //starting width 400\n    },\n    to: {\n        width: 300, //end width 300\n        height: 300 // end height 300\n    }\n});\n</code></pre>\n"},"Animator":{"!doc":"<p>This class is used to run keyframe based animations, which follows the CSS3 based animation structure.\nKeyframe animations differ from typical from/to animations in that they offer the ability to specify values\nat various points throughout the animation.</p>\n\n<h2>Using Keyframes</h2>\n\n<p>The <a href=\"#!/api/Ext.fx.Animator-cfg-keyframes\" rel=\"Ext.fx.Animator-cfg-keyframes\" class=\"docClass\">keyframes</a> option is the most important part of specifying an animation when using this\nclass. A key frame is a point in a particular animation. We represent this as a percentage of the\ntotal animation duration. At each key frame, we can specify the target values at that time. Note that\nyou <em>must</em> specify the values at 0% and 100%, the start and ending values. There is also a <a href=\"#!/api/Ext.fx.Animator-event-keyframe\" rel=\"Ext.fx.Animator-event-keyframe\" class=\"docClass\">keyframe</a>\nevent that fires after each key frame is reached.</p>\n\n<h2>Example</h2>\n\n<p>In the example below, we modify the values of the element at each fifth throughout the animation.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.fx.Animator\" rel=\"Ext.fx.Animator\" class=\"docClass\">Ext.fx.Animator</a>', {\n    target: Ext.getBody().createChild({\n        style: {\n            width: '100px',\n            height: '100px',\n            'background-color': 'red'\n        }\n    }),\n    duration: 10000, // 10 seconds\n    keyframes: {\n        0: {\n            opacity: 1,\n            backgroundColor: 'FF0000'\n        },\n        20: {\n            x: 30,\n            opacity: 0.5\n        },\n        40: {\n            x: 130,\n            backgroundColor: '0000FF'\n        },\n        60: {\n            y: 80,\n            opacity: 0.3\n        },\n        80: {\n            width: 200,\n            y: 200\n        },\n        100: {\n            opacity: 1,\n            backgroundColor: '00FF00'\n        }\n    }\n});\n</code></pre>\n"},"CubicBezier":{"!doc":"\n"},"DrawPath":{"!doc":"<p>Provides SVG Paths handling functions. Copied from Ext.draw.Draw in ExtJs 4.2 in order\nto break the dependencies on parsePathString() and interpolatePaths() in PropertyHandler.js</p>\n"},"Easing":{"!doc":"<p>This class contains a series of function definitions used to modify values during an animation.\nThey describe how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration. The following options are available:</p>\n\n<ul>\n<li>linear The default easing type</li>\n<li>backIn</li>\n<li>backOut</li>\n<li>bounceIn</li>\n<li>bounceOut</li>\n<li>ease</li>\n<li>easeIn</li>\n<li>easeOut</li>\n<li>easeInOut</li>\n<li>elasticIn</li>\n<li>elasticOut</li>\n<li>cubic-bezier(x1, y1, x2, y2)</li>\n</ul>\n\n\n<p>Note that cubic-bezier will create a custom easing curve following the CSS3 <a href=\"http://www.w3.org/TR/css3-transitions/#transition-timing-function_tag\">transition-timing-function</a>\nspecification.  The four values specify points P1 and P2 of the curve as (x1, y1, x2, y2). All values must\nbe in the range [0, 1] or the definition is invalid.</p>\n"},"Manager":{"!doc":"<p>Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.</p>\n"},"Queue":{"!doc":"<p>Animation Queue mixin to handle chaining and queueing by target.</p>\n"},"PropertyHandler":{"!doc":"\n"},"target":{"Component":{"!doc":"<p>This class represents a animation target for a <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a>. In general this class will not be\ncreated directly, the <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Target":{"!doc":"<p>This class specifies a generic target for an animation. It provides a wrapper around a\nseries of different types of objects to allow for a generic animation API.\nA target can be a single object or a Composite object containing other objects that are\nto be animated. This class and it's subclasses are generally not created directly, the\nunderlying animation will create the appropriate <a href=\"#!/api/Ext.fx.target.Target\" rel=\"Ext.fx.target.Target\" class=\"docClass\">Ext.fx.target.Target</a> object by passing\nthe instance to be animated.</p>\n\n<p>The following types of objects can be animated:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.fx.target.Component\" rel=\"Ext.fx.target.Component\" class=\"docClass\">Components</a></li>\n<li><a href=\"#!/api/Ext.fx.target.Element\" rel=\"Ext.fx.target.Element\" class=\"docClass\">Elements</a></li>\n<li><a href=\"#!/api/Ext.fx.target.Sprite\" rel=\"Ext.fx.target.Sprite\" class=\"docClass\">Sprites</a></li>\n</ul>\n\n"},"CompositeElement":{"!doc":"<p>This class represents a animation target for a Ext.CompositeElement. It allows\neach Ext.dom.Element in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.CompositeElement will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Element":{"!doc":"<p>This class represents a animation target for an Ext.dom.Element. In general this class will not be\ncreated directly, the Ext.dom.Element will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"CompositeElementCSS":{"!doc":"<p>This class represents a animation target for a Ext.CompositeElement, where the\nconstituent elements support CSS based animation. It allows each Ext.dom.Element in\nthe group to be animated as a whole. In general this class will not be created directly,\nthe Ext.CompositeElement will be passed to the animation and the appropriate target\nwill be created.</p>\n"},"CompositeSprite":{"!doc":"<p>This class represents a animation target for a Ext.draw.sprite.Composite. It allows\neach Ext.draw.sprite.Sprite in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.draw.sprite.Composite will be passed to the animation and\nand the appropriate target will be created.</p>\n"},"Sprite":{"!doc":"<p>This class represents an animation target for a Ext.draw.sprite.Sprite. In general this class will not be\n created directly, the Ext.draw.sprite.Sprite will be passed to the animation and\n and the appropriate target will be created.</p>\n"},"ElementCSS":{"!doc":"<p>This class represents a animation target for an Ext.dom.Element that supports CSS\nbased animation. In general this class will not be created directly, the Ext.dom.Element\nwill be passed to the animation and the appropriate target will be created.</p>\n"}}},"grid":{"CellContext":{"!doc":"<p>Internal utility class that provides a unique cell context.</p>\n"},"CellEditor":{"!doc":"<p>Internal utility class that provides default configuration for cell editing.</p>\n"},"column":{"Action":{"!doc":"<p>A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click\nhandler for each icon.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\"},\n        {firstname:\"Jim\", lastname:\"Halpert\"},\n        {firstname:\"Kevin\", lastname:\"Malone\"},\n        {firstname:\"Angela\", lastname:\"Martin\"}\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Action Column Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {\n            xtype:'actioncolumn',\n            width:50,\n            items: [{\n                icon: 'extjs/examples/shared/icons/fam/cog_edit.png',  // Use a URL in the icon config\n                tooltip: 'Edit',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Edit \" + rec.get('firstname'));\n                }\n            },{\n                icon: 'extjs/examples/restful/images/delete.png',\n                tooltip: 'Delete',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    alert(\"Terminate \" + rec.get('firstname'));\n                }\n            }]\n        }\n    ],\n    width: 250,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>The action column can be at any index in the columns array, and a grid can have any number of\naction columns.</p>\n"},"Column":{"!doc":"<p>This class specifies the definition for a column inside a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>. It encompasses\nboth the grid header configuration as well as displaying data within the grid itself. If the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-columns\" rel=\"Ext.grid.column.Column-cfg-columns\" class=\"docClass\">columns</a> configuration is specified, this column will become a column group and can\ncontain other columns inside. In general, this class will not be created directly, rather\nan array of column configurations will be passed to the grid:</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],\n    data:[\n        {firstname:\"Michael\", lastname:\"Scott\", seniority:7, dep:\"Management\", hired:\"01/10/2004\"},\n        {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, dep:\"Sales\", hired:\"04/01/2004\"},\n        {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, dep:\"Sales\", hired:\"02/22/2006\"},\n        {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, dep:\"Accounting\", hired:\"06/10/2007\"},\n        {firstname:\"Angela\", lastname:\"Martin\", seniority:5, dep:\"Accounting\", hired:\"10/21/2008\"}\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Column Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired', xtype:'datecolumn', format:'M'},\n        {text: 'Department (Yrs)', xtype:'templatecolumn', tpl:'{dep} ({seniority})'}\n    ],\n    width: 400,\n    forceFit: true,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<h1>Convenience Subclasses</h1>\n\n<p>There are several column subclasses that provide default rendering for various data types</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Action\" rel=\"Ext.grid.column.Action\" class=\"docClass\">Ext.grid.column.Action</a>: Renders icons that can respond to click events inline</li>\n<li><a href=\"#!/api/Ext.grid.column.Boolean\" rel=\"Ext.grid.column.Boolean\" class=\"docClass\">Ext.grid.column.Boolean</a>: Renders for boolean values</li>\n<li><a href=\"#!/api/Ext.grid.column.Date\" rel=\"Ext.grid.column.Date\" class=\"docClass\">Ext.grid.column.Date</a>: Renders for date values</li>\n<li><a href=\"#!/api/Ext.grid.column.Number\" rel=\"Ext.grid.column.Number\" class=\"docClass\">Ext.grid.column.Number</a>: Renders for numeric values</li>\n<li><a href=\"#!/api/Ext.grid.column.Template\" rel=\"Ext.grid.column.Template\" class=\"docClass\">Ext.grid.column.Template</a>: Renders a value using an Ext.XTemplate using the record data</li>\n</ul>\n\n\n<h1>Setting Sizes</h1>\n\n<p>The columns are laid out by a <a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">Ext.layout.container.HBox</a> layout, so a column can either\nbe given an explicit width value or a flex configuration. If no width is specified the grid will\nautomatically the size the column to 100px. For column groups, the size is calculated by measuring\nthe width of the child columns, so a width option should not be specified in that case.</p>\n\n<h1>Header Options</h1>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-text\" rel=\"Ext.grid.column.Column-cfg-text\" class=\"docClass\">text</a>: Sets the header text for the column</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-sortable\" rel=\"Ext.grid.column.Column-cfg-sortable\" class=\"docClass\">sortable</a>: Specifies whether the column can be sorted by clicking the header or using the column menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-hideable\" rel=\"Ext.grid.column.Column-cfg-hideable\" class=\"docClass\">hideable</a>: Specifies whether the column can be hidden using the column menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-menuDisabled\" rel=\"Ext.grid.column.Column-cfg-menuDisabled\" class=\"docClass\">menuDisabled</a>: Disables the column header menu</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-draggable\" rel=\"Ext.grid.column.Column-cfg-draggable\" class=\"docClass\">draggable</a>: Specifies whether the column header can be reordered by dragging</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-groupable\" rel=\"Ext.grid.column.Column-cfg-groupable\" class=\"docClass\">groupable</a>: Specifies whether the grid can be grouped by the column dataIndex. See also <a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a></li>\n</ul>\n\n\n<h1>Data Options</h1>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-dataIndex\" rel=\"Ext.grid.column.Column-cfg-dataIndex\" class=\"docClass\">dataIndex</a>: The dataIndex is the field in the underlying Ext.data.Store to use as the value for the column.</li>\n<li><a href=\"#!/api/Ext.grid.column.Column-cfg-renderer\" rel=\"Ext.grid.column.Column-cfg-renderer\" class=\"docClass\">renderer</a>: Allows the underlying store value to be transformed before being displayed in the grid</li>\n</ul>\n\n"},"Boolean":{"!doc":"<p>A Column definition class which renders boolean data fields.  See the <a href=\"#!/api/Ext.grid.column.Column-cfg-xtype\" rel=\"Ext.grid.column.Column-cfg-xtype\" class=\"docClass\">xtype</a>\nconfig option of <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">Ext.grid.column.Column</a> for more details.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       {name: 'framework', type: 'string'},\n       {name: 'rocks', type: 'boolean'}\n   ],\n   data:{'items':[\n       { 'framework': \"Ext JS 4\",     'rocks': true  },\n       { 'framework': \"Sencha Touch\", 'rocks': true  },\n       { 'framework': \"Ext GWT\",      'rocks': true  },\n       { 'framework': \"Other Guys\",   'rocks': false }\n   ]},\n   proxy: {\n       type: 'memory',\n       reader: {\n           type: 'json',\n           rootProperty: 'items'\n       }\n   }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Boolean Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Framework',  dataIndex: 'framework', flex: 1 },\n        {\n            xtype: 'booleancolumn',\n            text: 'Rocks',\n            trueText: 'Yes',\n            falseText: 'No',\n            dataIndex: 'rocks'\n        }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Check":{"!doc":"<p>A Column subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data field on click.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.Store', {\n    fields : ['name', 'email', 'phone', 'active'],\n    data   : {\n        items : [\n            { name : 'Lisa',  email : 'lisa@simpsons.com',  phone : '555-111-1224', active : true  },\n            { name : 'Bart',  email : 'bart@simpsons.com',  phone : '555-222-1234', active : true  },\n            { name : 'Homer', email : 'homer@simpsons.com',  phone : '555-222-1244', active : false },\n            { name : 'Marge', email : 'marge@simpsons.com', phone : '555-222-1254', active : true  }\n        ]\n    },\n    proxy  : {\n        type   : 'memory',\n        reader : {\n            type : 'json',\n            root : 'items'\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title    : 'Simpsons',\n    height   : 200,\n    width    : 400,\n    renderTo : Ext.getBody(),\n    store    : store,\n    columns  : [\n        { text : 'Name', dataIndex : 'name' },\n        { text : 'Email', dataIndex : 'email', flex : 1 },\n        { text : 'Phone', dataIndex : 'phone' },\n        { xtype : 'checkcolumn', text : 'Active', dataIndex : 'active' }\n    ]\n});\n</code></pre>\n\n<p>The check column can be at any index in the columns array.</p>\n"},"Date":{"!doc":"<p>A Column definition class which renders a passed date according to the default locale, or a configured\n<a href=\"#!/api/Ext.grid.column.Date-cfg-format\" rel=\"Ext.grid.column.Date-cfg-format\" class=\"docClass\">format</a>.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'sampleStore',\n    fields:[\n        { name: 'symbol', type: 'string' },\n        { name: 'date',   type: 'date' },\n        { name: 'change', type: 'number' },\n        { name: 'volume', type: 'number' },\n        { name: 'topday', type: 'date' }\n    ],\n    data:[\n        { symbol: \"msft\",   date: '2011/04/22', change: 2.43, volume: 61606325, topday: '04/01/2010' },\n        { symbol: \"goog\",   date: '2011/04/22', change: 0.81, volume: 3053782,  topday: '04/11/2010' },\n        { symbol: \"apple\",  date: '2011/04/22', change: 1.35, volume: 24484858, topday: '04/28/2010' },\n        { symbol: \"sencha\", date: '2011/04/22', change: 8.85, volume: 5556351,  topday: '04/22/2010' }\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Date Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol',   dataIndex: 'symbol', flex: 1 },\n        { text: 'Date',     dataIndex: 'date',   xtype: 'datecolumn',   format:'Y-m-d' },\n        { text: 'Change',   dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',   dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' },\n        { text: 'Top Day',  dataIndex: 'topday', xtype: 'datecolumn',   format:'l' }\n    ],\n    height: 200,\n    width: 450,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Number":{"!doc":"<p>A Column definition class which renders a numeric data field according to a <a href=\"#!/api/Ext.grid.column.Number-cfg-format\" rel=\"Ext.grid.column.Number-cfg-format\" class=\"docClass\">format</a> string.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       { name: 'symbol', type: 'string' },\n       { name: 'price',  type: 'number' },\n       { name: 'change', type: 'number' },\n       { name: 'volume', type: 'number' }\n   ],\n   data:[\n       { symbol: \"msft\",   price: 25.76,  change: 2.43, volume: 61606325 },\n       { symbol: \"goog\",   price: 525.73, change: 0.81, volume: 3053782  },\n       { symbol: \"apple\",  price: 342.41, change: 1.35, volume: 24484858 },\n       { symbol: \"sencha\", price: 142.08, change: 8.85, volume: 5556351  }\n   ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Number Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol',         dataIndex: 'symbol', flex: 1 },\n        { text: 'Current Price',  dataIndex: 'price',  renderer: Ext.util.Format.usMoney },\n        { text: 'Change',         dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume',         dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"RowNumberer":{"!doc":"<p>A special type of Grid <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">Ext.grid.column.Column</a> that provides automatic\nrow numbering.</p>\n\n<p>Usage:</p>\n\n<pre><code>columns: [\n    {xtype: 'rownumberer'},\n    {text: \"Company\", flex: 1, sortable: true, dataIndex: 'company'},\n    {text: \"Price\", width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},\n    {text: \"Change\", width: 120, sortable: true, dataIndex: 'change'},\n    {text: \"% Change\", width: 120, sortable: true, dataIndex: 'pctChange'},\n    {text: \"Last Updated\", width: 120, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}\n]\n</code></pre>\n"},"Template":{"!doc":"<p>A Column definition class which renders a value by processing a Model's\ndata using a <a href=\"#!/api/Ext.grid.column.Template-cfg-tpl\" rel=\"Ext.grid.column.Template-cfg-tpl\" class=\"docClass\">configured</a>\nXTemplate.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['firstname', 'lastname', 'seniority', 'department'],\n    groupField: 'department',\n    data:[\n        { firstname: \"Michael\", lastname: \"Scott\",   seniority: 7, department: \"Management\" },\n        { firstname: \"Dwight\",  lastname: \"Schrute\", seniority: 2, department: \"Sales\" },\n        { firstname: \"Jim\",     lastname: \"Halpert\", seniority: 3, department: \"Sales\" },\n        { firstname: \"Kevin\",   lastname: \"Malone\",  seniority: 4, department: \"Accounting\" },\n        { firstname: \"Angela\",  lastname: \"Martin\",  seniority: 5, department: \"Accounting\" }\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Column Template Demo',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        { text: 'Full Name',       xtype: 'templatecolumn', tpl: '{firstname} {lastname}', flex:1 },\n        { text: 'Department (Yrs)', xtype: 'templatecolumn', tpl: '{department} ({seniority})' }\n    ],\n    height: 200,\n    width: 300,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Widget":{"!doc":"<p>A widget column is configured with a <a href=\"#!/api/Ext.grid.column.Widget-cfg-widget\" rel=\"Ext.grid.column.Widget-cfg-widget\" class=\"docClass\">widget</a> config object which specifies an\n<a href=\"#!/api/Ext.Component-cfg-xtype\" rel=\"Ext.Component-cfg-xtype\" class=\"docClass\">xtype</a> to indicate which type of Widget or Component belongs\nin the cells of this column.</p>\n\n<p>When a widget cell is rendered, a Widget or <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> of the specified type\nis rendered into that cell. Its <a href=\"#!/api/Ext.Component-property-defaultBindProperty\" rel=\"Ext.Component-property-defaultBindProperty\" class=\"docClass\">defaultBindProperty</a> is set using this\ncolumn's <a href=\"#!/api/Ext.grid.column.Widget-cfg-dataIndex\" rel=\"Ext.grid.column.Widget-cfg-dataIndex\" class=\"docClass\">dataIndex</a> field from the associated record.</p>\n\n<p>In the example below we are monitoring the throughput of electricity substations. The capacity being\nused as a proportion of the maximum rated capacity is displayed as a progress bar. As new data arrives and the\ninstananeous usage value is updated, the <code>capacityUsed</code> field updates itself, and that is used as the <a href=\"#!/api/Ext.grid.column.Widget-cfg-dataIndex\" rel=\"Ext.grid.column.Widget-cfg-dataIndex\" class=\"docClass\">dataIndex</a>\nfor the <code>WidgetColumn</code> which contains the progress bar. The progess Bar's\n<a href=\"#!/api/Ext.ProgressBarWidget-property-defaultBindProperty\" rel=\"Ext.ProgressBarWidget-property-defaultBindProperty\" class=\"docClass\">defaultBindProperty</a> (which is \"value\") is set to the calculated <code>capacityUsed</code>.</p>\n\n<pre class='inline-example '><code>var grid = new <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>({\n    title: 'Substation power monitor',\n    width: 600,\n    columns: [{\n        text: 'Id',\n        dataIndex: 'id',\n        width: 120\n    }, {\n        text: 'Rating',\n        dataIndex: 'maxCapacity',\n        width: 80\n    }, {\n        text: 'Avg.',\n        dataIndex: 'avg',\n        width: 85,\n        formatter: 'number(\"0.00\")'\n    }, {\n        text: 'Max',\n        dataIndex: 'max',\n        width: 80\n    }, {\n        text: 'Instant',\n        dataIndex: 'instant',\n        width: 80\n    }, {\n        text: '%Capacity',\n        width: 150,\n\n        // This is our Widget column\n        xtype: 'widgetcolumn',\n        dataIndex: 'capacityUsed',\n\n        // This is the widget definition for each cell.\n        // Its \"value\" setting is taken from the column's dataIndex\n        widget: {\n        xtype: 'progressbarwidget',\n            textTpl: [\n                '{percent:number(\"0\")}% capacity'\n            ]\n        }\n    }],\n    renderTo: document.body,\n    disableSelection: true,\n    store: {\n       fields: [{\n           name: 'id',\n           type: 'string'\n       }, {\n           name: 'maxCapacity',\n           type: 'int'\n       }, {\n           name: 'avg',\n           type: 'int',\n           calculate: function(data) {\n               // Make this depend upon the instant field being set which sets the sampleCount and total.\n               // Use subscript format to access the other psuedo fields which are set by the instant field's converter\n               return data.instant &amp;&amp; data['total'] / data['sampleCount'];\n           }\n       }, {\n           name: 'max',\n           type: 'int',\n           calculate: function(data) {\n               // This will be seen to depend on the \"instant\" field.\n               // Use subscript format to access this field's current value to avoid circular dependency error.\n               return (data['max'] || 0) &lt; data.instant ? data.instant : data['max'];\n           }\n       }, {\n           name: 'instant',\n           type: 'int',\n\n           // Upon every update of instananeous power throughput,\n           // update the sample count and total so that the max field can calculate itself\n           convert: function(value, rec) {\n               rec.data.sampleCount = (rec.data.sampleCount || 0) + 1;\n               rec.data.total = (rec.data.total || 0) + value;\n               return value;\n           },\n          depends: []\n       }, {\n           name: 'capacityUsed',\n           calculate: function(data) {\n               return data.instant / data.maxCapacity;\n           }\n       }],\n       data: [{\n           id: 'Substation A',\n           maxCapacity: 1000,\n           avg: 770,\n           max: 950,\n           instant: 685\n       }, {\n           id: 'Substation B',\n           maxCapacity: 1000,\n           avg: 819,\n           max: 992,\n           instant: 749\n       }, {\n           id: 'Substation C',\n           maxCapacity: 1000,\n           avg: 588,\n             max: 936,\n           instant: 833\n       }, {\n           id: 'Substation D',\n           maxCapacity: 1000,\n           avg: 639,\n           max: 917,\n           instant: 825\n       }]\n   }\n});\n\n// Fake data updating...\n// Change one record per second to a random power value\nsetInterval(function() {\n    var recIdx = Ext.Number.randomInt(0, 3),\n        newPowerReading = Ext.Number.randomInt(500, 1000);\n\n    grid.store.getAt(recIdx).set('instant', newPowerReading);\n}, 1000);\n</code></pre>\n"}},"header":{"Container":{"!doc":"<p>Container which holds headers and is docked at the top or bottom of a TablePanel.\nThe HeaderContainer drives resizing/moving/hiding of columns within the TableView.\nAs headers are hidden, moved or resized the headercontainer is responsible for\ntriggering changes within the view.</p>\n"},"DragZone":{"!doc":"\n"},"DropZone":{"!doc":"\n"}},"ColumnComponentLayout":{"!doc":"<p>Component layout for grid column headers which have a title element at the top followed by content.</p>\n"},"ColumnLayout":{"!doc":"<p>This class is used only by the grid's HeaderContainer docked child.</p>\n\n<p>It adds the ability to shrink the vertical size of the inner container element back if a grouped\ncolumn header has all its child columns dragged out, and the whole HeaderContainer needs to shrink back down.</p>\n\n<p>Also, after every layout, after all headers have attained their 'stretchmax' height, it goes through and calls\n<code>setPadding</code> on the columns so that they lay out correctly.</p>\n"},"ColumnManager":{"!doc":"<p>Manages and provides information about a TablePanel's <em>visible leaf</em> columns.</p>\n"},"feature":{"AbstractSummary":{"!doc":"<p>A small abstract class that contains the shared behaviour for any summary\ncalculations to be used in the grid.</p>\n"},"Feature":{"!doc":"<p>A feature is a type of plugin that is specific to the <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>. It provides several\nhooks that allows the developer to inject additional functionality at certain points throughout the\ngrid creation cycle. This class provides the base template methods that are available to the developer,\nit should be extended.</p>\n\n<p>There are several built in features that extend this class, for example:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a> - Shows grid rows in groups as specified by the Ext.data.Store</li>\n<li><a href=\"#!/api/Ext.grid.feature.RowBody\" rel=\"Ext.grid.feature.RowBody\" class=\"docClass\">Ext.grid.feature.RowBody</a> - Adds a body section for each grid row that can contain markup.</li>\n<li><a href=\"#!/api/Ext.grid.feature.Summary\" rel=\"Ext.grid.feature.Summary\" class=\"docClass\">Ext.grid.feature.Summary</a> - Adds a summary row at the bottom of the grid with aggregate totals for a column.</li>\n</ul>\n\n\n<h2>Using Features</h2>\n\n<p>A feature is added to the grid by specifying it an array of features in the configuration:</p>\n\n<pre><code>var groupingFeature = Ext.create('<a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a>');\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    features: [groupingFeature]\n});\n</code></pre>\n\n<h2>Writing Features</h2>\n\n<p>A Feature may add new DOM structure within the structure of a grid.</p>\n\n<p>A grid is essentially a <code>&lt;table&gt;</code> element. A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> instance uses four XTemplates\nto render the grid, <code>tpl</code>, <code>itemTpl</code>, <code>rowTpl</code>, <code>cellTpl</code>.</p>\n\n<p>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>tpl</code> to emit the item encapsulating HTML tags into its output stream.\nTo render the rows, it invokes <a href=\"#!/api/Ext.view.Table-method-renderRows\" rel=\"Ext.view.Table-method-renderRows\" class=\"docClass\">Ext.view.Table.renderRows</a> passing the <code>rows</code> member of its data object and the <code>columns</code> member of its data object.</p>\n\n<p>The <code>tpl</code>'s data object Looks like this:\n    {\n        view: owningTableView,\n        rows: recordsToRender,\n        viewStartIndex: indexOfFirstRecordInStore,\n        tableStyle: styleString\n    }</p>\n\n<ul>\n<li>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>rowTpl</code> to emit a <code>&lt;tr&gt;</code> HTML tag to its output stream. To render cells,\nit invokes <a href=\"#!/api/Ext.view.Table-method-renderCell\" rel=\"Ext.view.Table-method-renderCell\" class=\"docClass\">Ext.view.Table.renderCell</a> passing the <code>rows</code> member of its data object.</li>\n</ul>\n\n\n<p>The <code>itemTpl</code> and <code>rowTpl</code>'s data object looks like this:</p>\n\n<pre><code>{\n    view:        owningTableView,\n    record:      recordToRender,\n    recordIndex: indexOfRecordInStore,\n    rowIndex:    indexOfRowInView,\n    columns:     arrayOfColumnDefinitions,\n    itemClasses: arrayOfClassNames, // For outermost row in case of wrapping\n    rowClasses:  arrayOfClassNames,  // For internal data bearing row in case of wrapping\n    rowStyle:    styleString\n}\n</code></pre>\n\n<ul>\n<li>A <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> uses its <code>cellTpl</code> to emit a <code>&lt;td&gt;</code> HTML tag to its output stream.</li>\n</ul>\n\n\n<p>The <code>cellTpl's</code> data object looks like this:</p>\n\n<pre><code>{\n    record: recordToRender\n    column: columnToRender;\n    recordIndex: indexOfRecordInStore,\n    rowIndex:    indexOfRowInView,\n    columnIndex: columnIndex,\n    align: columnAlign,\n    tdCls: classForCell\n}\n</code></pre>\n\n<p>A Feature may inject its own tpl or rowTpl or cellTpl into the <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a>'s rendering by\ncalling <a href=\"#!/api/Ext.view.Table-method-addTpl\" rel=\"Ext.view.Table-method-addTpl\" class=\"docClass\">Ext.view.Table.addTpl</a> or <a href=\"#!/api/Ext.view.Table-method-addRowTpl\" rel=\"Ext.view.Table-method-addRowTpl\" class=\"docClass\">Ext.view.Table.addRowTpl</a> or <a href=\"#!/api/Ext.view.Table-method-addCellTpl\" rel=\"Ext.view.Table-method-addCellTpl\" class=\"docClass\">Ext.view.Table.addCellTpl</a>.</p>\n\n<p>The passed XTemplate is added <em>upstream</em> of the default template for the table element in a link list of XTemplates which contribute\nto the element's HTML. It may emit appropriate HTML strings into the output stream <em>around</em> a call to</p>\n\n<pre><code>this.nextTpl.apply(values, out, parent);\n</code></pre>\n\n<p>This passes the current value context, output stream and the parent value context to the next XTemplate in the list.</p>\n"},"Grouping":{"!doc":"<p>This feature allows to display the grid rows aggregated into groups as specified by the grouper\nspecified on the Store. The group will show the title for the group name and then the appropriate records for the group\nunderneath. The groups can also be expanded and collapsed.</p>\n\n<h2>Extra Events</h2>\n\n<p>This feature adds several extra events that will be fired on the grid to interact with the groups:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupclick\" rel=\"Ext.grid.feature.Grouping-event-groupclick\" class=\"docClass\">groupclick</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupdblclick\" rel=\"Ext.grid.feature.Grouping-event-groupdblclick\" class=\"docClass\">groupdblclick</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupcontextmenu\" rel=\"Ext.grid.feature.Grouping-event-groupcontextmenu\" class=\"docClass\">groupcontextmenu</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupexpand\" rel=\"Ext.grid.feature.Grouping-event-groupexpand\" class=\"docClass\">groupexpand</a></li>\n<li><a href=\"#!/api/Ext.grid.feature.Grouping-event-groupcollapse\" rel=\"Ext.grid.feature.Grouping-event-groupcollapse\" class=\"docClass\">groupcollapse</a></li>\n</ul>\n\n\n<h2>Menu Augmentation</h2>\n\n<p>This feature adds extra options to the grid column menu to provide the user with functionality to modify the grouping.\nThis can be disabled by setting the <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-enableGroupingMenu\" rel=\"Ext.grid.feature.Grouping-cfg-enableGroupingMenu\" class=\"docClass\">enableGroupingMenu</a> option. The option to disallow grouping from being turned off\nby the user is <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-enableNoGroups\" rel=\"Ext.grid.feature.Grouping-cfg-enableNoGroups\" class=\"docClass\">enableNoGroups</a>.</p>\n\n<h2>Controlling Group Text</h2>\n\n<p>The <a href=\"#!/api/Ext.grid.feature.Grouping-cfg-groupHeaderTpl\" rel=\"Ext.grid.feature.Grouping-cfg-groupHeaderTpl\" class=\"docClass\">groupHeaderTpl</a> is used to control the rendered title for each group. It can modified to customized\nthe default display.</p>\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.Store', {\n    storeId:'employeeStore',\n    fields:['name', 'seniority', 'department'],\n    groupField: 'department',\n    data: {'employees':[\n        { \"name\": \"Michael Scott\",  \"seniority\": 7, \"department\": \"Management\" },\n        { \"name\": \"Dwight Schrute\", \"seniority\": 2, \"department\": \"Sales\" },\n        { \"name\": \"Jim Halpert\",    \"seniority\": 3, \"department\": \"Sales\" },\n        { \"name\": \"Kevin Malone\",   \"seniority\": 4, \"department\": \"Accounting\" },\n        { \"name\": \"Angela Martin\",  \"seniority\": 5, \"department\": \"Accounting\" }\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            rootProperty: 'employees'\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Employees',\n    store: Ext.data.StoreManager.lookup('employeeStore'),\n    columns: [\n        { text: 'Name',     dataIndex: 'name' },\n        { text: 'Seniority', dataIndex: 'seniority' }\n    ],\n    features: [{ftype:'grouping'}],\n    width: 200,\n    height: 275,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p><strong>Note:</strong> To use grouping with a grid that has <a href=\"#!/api/Ext.grid.column.Column-cfg-locked\" rel=\"Ext.grid.column.Column-cfg-locked\" class=\"docClass\">locked columns</a>, you need to supply\nthe grouping feature as a config object - so the grid can create two instances of the grouping feature.</p>\n"},"GroupingSummary":{"!doc":"<p>This feature adds an aggregate summary row at the bottom of each group that is provided\nby the <a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Ext.grid.feature.Grouping</a> feature. There are two aspects to the summary:</p>\n\n<h2>Calculation</h2>\n\n<p>The summary value needs to be calculated for each column in the grid. This is controlled\nby the summaryType option specified on the column. There are several built in summary types,\nwhich can be specified as a string on the column configuration. These call underlying methods\non the store:</p>\n\n<ul>\n<li>count</li>\n<li>sum</li>\n<li>min</li>\n<li>max</li>\n<li>average</li>\n</ul>\n\n\n<p>Alternatively, the summaryType can be a function definition. If this is the case,\nthe function is called with two parameters: an array of records, and an array of field values\nto calculate the summary value.</p>\n\n<h2>Rendering</h2>\n\n<p>Similar to a column, the summary also supports a summaryRenderer function. This\nsummaryRenderer is called before displaying a value. The function is optional, if\nnot specified the default calculated value is shown. The summaryRenderer is called with:</p>\n\n<ul>\n<li>value {Object} - The calculated value.</li>\n<li>summaryData {Object} - Contains all raw summary values for the row.</li>\n<li>field {String} - The name of the field we are calculating</li>\n</ul>\n\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code>Ext.define('TestResult', {\n    extend: 'Ext.data.Model',\n    fields: ['student', 'subject', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 200,\n    height: 240,\n    renderTo: document.body,\n    features: [{\n        groupHeaderTpl: 'Subject: {name}',\n        ftype: 'groupingsummary'\n    }],\n    store: {\n        model: 'TestResult',\n        groupField: 'subject',\n        data: [{\n            student: 'Student 1',\n            subject: 'Math',\n            mark: 84\n        },{\n            student: 'Student 1',\n            subject: 'Science',\n            mark: 72\n        },{\n            student: 'Student 2',\n            subject: 'Math',\n            mark: 96\n        },{\n            student: 'Student 2',\n            subject: 'Science',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value){\n            return Ext.String.format('{0} student{1}', value, value !== 1 ? 's' : '');\n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n</code></pre>\n"},"GroupStore":{"!doc":"<p>Private record store class which takes the place of the view's data store to provide a grouped\nview of the data when the Grouping feature is used.</p>\n\n<p>Relays granular mutation events from the underlying store as refresh events to the view.</p>\n\n<p>On mutation events from the underlying store, updates the summary rows by firing update events on the corresponding\nsummary records.</p>\n"},"RowBody":{"!doc":"<p>The rowbody feature enhances the grid's markup to have an additional\ntr -> td -> div which spans the entire width of the original row.</p>\n\n<p>This is useful to to associate additional information with a particular\nrecord in a grid.</p>\n\n<p>Rowbodies are initially hidden unless you override setupRowData.</p>\n\n<p>Will expose additional events on the gridview with the prefix of 'rowbody'.\nFor example: 'rowbodyclick', 'rowbodydblclick', 'rowbodycontextmenu'.</p>\n\n<h1>Example</h1>\n\n<pre class='inline-example '><code>Ext.define('Animal', {\n    extend: 'Ext.data.Model',\n    fields: ['name', 'latin', 'desc']\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 400,\n    height: 300,\n    renderTo: Ext.getBody(),\n    store: {\n        model: 'Animal',\n        data: [\n            {name: 'Tiger', latin: 'Panthera tigris',\n             desc: 'The largest cat species, weighing up to 306 kg (670 lb).'},\n            {name: 'Roman snail', latin: 'Helix pomatia',\n             desc: 'A species of large, edible, air-breathing land snail.'},\n            {name: 'Yellow-winged darter', latin: 'Sympetrum flaveolum',\n             desc: 'A dragonfly found in Europe and mid and Northern China.'},\n            {name: 'Superb Fairy-wren', latin: 'Malurus cyaneus',\n             desc: 'Common and familiar across south-eastern Australia.'}\n        ]\n    },\n    columns: [{\n        dataIndex: 'name',\n        text: 'Common name',\n        width: 125\n    }, {\n        dataIndex: 'latin',\n        text: 'Scientific name',\n        flex: 1\n    }],\n    features: [{\n        ftype: 'rowbody',\n        setupRowData: function(record, rowIndex, rowValues) {\n            var headerCt = this.view.headerCt,\n                colspan = headerCt.getColumnCount();\n\n            // Usually you would style the my-body-class in CSS file\n            Ext.apply(rowValues, {\n                rowBody: '&lt;div style=\"padding: 1em\"&gt;'+record.get(\"desc\")+'&lt;/div&gt;',\n                rowBodyCls: \"my-body-class\",\n                rowBodyColspan: colspan\n            });\n        }\n    }]\n});\n</code></pre>\n\n<p> # Cell Editing and Cell Selection Model</p>\n\n<p>Note that if <a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">cell editing</a> or the <a href=\"#!/api/Ext.selection.CellModel\" rel=\"Ext.selection.CellModel\" class=\"docClass\">cell selection model</a> are going\nto be used, then the RowWrap feature, or <a href=\"#!/api/Ext.grid.plugin.RowExpander\" rel=\"Ext.grid.plugin.RowExpander\" class=\"docClass\">RowExpander</a> plugin MUST\nbe used for intra-cell navigation to be correct.</p>\n"},"Summary":{"!doc":"<p>This feature is used to place a summary row at the bottom of the grid. If using a grouping,\nsee <a href=\"#!/api/Ext.grid.feature.GroupingSummary\" rel=\"Ext.grid.feature.GroupingSummary\" class=\"docClass\">Ext.grid.feature.GroupingSummary</a>. There are 2 aspects to calculating the summaries,\ncalculation and rendering.</p>\n\n<h2>Calculation</h2>\n\n<p>The summary value needs to be calculated for each column in the grid. This is controlled\nby the summaryType option specified on the column. There are several built in summary types,\nwhich can be specified as a string on the column configuration. These call underlying methods\non the store:</p>\n\n<ul>\n<li>count</li>\n<li>sum</li>\n<li>min</li>\n<li>max</li>\n<li>average</li>\n</ul>\n\n\n<p>Alternatively, the summaryType can be a function definition. If this is the case,\nthe function is called with an array of records to calculate the summary value.</p>\n\n<h2>Rendering</h2>\n\n<p>Similar to a column, the summary also supports a summaryRenderer function. This\nsummaryRenderer is called before displaying a value. The function is optional, if\nnot specified the default calculated value is shown. The summaryRenderer is called with:</p>\n\n<ul>\n<li>value {Object} - The calculated value.</li>\n<li>summaryData {Object} - Contains all raw summary values for the row.</li>\n<li>field {String} - The name of the field we are calculating</li>\n</ul>\n\n\n<h2>Example Usage</h2>\n\n<pre class='inline-example '><code>Ext.define('TestResult', {\n    extend: 'Ext.data.Model',\n    fields: ['student', {\n        name: 'mark',\n        type: 'int'\n    }]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    width: 400,\n    height: 200,\n    title: 'Summary Test',\n    style: 'padding: 20px',\n    renderTo: document.body,\n    features: [{\n        ftype: 'summary'\n    }],\n    store: {\n        model: 'TestResult',\n        data: [{\n            student: 'Student 1',\n            mark: 84\n        },{\n            student: 'Student 2',\n            mark: 72\n        },{\n            student: 'Student 3',\n            mark: 96\n        },{\n            student: 'Student 4',\n            mark: 68\n        }]\n    },\n    columns: [{\n        dataIndex: 'student',\n        text: 'Name',\n        summaryType: 'count',\n        summaryRenderer: function(value, summaryData, dataIndex) {\n            return Ext.String.format('{0} student{1}', value, value !== 1 ? 's' : '');\n        }\n    }, {\n        dataIndex: 'mark',\n        text: 'Mark',\n        summaryType: 'average'\n    }]\n});\n</code></pre>\n"}},"filters":{"filter":{"Base":{"!doc":"<p>Abstract base class for filter implementations.</p>\n"},"Boolean":{"!doc":"<p>Boolean filters use unique radio group IDs (so you can have more than one!)</p>\n"},"SingleFilter":{"!doc":"<p>This abstract base class is used by grid filters that have a single\nstore filter.</p>\n"},"Date":{"!doc":"<p>Filter by a configurable Ext.picker.DatePicker menu</p>\n\n<p>Example Usage:</p>\n\n<pre><code>var grid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    ...\n    columns: [{\n        // required configs\n        text: 'Date Added',\n        dataIndex: 'dateAdded',\n\n        filter: {\n            type: 'date',\n\n            // optional configs\n            dateFormat: 'm/d/Y',  // default\n            beforeText: 'Before', // default\n            afterText: 'After',   // default\n            onText: 'On',         // default\n            pickerOpts: {\n                // any DatePicker configs\n            },\n\n            active: true // default is false\n        }\n    }],\n    ...\n});\n</code></pre>\n"},"TriFilter":{"!doc":"<p>This abstract base class is used by grid filters that have a three\nstore filter.</p>\n"},"List":{"!doc":"<p>List filters are able to be preloaded/backed by an Ext.data.Store to load\ntheir options the first time they are shown.</p>\n\n<p>List filters are also able to create their own list of values from  all unique values of\nthe specified <a href=\"#!/api/Ext.grid.filters.filter.List-cfg-dataIndex\" rel=\"Ext.grid.filters.filter.List-cfg-dataIndex\" class=\"docClass\">dataIndex</a> field in the store at first time of filter invocation.</p>\n\n<p>Example Usage:</p>\n\n<pre><code>var filters = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    ...\n    columns: [{\n        text: 'Size',\n        dataIndex: 'size',\n\n        filter: {\n            type: 'list',\n            // options will be used as data to implicitly creates an ArrayStore\n            options: ['extra small', 'small', 'medium', 'large', 'extra large']\n        }\n    }],\n    ...\n});\n</code></pre>\n"},"Number":{"!doc":"<p>Filter type for <a href=\"#!/api/Ext.grid.column.Number\" rel=\"Ext.grid.column.Number\" class=\"docClass\">number columns</a>.</p>\n"},"String":{"!doc":"<p>Filter by a configurable <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a></p>\n\n<p>Example Usage:</p>\n\n<pre><code>var grid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    ...\n    columns: [{\n        text: 'Name',\n        dataIndex: 'name',\n\n        filter: {\n            // required configs\n            type: 'string',\n\n            // optional configs\n            value: 'foo',\n            active: true, // default is false\n            itemDefaults: {\n                // any <a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a> configs accepted\n            }\n        }\n    }],\n    ...\n});\n</code></pre>\n"}},"Filters":{"!doc":"<p>This class is a grid <a href=\"#!/api/Ext.plugin.Abstract\" rel=\"Ext.plugin.Abstract\" class=\"docClass\">plugin</a> that adds a simple and flexible\npresentation for store filters.</p>\n\n<p>Filters can be modified by the end-user using the grid's column header menu. Through\nthis menu users can configure, enable, and disable filters for each column.</p>\n\n<h1>Example Usage</h1>\n\n<pre><code>var grid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n     store: {\n         url: 'path/to/data'\n     },\n\n     plugins: 'gridfilters',\n\n     columns: [{\n         dataIndex: 'id',\n         text: 'Id',\n\n         filter: 'number'\n     }, {\n         dataIndex: 'name'\n         text: 'Name',\n\n         filter: {\n             type: 'string',\n             value: 'Ben'\n         }\n     }, {\n         ...\n     }]\n});\n\n// A filters property is added to the grid:\n\nvar plugin = grid.filters;\n</code></pre>\n\n<h1>Features</h1>\n\n<h2>Filtering implementations</h2>\n\n<p>Currently provided filter types are:</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.grid.filters.filter.Boolean\" rel=\"Ext.grid.filters.filter.Boolean\" class=\"docClass\">boolean</a></code></li>\n<li><code><a href=\"#!/api/Ext.grid.filters.filter.Date\" rel=\"Ext.grid.filters.filter.Date\" class=\"docClass\">date</a></code></li>\n<li><code><a href=\"#!/api/Ext.grid.filters.filter.List\" rel=\"Ext.grid.filters.filter.List\" class=\"docClass\">list</a></code></li>\n<li><code><a href=\"#!/api/Ext.grid.filters.filter.Number\" rel=\"Ext.grid.filters.filter.Number\" class=\"docClass\">number</a></code></li>\n<li><code><a href=\"#!/api/Ext.grid.filters.filter.String\" rel=\"Ext.grid.filters.filter.String\" class=\"docClass\">string</a></code></li>\n</ul>\n\n\n<h2>Graphical Indicators</h2>\n\n<p>Columns that are filtered have <a href=\"#!/api/Ext.grid.filters.Filters-property-filterCls\" rel=\"Ext.grid.filters.Filters-property-filterCls\" class=\"docClass\">CSS class</a> applied to their column\nheaders. This style can be managed using that CSS class or by setting these Sass\nvariables in your theme or application:</p>\n\n<pre><code> $grid-filters-column-filtered-font-style: italic !default;\n\n $grid-filters-column-filtered-font-weight: bold !default;\n</code></pre>\n\n<h2>Stateful</h2>\n\n<p>Filter information will be persisted across page loads by specifying a <code>stateId</code>\nin the Grid configuration. In actuality this state is saved by the <code>store</code>, but this\nplugin ensures that saved filters are properly identified and reclaimed on subsequent\nvisits to the page.</p>\n\n<h2>Grid Changes</h2>\n\n<ul>\n<li>A <code>filters</code> property is added to the Grid using this plugin.</li>\n</ul>\n\n\n<h1>Upgrading From Ext.ux.grid.FilterFeature</h1>\n\n<p>The biggest change for developers converting from the user extension is most likely the\nconversion to standard store filters. In the\nprocess, the \"like\" and \"in\" operators are now supported by <code>Ext.util.Filter</code>.\nThese filters and all other filters added to the store will be sent in the standard\nway (using the \"filters\" parameter by default).</p>\n\n<p>Since this plugin now uses actual store filters, the <code>onBeforeLoad</code> listener and all\nhelper methods that were used to clean and build the params have been removed. The store\nwill send the filters managed by this plugin along in its normal request.</p>\n"}},"locking":{"HeaderContainer":{"!doc":"<p>Private class which acts as a HeaderContainer for the Lockable which aggregates all columns\nfrom both sides of the Lockable. It is never rendered, it's just used to interrogate the\ncolumn collection.</p>\n"},"Lockable":{"!doc":"<p>Lockable is a private mixin which injects lockable behavior into any\nTablePanel subclass such as GridPanel or TreePanel. TablePanel will\nautomatically inject the <a href=\"#!/api/Ext.grid.locking.Lockable\" rel=\"Ext.grid.locking.Lockable\" class=\"docClass\">Ext.grid.locking.Lockable</a> mixin in when one of the\nthese conditions are met:</p>\n\n<ul>\n<li>The TablePanel has the lockable configuration set to true</li>\n<li>One of the columns in the TablePanel has locked set to true/false</li>\n</ul>\n\n\n<p>Each TablePanel subclass must register an alias. It should have an array\nof configurations to copy to the 2 separate tablepanels that will be generated\nto note what configurations should be copied. These are named normalCfgCopy and\nlockedCfgCopy respectively.</p>\n\n<p>Configurations which are specified in this class will be available on any grid or\ntree which is using the lockable functionality.</p>\n\n<p>By default the two grids, \"locked\" and \"normal\" will be arranged using an <a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">hbox</a>\nlayout. If the lockable grid is configured with <code><a href=\"#!/api/Ext.grid.locking.Lockable-cfg-split\" rel=\"Ext.grid.locking.Lockable-cfg-split\" class=\"docClass\">split:true</a></code>, a vertical splitter\nwill be placed between the two grids to resize them.</p>\n\n<p>It is possible to override the layout of the lockable grid, or example, you may wish to\nuse a border layout and have one of the grids collapsible.</p>\n"},"View":{"!doc":"<p>This class is used internally to provide a single interface when using\na locking grid. Internally, the locking grid creates two separate grids,\nso this class is used to map calls appropriately.</p>\n"}},"Panel":{"!doc":"<p>Grids are an excellent way of showing large amounts of tabular data on the client side. Essentially a supercharged\n<code>&lt;table&gt;</code>, GridPanel makes it easy to fetch, sort and filter large amounts of data.</p>\n\n<p>Grids are composed of two main pieces - a Store full of data and a set of columns to render.</p>\n\n<h2>Basic GridPanel</h2>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data:{'items':[\n        { 'name': 'Lisa',  \"email\":\"lisa@simpsons.com\",  \"phone\":\"555-111-1224\"  },\n        { 'name': 'Bart',  \"email\":\"bart@simpsons.com\",  \"phone\":\"555-222-1234\" },\n        { 'name': 'Homer', \"email\":\"homer@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n        { 'name': 'Marge', \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"  }\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            rootProperty: 'items'\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        { text: 'Name',  dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email', flex: 1 },\n        { text: 'Phone', dataIndex: 'phone' }\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>The code above produces a simple grid with three columns. We specified a Store which will load JSON data inline.\nIn most apps we would be placing the grid inside another container and wouldn't need to use the\n<a href=\"#!/api/Ext.grid.Panel-cfg-height\" rel=\"Ext.grid.Panel-cfg-height\" class=\"docClass\">height</a>, <a href=\"#!/api/Ext.grid.Panel-cfg-width\" rel=\"Ext.grid.Panel-cfg-width\" class=\"docClass\">width</a> and <a href=\"#!/api/Ext.grid.Panel-cfg-renderTo\" rel=\"Ext.grid.Panel-cfg-renderTo\" class=\"docClass\">renderTo</a> configurations but they are included here to make it easy to get\nup and running.</p>\n\n<p>The grid we created above will contain a header bar with a title ('Simpsons'), a row of column headers directly underneath\nand finally the grid rows under the headers.</p>\n\n<h2>Configuring columns</h2>\n\n<p>By default, each column is sortable and will toggle between ASC and DESC sorting when you click on its header. Each\ncolumn header is also reorderable by default, and each gains a drop-down menu with options to hide and show columns.\nIt's easy to configure each column - here we use the same example as above and just modify the columns config:</p>\n\n<pre><code>columns: [\n    {\n        text: 'Name',\n        dataIndex: 'name',\n        sortable: false,\n        hideable: false,\n        flex: 1\n    },\n    {\n        text: 'Email',\n        dataIndex: 'email',\n        hidden: true\n    },\n    {\n        text: 'Phone',\n        dataIndex: 'phone',\n        width: 100\n    }\n]\n</code></pre>\n\n<p>We turned off sorting and hiding on the 'Name' column so clicking its header now has no effect. We also made the Email\ncolumn hidden by default (it can be shown again by using the menu on any other column). We also set the Phone column to\na fixed with of 100px and flexed the Name column, which means it takes up all remaining width after the other columns\nhave been accounted for. See the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column docs</a> for more details.</p>\n\n<h2>Renderers</h2>\n\n<p>As well as customizing columns, it's easy to alter the rendering of individual cells using renderers. A renderer is\ntied to a particular column and is passed the value that would be rendered into each cell in that column. For example,\nwe could define a renderer function for the email column to turn each email address into a mailto link:</p>\n\n<pre><code>columns: [\n    {\n        text: 'Email',\n        dataIndex: 'email',\n        renderer: function(value) {\n            return Ext.String.format('&lt;a href=\"mailto:{0}\"&gt;{1}&lt;/a&gt;', value, value);\n        }\n    }\n]\n</code></pre>\n\n<p>See the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column docs</a> for more information on renderers.</p>\n\n<h2>Selection Models</h2>\n\n<p>Sometimes all you want is to render data onto the screen for viewing, but usually it's necessary to interact with or\nupdate that data. Grids use a concept called a Selection Model, which is simply a mechanism for selecting some part of\nthe data in the grid. The two main types of Selection Model are RowSelectionModel, where entire rows are selected, and\nCellSelectionModel, where individual cells are selected.</p>\n\n<p>Grids use a Row Selection Model by default, but this is easy to customise like so:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    selType: 'cellmodel',\n    store: ...\n});\n</code></pre>\n\n<p>Specifying the <code>cellmodel</code> changes a couple of things. Firstly, clicking on a cell now\nselects just that cell (using a <a href=\"#!/api/Ext.selection.RowModel\" rel=\"Ext.selection.RowModel\" class=\"docClass\">rowmodel</a> will select the entire row), and secondly the\nkeyboard navigation will walk from cell to cell instead of row to row. Cell-based selection models are usually used in\nconjunction with editing.</p>\n\n<h2>Sorting &amp; Filtering</h2>\n\n<p>Every grid is attached to a Store, which provides multi-sort and filtering capabilities. It's\neasy to set up a grid to be sorted from the start:</p>\n\n<pre><code>var myGrid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: {\n        fields: ['name', 'email', 'phone'],\n        sorters: ['name', 'phone']\n    },\n    columns: [\n        { text: 'Name',  dataIndex: 'name' },\n        { text: 'Email', dataIndex: 'email' }\n    ]\n});\n</code></pre>\n\n<p>Sorting at run time is easily accomplished by simply clicking each column header. If you need to perform sorting on\nmore than one field at run time it's easy to do so by adding new sorters to the store:</p>\n\n<pre><code>myGrid.store.sort([\n    { property: 'name',  direction: 'ASC' },\n    { property: 'email', direction: 'DESC' }\n]);\n</code></pre>\n\n<p>See Ext.data.Store for examples of filtering.</p>\n\n<h2>State saving</h2>\n\n<p>When configured <a href=\"#!/api/Ext.grid.Panel-cfg-stateful\" rel=\"Ext.grid.Panel-cfg-stateful\" class=\"docClass\">stateful</a>, grids save their column state (order and width) encapsulated within the default\nPanel state of changed width and height and collapsed/expanded state.</p>\n\n<p>Each <a href=\"#!/api/Ext.grid.Panel-cfg-columns\" rel=\"Ext.grid.Panel-cfg-columns\" class=\"docClass\">column</a> of the grid may be configured with a <a href=\"#!/api/Ext.grid.column.Column-cfg-stateId\" rel=\"Ext.grid.column.Column-cfg-stateId\" class=\"docClass\">stateId</a> which\nidentifies that column locally within the grid.</p>\n\n<h2>Plugins and Features</h2>\n\n<p>Grid supports addition of extra functionality through features and plugins:</p>\n\n<ul>\n<li><p><a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">CellEditing</a> - editing grid contents one cell at a time.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">RowEditing</a> - editing grid contents an entire row at a time.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">DragDrop</a> - drag-drop reordering of grid rows.</p></li>\n<li><p><a href=\"#!/api/Ext.toolbar.Paging\" rel=\"Ext.toolbar.Paging\" class=\"docClass\">Paging toolbar</a> - paging through large sets of data.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.plugin.BufferedRenderer\" rel=\"Ext.grid.plugin.BufferedRenderer\" class=\"docClass\">Infinite scrolling</a> - another way to handle large sets of data.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.column.RowNumberer\" rel=\"Ext.grid.column.RowNumberer\" class=\"docClass\">RowNumberer</a> - automatically numbered rows.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.Grouping\" rel=\"Ext.grid.feature.Grouping\" class=\"docClass\">Grouping</a> - grouping together rows having the same value in a particular field.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.Summary\" rel=\"Ext.grid.feature.Summary\" class=\"docClass\">Summary</a> - a summary row at the bottom of a grid.</p></li>\n<li><p><a href=\"#!/api/Ext.grid.feature.GroupingSummary\" rel=\"Ext.grid.feature.GroupingSummary\" class=\"docClass\">GroupingSummary</a> - a summary row at the bottom of each group.</p></li>\n</ul>\n\n"},"plugin":{"BufferedRenderer":{"!doc":"<p>Implements buffered rendering of a grid, allowing users to scroll\nthrough thousands of records without the performance penalties of\nrenderering all the records into the DOM at once.</p>\n\n<p>The number of rows rendered outside the visible area can be controlled by configuring the plugin.</p>\n\n<p>Users should not instantiate this class. It is instantiated automatically\nand applied to all grids.</p>\n\n<h2>Implementation notes</h2>\n\n<p>This class monitors scrolling of the <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">TableView</a> within a <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">GridPanel</a> to render a small section of\nthe dataset.</p>\n"},"CellEditing":{"!doc":"<p>The <a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a> plugin injects editing at a cell level for a Grid. Only a single\ncell will be editable at a time. The field that will be used for the editor is defined at the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>. The editor can be a field instance or a field configuration.</p>\n\n<p>If an editor is not specified for a particular column then that cell will not be editable and it will\nbe skipped when activated via the mouse or the keyboard.</p>\n\n<p>The editor may be shared for each column in the grid, or a different one may be specified for each column.\nAn appropriate field type should be chosen to match the data structure that it will be editing. For example,\nto edit a date, it would be useful to specify <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> as the editor.</p>\n\n<h2>Example</h2>\n\n<p>A grid with editor for the name and the email columns:</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data:{'items':[\n        {\"name\":\"Lisa\", \"email\":\"lisa@simpsons.com\", \"phone\":\"555-111-1224\"},\n        {\"name\":\"Bart\", \"email\":\"bart@simpsons.com\", \"phone\":\"555-222-1234\"},\n        {\"name\":\"Homer\", \"email\":\"homer@simpsons.com\", \"phone\":\"555-222-1244\"},\n        {\"name\":\"Marge\", \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"}\n    ]},\n    proxy: {\n        type: 'memory',\n        reader: {\n            type: 'json',\n            rootProperty: 'items'\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        {header: 'Name',  dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                xtype: 'textfield',\n                allowBlank: false\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selType: 'cellmodel',\n    plugins: [\n        Ext.create('<a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a>', {\n            clicksToEdit: 1\n        })\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>This requires a little explanation. We're passing in <code>store</code> and <code>columns</code> as normal, but\nwe also specify a <a href=\"#!/api/Ext.grid.column.Column-cfg-field\" rel=\"Ext.grid.column.Column-cfg-field\" class=\"docClass\">field</a> on two of our columns. For the\nName column we just want a default textfield to edit the value, so we specify 'textfield'.\nFor the Email column we customized the editor slightly by passing allowBlank: false, which\nwill provide inline validation.</p>\n\n<p>To support cell editing, we also specified that the grid should use the 'cellmodel'\n<a href=\"#!/api/Ext.grid.Panel-cfg-selType\" rel=\"Ext.grid.Panel-cfg-selType\" class=\"docClass\">selType</a>, and created an instance of the CellEditing plugin,\nwhich we configured to activate each editor after a single click.</p>\n"},"Editing":{"!doc":"<p>This class provides an abstract grid editing plugin on selected <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">columns</a>.\nThe editable columns are specified by providing an <a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>\nin the <a href=\"#!/api/Ext.grid.column.Column\" rel=\"Ext.grid.column.Column\" class=\"docClass\">column configuration</a>.</p>\n\n<p><strong>Note:</strong> This class should not be used directly. See <a href=\"#!/api/Ext.grid.plugin.CellEditing\" rel=\"Ext.grid.plugin.CellEditing\" class=\"docClass\">Ext.grid.plugin.CellEditing</a> and\n<a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a>.</p>\n"},"DragDrop":{"!doc":"<p>This plugin provides drag and/or drop functionality for a <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>.</p>\n\n<p>It creates a specialized instance of <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> which knows how to drag out of a <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a> and loads the data object which is passed to a cooperating <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>'s\nmethods with the following properties:</p>\n\n<ul>\n<li><p><code>copy</code> : Boolean</p>\n\n<p>The value of the <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>'s <code>copy</code> property, or <code>true</code> if the GridView was configured with <code>allowCopy: true</code> <em>and</em>\nthe control key was pressed when the drag operation was begun.</p></li>\n<li><p><code>view</code> : <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a></p>\n\n<p>The source GridView from which the drag originated.</p></li>\n<li><p><code>ddel</code> : HTMLElement</p>\n\n<p>The drag proxy element which moves with the mouse</p></li>\n<li><p><code>item</code> : HTMLElement</p>\n\n<p>The GridView node upon which the mousedown event was registered.</p></li>\n<li><p><code>records</code> : Array</p>\n\n<p>An Array of Models representing the selected data being dragged from the source <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">GridView</a>.</p></li>\n</ul>\n\n\n<p>It also creates a specialized instance of <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a> which cooperates with other DropZones which are\nmembers of the same ddGroup which processes such data objects.</p>\n\n<p>Adding this plugin to a view means that two new events may be fired from the client GridView, <code><a href=\"#!/api/Ext.grid.plugin.DragDrop-event-beforedrop\" rel=\"Ext.grid.plugin.DragDrop-event-beforedrop\" class=\"docClass\">beforedrop</a></code> and <code><a href=\"#!/api/Ext.grid.plugin.DragDrop-event-drop\" rel=\"Ext.grid.plugin.DragDrop-event-drop\" class=\"docClass\">drop</a></code></p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'simpsonsStore',\n    fields:['name'],\n    data: [[\"Lisa\"], [\"Bart\"], [\"Homer\"], [\"Marge\"]],\n    proxy: {\n        type: 'memory',\n        reader: 'array'\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    store: 'simpsonsStore',\n    columns: [\n        {header: 'Name',  dataIndex: 'name', flex: true}\n    ],\n    viewConfig: {\n        plugins: {\n            ptype: 'gridviewdragdrop',\n            dragText: 'Drag and drop to reorganize'\n        }\n    },\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"HeaderReorderer":{"!doc":"\n"},"HeaderResizer":{"!doc":"<p>Plugin to add header resizing functionality to a HeaderContainer.\nAlways resizing header to the left of the splitter you are resizing.</p>\n"},"RowEditing":{"!doc":"<p>The <a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a> plugin injects editing at a row level for a Grid. When editing begins,\na small floating dialog will be shown for the appropriate row. Each editable column will show a field\nfor editing. There is a button to save or cancel all changes for the edit.</p>\n\n<p>The field that will be used for the editor is defined at the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editor\" rel=\"Ext.grid.column.Column-cfg-editor\" class=\"docClass\">editor</a>. The editor can be a field instance or a field configuration.\nIf an editor is not specified for a particular column then that column won't be editable and the value of\nthe column will be displayed. To provide a custom renderer for non-editable values, use the\n<a href=\"#!/api/Ext.grid.column.Column-cfg-editRenderer\" rel=\"Ext.grid.column.Column-cfg-editRenderer\" class=\"docClass\">editRenderer</a> configuration on the column.</p>\n\n<p>The editor may be shared for each column in the grid, or a different one may be specified for each column.\nAn appropriate field type should be chosen to match the data structure that it will be editing. For example,\nto edit a date, it would be useful to specify <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> as the editor.</p>\n\n<pre class='inline-example '><code>Ext.create('Ext.data.Store', {\n    storeId:'simpsonsStore',\n    fields:['name', 'email', 'phone'],\n    data: [\n        {\"name\":\"Lisa\", \"email\":\"lisa@simpsons.com\", \"phone\":\"555-111-1224\"},\n        {\"name\":\"Bart\", \"email\":\"bart@simpsons.com\", \"phone\":\"555-222-1234\"},\n        {\"name\":\"Homer\", \"email\":\"homer@simpsons.com\", \"phone\":\"555-222-1244\"},\n        {\"name\":\"Marge\", \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"}\n    ]\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: Ext.data.StoreManager.lookup('simpsonsStore'),\n    columns: [\n        {header: 'Name',  dataIndex: 'name', editor: 'textfield'},\n        {header: 'Email', dataIndex: 'email', flex:1,\n            editor: {\n                xtype: 'textfield',\n                allowBlank: false\n            }\n        },\n        {header: 'Phone', dataIndex: 'phone'}\n    ],\n    selType: 'rowmodel',\n    plugins: [\n        Ext.create('<a href=\"#!/api/Ext.grid.plugin.RowEditing\" rel=\"Ext.grid.plugin.RowEditing\" class=\"docClass\">Ext.grid.plugin.RowEditing</a>', {\n            clicksToEdit: 1\n        })\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"RowExpander":{"!doc":"<p>Plugin (ptype = 'rowexpander') that adds the ability to have a Column in a grid which enables\na second row body which expands/contracts.  The expand/contract behavior is configurable to react\non clicking of the column, double click of the row, and/or hitting enter while a row is selected.</p>\n"}},"property":{"Grid":{"!doc":"<p>A specialized grid implementation intended to mimic the traditional property grid as typically seen in\ndevelopment IDEs.  Each row in the grid represents a property of some object, and the data is stored\nas a set of name/value pairs in <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Properties</a>. By default, the editors\nshown are inferred from the data in the cell. More control over this can be specified by using the\n<a href=\"#!/api/Ext.grid.property.Grid-cfg-sourceConfig\" rel=\"Ext.grid.property.Grid-cfg-sourceConfig\" class=\"docClass\">sourceConfig</a> option. Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>', {\n    title: 'Properties Grid',\n    width: 300,\n    renderTo: Ext.getBody(),\n    source: {\n        \"(name)\": \"My Object\",\n        \"Created\": Ext.Date.parse('10/15/2006', 'm/d/Y'),\n        \"Available\": false,\n        \"Version\": 0.01,\n        \"Description\": \"A test object\"\n    }\n});\n</code></pre>\n"},"HeaderContainer":{"!doc":"<p>A custom HeaderContainer for the <a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>.\nGenerally it should not need to be used directly.</p>\n"},"Property":{"!doc":"<p>A specific Ext.data.Model type that represents a name/value pair and is made to work with the\n<a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>. Typically, Properties do not need to be created directly as they can be\ncreated implicitly by simply using the appropriate data configs either via the\n<a href=\"#!/api/Ext.grid.property.Grid-cfg-source\" rel=\"Ext.grid.property.Grid-cfg-source\" class=\"docClass\">Ext.grid.property.Grid.source</a> config property or by calling <a href=\"#!/api/Ext.grid.property.Grid-method-setSource\" rel=\"Ext.grid.property.Grid-method-setSource\" class=\"docClass\">Ext.grid.property.Grid.setSource</a>.\nHowever, if the need arises, these records can also be created explicitly as shown below. Example usage:</p>\n\n<pre><code>var rec = new <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Ext.grid.property.Property</a>({\n    name: 'birthday',\n    value: Ext.Date.parse('17/06/1962', 'd/m/Y')\n});\n// Add record to an already populated grid\ngrid.store.addSorted(rec);\n</code></pre>\n"},"Reader":{"!doc":"<p>Custom reader for property grid data</p>\n"},"Store":{"!doc":"<p>A custom Ext.data.Store for the <a href=\"#!/api/Ext.grid.property.Grid\" rel=\"Ext.grid.property.Grid\" class=\"docClass\">Ext.grid.property.Grid</a>. This class handles the mapping\nbetween the custom data source objects supported by the grid and the <a href=\"#!/api/Ext.grid.property.Property\" rel=\"Ext.grid.property.Property\" class=\"docClass\">Ext.grid.property.Property</a> format\nused by the Ext.data.Store base class.</p>\n"}},"RowEditor":{"!doc":"<p>Internal utility class used to provide row editing functionality. For developers, they should use\nthe RowEditing plugin to use this functionality with a grid.</p>\n"},"RowEditorButtons":{"!doc":"<p>Private Container class used by the <a href=\"#!/api/Ext.grid.RowEditor\" rel=\"Ext.grid.RowEditor\" class=\"docClass\">Ext.grid.RowEditor</a> to hold its buttons.</p>\n"},"View":{"!doc":"<p>The grid View class provides extra <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a> specific functionality to the\n<a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">Ext.view.Table</a>. In general, this class is not instanced directly, instead a viewConfig\noption is passed to the grid:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    viewConfig: {\n        stripeRows: false\n    }\n});\n</code></pre>\n\n<h2>Drag Drop</h2>\n\n<p>Drag and drop functionality can be achieved in the grid by attaching a <a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">Ext.grid.plugin.DragDrop</a> plugin\nwhen creating the view.</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    // other options\n    viewConfig: {\n        plugins: {\n            ddGroup: 'people-group',\n            ptype: 'gridviewdragdrop',\n            enableDrop: false\n        }\n    }\n});\n</code></pre>\n"},"ViewDropZone":{"!doc":"\n"}},"layout":{"component":{"Auto":{"!doc":"<p>The class is the default component layout for <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> when no explicit\n<code><a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">componentLayout</a></code> is configured.</p>\n\n<p>This class uses template methods to perform the individual aspects of measurement,\ncalculation and publication of results. The methods called depend on the component's\n<a href=\"#!/api/Ext.Component-method-getSizeModel\" rel=\"Ext.Component-method-getSizeModel\" class=\"docClass\">size model</a>.</p>\n\n<h2>configured / calculated</h2>\n\n<p>In either of these size models, the dimension of the outer element is of a known size.\nThe size is found in the <code>ownerContext</code> (the <a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">Ext.layout.ContextItem</a> for the owner\ncomponent) as either \"width\" or \"height\". This value, if available, is passed to the\n<code>publishInnerWidth</code> or <code>publishInnerHeight</code> method, respectively.</p>\n\n<h2>shrinkWrap</h2>\n\n<p>When a dimension uses the <code>shrinkWrap</code> size model, that means the content is measured,\nthen the outer (owner) size is calculated and published.</p>\n\n<p>For example, for a shrinkWrap width, the following sequence of calls are made:</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.layout.component.Component-method-measureContentWidth\" rel=\"Ext.layout.component.Component-method-measureContentWidth\" class=\"docClass\">Ext.layout.component.Component.measureContentWidth</a></code></li>\n<li><code>publishOwnerWidth</code>\n\n<ul>\n<li><code>calculateOwnerWidthFromContentWidth</code></li>\n<li><code>publishInnerWidth</code> (in the event of hitting a min/maxWidth constraint)</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>natural</h2>\n\n<p>When a dimension uses the <code>natural</code> size model, the measurement is made on the outer\n(owner) element. This size is then used to determine the content area in much the same\nway as if the outer element had a <code>configured</code> or <code>calculated</code> size model.</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.layout.component.Component-method-measureOwnerWidth\" rel=\"Ext.layout.component.Component-method-measureOwnerWidth\" class=\"docClass\">Ext.layout.component.Component.measureOwnerWidth</a></code></li>\n<li><code>publishInnerWidth</code></li>\n</ul>\n\n"},"Component":{"!doc":"<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.Component-cfg-componentLayout\" rel=\"Ext.Component-cfg-componentLayout\" class=\"docClass\">Ext.Component.componentLayout</a> for additional details.</p>\n"},"Body":{"!doc":"<p>Component layout for components which maintain an inner body element which must be resized to synchronize with the\nComponent size.</p>\n"},"BoundList":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">Ext.view.BoundList</a>.</p>\n"},"Dock":{"!doc":"<p>This ComponentLayout handles docking for Panels. It takes care of panels that are\npart of a ContainerLayout that sets this Panel's size and Panels that are part of\nan AutoContainerLayout in which this panel get his height based of the CSS or\nits content.</p>\n"},"field":{"FieldContainer":{"!doc":"\n"},"HtmlEditor":{"!doc":"<p>Layout class for <a href=\"#!/api/Ext.form.field.HtmlEditor\" rel=\"Ext.form.field.HtmlEditor\" class=\"docClass\">Ext.form.field.HtmlEditor</a> fields. Sizes textarea and iframe elements.</p>\n"}},"FieldSet":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.form.FieldSet\" rel=\"Ext.form.FieldSet\" class=\"docClass\">Ext.form.FieldSet</a> components</p>\n"},"ProgressBar":{"!doc":"\n"}},"Layout":{"!doc":"<p>This class is the base for all layout types: component and container.</p>\n"},"container":{"Box":{"!doc":"<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>\n"},"HBox":{"!doc":"<p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal\nspace between child items containing a numeric <code>flex</code> configuration.</p>\n\n<p>This layout may also be used to set the heights of child items by configuring it with the <a href=\"#!/api/Ext.layout.container.HBox-cfg-align\" rel=\"Ext.layout.container.HBox-cfg-align\" class=\"docClass\">align</a> option.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: \"HBoxLayout Panel\",\n    layout: {\n        type: 'hbox',\n        align: 'stretch'\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        flex: 2\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        flex: 1\n    },{\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        flex: 1\n    }]\n});\n</code></pre>\n"},"Container":{"!doc":"<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> for additional details.</p>\n"},"Absolute":{"!doc":"<p>This is a layout that inherits the anchoring of <a href=\"#!/api/Ext.layout.container.Anchor\" rel=\"Ext.layout.container.Anchor\" class=\"docClass\">Ext.layout.container.Anchor</a> and adds the\nability for x/y positioning using the standard x and y component config options.</p>\n\n<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>\nconfiguration property.  See <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> for additional details.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    title: 'Absolute Layout',\n    width: 300,\n    height: 275,\n    layout: {\n        type: 'absolute'\n        // layout-specific configs go here\n        //itemCls: 'x-abs-layout-item',\n    },\n    url:'save-form.php',\n    defaultType: 'textfield',\n    items: [{\n        x: 10,\n        y: 10,\n        xtype:'label',\n        text: 'Send To:'\n    },{\n        x: 80,\n        y: 10,\n        name: 'to',\n        anchor:'90%'  // anchor width by percentage\n    },{\n        x: 10,\n        y: 40,\n        xtype:'label',\n        text: 'Subject:'\n    },{\n        x: 80,\n        y: 40,\n        name: 'subject',\n        anchor: '90%'  // anchor width by percentage\n    },{\n        x:0,\n        y: 80,\n        xtype: 'textareafield',\n        name: 'msg',\n        anchor: '100% 100%'  // anchor width and height\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Anchor":{"!doc":"<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.\nIf the container is resized, all anchored items are automatically rerendered according to their\n<code><a href=\"#!/api/Ext.layout.container.Anchor-cfg-anchor\" rel=\"Ext.layout.container.Anchor-cfg-anchor\" class=\"docClass\">anchor</a></code> rules.</p>\n\n<p>This class is intended to be extended or created via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a>: 'anchor'\nconfig, and should generally not need to be created directly via the new keyword.</p>\n\n<p>AnchorLayout does not have any direct config options (other than inherited ones). By default,\nAnchorLayout will calculate anchor measurements based on the size of the container itself. However, the\ncontainer using the AnchorLayout can supply an anchoring-specific config property of <code>anchorSize</code>.</p>\n\n<p>If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating\nanchor measurements based on it instead, allowing the container to be sized independently of the anchoring\nlogic if necessary.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 400,\n    title: \"AnchorLayout Panel\",\n    layout: 'anchor',\n    renderTo: Ext.getBody(),\n    items: [\n        {\n            xtype: 'panel',\n            title: '75% Width and 20% Height',\n            anchor: '75% 20%'\n        },\n        {\n            xtype: 'panel',\n            title: 'Offset -300 Width &amp; -200 Height',\n            anchor: '-300 -200'   \n        },\n        {\n            xtype: 'panel',\n            title: 'Mixed Offset and Percent',\n            anchor: '-250 20%'\n        }\n    ]\n});\n</code></pre>\n"},"Auto":{"!doc":"<p>The AutoLayout is the default layout manager delegated by <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a> to\nrender any child Components when no <code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout</a></code> is configured into\na <code><a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>.</code> AutoLayout provides only a passthrough of any layout calls\nto any child containers.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 280,\n    title: \"AutoLayout Panel\",\n    layout: 'auto',\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Top Inner Panel',\n        width: '75%',\n        height: 90\n    },\n    {\n        xtype: 'panel',\n        title: 'Bottom Inner Panel',\n        width: '75%',\n        height: 90\n    }]\n});\n</code></pre>\n"},"Accordion":{"!doc":"<p>This is a layout that manages multiple Panels in an expandable accordion style such that by default only\none Panel can be expanded at any given time (set <a href=\"#!/api/Ext.layout.container.Accordion-cfg-multi\" rel=\"Ext.layout.container.Accordion-cfg-multi\" class=\"docClass\">multi</a> config to have more open). Each Panel has\nbuilt-in support for expanding and collapsing.</p>\n\n<p>Note: Only Ext Panels and all subclasses of <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> may be used in an accordion layout Container.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Accordion Layout',\n    width: 300,\n    height: 300,\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:15px'\n    },\n    layout: {\n        // layout-specific configs go here\n        type: 'accordion',\n        titleCollapse: false,\n        animate: true,\n        activeOnTop: true\n    },\n    items: [{\n        title: 'Panel 1',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 2',\n        html: 'Panel content!'\n    },{\n        title: 'Panel 3',\n        html: 'Panel content!'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"VBox":{"!doc":"<p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical space\nbetween child items containing a numeric <code>flex</code> configuration.</p>\n\n<p>This layout may also be used to set the widths of child items by configuring it with the <a href=\"#!/api/Ext.layout.container.VBox-cfg-align\" rel=\"Ext.layout.container.VBox-cfg-align\" class=\"docClass\">align</a> option.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 400,\n    title: \"VBoxLayout Panel\",\n    layout: {\n        type: 'vbox',\n    },\n    renderTo: document.body,\n    items: [{\n        xtype: 'panel',\n        title: 'Inner Panel One',\n        width: 250,\n        flex: 2\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Two',\n        width: 250,\n        flex: 4\n    },\n    {\n        xtype: 'panel',\n        title: 'Inner Panel Three',\n        width: '50%',\n        flex: 4\n    }]\n});\n</code></pre>\n"},"Border":{"!doc":"<p>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars\nbetween regions and built-in <a href=\"#!/api/Ext.panel.Panel-cfg-collapsible\" rel=\"Ext.panel.Panel-cfg-collapsible\" class=\"docClass\">expanding and collapsing</a> of regions.</p>\n\n<p>This class is intended to be extended or created via the <code>layout:'border'</code> <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a>\nconfig, and should generally not need to be created directly via the new keyword.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: 'Border Layout',\n    layout: 'border',\n    items: [{\n        title: 'South Region is resizable',\n        region: 'south',     // position for region\n        xtype: 'panel',\n        height: 100,\n        split: true,         // enable resizing\n        margin: '0 5 5 5'\n    },{\n        // xtype: 'panel' implied by default\n        title: 'West Region is collapsible',\n        region:'west',\n        xtype: 'panel',\n        margin: '5 0 0 5',\n        width: 200,\n        collapsible: true,   // make collapsible\n        id: 'west-region-container',\n        layout: 'fit'\n    },{\n        title: 'Center Region',\n        region: 'center',     // center region is required, no width/height specified\n        xtype: 'panel',\n        layout: 'fit',\n        margin: '5 5 0 0'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<h1>Notes</h1>\n\n<ul>\n<li><p>When using the split option, the layout will automatically insert a <a href=\"#!/api/Ext.resizer.Splitter\" rel=\"Ext.resizer.Splitter\" class=\"docClass\">Ext.resizer.Splitter</a>\ninto the appropriate place. This will modify the underlying\n<a href=\"#!/api/Ext.container.Container-property-items\" rel=\"Ext.container.Container-property-items\" class=\"docClass\">items</a> collection in the container.</p></li>\n<li><p>Any Container using the Border layout <strong>must</strong> have a child item with <code>region:'center'</code>.\nThe child item in the center region will always be resized to fill the remaining space\nnot used by the other regions in the layout.</p></li>\n<li><p>Any child items with a region of <code>west</code> or <code>east</code> may be configured with either an initial\n<code>width</code>, or a <a href=\"#!/api/Ext.layout.container.Box-cfg-flex\" rel=\"Ext.layout.container.Box-cfg-flex\" class=\"docClass\">Ext.layout.container.Box.flex</a> value, or an initial percentage width\n<strong>string</strong> (Which is simply divided by 100 and used as a flex value).\nThe 'center' region has a flex value of <code>1</code>.</p></li>\n<li><p>Any child items with a region of <code>north</code> or <code>south</code> may be configured with either an initial\n<code>height</code>, or a <a href=\"#!/api/Ext.layout.container.Box-cfg-flex\" rel=\"Ext.layout.container.Box-cfg-flex\" class=\"docClass\">Ext.layout.container.Box.flex</a> value, or an initial percentage height\n<strong>string</strong> (Which is simply divided by 100 and used as a flex value).\nThe 'center' region has a flex value of <code>1</code>.</p></li>\n<li><p><strong>There is no BorderLayout.Region class in ExtJS 4.0+</strong></p></li>\n</ul>\n\n"},"boxOverflow":{"Menu":{"!doc":"\n"},"None":{"!doc":"<p>Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout\n(either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)\nfor its container.</p>\n"},"Scroller":{"!doc":"\n"}},"Card":{"!doc":"<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be\nvisible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.\nThis class is intended to be extended or created via the layout:'card' <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config,\nand should generally not need to be created directly via the new keyword.</p>\n\n<p>The CardLayout's focal method is <a href=\"#!/api/Ext.layout.container.Card-method-setActiveItem\" rel=\"Ext.layout.container.Card-method-setActiveItem\" class=\"docClass\">setActiveItem</a>.  Since only one panel is displayed at a time,\nthe only way to move from one Component to the next is by calling setActiveItem, passing the next panel to display\n(or its id or index).  The layout itself does not provide a user interface for handling this navigation,\nso that functionality must be provided by the developer.</p>\n\n<p>To change the active card of a container, call the setActiveItem method of its layout:</p>\n\n<pre class='inline-example '><code>var p = Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    layout: 'card',\n    items: [\n        { html: 'Card 1' },\n        { html: 'Card 2' }\n    ],\n    renderTo: Ext.getBody()\n});\n\np.getLayout().setActiveItem(1);\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.Component-event-beforedeactivate\" rel=\"Ext.Component-event-beforedeactivate\" class=\"docClass\">beforedeactivate</a> and <a href=\"#!/api/Ext.Component-event-beforeactivate\" rel=\"Ext.Component-event-beforeactivate\" class=\"docClass\">beforeactivate</a>\nevents can be used to prevent a card from activating or deactivating by returning <code>false</code>.</p>\n\n<pre class='inline-example '><code>var active = 0;\nvar main = Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    renderTo: Ext.getBody(),\n    width: 200,\n    height: 200,\n    layout: 'card',\n    tbar: [{\n        text: 'Next',\n        handler: function(){\n            var layout = main.getLayout();\n            ++active;\n            layout.setActiveItem(active);\n            active = main.items.indexOf(layout.getActiveItem());\n        }\n    }],\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3',\n        listeners: {\n            beforeactivate: function(){\n                return false;\n            }\n        }\n    }]\n});\n</code></pre>\n\n<p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added\nto the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a\ncommon navigation routine.  Note that other uses of a CardLayout (like a tab control) would require a\ncompletely different implementation.  For serious implementations, a better approach would be to extend\nCardLayout to provide the custom functionality needed.</p>\n\n<pre class='inline-example '><code>var navigate = function(panel, direction){\n    // This routine could contain business logic required to manage the navigation steps.\n    // It would call setActiveItem as needed, manage navigation button state, handle any\n    // branching logic that might be required, handle alternate actions like cancellation\n    // or finalization, etc.  A complete wizard implementation could get pretty\n    // sophisticated depending on the complexity required, and should probably be\n    // done as a subclass of CardLayout in a real-world implementation.\n    var layout = panel.getLayout();\n    layout[direction]();\n    Ext.getCmp('move-prev').setDisabled(!layout.getPrev());\n    Ext.getCmp('move-next').setDisabled(!layout.getNext());\n};\n\nExt.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Example Wizard',\n    width: 300,\n    height: 200,\n    layout: 'card',\n    bodyStyle: 'padding:15px',\n    defaults: {\n        // applied to each contained panel\n        border: false\n    },\n    // just an example of one possible navigation scheme, using buttons\n    bbar: [\n        {\n            id: 'move-prev',\n            text: 'Back',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"prev\");\n            },\n            disabled: true\n        },\n        '-&gt;', // greedy spacer so that the buttons are aligned to each side\n        {\n            id: 'move-next',\n            text: 'Next',\n            handler: function(btn) {\n                navigate(btn.up(\"panel\"), \"next\");\n            }\n        }\n    ],\n    // the panels (or \"cards\") within the layout\n    items: [{\n        id: 'card-0',\n        html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'\n    },{\n        id: 'card-1',\n        html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'\n    },{\n        id: 'card-2',\n        html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Fit":{"!doc":"<p>This is a base class for layouts that contain a single item that automatically expands to fill the layout's\ncontainer. This class is intended to be extended or created via the layout:'fit'\n<a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config, and should generally not need to be created directly via the new keyword.</p>\n\n<p>Fit layout does not have any direct config options (other than inherited ones). To fit a panel to a container using\nFit layout, simply set <code>layout: 'fit'</code> on the container and add a single panel to it.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Fit Layout',\n    width: 300,\n    height: 150,\n    layout:'fit',\n    items: {\n        title: 'Inner Panel',\n        html: 'This is the inner panel content',\n        bodyPadding: 20,\n        border: false\n    },\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>If the container has multiple items, all of the items will all be equally sized. This is usually not\ndesired, so to avoid this, place only a <strong>single</strong> item in the container. This sizing of all items\ncan be used to provide a background <a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">image</a> that is \"behind\" another item\nsuch as a <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">dataview</a> if you also absolutely position the items.</p>\n"},"Center":{"!doc":"<p>This layout manager is used to center contents within a container. As a subclass of\n<a href=\"#!/api/Ext.layout.container.Fit\" rel=\"Ext.layout.container.Fit\" class=\"docClass\">fit layout</a>, CenterLayout expects to have one child\nitem; multiple items will be placed overlapping. The layout does not require any config\noptions. Items in the container can use percentage width or height rather than be fit\nto the full size of the container.</p>\n\n<p>Example usage:</p>\n\n<pre><code> // The content panel is centered in the container\n\n var p = Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n     title: 'Center Layout',\n     layout: 'center',\n     items: [{\n         title: 'Centered Content',\n         width: '75%',  // assign 75% of the container width to the item\n         html: 'Some content'\n     }]\n });\n</code></pre>\n\n<p>If you leave the title blank and specify no border you can create a non-visual, structural\ncontainer just for centering the contents.</p>\n\n<pre><code> var p = Ext.create('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.Container</a>', {\n     layout: 'center',\n     items: [{\n         title: 'Centered Content',\n         width: 300,\n         height: '90%', // assign 90% of the container height to the item\n         html: 'Some content'\n     }]\n });\n</code></pre>\n"},"CheckboxGroup":{"!doc":"<p>This layout implements the column arrangement for <a href=\"#!/api/Ext.form.CheckboxGroup\" rel=\"Ext.form.CheckboxGroup\" class=\"docClass\">Ext.form.CheckboxGroup</a> and <a href=\"#!/api/Ext.form.RadioGroup\" rel=\"Ext.form.RadioGroup\" class=\"docClass\">Ext.form.RadioGroup</a>.\nIt groups the component's sub-items into columns based on the component's\n<a href=\"#!/api/Ext.form.CheckboxGroup-cfg-columns\" rel=\"Ext.form.CheckboxGroup-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.form.CheckboxGroup-cfg-vertical\" rel=\"Ext.form.CheckboxGroup-cfg-vertical\" class=\"docClass\">Ext.form.CheckboxGroup.vertical</a> config properties.</p>\n"},"Column":{"!doc":"<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of each\ncolumn can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This\nclass is intended to be extended or created via the layout:'column' <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config,\nand should generally not need to be created directly via the new keyword.</p>\n\n<p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a specific\nconfig property of <code>columnWidth</code> that can be included in the config of any panel added to it. The layout will use\nthe columnWidth (if present) or width of each panel during layout to determine how to size each panel. If width or\ncolumnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>\n\n<p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1. The columnWidth\nproperty is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1 (e.g., .25).</p>\n\n<p>The basic rules for specifying column widths are pretty simple. The logic makes two passes through the set of\ncontained panels. During the first layout pass, all panels that either have a fixed width or none specified (auto)\nare skipped, but their widths are subtracted from the overall container width.</p>\n\n<p>During the second pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages\nbased on the total <strong>remaining</strong> container width. In other words, percentage width panels are designed to fill\nthe space left over by all the fixed-width and/or auto-width panels. Because of this, while you can specify any\nnumber of columns with different percentages, the columnWidths must always add up to 1 (or 100%) when added\ntogether, otherwise your layout may not render as expected.</p>\n\n<pre class='inline-example '><code>// All columns are percentages -- they must add up to 1\nExt.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Column Layout - Percentage Only',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        columnWidth: 0.25\n    },{\n        title: 'Column 2',\n        columnWidth: 0.55\n    },{\n        title: 'Column 3',\n        columnWidth: 0.20\n    }],\n    renderTo: Ext.getBody()\n});\n\n// Mix of width and columnWidth -- all columnWidth values must add up\n// to 1. The first column will take up exactly 120px, and the last two\n// columns will fill the remaining container width.\n\nExt.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    title: 'Column Layout - Mixed',\n    width: 350,\n    height: 250,\n    layout:'column',\n    items: [{\n        title: 'Column 1',\n        width: 120\n    },{\n        title: 'Column 2',\n        columnWidth: 0.7\n    },{\n        title: 'Column 3',\n        columnWidth: 0.3\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"ColumnSplitter":{"!doc":"\n"},"ColumnSplitterTracker":{"!doc":"\n"},"Editor":{"!doc":"<p>Component layout for editors</p>\n"},"Form":{"!doc":"<p>This is a layout that will render form Fields, one under the other all stretched to the Container width.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    width: 500,\n    height: 300,\n    title: \"FormLayout Panel\",\n    layout: 'form',\n    renderTo: Ext.getBody(),\n    bodyPadding: 5,\n    defaultType: 'textfield',\n    items: [{\n       fieldLabel: 'First Name',\n        name: 'first',\n        allowBlank:false\n    },{\n        fieldLabel: 'Last Name',\n        name: 'last'\n    },{\n        fieldLabel: 'Company',\n        name: 'company'\n    }, {\n        fieldLabel: 'Email',\n        name: 'email',\n        vtype:'email'\n    }, {\n        fieldLabel: 'DOB',\n        name: 'dob',\n        xtype: 'datefield'\n    }, {\n        fieldLabel: 'Age',\n        name: 'age',\n        xtype: 'numberfield',\n        minValue: 0,\n        maxValue: 100\n    }, {\n        xtype: 'timefield',\n        fieldLabel: 'Time',\n        name: 'time',\n        minValue: '8:00am',\n        maxValue: '6:00pm'\n    }]\n});\n</code></pre>\n"},"SplitColumn":{"!doc":"<p>This layout extends <code><a href=\"#!/api/Ext.layout.container.Column\" rel=\"Ext.layout.container.Column\" class=\"docClass\">Ext.layout.container.Column</a></code> and adds splitters between adjacent\ncolumns allowing the user to resize them.</p>\n"},"Table":{"!doc":"<p>This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and\nrowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or\ncreated via the <code>layout: {type: 'table'}</code> <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> config, and should generally not\nneed to be created directly via the new keyword.</p>\n\n<p>Note that when creating a layout via config, the layout-specific config properties must be passed in via the <a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">Ext.container.Container.layout</a> object which will then be applied internally to the layout. In the case of\nTableLayout, the only valid layout config properties are <a href=\"#!/api/Ext.layout.container.Table-cfg-columns\" rel=\"Ext.layout.container.Table-cfg-columns\" class=\"docClass\">columns</a> and <a href=\"#!/api/Ext.layout.container.Table-cfg-tableAttrs\" rel=\"Ext.layout.container.Table-cfg-tableAttrs\" class=\"docClass\">tableAttrs</a>. However, the items\nadded to a TableLayout can supply the following table-specific config properties:</p>\n\n<ul>\n<li><strong>rowspan</strong> Applied to the table cell containing the item.</li>\n<li><strong>colspan</strong> Applied to the table cell containing the item.</li>\n<li><strong>cellId</strong> An id applied to the table cell containing the item.</li>\n<li><strong>cellCls</strong> A CSS class name added to the table cell containing the item.</li>\n</ul>\n\n\n<p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard HTML table. You\nsimply add each panel (or \"cell\") that you want to include along with any span attributes specified as the special\nconfig properties of rowspan and colspan which work exactly like their HTML counterparts. Rather than explicitly\ncreating and nesting rows and columns as you would in HTML, you simply specify the total column count in the\nlayout config and start adding panels in their natural order from left to right, top to bottom. The layout will\nautomatically figure out, based on the column count, rowspans and colspans, how to position each panel within the\ntable. Just like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or you'll\nend up with missing and/or extra cells! Example usage:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Table Layout',\n    width: 300,\n    height: 150,\n    layout: {\n        type: 'table',\n        // The total column count must be specified here\n        columns: 3\n    },\n    defaults: {\n        // applied to each contained panel\n        bodyStyle: 'padding:20px'\n    },\n    items: [{\n        html: 'Cell A content',\n        rowspan: 2\n    },{\n        html: 'Cell B content',\n        colspan: 2\n    },{\n        html: 'Cell C content',\n        cellCls: 'highlight'\n    },{\n        html: 'Cell D content'\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"}},"ClassList":{"!doc":"<p>This class provides a DOM ClassList API to buffer access to an element's class.\nInstances of this class are created by <a href=\"#!/api/Ext.layout.ContextItem-method-getClassList\" rel=\"Ext.layout.ContextItem-method-getClassList\" class=\"docClass\">Ext.layout.ContextItem.getClassList</a>.</p>\n"},"Context":{"!doc":"<p>Manages context information during a layout.</p>\n\n<h1>Algorithm</h1>\n\n<p>This class performs the following jobs:</p>\n\n<ul>\n<li>Cache DOM reads to avoid reading the same values repeatedly.</li>\n<li>Buffer DOM writes and flush them as a block to avoid read/write interleaving.</li>\n<li>Track layout dependencies so each layout does not have to figure out the source of\nits dependent values.</li>\n<li>Intelligently run layouts when the values on which they depend change (a trigger).</li>\n<li>Allow layouts to avoid processing when required values are unavailable (a block).</li>\n</ul>\n\n\n<p>Work done during layout falls into either a \"read phase\" or a \"write phase\" and it is\nessential to always be aware of the current phase. Most methods in\n<a href=\"#!/api/Ext.layout.Layout\" rel=\"Ext.layout.Layout\" class=\"docClass\">Layout</a> are called during a read phase:\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>,\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> and\n<a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a>. The exceptions to this are\n<a href=\"#!/api/Ext.layout.Layout-method-beginLayout\" rel=\"Ext.layout.Layout-method-beginLayout\" class=\"docClass\">beginLayout</a>,\n<a href=\"#!/api/Ext.layout.Layout-method-beginLayoutCycle\" rel=\"Ext.layout.Layout-method-beginLayoutCycle\" class=\"docClass\">beginLayoutCycle</a> and\n<a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> which are called during\na write phase. While <a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> is called\na write phase, it is really intended to be a catch-all for post-processing after a\nlayout run.</p>\n\n<p>In a read phase, it is OK to read the DOM but this should be done using the appropriate\n<a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a> where possible since that provides a cache\nto avoid redundant reads. No writes should be made to the DOM in a read phase! Instead,\nthe values should be written to the proper ContextItem for later write-back.</p>\n\n<p>The rules flip-flop in a write phase. The only difference is that ContextItem methods\nlike <a href=\"#!/api/Ext.layout.ContextItem-method-getStyle\" rel=\"Ext.layout.ContextItem-method-getStyle\" class=\"docClass\">getStyle</a> will still read the DOM unless the\nvalue was previously read. This detail is unknowable from the outside of ContextItem, so\nread calls to ContextItem should also be avoided in a write phase.</p>\n\n<p>Calculating interdependent layouts requires a certain amount of iteration. In a given\ncycle, some layouts will contribute results that allow other layouts to proceed. The\ngeneral flow then is to gather all of the layouts (both component and container) in a\ncomponent tree and queue them all for processing. The initial queue order is bottom-up\nand component layout first, then container layout (if applicable) for each component.</p>\n\n<p>This initial step also calls the beginLayout method on all layouts to clear any values\nfrom the DOM that might interfere with calculations and measurements. In other words,\nthis is a \"write phase\" and reads from the DOM should be strictly avoided.</p>\n\n<p>Next the layout enters into its iterations or \"cycles\". Each cycle consists of calling\nthe <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> method on all layouts in the\n<a href=\"#!/api/Ext.layout.Context-property-layoutQueue\" rel=\"Ext.layout.Context-property-layoutQueue\" class=\"docClass\">layoutQueue</a>. These calls are part of a \"read phase\" and writes to the DOM should\nbe strictly avoided.</p>\n\n<h1>Considerations</h1>\n\n<p><strong>RULE 1</strong>: Respect the read/write cycles. Always use the <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a>\nor <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a> methods to get calculated values;\nonly use the <a href=\"#!/api/Ext.layout.ContextItem-method-getStyle\" rel=\"Ext.layout.ContextItem-method-getStyle\" class=\"docClass\">getStyle</a> method to read styles; use\n<a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a> to set DOM values. Some reads will, of\ncourse, still go directly to the DOM, but if there is a method in\n<a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a> to do a certain job, it should be used instead\nof a lower-level equivalent.</p>\n\n<p>The basic logic flow in <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> consists of gathering\nvalues by calling <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>, calculating results and publishing\nthem by calling <a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a>. It is important to realize\nthat <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> will return <code>undefined</code> if the value\nis not yet known. But the act of calling the method is enough to track the fact that the\ncalling layout depends (in some way) on this value. In other words, the calling layout is\n\"triggered\" by the properties it requests.</p>\n\n<p><strong>RULE 2</strong>: Avoid calling <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> unless the value\nis needed. Gratuitous calls cause inefficiency because the layout will appear to depend on\nvalues that it never actually uses. This applies equally to\n<a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a> and the test-only methods\n<a href=\"#!/api/Ext.layout.ContextItem-method-hasProp\" rel=\"Ext.layout.ContextItem-method-hasProp\" class=\"docClass\">hasProp</a> and <a href=\"#!/api/Ext.layout.ContextItem-method-hasDomProp\" rel=\"Ext.layout.ContextItem-method-hasDomProp\" class=\"docClass\">hasDomProp</a>.</p>\n\n<p>Because <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> can return <code>undefined</code>, it is often\nthe case that subsequent math will produce NaN's. This is usually not a problem as the\nNaN's simply propagate along and result in final results that are NaN. Both <code>undefined</code>\nand NaN are ignored by <a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">Ext.layout.ContextItem.setProp</a>, so it is often not necessary\nto even know that this is happening. It does become important for determining if a layout\nis not done or if it might lead to publishing an incorrect (but not NaN or <code>undefined</code>)\nvalue.</p>\n\n<p><strong>RULE 3</strong>: If a layout has not calculated all the values it is required to calculate, it\nmust set <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> to <code>false</code> before returning from\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>. This value is always <code>true</code> on entry because\nit is simpler to detect the incomplete state rather than the complete state (especially up\nand down a class hierarchy).</p>\n\n<p><strong>RULE 4</strong>: A layout must never publish an incomplete (wrong) result. Doing so would cause\ndependent layouts to run their calculations on those wrong values, producing more wrong\nvalues and some layouts may even incorrectly flag themselves as <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a>\nbefore the correct values are determined and republished. Doing this will poison the\ncalculations.</p>\n\n<p><strong>RULE 5</strong>: Each value should only be published by one layout. If multiple layouts attempt\nto publish the same values, it would be nearly impossible to avoid breaking <strong>RULE 4</strong>. To\nhelp detect this problem, the layout diagnostics will trap on an attempt to set a value\nfrom different layouts.</p>\n\n<p>Complex layouts can produce many results as part of their calculations. These values are\nimportant for other layouts to proceed and need to be published by the earliest possible\ncall to <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">Ext.layout.Layout.calculate</a> to avoid unnecessary cycles and poor performance. It is\nalso possible, however, for some results to be related in a way such that publishing them\nmay be an all-or-none proposition (typically to avoid breaking <em>RULE 4</em>).</p>\n\n<p><strong>RULE 6</strong>: Publish results as soon as they are known to be correct rather than wait for\nall values to be calculated. Waiting for everything to be complete can lead to deadlock.\nThe key here is not to forget <strong>RULE 4</strong> in the process.</p>\n\n<p>Some layouts depend on certain critical values as part of their calculations. For example,\nHBox depends on width and cannot do anything until the width is known. In these cases, it\nis best to use <a href=\"#!/api/Ext.layout.ContextItem-method-block\" rel=\"Ext.layout.ContextItem-method-block\" class=\"docClass\">block</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a> and thereby avoid processing the layout\nuntil the needed value is available.</p>\n\n<p><strong>RULE 7</strong>: Use <a href=\"#!/api/Ext.layout.ContextItem-method-block\" rel=\"Ext.layout.ContextItem-method-block\" class=\"docClass\">block</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a> when values are required to make progress.\nThis will mimize wasted recalculations.</p>\n\n<p><strong>RULE 8</strong>: Blocks should only be used when no forward progress can be made. If even one\nvalue could still be calculated, a block could result in a deadlock.</p>\n\n<p>Historically, layouts have been invoked directly by component code, sometimes in places\nlike an <code>afterLayout</code> method for a child component. With the flexibility now available\nto solve complex, iterative issues, such things should be done in a responsible layout\n(be it component or container).</p>\n\n<p><strong>RULE 9</strong>: Use layouts to solve layout issues and don't wait for the layout to finish to\nperform further layouts. This is especially important now that layouts process entire\ncomponent trees and not each layout in isolation.</p>\n\n<h1>Sequence Diagram</h1>\n\n<p>The simplest sequence diagram for a layout run looks roughly like this:</p>\n\n<pre><code>  Context         Layout 1     Item 1     Layout 2     Item 2\n     |               |           |           |           |\n----&gt;X--------------&gt;X           |           |           |\nrun  X---------------|-----------|----------&gt;X           |\n     X beginLayout   |           |           |           |\n     X               |           |           |           |\n   A X--------------&gt;X           |           |           |\n     X  calculate    X----------&gt;X           |           |\n     X             C X  getProp  |           |           |\n   B X               X----------&gt;X           |           |\n     X               |  setProp  |           |           |\n     X               |           |           |           |\n   D X---------------|-----------|----------&gt;X           |\n     X  calculate    |           |           X----------&gt;X\n     X               |           |           |  setProp  |\n   E X               |           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X completeLayout|           |         F |           |\n     X               |           |           |           |\n   G X               |           |           |           |\n   H X--------------&gt;X           |           |           |\n     X  calculate    X----------&gt;X           |           |\n     X             I X  getProp  |           |           |\n     X               X----------&gt;X           |           |\n     X               |  setProp  |           |           |\n   J X--------------&gt;X           |           |           |\n     X completeLayout|           |           |           |\n     X               |           |           |           |\n   K X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X finalizeLayout|           |           |           |\n     X               |           |           |           |\n   L X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X finishedLayout|           |           |           |\n     X               |           |           |           |\n   M X--------------&gt;X           |           |           |\n     X---------------|-----------|----------&gt;X           |\n     X notifyOwner   |           |           |           |\n   N |               |           |           |           |\n     -               -           -           -           -\n</code></pre>\n\n<p>Notes:</p>\n\n<p><strong>A.</strong> This is a call from the <a href=\"#!/api/Ext.layout.Context-method-run\" rel=\"Ext.layout.Context-method-run\" class=\"docClass\">run</a> method to the <a href=\"#!/api/Ext.layout.Context-method-runCycle\" rel=\"Ext.layout.Context-method-runCycle\" class=\"docClass\">runCycle</a> method.\nEach layout in the queue will have its <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>\nmethod called.</p>\n\n<p><strong>B.</strong> After each <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> method is called the\n<a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> flag is checked to see if the Layout has completed.\nIf it has completed and that layout object implements a\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> method, this layout is queued to\nreceive its call. Otherwise, the layout will be queued again unless there are blocks or\ntriggers that govern its requeueing.</p>\n\n<p><strong>C.</strong> The call to <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a> is made to the Item\nand that will be tracked as a trigger (keyed by the name of the property being requested).\nChanges to this property will cause this layout to be requeued. The call to\n<a href=\"#!/api/Ext.layout.ContextItem-method-setProp\" rel=\"Ext.layout.ContextItem-method-setProp\" class=\"docClass\">setProp</a> will place a value in the item and not\ndirectly into the DOM.</p>\n\n<p><strong>D.</strong> Call the other layouts now in the first cycle (repeat <strong>B</strong> and <strong>C</strong> for each\nlayout).</p>\n\n<p><strong>E.</strong> After completing a cycle, if progress was made (new properties were written to\nthe context) and if the <a href=\"#!/api/Ext.layout.Context-property-layoutQueue\" rel=\"Ext.layout.Context-property-layoutQueue\" class=\"docClass\">layoutQueue</a> is not empty, the next cycle is run. If no\nprogress was made or no layouts are ready to run, all buffered values are written to\nthe DOM (a flush).</p>\n\n<p><strong>F.</strong> After flushing, any layouts that were marked as <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a>\nthat also have a <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> method are called.\nThis can cause them to become no longer done (see <a href=\"#!/api/Ext.layout.Context-method-invalidate\" rel=\"Ext.layout.Context-method-invalidate\" class=\"docClass\">invalidate</a>). As with\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a>, this is considered a \"read phase\" and\ndirect DOM writes should be avoided.</p>\n\n<p><strong>G.</strong> Flushing and calling any pending <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a>\nmethods will likely trigger layouts that called <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>\nand unblock layouts that have called <a href=\"#!/api/Ext.layout.ContextItem-method-domBlock\" rel=\"Ext.layout.ContextItem-method-domBlock\" class=\"docClass\">domBlock</a>.\nThese variants are used when a layout needs the value to be correct in the DOM and not\nsimply known. If this does not cause at least one layout to enter the queue, we have a\nlayout FAILURE. Otherwise, we continue with the next cycle.</p>\n\n<p><strong>H.</strong> Call <a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> on any layouts in the queue\nat the start of this cycle. Just a repeat of <strong>B</strong> through <strong>G</strong>.</p>\n\n<p><strong>I.</strong> Once the layout has calculated all that it is resposible for, it can leave itself\nin the <a href=\"#!/api/Ext.layout.Layout-property-done\" rel=\"Ext.layout.Layout-property-done\" class=\"docClass\">done</a> state. This is the value on entry to\n<a href=\"#!/api/Ext.layout.Layout-method-calculate\" rel=\"Ext.layout.Layout-method-calculate\" class=\"docClass\">calculate</a> and must be cleared in that call if the\nlayout has more work to do.</p>\n\n<p><strong>J.</strong> Now that all layouts are done, flush any DOM values and\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> calls. This can again cause\nlayouts to become not done, and so we will be back on another cycle if that happens.</p>\n\n<p><strong>K.</strong> After all layouts are done, call the <a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a>\nmethod on any layouts that have one. As with <a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a>,\nthis can cause layouts to become no longer done. This is less desirable than using\n<a href=\"#!/api/Ext.layout.Layout-method-completeLayout\" rel=\"Ext.layout.Layout-method-completeLayout\" class=\"docClass\">completeLayout</a> because it will cause all\n<a href=\"#!/api/Ext.layout.Layout-method-finalizeLayout\" rel=\"Ext.layout.Layout-method-finalizeLayout\" class=\"docClass\">finalizeLayout</a> methods to be called again\nwhen we think things are all wrapped up.</p>\n\n<p><strong>L.</strong> After finishing the last iteration, layouts that have a\n<a href=\"#!/api/Ext.layout.Layout-method-finishedLayout\" rel=\"Ext.layout.Layout-method-finishedLayout\" class=\"docClass\">finishedLayout</a> method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.</p>\n\n<p><strong>M.</strong> After calling finahedLayout, layouts that have a\n<a href=\"#!/api/Ext.layout.Layout-method-notifyOwner\" rel=\"Ext.layout.Layout-method-notifyOwner\" class=\"docClass\">notifyOwner</a> method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.</p>\n\n<p><strong>N.</strong> One last flush to make sure everything has been written to the DOM.</p>\n\n<h1>Inter-Layout Collaboration</h1>\n\n<p>Many layout problems require collaboration between multiple layouts. In some cases, this\nis as simple as a component's container layout providing results used by its component\nlayout or vise-versa. A slightly more distant collaboration occurs in a box layout when\nstretchmax is used: the child item's component layout provides results that are consumed\nby the ownerCt's box layout to determine the size of the children.</p>\n\n<p>The various forms of interdependence between a container and its children are described by\neach components' <a href=\"#!/api/Ext.Component-method-getSizeModel\" rel=\"Ext.Component-method-getSizeModel\" class=\"docClass\">size model</a>.</p>\n\n<p>To facilitate this collaboration, the following pairs of properties are published to the\ncomponent's <a href=\"#!/api/Ext.layout.ContextItem\" rel=\"Ext.layout.ContextItem\" class=\"docClass\">ContextItem</a>:</p>\n\n<ul>\n<li>width/height: These hold the final size of the component. The layout indicated by the\n<a href=\"#!/api/Ext.Component-method-getSizeModel\" rel=\"Ext.Component-method-getSizeModel\" class=\"docClass\">size model</a> is responsible for setting these.</li>\n<li>contentWidth/contentHeight: These hold size information published by the container\nlayout or from DOM measurement. These describe the content only. These values are\nused by the component layout to determine the outer width/height when that component\nis <a href=\"#!/api/Ext.Component-cfg-shrinkWrap\" rel=\"Ext.Component-cfg-shrinkWrap\" class=\"docClass\">shrink-wrapped</a>. They are also used to\ndetermine overflow. All container layouts must publish these values for dimensions\nthat are shrink-wrapped. If a component has raw content (not container items), the\ncomponentLayout must publish these values instead.</li>\n</ul>\n\n"},"ContextItem":{"!doc":"<p>This class manages state information for a component or element during a layout.</p>\n\n<h1>Blocks</h1>\n\n<p>A \"block\" is a required value that is preventing further calculation. When a layout has\nencountered a situation where it cannot possibly calculate results, it can associate\nitself with the context item and missing property so that it will not be rescheduled\nuntil that property is set.</p>\n\n<p>Blocks are a one-shot registration. Once the property changes, the block is removed.</p>\n\n<p>Be careful with blocks. If <em>any</em> further calculations can be made, a block is not the\nright choice.</p>\n\n<h1>Triggers</h1>\n\n<p>Whenever any call to <a href=\"#!/api/Ext.layout.ContextItem-method-getProp\" rel=\"Ext.layout.ContextItem-method-getProp\" class=\"docClass\">getProp</a>, <a href=\"#!/api/Ext.layout.ContextItem-method-getDomProp\" rel=\"Ext.layout.ContextItem-method-getDomProp\" class=\"docClass\">getDomProp</a>, <a href=\"#!/api/Ext.layout.ContextItem-method-hasProp\" rel=\"Ext.layout.ContextItem-method-hasProp\" class=\"docClass\">hasProp</a> or\n<a href=\"#!/api/Ext.layout.ContextItem-method-hasDomProp\" rel=\"Ext.layout.ContextItem-method-hasDomProp\" class=\"docClass\">hasDomProp</a> is made, the current layout is automatically registered as being\ndependent on that property in the appropriate state. Any changes to the property will\ntrigger the layout and it will be queued in the <a href=\"#!/api/Ext.layout.Context\" rel=\"Ext.layout.Context\" class=\"docClass\">Ext.layout.Context</a>.</p>\n\n<p>Triggers, once added, remain for the entire layout. Any changes to the property will\nreschedule all unfinished layouts in their trigger set.</p>\n"},"SizeModel":{"!doc":"<p>This class describes a size determination strategy or algorithm used by the layout\nsystem. There are special instances of this class stored as static properties to\navoid needless object instantiation. These instances should be treated as readonly.</p>\n\n<ul>\n<li><code>calculated</code></li>\n<li><code>configured</code></li>\n<li><code>constrainedMax</code></li>\n<li><code>constrainedMin</code></li>\n<li><code>natural</code></li>\n<li><code>shrinkWrap</code></li>\n<li><code>calculatedFromConfigured</code></li>\n<li><code>calculatedFromNatural</code></li>\n<li><code>calculatedFromShrinkWrap</code></li>\n</ul>\n\n\n<p>Using one of these instances is simply:</p>\n\n<pre><code>  var calculated = <a href=\"#!/api/Ext.layout.SizeModel-property-calculated\" rel=\"Ext.layout.SizeModel-property-calculated\" class=\"docClass\">Ext.layout.SizeModel.calculated</a>;\n</code></pre>\n"},"SizePolicy":{"!doc":"<p>This class describes how a layout will interact with a component it manages.</p>\n\n<p>There are special instances of this class stored as static properties to avoid object\ninstantiation. All instances of this class should be treated as readonly objects.</p>\n"}},"plugin":{"Abstract":{"!doc":"<p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>\n\n<p>This class defines the essential API of plugins as used by Components by defining the following methods:</p>\n\n<ul>\n<li><p><code>init</code> : The plugin initialization method which the owning Component calls at Component initialization time.</p>\n\n<p>The Component passes itself as the sole parameter.</p>\n\n<p>Subclasses should set up bidirectional links between the plugin and its client Component here.</p></li>\n<li><p><code>destroy</code> : The plugin cleanup method which the owning Component calls at Component destruction time.</p>\n\n<p>Use this method to break links between the plugin and the Component and to free any allocated resources.</p></li>\n<li><p><code>enable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>false</code></p></li>\n<li><p><code>disable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>true</code></p></li>\n</ul>\n\n"},"Manager":{"!doc":"<p>Creates plugin instances.</p>\n\n<p>A plugin may be specified simply as a <em>config object</em> as long as the correct <code>ptype</code> is specified:</p>\n\n<pre><code>{\n    ptype: 'gridviewdragdrop',\n    dragText: 'Drag and drop to reorganize'\n}\n</code></pre>\n\n<p>Or just use the ptype on its own:</p>\n\n<pre><code>'gridviewdragdrop'\n</code></pre>\n\n<p>Alternatively you can instantiate the plugin with Ext.create:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.grid.plugin.DragDrop\" rel=\"Ext.grid.plugin.DragDrop\" class=\"docClass\">Ext.grid.plugin.DragDrop</a>', {\n    dragText: 'Drag and drop to reorganize'\n})\n</code></pre>\n"},"Responsive":{"!doc":"<p>This plugin can be added to component instances to process a <code>responsiveConfig</code>. For\nexample:</p>\n\n<pre><code> Ext.create({\n     xtype: 'viewport',\n     layout: 'border',\n\n     items: [{\n         title: 'Some Title',\n         plugins: 'responsive',\n\n         responsiveConfig: {\n             'width &lt; 800': {\n                 region: 'north'\n             },\n\n             'width &gt;= 800': {\n                 region: 'west'\n             }\n         }\n     }]\n });\n</code></pre>\n\n<p>For details see <code>responsiveConfig</code>.</p>\n"},"Viewport":{"!doc":"<p>This plugin can be applied to any <code>Component</code> (although almost always to a <code>Container</code>)\nto make it fill the browser viewport. This plugin is used internally by the more familiar\n<code><a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Ext.container.Viewport</a></code> class.</p>\n\n<p>The <code>Viewport</code> container is commonly used but it can be an issue if you need to fill the\nviewport with a container that derives from another class (e.g., <code><a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a></code>). Prior\nto this plugin, you would have to do this:</p>\n\n<pre><code> Ext.create('<a href=\"#!/api/Ext.container.Viewport\" rel=\"Ext.container.Viewport\" class=\"docClass\">Ext.container.Viewport</a>', {\n     layout: 'fit', // full the viewport with the tab panel\n\n     items: [{\n         xtype: 'tabpanel',\n         items: [{\n             ...\n         }]\n     }]\n });\n</code></pre>\n\n<p>With this plugin you can create the <code>tabpanel</code> as the viewport:</p>\n\n<pre><code> Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n     plugins: 'viewport',\n\n     items: [{\n         ...\n     }]\n });\n</code></pre>\n\n<p>More importantly perhaps is that as a plugin, the view class can be reused in other\ncontexts such as the content of a <code><a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">window</a></code>.</p>\n\n<p>The Viewport renders itself to the document body, and automatically sizes itself to the size of\nthe browser viewport and manages window resizing. There may only be one Viewport created\nin a page.</p>\n\n<h2>Responsive Design</h2>\n\n<p>This plugin enables Ext.mixin.Responsive.responsiveConfig for the target component.</p>\n"}},"view":{"Table":{"!doc":"<p>This class encapsulates the user interface for a tabular data set.\nIt acts as a centralized manager for controlling the various interface\nelements of the view. This includes handling events, such as row and cell\nlevel based DOM events. It also reacts to events from the underlying <a href=\"#!/api/Ext.selection.Model\" rel=\"Ext.selection.Model\" class=\"docClass\">Ext.selection.Model</a>\nto provide visual feedback to the user.</p>\n\n<p>This class does not provide ways to manipulate the underlying data of the configured\nExt.data.Store.</p>\n\n<p>This is the base class for both <a href=\"#!/api/Ext.grid.View\" rel=\"Ext.grid.View\" class=\"docClass\">Ext.grid.View</a> and <a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">Ext.tree.View</a> and is not\nto be used directly.</p>\n"},"AbstractView":{"!doc":"<p>This is an abstract superclass and should not be used directly. Please see <a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>.</p>\n"},"View":{"!doc":"<p>A mechanism for displaying data using custom layout templates and formatting.</p>\n\n<p>The View uses an Ext.XTemplate as its internal templating mechanism, and is bound to an\nExt.data.Store so that as the data in the store changes the view is automatically updated\nto reflect the changes. The view also provides built-in behavior for many common events that can\noccur for its contained items including click, doubleclick, mouseover, mouseout, etc. as well as a\nbuilt-in selection model. <strong>In order to use these features, an <a href=\"#!/api/Ext.view.View-cfg-itemSelector\" rel=\"Ext.view.View-cfg-itemSelector\" class=\"docClass\">itemSelector</a> config must\nbe provided for the View to determine what nodes it will be working with.</strong></p>\n\n<p>The example below binds a View to a Ext.data.Store and renders it into an <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>.</p>\n\n<pre class='inline-example '><code>Ext.define('Image', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name:'src', type:'string' },\n        { name:'caption', type:'string' }\n    ]\n});\n\nExt.create('Ext.data.Store', {\n    id:'imagesStore',\n    model: 'Image',\n    data: [\n        { src:'http://www.sencha.com/img/20110215-feat-drawing.png', caption:'Drawing &amp; Charts' },\n        { src:'http://www.sencha.com/img/20110215-feat-data.png', caption:'Advanced Data' },\n        { src:'http://www.sencha.com/img/20110215-feat-html5.png', caption:'Overhauled Theme' },\n        { src:'http://www.sencha.com/img/20110215-feat-perf.png', caption:'Performance Tuned' }\n    ]\n});\n\nvar imageTpl = new Ext.XTemplate(\n    '&lt;tpl for=\".\"&gt;',\n        '&lt;div style=\"margin-bottom: 10px;\" class=\"thumb-wrap\"&gt;',\n          '&lt;img src=\"{src}\" /&gt;',\n          '&lt;br/&gt;&lt;span&gt;{caption}&lt;/span&gt;',\n        '&lt;/div&gt;',\n    '&lt;/tpl&gt;'\n);\n\nExt.create('<a href=\"#!/api/Ext.view.View\" rel=\"Ext.view.View\" class=\"docClass\">Ext.view.View</a>', {\n    store: Ext.data.StoreManager.lookup('imagesStore'),\n    tpl: imageTpl,\n    itemSelector: 'div.thumb-wrap',\n    emptyText: 'No images available',\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"DropZone":{"!doc":"\n"},"BoundList":{"!doc":"<p>An internally used DataView for <a href=\"#!/api/Ext.form.field.ComboBox\" rel=\"Ext.form.field.ComboBox\" class=\"docClass\">ComboBox</a>.</p>\n"},"DragZone":{"!doc":"\n"},"BoundListKeyNav":{"!doc":"<p>A specialized <a href=\"#!/api/Ext.util.KeyNav\" rel=\"Ext.util.KeyNav\" class=\"docClass\">Ext.util.KeyNav</a> implementation for navigating a <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">Ext.view.BoundList</a> using\nthe keyboard. The up, down, pageup, pagedown, home, and end keys move the active highlight\nthrough the list. The enter key invokes the selection model's select action using the highlighted item.</p>\n"},"MultiSelector":{"!doc":"<p>This component provides a grid holding selected items from a second store of potential\nmembers. The <code>store</code> of this component represents the selected items. The \"search store\"\nrepresents the potentially selected items.</p>\n\n<p>While this component is a grid and so you can configure <code>columns</code>, it is best to leave\nthat to this class in its <code>initComponent</code> method. That allows this class to create the\nextra column that allows the user to remove rows. Instead use <code><a href=\"#!/api/Ext.view.MultiSelector-cfg-fieldName\" rel=\"Ext.view.MultiSelector-cfg-fieldName\" class=\"docClass\">fieldName</a></code> and\n<code><a href=\"#!/api/Ext.view.MultiSelector-cfg-fieldTitle\" rel=\"Ext.view.MultiSelector-cfg-fieldTitle\" class=\"docClass\">fieldTitle</a></code> to configure the primary column's <code>dataIndex</code> and column <code>text</code>,\nrespectively.</p>\n"},"MultiSelectorSearch":{"!doc":"<p>This component provides a grid holding selected items from a second store of potential\nmembers. The <code>store</code> of this component represents the selected items. The <code>searchStore</code>\nrepresents the potentially selected items.</p>\n\n<p>The default view defined by this class is intended to be easily replaced by deriving a\nnew class and overriding the appropriate methods. For example, the following is a very\ndifferent view that uses a date range and a data view:</p>\n\n<pre><code> Ext.define('App.view.DateBoundSearch', {\n     extend: '<a href=\"#!/api/Ext.view.MultiSelectorSearch\" rel=\"Ext.view.MultiSelectorSearch\" class=\"docClass\">Ext.view.MultiSelectorSearch</a>',\n\n     makeDockedItems: function () {\n         return {\n             xtype: 'toolbar',\n             items: [{\n                 xtype: 'datefield',\n                 emptyText: 'Start date...',\n                 flex: 1\n             },{\n                 xtype: 'datefield',\n                 emptyText: 'End date...',\n                 flex: 1\n             }]\n         };\n     },\n\n     makeItems: function () {\n         return [{\n             xtype: 'dataview',\n             itemSelector: '.search-item',\n             selType: 'rowselection',\n             store: this.store,\n             autoScroll: true,\n             tpl:\n                 '&lt;tpl for=\".\"&gt;' +\n                     '&lt;div class=\"search-item\"&gt;' +\n                         '&lt;img src=\"{icon}\"&gt;' +\n                         '&lt;div&gt;{name}&lt;/div&gt;' +\n                     '&lt;/div&gt;' +\n                 '&lt;/tpl&gt;'\n         }];\n     },\n\n     getSearchStore: function () {\n         return this.items.getAt(0).getStore();\n     },\n\n     selectRecords: function (records) {\n         var view = this.items.getAt(0);\n         return view.getSelectionModel().select(records);\n     }\n });\n</code></pre>\n\n<p><strong>Important</strong>: This class assumes there are two components with specific <code>reference</code>\nnames assigned to them. These are <code>\"searchField\"</code> and <code>\"searchGrid\"</code>. These components\nare produced by the <code>makeDockedItems</code> and <code>makeItems</code> method, respectively. When\noverriding these it is important to remember to place these <code>reference</code> values on the\nappropriate components.</p>\n"},"NodeCache":{"!doc":"<p>A cache of View elements keyed using the index of the associated record in the store.</p>\n\n<p>This implements the methods of {Ext.dom.CompositeElement} which are used by <a href=\"#!/api/Ext.view.AbstractView\" rel=\"Ext.view.AbstractView\" class=\"docClass\">Ext.view.AbstractView</a>\nto privide a map of record nodes and methods to manipulate the nodes.</p>\n"},"TableLayout":{"!doc":"<p>Component layout for <a href=\"#!/api/Ext.view.Table\" rel=\"Ext.view.Table\" class=\"docClass\">Ext.view.Table</a></p>\n"}},"Img":{"!doc":"<p>Simple helper class for easily creating image components. This renders an image tag to\nthe DOM with the configured src.</p>\n\n<p><p><img src=\"\" alt=\"Ext.Img component\" width=\"\" height=\"\"></p></p>\n\n<h2>Example usage:</h2>\n\n<pre><code>var changingImage = Ext.create('<a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">Ext.Img</a>', {\n    src: 'http://www.sencha.com/img/20110215-feat-html5.png',\n    renderTo: Ext.getBody()\n});\n\n// change the src of the image programmatically\nchangingImage.setSrc('http://www.sencha.com/img/20110215-feat-perf.png');\n</code></pre>\n\n<p>By default, only an img element is rendered and that is this component's primary\n<a href=\"#!/api/Ext.Component-method-getEl\" rel=\"Ext.Component-method-getEl\" class=\"docClass\">element</a>. If the <a href=\"#!/api/Ext.Component-cfg-autoEl\" rel=\"Ext.Component-cfg-autoEl\" class=\"docClass\">Ext.Component.autoEl</a> property\nis other than 'img' (the default), the a child img element will be added to the primary\nelement. This can be used to create a wrapper element around the img.</p>\n\n<h2>Wrapping the img in a div:</h2>\n\n<pre><code>var wrappedImage = Ext.create('<a href=\"#!/api/Ext.Img\" rel=\"Ext.Img\" class=\"docClass\">Ext.Img</a>', {\n    src: 'http://www.sencha.com/img/20110215-feat-html5.png',\n    autoEl: 'div', // wrap in a div\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"!doc":"\n","resizer":{"Splitter":{"!doc":"<p>This class functions <strong>between siblings of a <a href=\"#!/api/Ext.layout.container.VBox\" rel=\"Ext.layout.container.VBox\" class=\"docClass\">VBox</a> or <a href=\"#!/api/Ext.layout.container.HBox\" rel=\"Ext.layout.container.HBox\" class=\"docClass\">HBox</a>\nlayout</strong> to resize both immediate siblings.</p>\n\n<p>A Splitter will preserve the flex ratio of any flexed siblings it is required to resize. It does this by setting the <code>flex</code> property of <em>all</em> flexed siblings\nto equal their pixel size. The actual numerical <code>flex</code> property in the Components will change, but the <strong>ratio</strong> to the total flex value will be preserved.</p>\n\n<p>A Splitter may be configured to show a centered mini-collapse tool orientated to collapse the <a href=\"#!/api/Ext.resizer.Splitter-cfg-collapseTarget\" rel=\"Ext.resizer.Splitter-cfg-collapseTarget\" class=\"docClass\">collapseTarget</a>.\nThe Splitter will then call that sibling Panel's <a href=\"#!/api/Ext.panel.Panel-method-collapse\" rel=\"Ext.panel.Panel-method-collapse\" class=\"docClass\">collapse</a> or <a href=\"#!/api/Ext.panel.Panel-method-expand\" rel=\"Ext.panel.Panel-method-expand\" class=\"docClass\">expand</a> method\nto perform the appropriate operation (depending on the sibling collapse state). To create the mini-collapse tool but take care\nof collapsing yourself, configure the splitter with <code><a href=\"#!/api/Ext.resizer.Splitter-cfg-performCollapse\" rel=\"Ext.resizer.Splitter-cfg-performCollapse\" class=\"docClass\">performCollapse</a>: false</code>.</p>\n"},"SplitterTracker":{"!doc":"<p>Private utility class for Ext.Splitter.</p>\n"},"BorderSplitter":{"!doc":"<p>Private utility class for <a href=\"#!/api/Ext.layout.container.Border\" rel=\"Ext.layout.container.Border\" class=\"docClass\">Ext.layout.container.Border</a>.</p>\n"},"BorderSplitterTracker":{"!doc":"<p>Private utility class for Ext.BorderSplitter.</p>\n"},"Handle":{"!doc":"<p>Provides a handle for 9-point resizing of Elements or Components.</p>\n"},"Resizer":{"!doc":"<p>Applies drag handles to an element or component to make it resizable. The drag handles are inserted into the element\n(or component's element) and positioned absolute.</p>\n\n<p>Textarea and img elements will be wrapped with an additional div because these elements do not support child nodes.\nThe original element can be accessed through the originalTarget property.</p>\n\n<p>Here is the list of valid resize handles:</p>\n\n<pre><code>Value   Description\n------  -------------------\n 'n'     north\n 's'     south\n 'e'     east\n 'w'     west\n 'nw'    northwest\n 'sw'    southwest\n 'se'    southeast\n 'ne'    northeast\n 'all'   all\n</code></pre>\n\n<p><p><img src=\"\" alt=\"Ext.resizer.Resizer component\" width=\"\" height=\"\"></p></p>\n\n<p>Here's an example showing the creation of a typical Resizer:</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Ext.resizer.Resizer\" rel=\"Ext.resizer.Resizer\" class=\"docClass\">Ext.resizer.Resizer</a>', {\n    target: 'elToResize',\n    handles: 'all',\n    minWidth: 200,\n    minHeight: 100,\n    maxWidth: 500,\n    maxHeight: 400,\n    pinned: true\n});\n</code></pre>\n"},"ResizeTracker":{"!doc":"<p>Private utility class for <a href=\"#!/api/Ext.resizer.Resizer\" rel=\"Ext.resizer.Resizer\" class=\"docClass\">Ext.resizer.Resizer</a>.</p>\n"}},"LoadMask":{"!doc":"<p>A modal, floating Component which may be shown above a specified <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> while loading data.\nWhen shown, the configured owning Component will be covered with a modality mask, and the LoadMask's <a href=\"#!/api/Ext.LoadMask-cfg-msg\" rel=\"Ext.LoadMask-cfg-msg\" class=\"docClass\">msg</a> will be\ndisplayed centered, accompanied by a spinner image.</p>\n\n<p>If the <a href=\"#!/api/Ext.LoadMask-cfg-store\" rel=\"Ext.LoadMask-cfg-store\" class=\"docClass\">store</a> config option is specified, the masking will be automatically shown and then hidden synchronized with\nthe Store's loading process.</p>\n\n<p>Because this is a floating Component, its z-index will be managed by the global <a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">ZIndexManager</a>\nobject, and upon show, it will place itsef at the top of the hierarchy.</p>\n\n<p>Example usage:</p>\n\n<pre class='inline-example '><code>var myPanel = new <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>({\n    renderTo : document.body,\n    height   : 100,\n    width    : 200,\n    title    : 'Foo'\n});\n\nvar myMask = new <a href=\"#!/api/Ext.LoadMask\" rel=\"Ext.LoadMask\" class=\"docClass\">Ext.LoadMask</a>({\n    msg    : 'Please wait...',\n    target : myPanel\n});\n\nmyMask.show();\n</code></pre>\n"},"menu":{"CheckItem":{"!doc":"<p>A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 110,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        xtype: 'menucheckitem',\n        text: 'select all'\n    },{\n        xtype: 'menucheckitem',\n        text: 'select specific'\n    },{\n        iconCls: 'add16',\n        text: 'icon item'\n    },{\n        text: 'regular item'\n    }]\n});\n</code></pre>\n"},"Item":{"!doc":"<p>A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        text: 'text item'\n    },{\n        text: 'plain item',\n        plain: true\n    }]\n});\n</code></pre>\n"},"ColorPicker":{"!doc":"<p>A menu containing a <a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a> Component.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Although not listed here, the <strong>constructor</strong> for this class accepts all of the\nconfiguration options of <a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a>.</li>\n<li>If subclassing ColorMenu, any configuration options for the ColorPicker must be\napplied to the <strong>initialConfig</strong> property of the ColorMenu. Applying\n<a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">ColorPicker</a> configuration settings to <code>this</code> will <strong>not</strong>\naffect the ColorPicker's configuration.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>var colorPicker = Ext.create('<a href=\"#!/api/Ext.menu.ColorPicker\" rel=\"Ext.menu.ColorPicker\" class=\"docClass\">Ext.menu.ColorPicker</a>', {\n    value: '000000'\n});\n\nExt.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    items: [{\n        text: 'Choose a color',\n        menu: colorPicker\n    },{\n        iconCls: 'add16',\n        text: 'Icon item'\n    },{\n        text: 'Regular item'\n    }]\n}).showAt([5, 5]);\n</code></pre>\n"},"Menu":{"!doc":"<p>A menu object. This is the container to which you may add <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a>.</p>\n\n<p>Menus may contain either <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a>, or general <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Components</a>.\nMenus may also contain <a href=\"#!/api/Ext.panel.Panel-cfg-dockedItems\" rel=\"Ext.panel.Panel-cfg-dockedItems\" class=\"docClass\">docked items</a> because it extends <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>.</p>\n\n<p>By default, non <a href=\"#!/api/Ext.menu.Item\" rel=\"Ext.menu.Item\" class=\"docClass\">menu items</a> are indented so that they line up with the text of menu items. clearing\nthe icon column. To make a contained general <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Component</a> left aligned configure the child\nComponent with `indent: false.</p>\n\n<p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with <code><a href=\"#!/api/Ext.menu.Menu-cfg-floating\" rel=\"Ext.menu.Menu-cfg-floating\" class=\"docClass\">floating</a>: false</code>,\na Menu may be used as a child of a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    margin: '0 0 10 0',\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'regular item 1'\n    },{\n        text: 'regular item 2'\n    },{\n        text: 'regular item 3'\n    }]\n});\n\nExt.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    plain: true,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'plain item 1'\n    },{\n        text: 'plain item 2'\n    },{\n        text: 'plain item 3'\n    }]\n});\n</code></pre>\n"},"DatePicker":{"!doc":"<p>A menu containing an <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Ext.picker.Date</a> Component.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Although not listed here, the <strong>constructor</strong> for this class accepts all of the\nconfiguration options of <strong><a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Ext.picker.Date</a></strong>.</li>\n<li>If subclassing DateMenu, any configuration options for the DatePicker must be applied\nto the <strong>initialConfig</strong> property of the DateMenu. Applying <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Date Picker</a>\nconfiguration settings to <strong>this</strong> will <strong>not</strong> affect the Date Picker's configuration.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>var dateMenu = Ext.create('<a href=\"#!/api/Ext.menu.DatePicker\" rel=\"Ext.menu.DatePicker\" class=\"docClass\">Ext.menu.DatePicker</a>', {\n    handler: function(dp, date){\n        <a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Date Selected', 'You selected ' + Ext.Date.format(date, 'M j, Y'));\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    items: [{\n        text: 'Choose a date',\n        menu: dateMenu\n    },{\n        iconCls: 'add16',\n        text: 'Icon item'\n    },{\n        text: 'Regular item'\n    }]\n}).showAt([5, 5]);\n</code></pre>\n"},"KeyNav":{"!doc":"\n"},"Manager":{"!doc":"<p>Provides a common registry of all menus on a page.</p>\n"},"Separator":{"!doc":"<p>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will\nadd one of these by using \"-\" in your call to add() or in your items config rather than creating one directly.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Ext.menu.Menu</a>', {\n    width: 100,\n    height: 100,\n    floating: false,  // usually you want this set to True (default)\n    renderTo: Ext.getBody(),  // usually rendered by it's containing component\n    items: [{\n        text: 'icon item',\n        iconCls: 'add16'\n    },{\n        xtype: 'menuseparator'\n    },{\n       text: 'separator above'\n    },{\n       text: 'regular item'\n    }]\n});\n</code></pre>\n"}},"MessageBox":{"!doc":"<p>Utility class for generating different styles of message boxes.  The singleton instance, <a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.MessageBox</a>\nalias <code><a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.Msg</a></code> can also be used.</p>\n\n<p>Note that a MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt\nbrowser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code\nthat should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function\n(see the <code>function</code> parameter for <a href=\"#!/api/Ext.MessageBox-method-show\" rel=\"Ext.MessageBox-method-show\" class=\"docClass\">show</a> for more details).</p>\n\n<p>Basic alert</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Status', 'Changes saved successfully.');\n</code></pre>\n\n<p>Prompt for user data and process the result using a callback</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-prompt\" rel=\"Ext.MessageBox-method-prompt\" class=\"docClass\">Ext.Msg.prompt</a>('Name', 'Please enter your name:', function(btn, text){\n    if (btn == 'ok'){\n        // process text value and close...\n    }\n});\n</code></pre>\n\n<p>Show a dialog using config options</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-event-show\" rel=\"Ext.MessageBox-event-show\" class=\"docClass\">Ext.Msg.show</a>({\n    title:'Save Changes?',\n    message: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\n    buttons: <a href=\"#!/api/Ext.MessageBox-property-YESNOCANCEL\" rel=\"Ext.MessageBox-property-YESNOCANCEL\" class=\"docClass\">Ext.Msg.YESNOCANCEL</a>,\n    icon: <a href=\"#!/api/Ext.MessageBox-property-QUESTION\" rel=\"Ext.MessageBox-property-QUESTION\" class=\"docClass\">Ext.Msg.QUESTION</a>,\n    fn: function(btn) {\n        if (btn === 'yes') {\n            console.log('Yes pressed');\n        } else if (btn === 'no') {\n            console.log('No pressed');\n        } else {\n            console.log('Cancel pressed');\n        } \n    }\n});\n</code></pre>\n"},"window":{"Window":{"!doc":"<p>A specialized panel intended for use as an application window. Windows are floated, <a href=\"#!/api/Ext.window.Window-cfg-resizable\" rel=\"Ext.window.Window-cfg-resizable\" class=\"docClass\">resizable</a>, and\n<a href=\"#!/api/Ext.window.Window-cfg-draggable\" rel=\"Ext.window.Window-cfg-draggable\" class=\"docClass\">draggable</a> by default. Windows can be <a href=\"#!/api/Ext.window.Window-cfg-maximizable\" rel=\"Ext.window.Window-cfg-maximizable\" class=\"docClass\">maximized</a> to fill the viewport, restored to\ntheir prior size, and can be <a href=\"#!/api/Ext.window.Window-method-minimize\" rel=\"Ext.window.Window-method-minimize\" class=\"docClass\">minimize</a>d.</p>\n\n<p>Windows can also be linked to a <a href=\"#!/api/Ext.ZIndexManager\" rel=\"Ext.ZIndexManager\" class=\"docClass\">Ext.ZIndexManager</a> or managed by the <a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">Ext.WindowManager</a> to provide\ngrouping, activation, to front, to back and other application-specific behavior.</p>\n\n<p>By default, Windows will be rendered to document.body. To <a href=\"#!/api/Ext.window.Window-cfg-constrain\" rel=\"Ext.window.Window-cfg-constrain\" class=\"docClass\">constrain</a> a Window to another element specify\n<a href=\"#!/api/Ext.Component-cfg-renderTo\" rel=\"Ext.Component-cfg-renderTo\" class=\"docClass\">renderTo</a>.</p>\n\n<p><strong>As with all <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>s, it is important to consider how you want the Window to size\nand arrange any child Components. Choose an appropriate <a href=\"#!/api/Ext.window.Window-cfg-layout\" rel=\"Ext.window.Window-cfg-layout\" class=\"docClass\">layout</a> configuration which lays out child Components\nin the required manner.</strong></p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Ext.window.Window</a>', {\n    title: 'Hello',\n    height: 200,\n    width: 400,\n    layout: 'fit',\n    items: {  // Let's put an empty grid in just to illustrate fit layout\n        xtype: 'grid',\n        border: false,\n        columns: [{header: 'World'}],                 // One header just for show. There's no data,\n        store: Ext.create('Ext.data.ArrayStore', {}) // A dummy empty data store\n    }\n}).show();\n</code></pre>\n"},"MessageBox":{"!doc":"<p>Utility class for generating different styles of message boxes.  The singleton instance, <a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.MessageBox</a>\nalias <code><a href=\"#!/api/Ext.MessageBox\" rel=\"Ext.MessageBox\" class=\"docClass\">Ext.Msg</a></code> can also be used.</p>\n\n<p>Note that a MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt\nbrowser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code\nthat should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function\n(see the <code>function</code> parameter for <a href=\"#!/api/Ext.window.MessageBox-method-show\" rel=\"Ext.window.MessageBox-method-show\" class=\"docClass\">show</a> for more details).</p>\n\n<p>Basic alert</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-alert\" rel=\"Ext.MessageBox-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Status', 'Changes saved successfully.');\n</code></pre>\n\n<p>Prompt for user data and process the result using a callback</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-method-prompt\" rel=\"Ext.MessageBox-method-prompt\" class=\"docClass\">Ext.Msg.prompt</a>('Name', 'Please enter your name:', function(btn, text){\n    if (btn == 'ok'){\n        // process text value and close...\n    }\n});\n</code></pre>\n\n<p>Show a dialog using config options</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.MessageBox-event-show\" rel=\"Ext.MessageBox-event-show\" class=\"docClass\">Ext.Msg.show</a>({\n    title:'Save Changes?',\n    message: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\n    buttons: <a href=\"#!/api/Ext.MessageBox-property-YESNOCANCEL\" rel=\"Ext.MessageBox-property-YESNOCANCEL\" class=\"docClass\">Ext.Msg.YESNOCANCEL</a>,\n    icon: <a href=\"#!/api/Ext.MessageBox-property-QUESTION\" rel=\"Ext.MessageBox-property-QUESTION\" class=\"docClass\">Ext.Msg.QUESTION</a>,\n    fn: function(btn) {\n        if (btn === 'yes') {\n            console.log('Yes pressed');\n        } else if (btn === 'no') {\n            console.log('No pressed');\n        } else {\n            console.log('Cancel pressed');\n        } \n    }\n});\n</code></pre>\n"},"Toast":{"!doc":"<p>This class provides for lightweight, auto-dismissing pop-up notifications called \"toasts\".\nAt the base level, you can display a toast message by calling <code>Ext.toast</code> like so:</p>\n\n<pre><code> Ext.toast('Data saved');\n</code></pre>\n\n<p>This will result in a toast message, which displays in the default location of bottom right in your viewport.</p>\n\n<p>You may expand upon this simple example with the following parameters:</p>\n\n<pre><code> Ext.toast(message, title, align, iconCls);\n</code></pre>\n\n<p>For example, the following toast will appear top-middle in your viewport.  It will display\nthe 'Data Saved' message with a title of 'Title'</p>\n\n<pre><code> Ext.toast('Data Saved', 'Title', 't')\n</code></pre>\n\n<p>It should be noted that the toast's width is determined by the message's width.\nIf you need to set a specific width, or any of the other available configurations for your toast,\nyou can create the toast object as seen below:</p>\n\n<pre><code> Ext.toast({\n     html: 'Data Saved',\n     title: 'My Title',\n     width: 200,\n     align: 't'\n });\n</code></pre>\n\n<p>This component is derived from the excellent work of a Sencha community member, Eirik\nLorentsen.</p>\n"}},"picker":{"Color":{"!doc":"<p>Color picker provides a simple color palette for choosing colors. The picker can be rendered to any container. The\navailable default to a standard 40-color palette; this can be customized with the <a href=\"#!/api/Ext.picker.Color-property-colors\" rel=\"Ext.picker.Color-property-colors\" class=\"docClass\">colors</a> config.</p>\n\n<p>Typically you will need to implement a handler function to be notified when the user chooses a color from the picker;\nyou can register the handler using the <a href=\"#!/api/Ext.picker.Color-event-select\" rel=\"Ext.picker.Color-event-select\" class=\"docClass\">select</a> event, or by implementing the <a href=\"#!/api/Ext.picker.Color-cfg-handler\" rel=\"Ext.picker.Color-cfg-handler\" class=\"docClass\">handler</a> method.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.picker.Color\" rel=\"Ext.picker.Color\" class=\"docClass\">Ext.picker.Color</a>', {\n    value: '993300',  // initial selected color\n    renderTo: Ext.getBody(),\n    listeners: {\n        select: function(picker, selColor) {\n            alert(selColor);\n        }\n    }\n});\n</code></pre>\n"},"Date":{"!doc":"<p>A date picker. This class is used by the <a href=\"#!/api/Ext.form.field.Date\" rel=\"Ext.form.field.Date\" class=\"docClass\">Ext.form.field.Date</a> field to allow browsing and selection of valid\ndates in a popup next to the field, but may also be used with other components.</p>\n\n<p>Typically you will need to implement a handler function to be notified when the user chooses a date from the picker;\nyou can register the handler using the <a href=\"#!/api/Ext.picker.Date-event-select\" rel=\"Ext.picker.Date-event-select\" class=\"docClass\">select</a> event, or by implementing the <a href=\"#!/api/Ext.picker.Date-cfg-handler\" rel=\"Ext.picker.Date-cfg-handler\" class=\"docClass\">handler</a> method.</p>\n\n<p>By default the user will be allowed to pick any date; this can be changed by using the <a href=\"#!/api/Ext.picker.Date-cfg-minDate\" rel=\"Ext.picker.Date-cfg-minDate\" class=\"docClass\">minDate</a>,\n<a href=\"#!/api/Ext.picker.Date-cfg-maxDate\" rel=\"Ext.picker.Date-cfg-maxDate\" class=\"docClass\">maxDate</a>, <a href=\"#!/api/Ext.picker.Date-cfg-disabledDays\" rel=\"Ext.picker.Date-cfg-disabledDays\" class=\"docClass\">disabledDays</a>, <a href=\"#!/api/Ext.picker.Date-cfg-disabledDatesRE\" rel=\"Ext.picker.Date-cfg-disabledDatesRE\" class=\"docClass\">disabledDatesRE</a>, and/or <a href=\"#!/api/Ext.picker.Date-cfg-disabledDates\" rel=\"Ext.picker.Date-cfg-disabledDates\" class=\"docClass\">disabledDates</a> configs.</p>\n\n<p>All the string values documented below may be overridden by including an Ext locale file in your page.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Choose a future date:',\n    width: 200,\n    bodyPadding: 10,\n    renderTo: Ext.getBody(),\n    items: [{\n        xtype: 'datepicker',\n        minDate: new Date(),\n        handler: function(picker, date) {\n            // do something with the selected date\n        }\n    }]\n});\n</code></pre>\n"},"Month":{"!doc":"<p>A month picker component. This class is used by the <a href=\"#!/api/Ext.picker.Date\" rel=\"Ext.picker.Date\" class=\"docClass\">Date picker</a> class\nto allow browsing and selection of year/months combinations.</p>\n"},"Time":{"!doc":"<p>A time picker which provides a list of times from which to choose. This is used by the <a href=\"#!/api/Ext.form.field.Time\" rel=\"Ext.form.field.Time\" class=\"docClass\">Ext.form.field.Time</a>\nclass to allow browsing and selection of valid times, but could also be used with other components.</p>\n\n<p>By default, all times starting at midnight and incrementing every 15 minutes will be presented. This list of\navailable times can be controlled using the <a href=\"#!/api/Ext.picker.Time-cfg-minValue\" rel=\"Ext.picker.Time-cfg-minValue\" class=\"docClass\">minValue</a>, <a href=\"#!/api/Ext.picker.Time-cfg-maxValue\" rel=\"Ext.picker.Time-cfg-maxValue\" class=\"docClass\">maxValue</a>, and <a href=\"#!/api/Ext.picker.Time-cfg-increment\" rel=\"Ext.picker.Time-cfg-increment\" class=\"docClass\">increment</a>\nconfiguration properties. The format of the times presented in the list can be customized with the <a href=\"#!/api/Ext.picker.Time-cfg-format\" rel=\"Ext.picker.Time-cfg-format\" class=\"docClass\">format</a>\nconfig.</p>\n\n<p>To handle when the user selects a time from the list, you can subscribe to the <a href=\"#!/api/Ext.picker.Time-event-selectionchange\" rel=\"Ext.picker.Time-event-selectionchange\" class=\"docClass\">selectionchange</a> event.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.picker.Time\" rel=\"Ext.picker.Time\" class=\"docClass\">Ext.picker.Time</a>', {\n   width: 60,\n   minValue: Ext.Date.parse('04:30:00 AM', 'h:i:s A'),\n   maxValue: Ext.Date.parse('08:00:00 AM', 'h:i:s A'),\n   renderTo: Ext.getBody()\n});\n</code></pre>\n"}},"ProgressBar":{"!doc":"<p>An updateable progress bar component. The progress bar supports two different modes: manual and automatic.</p>\n\n<p>In manual mode, you are responsible for showing, updating (via <a href=\"#!/api/Ext.ProgressBar-method-updateProgress\" rel=\"Ext.ProgressBar-method-updateProgress\" class=\"docClass\">updateProgress</a>) and clearing the progress bar\nas needed from your own code. This method is most appropriate when you want to show progress throughout an operation\nthat has predictable points of interest at which you can update the control.</p>\n\n<p>In automatic mode, you simply call <a href=\"#!/api/Ext.ProgressBar-method-wait\" rel=\"Ext.ProgressBar-method-wait\" class=\"docClass\">wait</a> and let the progress bar run indefinitely, only clearing it once the\noperation is complete. You can optionally have the progress bar wait for a specific amount of time and then clear\nitself. Automatic mode is most appropriate for timed operations or asynchronous operations in which you have no need\nfor indicating intermediate progress.</p>\n\n<pre class='inline-example '><code>var p = Ext.create('<a href=\"#!/api/Ext.ProgressBar\" rel=\"Ext.ProgressBar\" class=\"docClass\">Ext.ProgressBar</a>', {\n   renderTo: Ext.getBody(),\n   width: 300\n});\n\n// Wait for 5 seconds, then update the status el (progress bar will auto-reset)\np.wait({\n    interval: 500, //bar will move fast!\n    duration: 50000,\n    increment: 15,\n    text: 'Updating...',\n    scope: this,\n    fn: function(){\n        p.updateText('Done!');\n    }\n});\n</code></pre>\n"},"ProgressBarWidget":{"!doc":"<p>An updateable progress bar widget.</p>\n\n<p>In manual mode, you are responsible for showing, updating (via <a href=\"#!/api/Ext.ProgressBarWidget-method-setValue\" rel=\"Ext.ProgressBarWidget-method-setValue\" class=\"docClass\">setValue</a>)\nand clearing the progress bar as needed from your own code. This method is most\nappropriate when you want to show progress throughout an operation that has predictable\npoints of interest at which you can update the control.</p>\n"},"scroll":{"Indicator":{"!doc":"<p>Provides a visual indicator of scroll position while scrolling using a touch scroller</p>\n"},"Manager":{"!doc":"<p>Framework-internal class for managing touch scrolling of Components and providing\nscroll indicators while scrolling.</p>\n"}},"selection":{"CellModel":{"!doc":"<p>A selection model for <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">grid panels</a> which allows selection of a single cell at a time.</p>\n\n<p>Implements cell based navigation via keyboard.</p>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.Store', {\n    fields  : ['name', 'email', 'phone'],\n    data    : {\n        items : [\n            { name : 'Lisa',  email : 'lisa@simpsons.com',  phone : '555-111-1224' },\n            { name : 'Bart',  email : 'bart@simpsons.com',  phone : '555-222-1234' },\n            { name : 'Homer', email : 'homer@simpsons.com', phone : '555-222-1244' },\n            { name : 'Marge', email : 'marge@simpsons.com', phone : '555-222-1254' }\n        ]\n    },\n    proxy   : {\n        type   : 'memory',\n        reader : {\n            type : 'json',\n            root : 'items'\n        }\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title    : 'Simpsons',\n    store    : store,\n    width    : 400,\n    renderTo : Ext.getBody(),\n    columns  : [\n        { text : 'Name',  dataIndex : 'name'  },\n        { text : 'Email', dataIndex : 'email', flex : 1 },\n        { text : 'Phone', dataIndex : 'phone' }\n    ],\n    selType: 'cellmodel'\n});\n</code></pre>\n"},"Model":{"!doc":"<p>Tracks what records are currently selected in a databound component.</p>\n\n<p>This is an abstract class and is not meant to be directly used. Databound UI widgets such as\n<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> and <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Tree</a> should subclass <a href=\"#!/api/Ext.selection.Model\" rel=\"Ext.selection.Model\" class=\"docClass\">Ext.selection.Model</a>\nand provide a way to binding to the component.</p>\n\n<p>The abstract methods <code>onSelectChange</code> and <code>onLastFocusChanged</code> should be implemented in these\nsubclasses to update the UI widget.</p>\n"},"CheckboxModel":{"!doc":"<p>A selection model that renders a column of checkboxes that can be toggled to\nselect or deselect rows. The default mode for this selection model is MULTI.</p>\n\n<p>The selection model will inject a header for the checkboxes in the first view\nand according to the <a href=\"#!/api/Ext.selection.CheckboxModel-cfg-injectCheckbox\" rel=\"Ext.selection.CheckboxModel-cfg-injectCheckbox\" class=\"docClass\">injectCheckbox</a> configuration.</p>\n"},"RowModel":{"!doc":"<p>A selection model for <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">grid panels</a> which allows selection grid rows..</p>\n\n<p>Implements row based navigation via keyboard.</p>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.Store', {\n    fields  : ['name', 'email', 'phone'],\n    data    : {\n        items : [\n            { name : 'Lisa',  email : 'lisa@simpsons.com',  phone : '555-111-1224' },\n            { name : 'Bart',  email : 'bart@simpsons.com',  phone : '555-222-1234' },\n            { name : 'Homer', email : 'homer@simpsons.com', phone : '555-222-1244' },\n            { name : 'Marge', email : 'marge@simpsons.com', phone : '555-222-1254' }\n        ]\n    },\n    proxy   : {\n        type   : 'memory',\n        reader : {\n            type : 'json',\n            root : 'items'\n        }\n    }\n});\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title    : 'Simpsons',\n    store    : store,\n    width    : 400,\n    renderTo : Ext.getBody(),\n    columns  : [\n        { text : 'Name',  dataIndex : 'name'  },\n        { text : 'Email', dataIndex : 'email', flex : 1 },\n        { text : 'Phone', dataIndex : 'phone' }\n    ]\n});\n</code></pre>\n"},"DataViewModel":{"!doc":"\n"},"TreeModel":{"!doc":"<p>Adds custom behavior for left/right keyboard navigation for use with a tree.\nDepends on the view having an expand and collapse method which accepts a\nrecord. This selection model is created by default for <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>.</p>\n"}},"Shadow":{"!doc":"<p>Simple class that can provide a shadow effect for any element.  Note that the element\nMUST be absolutely positioned, and the shadow does not provide any shimming.  This\nshould be used only in simple cases - for more advanced functionality that can also\nprovide the same shadow effect, see the <a href=\"#!/api/Ext.dom.Layer\" rel=\"Ext.dom.Layer\" class=\"docClass\">Ext.Layer</a> class.</p>\n"},"ShadowPool":{"!doc":"<p>Private utility class that manages the internal Shadow cache.</p>\n"},"slider":{"Multi":{"!doc":"<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>\n\n<p>Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Ext.slider.Multi</a>', {\n    width: 200,\n    values: [25, 50, 75],\n    increment: 5,\n    minValue: 0,\n    maxValue: 100,\n\n    // this defaults to true, setting to false allows the thumbs to pass each other\n    constrainThumbs: false,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Single":{"!doc":"<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 200,\n    value: 50,\n    increment: 10,\n    minValue: 0,\n    maxValue: 100,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>The class <a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a> is aliased to <a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.Slider</a> for backwards compatibility.</p>\n"},"Thumb":{"!doc":"<p>Represents a single thumb element on a Slider. This would not usually be created manually and would instead\nbe created internally by an <a href=\"#!/api/Ext.slider.Multi\" rel=\"Ext.slider.Multi\" class=\"docClass\">Multi slider</a>.</p>\n"},"Tip":{"!doc":"<p>Simple plugin for using an <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> with a slider to show the slider value. In general this class is not created\ndirectly, instead pass the <a href=\"#!/api/Ext.slider.Multi-cfg-useTips\" rel=\"Ext.slider.Multi-cfg-useTips\" class=\"docClass\">Ext.slider.Multi.useTips</a> and <a href=\"#!/api/Ext.slider.Multi-cfg-tipText\" rel=\"Ext.slider.Multi-cfg-tipText\" class=\"docClass\">Ext.slider.Multi.tipText</a> configuration\noptions to the slider directly.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>Optionally provide your own tip text by passing tipText:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.slider.Single\" rel=\"Ext.slider.Single\" class=\"docClass\">Ext.slider.Single</a>', {\n    width: 214,\n    minValue: 0,\n    maxValue: 100,\n    useTips: true,\n    tipText: function(thumb){\n        return Ext.String.format('**{0}% complete**', thumb.value);\n    },\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Widget":{"!doc":"<p>A Widget-based implementation of a slider.</p>\n"}},"tip":{"Tip":{"!doc":"<p>This is the base class for <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> and <a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a> that provides the basic layout and\npositioning that all tip-based classes require. This class can be used directly for simple, statically-positioned\ntips that are displayed programmatically, or it can be extended to provide custom tip implementations.</p>\n"},"QuickTip":{"!doc":"<p>A specialized tooltip class for tooltips that can be specified in markup and automatically managed\nby the global <a href=\"#!/api/Ext.tip.QuickTipManager\" rel=\"Ext.tip.QuickTipManager\" class=\"docClass\">Ext.tip.QuickTipManager</a> instance.  See the QuickTipManager documentation for\nadditional usage details and examples.</p>\n"},"ToolTip":{"!doc":"<p>ToolTip is a <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> implementation that handles the common case of displaying a\ntooltip when hovering over a certain element or elements on the page. It allows fine-grained\ncontrol over the tooltip's alignment relative to the target element or mouse, and the timing\nof when it is automatically shown and hidden.</p>\n\n<p>This implementation does <strong>not</strong> have a built-in method of automatically populating the tooltip's\ntext based on the target element; you must either configure a fixed <a href=\"#!/api/Ext.tip.ToolTip-cfg-html\" rel=\"Ext.tip.ToolTip-cfg-html\" class=\"docClass\">html</a> value for each\nToolTip instance, or implement custom logic (e.g. in a <a href=\"#!/api/Ext.tip.ToolTip-event-beforeshow\" rel=\"Ext.tip.ToolTip-event-beforeshow\" class=\"docClass\">beforeshow</a> event listener) to\ngenerate the appropriate tooltip content on the fly. See <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> for a more\nconvenient way of automatically populating and configuring a tooltip based on specific DOM\nattributes of each target element.</p>\n\n<h1>Basic Example</h1>\n\n<pre class='inline-example '><code>var tip = Ext.create('<a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>', {\n    target: 'clearButton',\n    html: 'Press this button to clear the form'\n});\n</code></pre>\n\n<h1>Delegation</h1>\n\n<p>In addition to attaching a ToolTip to a single element, you can also use delegation to attach\none ToolTip to many elements under a common parent. This is more efficient than creating many\nToolTip instances. To do this, point the <a href=\"#!/api/Ext.tip.ToolTip-cfg-target\" rel=\"Ext.tip.ToolTip-cfg-target\" class=\"docClass\">target</a> config to a common ancestor of all the\nelements, and then set the <a href=\"#!/api/Ext.tip.ToolTip-cfg-delegate\" rel=\"Ext.tip.ToolTip-cfg-delegate\" class=\"docClass\">delegate</a> config to a CSS selector that will select all the\nappropriate sub-elements.</p>\n\n<p>When using delegation, it is likely that you will want to programmatically change the content\nof the ToolTip based on each delegate element; you can do this by implementing a custom\nlistener for the <a href=\"#!/api/Ext.tip.ToolTip-event-beforeshow\" rel=\"Ext.tip.ToolTip-event-beforeshow\" class=\"docClass\">beforeshow</a> event. Example:</p>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.ArrayStore', {\n    fields: ['company', 'price', 'change'],\n    data: [\n        ['3m Co',                               71.72, 0.02],\n        ['Alcoa Inc',                           29.01, 0.42],\n        ['Altria Group Inc',                    83.81, 0.28],\n        ['American Express Company',            52.55, 0.01],\n        ['American International Group, Inc.',  64.13, 0.31],\n        ['AT&amp;T Inc.',                           31.61, -0.48]\n    ]\n});\n\nvar grid = Ext.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Array Grid',\n    store: store,\n    columns: [\n        {text: 'Company', flex: 1, dataIndex: 'company'},\n        {text: 'Price', width: 75, dataIndex: 'price'},\n        {text: 'Change', width: 75, dataIndex: 'change'}\n    ],\n    height: 200,\n    width: 400,\n    renderTo: Ext.getBody()\n});\n\nvar view = grid.getView();\nvar tip = Ext.create('<a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>', {\n    // The overall target element.\n    target: view.el,\n    // Each grid row causes its own separate show and hide.\n    delegate: view.itemSelector,\n    // Moving within the row should not hide the tip.\n    trackMouse: true,\n    // Render immediately so that tip.body can be referenced prior to the first show.\n    renderTo: Ext.getBody(),\n    listeners: {\n        // Change content dynamically depending on which element triggered the show.\n        beforeshow: function updateTipBody(tip) {\n            tip.update('Over company \"' + view.getRecord(tip.triggerElement).get('company') + '\"');\n        }\n    }\n});\n</code></pre>\n\n<h1>Alignment</h1>\n\n<p>The following configuration properties allow control over how the ToolTip is aligned relative to\nthe target element and/or mouse pointer:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchor\" rel=\"Ext.tip.ToolTip-cfg-anchor\" class=\"docClass\">anchor</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchorToTarget\" rel=\"Ext.tip.ToolTip-cfg-anchorToTarget\" class=\"docClass\">anchorToTarget</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-anchorOffset\" rel=\"Ext.tip.ToolTip-cfg-anchorOffset\" class=\"docClass\">anchorOffset</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-trackMouse\" rel=\"Ext.tip.ToolTip-cfg-trackMouse\" class=\"docClass\">trackMouse</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-mouseOffset\" rel=\"Ext.tip.ToolTip-cfg-mouseOffset\" class=\"docClass\">mouseOffset</a></li>\n</ul>\n\n\n<h1>Showing/Hiding</h1>\n\n<p>The following configuration properties allow control over how and when the ToolTip is automatically\nshown and hidden:</p>\n\n<ul>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-autoHide\" rel=\"Ext.tip.ToolTip-cfg-autoHide\" class=\"docClass\">autoHide</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-showDelay\" rel=\"Ext.tip.ToolTip-cfg-showDelay\" class=\"docClass\">showDelay</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-hideDelay\" rel=\"Ext.tip.ToolTip-cfg-hideDelay\" class=\"docClass\">hideDelay</a></li>\n<li><a href=\"#!/api/Ext.tip.ToolTip-cfg-dismissDelay\" rel=\"Ext.tip.ToolTip-cfg-dismissDelay\" class=\"docClass\">dismissDelay</a></li>\n</ul>\n\n"},"QuickTipManager":{"!doc":"<p>Provides attractive and customizable tooltips for any element. The QuickTips\nsingleton is used to configure and manage tooltips globally for multiple elements\nin a generic manner.  To create individual tooltips with maximum customizability,\nyou should consider either <a href=\"#!/api/Ext.tip.Tip\" rel=\"Ext.tip.Tip\" class=\"docClass\">Ext.tip.Tip</a> or <a href=\"#!/api/Ext.tip.ToolTip\" rel=\"Ext.tip.ToolTip\" class=\"docClass\">Ext.tip.ToolTip</a>.</p>\n\n<p>Quicktips can be configured via tag attributes directly in markup, or by\nregistering quick tips programmatically via the <a href=\"#!/api/Ext.tip.QuickTipManager-method-register\" rel=\"Ext.tip.QuickTipManager-method-register\" class=\"docClass\">register</a> method.</p>\n\n<p>The singleton's instance of <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a> is available via\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-getQuickTip\" rel=\"Ext.tip.QuickTipManager-method-getQuickTip\" class=\"docClass\">getQuickTip</a>, and supports all the methods, and all the all the\nconfiguration properties of <a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">Ext.tip.QuickTip</a>. These settings will apply to all\ntooltips shown by the singleton.</p>\n\n<p>Below is the summary of the configuration properties which can be used.\nFor detailed descriptions see the config options for the\n<a href=\"#!/api/Ext.tip.QuickTip\" rel=\"Ext.tip.QuickTip\" class=\"docClass\">QuickTip</a> class</p>\n\n<h2>QuickTips singleton configs (all are optional)</h2>\n\n<ul>\n<li><code>dismissDelay</code></li>\n<li><code>hideDelay</code></li>\n<li><code>maxWidth</code></li>\n<li><code>minWidth</code></li>\n<li><code>showDelay</code></li>\n<li><code>trackMouse</code></li>\n</ul>\n\n\n<h2>Target element configs (optional unless otherwise noted)</h2>\n\n<ul>\n<li><code>autoHide</code></li>\n<li><code>cls</code></li>\n<li><code>dismissDelay</code> (overrides singleton value)</li>\n<li><code>target</code> (required)</li>\n<li><code>text</code> (required)</li>\n<li><code>title</code></li>\n<li><code>width</code></li>\n</ul>\n\n\n<p>Here is an example showing how some of these config options could be used:</p>\n\n<pre class='inline-example '><code>// Init the singleton.  Any tag-based quick tips will start working.\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();\n\n// Apply a set of config properties to the singleton\nExt.apply(<a href=\"#!/api/Ext.tip.QuickTipManager-method-getQuickTip\" rel=\"Ext.tip.QuickTipManager-method-getQuickTip\" class=\"docClass\">Ext.tip.QuickTipManager.getQuickTip</a>(), {\n    maxWidth: 200,\n    minWidth: 100,\n    showDelay: 50      // Show 50ms after entering target\n});\n\n// Create a small panel to add a quick tip to\nExt.create('<a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Ext.container.Container</a>', {\n    id: 'quickTipContainer',\n    width: 200,\n    height: 150,\n    style: {\n        backgroundColor:'#000000'\n    },\n    renderTo: Ext.getBody()\n});\n\n\n// Manually register a quick tip for a specific element\n<a href=\"#!/api/Ext.tip.QuickTipManager-method-register\" rel=\"Ext.tip.QuickTipManager-method-register\" class=\"docClass\">Ext.tip.QuickTipManager.register</a>({\n    target: 'quickTipContainer',\n    title: 'My Tooltip',\n    text: 'This tooltip was added in code',\n    width: 100,\n    dismissDelay: 10000 // Hide after 10 seconds hover\n});\n</code></pre>\n\n<p>To register a quick tip in markup, you simply add one or more of the valid QuickTip\nattributes prefixed with the <strong>data-</strong> namespace.  The HTML element itself is\nautomatically set as the quick tip target. Here is the summary of supported attributes\n(optional unless otherwise noted):</p>\n\n<ul>\n<li><code>hide</code>: Specifying \"user\" is equivalent to setting autoHide = false.\n Any other value will be the same as autoHide = true.</li>\n<li><code>qclass</code>: A CSS class to be applied to the quick tip\n (equivalent to the 'cls' target element config).</li>\n<li><code>qtip (required)</code>: The quick tip text (equivalent to the 'text' target element config).</li>\n<li><code>qtitle</code>: The quick tip title (equivalent to the 'title' target element config).</li>\n<li><code>qwidth</code>: The quick tip width (equivalent to the 'width' target element config).</li>\n</ul>\n\n\n<p>Here is an example of configuring an HTML element to display a tooltip from markup:</p>\n\n<pre><code>// Add a quick tip to an HTML button\n&lt;input type=\"button\" value=\"OK\" data-qtitle=\"OK Button\" data-qwidth=\"100\"\n     data-qtip=\"This is a quick tip from markup!\"&gt;&lt;/input&gt;\n</code></pre>\n"}},"sparkline":{"Bar":{"!doc":"<p>Plots a bar chart of the values in the passed values array.</p>\n"},"Base":{"!doc":"<p>The base class for ExtJS SparkLines. SparkLines are small, inline graphs used to visually\ndisplay small amounts of data. For large datasets, use the chart package.</p>\n\n<p>The SparkLine subclasses accept an <a href=\"#!/api/Ext.sparkline.Base-cfg-values\" rel=\"Ext.sparkline.Base-cfg-values\" class=\"docClass\">array of values</a>, and present the data in different visualizations.</p>\n\n<pre class='inline-example '><code>new <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.Panel</a>({\n    height: 500,\n    width: 600,\n    frame: true,\n    title: 'Test Sparklines',\n    renderTo:document.body,\n    bodyPadding: 10,\n\n    // Named listeners will resolve to methods in this Panel\n    defaultListenerScope: true,\n\n    // Named references will be collected, and can be access from this Panel\n    referenceHolder: true,\n\n    items: [{\n        reference: 'values',\n        xtype: 'textfield',\n        fieldLabel: 'Values',\n        validator: function(v) {\n            var result = [];\n\n            v = v.replace(/\\s/g, '');\n            v = v.replace(/,$/, '');\n            v = v.split(',');\n            for (var i = 0; i &lt; v.length; i++) {\n                if (!Ext.isNumeric(v[i])) {\n                    return 'Value must be a comma separated array of numbers';\n                }\n                result.push(parseInt(v[i], 10));\n            }\n            this.values = result;\n            return true;\n        },\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500\n        }\n    }, {\n        reference: 'type',\n        xtype: 'combobox',\n        fieldLabel: 'Type',\n        store: [\n            ['sparklineline',     'Line'],\n            ['sparklinebox',      'Box'],\n            ['sparklinebullet',   'Bullet'],\n            ['sparklinediscrete', 'Discrete'],\n            ['sparklinepie',      'Pie'],\n            ['sparklinetristate', 'TriState']\n        ],\n        value: 'sparklineline',\n        listeners: {\n            change: 'onTypeChange',\n            buffer: 500\n        }\n    }],\n\n    onTypeChange: function() {\n        var me = this,\n            refs = me.getReferences(),\n            config;\n\n        if (me.sparkLine) {\n            me.remove(me.sparkLine, true);\n        }\n        config = {\n            xtype: refs.type.getValue(),\n            values: refs.values.values,\n            height: 25,\n            width: 100                    \n        };\n       me.sparkLine = Ext.create(config);\n        me.add(me.sparkLine);\n\n        // Put under fields\n        me.sparkLine.el.dom.style.marginLeft = refs.type.labelEl.getWidth() + 'px';\n    }\n});\n</code></pre>\n"},"Box":{"!doc":"<p>Generates a box plot graph from the provided <a href=\"#!/api/Ext.sparkline.Box-cfg-values\" rel=\"Ext.sparkline.Box-cfg-values\" class=\"docClass\">values</a> array.</p>\n\n<p>See <a href=\"http://en.wikipedia.org/wiki/Box_plot\">Wikipedia Box Plots</a></p>\n"},"Bullet":{"!doc":"<p>Plots a bullet graph based upon the input <a href=\"#!/api/Ext.sparkline.Bullet-cfg-values\" rel=\"Ext.sparkline.Bullet-cfg-values\" class=\"docClass\">values</a> array.</p>\n\n<p>See <a href=\"http://en.wikipedia.org/wiki/Bullet_graph\">Bullet graphs Wikipedia Page</a> for more information.</p>\n"},"Discrete":{"!doc":"<p>Plots a series of thin vertical lines based upon the input values array.</p>\n"},"Line":{"!doc":"<p>Plots a line graph based upon the input <a href=\"#!/api/Ext.sparkline.Line-cfg-values\" rel=\"Ext.sparkline.Line-cfg-values\" class=\"docClass\">values</a> array.</p>\n"},"Pie":{"!doc":"<p>Plots a pie chart based upon the input {<a href=\"#!/api/Ext.sparkline.Pie-cfg-values\" rel=\"Ext.sparkline.Pie-cfg-values\" class=\"docClass\">values</a>} array.</p>\n"},"TriState":{"!doc":"<p>Plots bars based upon \"win\"/\"draw\" or \"lose\" status of the input values array. Positive values mean\na win, zero a draw, and negative a lose.</p>\n"}},"tab":{"Bar":{"!doc":"<p>TabBar is used internally by a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a> and typically should not\nneed to be created manually.</p>\n"},"Panel":{"!doc":"<p>A basic tab container. TabPanels can be used exactly like a standard <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a> for\nlayout purposes, but also have special support for containing child Components\n(<code><a href=\"#!/api/Ext.container.Container-cfg-items\" rel=\"Ext.container.Container-cfg-items\" class=\"docClass\">items</a></code>) that are managed using a\n<a href=\"#!/api/Ext.layout.container.Card\" rel=\"Ext.layout.container.Card\" class=\"docClass\">CardLayout layout manager</a>, and displayed as separate tabs.</p>\n\n<p><strong>Note:</strong> By default, a tab's close tool <em>destroys</em> the child tab Component and all its descendants.\nThis makes the child tab Component, and all its descendants <strong>unusable</strong>.  To enable re-use of a tab,\nconfigure the TabPanel with <code><a href=\"#!/api/Ext.tab.Panel-cfg-autoDestroy\" rel=\"Ext.tab.Panel-cfg-autoDestroy\" class=\"docClass\">autoDestroy: false</a></code>.</p>\n\n<h2>TabPanel's layout</h2>\n\n<p>TabPanels use a Dock layout to position the <a href=\"#!/api/Ext.tab.Bar\" rel=\"Ext.tab.Bar\" class=\"docClass\">TabBar</a> at the top of the widget.\nPanels added to the TabPanel will have their header hidden by default because the Tab will\nautomatically take the Panel's configured title and icon.</p>\n\n<p>TabPanels use their <a href=\"#!/api/Ext.panel.Header\" rel=\"Ext.panel.Header\" class=\"docClass\">header</a> or <a href=\"#!/api/Ext.panel.Panel-cfg-fbar\" rel=\"Ext.panel.Panel-cfg-fbar\" class=\"docClass\">footer</a>\nelement (depending on the <a href=\"#!/api/Ext.tab.Panel-cfg-tabPosition\" rel=\"Ext.tab.Panel-cfg-tabPosition\" class=\"docClass\">tabPosition</a> configuration) to accommodate the tab selector buttons.\nThis means that a TabPanel will not display any configured title, and will not display any configured\nheader <a href=\"#!/api/Ext.panel.Panel-cfg-tools\" rel=\"Ext.panel.Panel-cfg-tools\" class=\"docClass\">tools</a>.</p>\n\n<p>To display a header, embed the TabPanel in a <a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Panel</a> which uses\n<code><a href=\"#!/api/Ext.container.Container-cfg-layout\" rel=\"Ext.container.Container-cfg-layout\" class=\"docClass\">layout: 'fit'</a></code>.</p>\n\n<h2>Controlling tabs</h2>\n\n<p>Configuration options for the <a href=\"#!/api/Ext.tab.Tab\" rel=\"Ext.tab.Tab\" class=\"docClass\">Ext.tab.Tab</a> that represents the component can be passed in\nby specifying the tabConfig option:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.tip.QuickTipManager-method-init\" rel=\"Ext.tip.QuickTipManager-method-init\" class=\"docClass\">Ext.tip.QuickTipManager.init</a>();\nExt.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Foo'\n    }, {\n        title: 'Bar',\n        tabConfig: {\n            title: 'Custom Title',\n            tooltip: 'A button tooltip'\n        }\n    }]\n});\n</code></pre>\n\n<h2>Vetoing Changes</h2>\n\n<p>User interaction when changing the tabs can be vetoed by listening to the <a href=\"#!/api/Ext.tab.Panel-event-beforetabchange\" rel=\"Ext.tab.Panel-event-beforetabchange\" class=\"docClass\">beforetabchange</a> event.\nBy returning <code>false</code>, the tab change will not occur.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    renderTo: Ext.getBody(),\n    width: 200,\n    height: 200,\n    listeners: {\n        beforetabchange: function(tabs, newTab, oldTab) {\n            return newTab.title != 'P2';\n        }\n    },\n    items: [{\n        title: 'P1'\n    }, {\n        title: 'P2'\n    }, {\n        title: 'P3'\n    }]\n}); \n</code></pre>\n\n<h1>Examples</h1>\n\n<p>Here is a basic TabPanel rendered to the body. This also shows the useful configuration <a href=\"#!/api/Ext.tab.Panel-cfg-activeTab\" rel=\"Ext.tab.Panel-cfg-activeTab\" class=\"docClass\">activeTab</a>,\nwhich allows you to set the active tab on render. If you do not set an <a href=\"#!/api/Ext.tab.Panel-cfg-activeTab\" rel=\"Ext.tab.Panel-cfg-activeTab\" class=\"docClass\">activeTab</a>, no tabs will be\nactive by default.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>It is easy to control the visibility of items in the tab bar. Specify hidden: true to have the\ntab button hidden initially. Items can be subsequently hidden and show by accessing the\ntab property on the child item.</p>\n\n<pre class='inline-example '><code>var tabs = Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 400,\n    height: 400,\n    renderTo: document.body,\n    items: [{\n        title: 'Home',\n        html: 'Home',\n        itemId: 'home'\n    }, {\n        title: 'Users',\n        html: 'Users',\n        itemId: 'users',\n        hidden: true\n    }, {\n        title: 'Tickets',\n        html: 'Tickets',\n        itemId: 'tickets'\n    }]\n});\n\nsetTimeout(function(){\n    tabs.child('#home').tab.hide();\n    var users = tabs.child('#users');\n    users.tab.show();\n    tabs.setActiveTab(users);\n}, 1000);\n</code></pre>\n\n<p>You can remove the background of the TabBar by setting the <a href=\"#!/api/Ext.tab.Panel-cfg-plain\" rel=\"Ext.tab.Panel-cfg-plain\" class=\"docClass\">plain</a> property to <code>true</code>.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    plain: true,\n    items: [\n        {\n            title: 'Tab 1',\n            bodyPadding: 10,\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>Another useful configuration of TabPanel is <a href=\"#!/api/Ext.tab.Panel-cfg-tabPosition\" rel=\"Ext.tab.Panel-cfg-tabPosition\" class=\"docClass\">tabPosition</a>. This allows you to change the\nposition where the tabs are displayed. The available options for this are <code>'top'</code> (default) and\n<code>'bottom'</code>.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    width: 300,\n    height: 200,\n    activeTab: 0,\n    bodyPadding: 10,\n    tabPosition: 'bottom',\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.tab.Panel-method-setActiveTab\" rel=\"Ext.tab.Panel-method-setActiveTab\" class=\"docClass\">setActiveTab</a> is a very useful method in TabPanel which will allow you to change the\ncurrent active tab. You can either give it an index or an instance of a tab. For example:</p>\n\n<pre class='inline-example '><code>var tabs = Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            id   : 'my-tab',\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nvar tab = Ext.getCmp('my-tab');\n\nExt.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    renderTo: Ext.getBody(),\n    text    : 'Select the first tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(tab);\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Select the second tab',\n    scope   : this,\n    handler : function() {\n        tabs.setActiveTab(1);\n    },\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>The <a href=\"#!/api/Ext.tab.Panel-method-getActiveTab\" rel=\"Ext.tab.Panel-method-getActiveTab\" class=\"docClass\">getActiveTab</a> is a another useful method in TabPanel which will return the current active tab.</p>\n\n<pre class='inline-example '><code>var tabs = Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Get active tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.getActiveTab();\n        alert('Current tab: ' + tab.title);\n    },\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>Adding a new tab is very simple with a TabPanel. You simple call the <a href=\"#!/api/Ext.tab.Panel-method-add\" rel=\"Ext.tab.Panel-method-add\" class=\"docClass\">add</a> method with an config\nobject for a panel.</p>\n\n<pre class='inline-example '><code>var tabs = Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'New tab',\n    scope   : this,\n    handler : function() {\n        var tab = tabs.add({\n            // we use the tabs.items property to get the length of current items/tabs\n            title: 'Tab ' + (tabs.items.length + 1),\n            html : 'Another one'\n        });\n\n        tabs.setActiveTab(tab);\n    },\n    renderTo : Ext.getBody()\n});\n</code></pre>\n\n<p>Additionally, removing a tab is very also simple with a TabPanel. You simple call the <a href=\"#!/api/Ext.tab.Panel-method-remove\" rel=\"Ext.tab.Panel-method-remove\" class=\"docClass\">remove</a> method\nwith an config object for a panel.</p>\n\n<pre class='inline-example '><code>var tabs = Ext.create('<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>', {\n    items: [\n        {\n            title: 'Tab 1',\n            html : 'A simple tab'\n        },\n        {\n            id   : 'remove-this-tab',\n            title: 'Tab 2',\n            html : 'Another one'\n        }\n    ],\n    renderTo : Ext.getBody()\n});\n\nExt.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Remove tab',\n    scope   : this,\n    handler : function() {\n        var tab = Ext.getCmp('remove-this-tab');\n        tabs.remove(tab);\n    },\n    renderTo : Ext.getBody()\n});\n</code></pre>\n"},"Tab":{"!doc":"<p>Represents a single Tab in a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a>. A Tab is simply a slightly customized <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Button</a>,\nstyled to look like a tab. Tabs are optionally closable, and can also be disabled. 99% of the time you will not\nneed to create Tabs manually as the framework does so automatically when you use a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a></p>\n"}},"toolbar":{"Breadcrumb":{"!doc":"<p>A toolbar that displays hierarchical data from a TreeStore\nas a trail of breadcrumb buttons.  Each button represents a node in the store.  A click\non a button will \"select\" that node in the tree.  Non-leaf nodes will display their\nchild nodes on a dropdown menu of the corresponding button in the breadcrumb trail,\nand a click on an item in the menu will trigger selection of the corresponding child\nnode.</p>\n\n<p>The selection can be set programmatically  using setSelection, or retrieved\nusing getSelection.</p>\n"},"Fill":{"!doc":"<p>A non-rendering placeholder item which instructs the Toolbar's Layout to begin using\nthe right-justified button container.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n     title: 'Toolbar Fill Example',\n     width: 300,\n     height: 200,\n     tbar : [\n         'Item 1',\n         { xtype: 'tbfill' },\n         'Item 2'\n     ],\n     renderTo: Ext.getBody()\n });\n</code></pre>\n"},"Item":{"!doc":"<p>The base class that other non-interacting Toolbar Item classes should extend in order to\nget some basic common toolbar item functionality.</p>\n"},"Paging":{"!doc":"<p>As the number of records increases, the time required for the browser to render them increases. Paging is used to\nreduce the amount of data exchanged with the client. Note: if there are more records/rows than can be viewed in the\navailable screen area, vertical scrollbars will be added.</p>\n\n<p>Paging is typically handled on the server side (see exception below). The client sends parameters to the server side,\nwhich the server needs to interpret and then respond with the appropriate data.</p>\n\n<p><a href=\"#!/api/Ext.toolbar.Paging\" rel=\"Ext.toolbar.Paging\" class=\"docClass\">Ext.toolbar.Paging</a> is a specialized toolbar that is bound to a Ext.data.Store and provides automatic\npaging control. This Component loads blocks of data into the <a href=\"#!/api/Ext.toolbar.Paging-cfg-store\" rel=\"Ext.toolbar.Paging-cfg-store\" class=\"docClass\">store</a> by passing\nparameters used for paging criteria.</p>\n\n<p><p><img src=\"\" alt=\"Ext.toolbar.Paging component\" width=\"\" height=\"\"></p></p>\n\n<p>Paging Toolbar is typically used as one of the Grid's toolbars:</p>\n\n<pre class='inline-example '><code>var itemsPerPage = 2;   // set the number of items you want per page\n\nvar store = Ext.create('Ext.data.Store', {\n    id:'simpsonsStore',\n    autoLoad: false,\n    fields:['name', 'email', 'phone'],\n    pageSize: itemsPerPage, // items per page\n    proxy: {\n        type: 'ajax',\n        url: 'pagingstore.js',  // url that will load data with respect to start and limit params\n        reader: {\n            type: 'json',\n            rootProperty: 'items',\n            totalProperty: 'total'\n        }\n    }\n});\n\n// specify segment of data you want to load using params\nstore.load({\n    params:{\n        start:0,\n        limit: itemsPerPage\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Ext.grid.Panel</a>', {\n    title: 'Simpsons',\n    store: store,\n    columns: [\n        { header: 'Name',  dataIndex: 'name' },\n        { header: 'Email', dataIndex: 'email', flex: 1 },\n        { header: 'Phone', dataIndex: 'phone' }\n    ],\n    width: 400,\n    height: 125,\n    dockedItems: [{\n        xtype: 'pagingtoolbar',\n        store: store,   // same store GridPanel is using\n        dock: 'bottom',\n        displayInfo: true\n    }],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>To use paging, you need to set a pageSize configuration on the Store, and pass the paging requirements to\nthe server when the store is first loaded.</p>\n\n<pre><code>store.load({\n    params: {\n        // specify params for the first page load if using paging\n        start: 0,\n        limit: myPageSize,\n        // other params\n        foo:   'bar'\n    }\n});\n</code></pre>\n\n<p>If using store's autoLoad configuration:</p>\n\n<pre><code>var myStore = Ext.create('Ext.data.Store', {\n    autoLoad: {start: 0, limit: 25},\n    ...\n});\n</code></pre>\n\n<p>The packet sent back from the server would have this form:</p>\n\n<pre><code>{\n    \"success\": true,\n    \"results\": 2000,\n    \"rows\": [ // ***Note:** this must be an Array\n        { \"id\":  1, \"name\": \"Bill\", \"occupation\": \"Gardener\" },\n        { \"id\":  2, \"name\":  \"Ben\", \"occupation\": \"Horticulturalist\" },\n        ...\n        { \"id\": 25, \"name\":  \"Sue\", \"occupation\": \"Botanist\" }\n    ]\n}\n</code></pre>\n\n<h2>Paging with Local Data</h2>\n\n<p>Paging can also be accomplished with local data using extensions:</p>\n\n<ul>\n<li><a href=\"http://sencha.com/forum/showthread.php?t=71532\">Ext.ux.data.PagingStore</a></li>\n<li>Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)</li>\n</ul>\n\n"},"Toolbar":{"!doc":"<p>Basic Toolbar class. Although the <a href=\"#!/api/Ext.container.Container-cfg-defaultType\" rel=\"Ext.container.Container-cfg-defaultType\" class=\"docClass\">defaultType</a> for\nToolbar is <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">button</a>, Toolbar elements (child items for the Toolbar container)\nmay be virtually any type of Component. Toolbar elements can be created explicitly via their\nconstructors, or implicitly via their xtypes, and can be <a href=\"#!/api/Ext.toolbar.Toolbar-method-add\" rel=\"Ext.toolbar.Toolbar-method-add\" class=\"docClass\">add</a>ed dynamically.</p>\n\n<h2>Some items have shortcut strings for creation:</h2>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left;\"> Shortcut </th>\n<th style=\"text-align:left;\"> xtype         </th>\n<th style=\"text-align:left;\"> Class                         </th>\n<th style=\"text-align:left;\"> Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left;\"> '->'     </td>\n<td style=\"text-align:left;\"> <code>tbfill</code>      </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Fill\" rel=\"Ext.toolbar.Fill\" class=\"docClass\">Ext.toolbar.Fill</a>      </td>\n<td style=\"text-align:left;\"> begin using the right-justified button container</td>\n</tr>\n<tr>\n<td style=\"text-align:left;\"> '-'      </td>\n<td style=\"text-align:left;\"> <code>tbseparator</code> </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Separator\" rel=\"Ext.toolbar.Separator\" class=\"docClass\">Ext.toolbar.Separator</a> </td>\n<td style=\"text-align:left;\"> add a vertical separator bar between toolbar items</td>\n</tr>\n<tr>\n<td style=\"text-align:left;\"> ' '      </td>\n<td style=\"text-align:left;\"> <code>tbspacer</code>    </td>\n<td style=\"text-align:left;\"> <a href=\"#!/api/Ext.toolbar.Spacer\" rel=\"Ext.toolbar.Spacer\" class=\"docClass\">Ext.toolbar.Spacer</a>    </td>\n<td style=\"text-align:left;\"> add horizontal space between elements</td>\n</tr>\n</tbody>\n</table>\n\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 500,\n    items: [\n        {\n            // xtype: 'button', // default for Toolbars\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        // begin using the right-justified button container\n        '-&gt;', // same as { xtype: 'tbfill' }\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        },\n        // add a vertical separator bar between toolbar items\n        '-', // same as {xtype: 'tbseparator'} to create <a href=\"#!/api/Ext.toolbar.Separator\" rel=\"Ext.toolbar.Separator\" class=\"docClass\">Ext.toolbar.Separator</a>\n        'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create <a href=\"#!/api/Ext.toolbar.TextItem\" rel=\"Ext.toolbar.TextItem\" class=\"docClass\">Ext.toolbar.TextItem</a>\n        { xtype: 'tbspacer' },// same as ' ' to create <a href=\"#!/api/Ext.toolbar.Spacer\" rel=\"Ext.toolbar.Spacer\" class=\"docClass\">Ext.toolbar.Spacer</a>\n        'text 2',\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'text 3'\n    ]\n});\n</code></pre>\n\n<p>Toolbars have <a href=\"#!/api/Ext.toolbar.Toolbar-method-enable\" rel=\"Ext.toolbar.Toolbar-method-enable\" class=\"docClass\">enable</a> and <a href=\"#!/api/Ext.toolbar.Toolbar-method-disable\" rel=\"Ext.toolbar.Toolbar-method-disable\" class=\"docClass\">disable</a> methods which when called, will\nenable/disable all items within your toolbar.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 400,\n    items: [\n        {\n            text: 'Button'\n        },\n        {\n            xtype: 'splitbutton',\n            text : 'Split Button'\n        },\n        '-&gt;',\n        {\n            xtype    : 'textfield',\n            name     : 'field1',\n            emptyText: 'enter search term'\n        }\n    ]\n});\n</code></pre>\n\n<p>Example</p>\n\n<pre class='inline-example '><code>var enableBtn = Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Enable All Items',\n    disabled: true,\n    scope   : this,\n    handler : function() {\n        //disable the enable button and enable the disable button\n        enableBtn.disable();\n        disableBtn.enable();\n\n        //enable the toolbar\n        toolbar.enable();\n    }\n});\n\nvar disableBtn = Ext.create('<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>', {\n    text    : 'Disable All Items',\n    scope   : this,\n    handler : function() {\n        //enable the enable button and disable button\n        disableBtn.disable();\n        enableBtn.enable();\n\n        //disable the toolbar\n        toolbar.disable();\n    }\n});\n\nvar toolbar = Ext.create('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 400,\n    margin  : '5 0 0 0',\n    items   : [enableBtn, disableBtn]\n});\n</code></pre>\n\n<p>Adding items to and removing items from a toolbar is as simple as calling the <a href=\"#!/api/Ext.toolbar.Toolbar-method-add\" rel=\"Ext.toolbar.Toolbar-method-add\" class=\"docClass\">add</a>\nand <a href=\"#!/api/Ext.toolbar.Toolbar-method-remove\" rel=\"Ext.toolbar.Toolbar-method-remove\" class=\"docClass\">remove</a> methods. There is also a <a href=\"#!/api/Ext.toolbar.Toolbar-method-removeAll\" rel=\"Ext.toolbar.Toolbar-method-removeAll\" class=\"docClass\">removeAll</a> method\nwhich remove all items within the toolbar.</p>\n\n<pre class='inline-example '><code>var toolbar = Ext.create('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 700,\n    items: [\n        {\n            text: 'Example Button'\n        }\n    ]\n});\n\nvar addedItems = [];\n\nExt.create('<a href=\"#!/api/Ext.toolbar.Toolbar\" rel=\"Ext.toolbar.Toolbar\" class=\"docClass\">Ext.toolbar.Toolbar</a>', {\n    renderTo: document.body,\n    width   : 700,\n    margin  : '5 0 0 0',\n    items   : [\n        {\n            text   : 'Add a button',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your button:');\n                addedItems.push(toolbar.add({\n                    text: text\n                }));\n            }\n        },\n        {\n            text   : 'Add a text item',\n            scope  : this,\n            handler: function() {\n                var text = prompt('Please enter the text for your item:');\n                addedItems.push(toolbar.add(text));\n            }\n        },\n        {\n            text   : 'Add a toolbar separator',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('-'));\n            }\n        },\n        {\n            text   : 'Add a toolbar spacer',\n            scope  : this,\n            handler: function() {\n                addedItems.push(toolbar.add('-&gt;'));\n            }\n        },\n        '-&gt;',\n        {\n            text   : 'Remove last inserted item',\n            scope  : this,\n            handler: function() {\n                if (addedItems.length) {\n                    toolbar.remove(addedItems.pop());\n                } else if (toolbar.items.length) {\n                    toolbar.remove(toolbar.items.last());\n                } else {\n                    alert('No items in the toolbar');\n                }\n            }\n        },\n        {\n            text   : 'Remove all items',\n            scope  : this,\n            handler: function() {\n                toolbar.removeAll();\n            }\n        }\n    ]\n});\n</code></pre>\n"},"Separator":{"!doc":"<p>A simple class that adds a vertical separator bar between toolbar items (css class: 'x-toolbar-separator').</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Toolbar Separator Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbseparator' },\n        'Item 2'\n    ],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"Spacer":{"!doc":"<p>A simple element that adds extra horizontal space between items in a toolbar.\nBy default a 2px wide space is added via CSS specification:</p>\n\n<pre><code>.x-toolbar .x-toolbar-spacer {\n    width: 2px;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Toolbar Spacer Example',\n    width: 300,\n    height: 200,\n    tbar : [\n        'Item 1',\n        { xtype: 'tbspacer' }, // or ' '\n        'Item 2',\n        // space width is also configurable via javascript\n        { xtype: 'tbspacer', width: 50 }, // add a 50px space\n        'Item 3'\n    ],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"},"TextItem":{"!doc":"<p>A simple class that renders text directly into a toolbar.</p>\n\n<pre class='inline-example '><code>Ext.create('<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>', {\n    title: 'Panel with TextItem',\n    width: 300,\n    height: 200,\n    tbar: [\n        { xtype: 'tbtext', text: 'Sample Text Item' }\n    ],\n    renderTo: Ext.getBody()\n});\n</code></pre>\n"}},"tree":{"Column":{"!doc":"<p>Provides indentation and folder structure markup for a Tree taking into account\ndepth and position within the tree hierarchy.</p>\n"},"Panel":{"!doc":"<p>The TreePanel provides tree-structured UI representation of tree-structured data.\nA TreePanel must be bound to a Ext.data.TreeStore.</p>\n\n<p>TreePanels support multiple columns through the <a href=\"#!/api/Ext.tree.Panel-cfg-columns\" rel=\"Ext.tree.Panel-cfg-columns\" class=\"docClass\">columns</a> configuration.</p>\n\n<p>By default a TreePanel contains a single column which uses the <code>text</code> Field of\nthe store's nodes.</p>\n\n<p>Simple TreePanel using inline data:</p>\n\n<pre class='inline-example '><code>var store = Ext.create('Ext.data.TreeStore', {\n    root: {\n        expanded: true,\n        children: [\n            { text: \"detention\", leaf: true },\n            { text: \"homework\", expanded: true, children: [\n                { text: \"book report\", leaf: true },\n                { text: \"algebra\", leaf: true}\n            ] },\n            { text: \"buy lottery tickets\", leaf: true }\n        ]\n    }\n});\n\nExt.create('<a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>', {\n    title: 'Simple Tree',\n    width: 200,\n    height: 150,\n    store: store,\n    rootVisible: false,\n    renderTo: Ext.getBody()\n});\n</code></pre>\n\n<p>For the tree node config options (like <code>text</code>, <code>leaf</code>, <code>expanded</code>), see the documentation of\nNodeInterface config options.</p>\n\n<p>Unless the TreeStore is configured with a model of your choosing, nodes in the Ext.data.TreeStore are by default, instances of Ext.data.TreeModel.</p>\n\n<h1>Heterogeneous node types.</h1>\n\n<p>If the tree needs to use different data model classes at different levels there is much flexibility in how to specify this.</p>\n\n<h3>Configuring the Reader.</h3>\n\n<p>If you configure the proxy's reader with a typeProperty, then the server is in control of which data model\ntypes are created. A discriminator field is used in the raw data to decide which class to instantiate.\n<strong>If this is configured, then the data from the server is prioritized over other ways of determining node class</strong>.</p>\n\n<pre class='inline-example '><code>Ext.define('myApp.Territory', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Country', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.City', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.create('<a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>', {\n    renderTo: document.body,\n    height: 200,\n    width: 400,\n    title: 'Sales Areas - using typeProperty',\n    rootVisible: false,\n    store: {\n        // Child types use namespace of store's model by default\n        model: 'myApp.Territory',\n        proxy: {\n            type: 'memory',\n            reader: {\n                typeProperty: 'mtype'\n            }\n        },\n        root: {\n            children: [{\n                name: 'Europe, ME, Africa',\n                mtype: 'Territory',\n                children: [{\n                    name: 'UK of GB &amp; NI',\n                    mtype: 'Country',\n                    children: [{\n                        name: 'London',\n                        mtype: 'City',\n                        leaf: true\n                    }]\n                }]\n            }, {\n                name: 'North America',\n                mtype: 'Territory',\n                children: [{\n                    name: 'USA',\n                    mtype: 'Country',\n                    children: [{\n                        name: 'Redwood City',\n                        mtype: 'City',\n                        leaf: true\n                    }]\n                }]\n            }]\n        }\n    }\n});\n</code></pre>\n\n<h3>Node being loaded decides.</h3>\n\n<p>You can declare your TreeModel subclasses with a childType which means that the node being loaded decides the\nclass to instantiate for all of its child nodes.</p>\n\n<p>It is important to note that if the root node is <a href=\"#!/api/Ext.tree.Panel-cfg-rootVisible\" rel=\"Ext.tree.Panel-cfg-rootVisible\" class=\"docClass\">hidden</a>, its type will default to the store's model type, and if left\nas the default (<code>Ext.data.TreeModel</code>) this will have no knowledge of creation of special child node types. So be sure to specify a store model in this case:</p>\n\n<pre class='inline-example '><code>Ext.define('myApp.TerritoryRoot', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.Territory',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Territory', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.Country',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.Country', {\n    extend: 'Ext.data.TreeModel',\n    childType: 'myApp.City',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.define('myApp.City', {\n    extend: 'Ext.data.TreeModel',\n    fields: [{\n        name: 'text',\n        mapping: 'name'\n    }]\n});\nExt.create('<a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">Ext.tree.Panel</a>', {\n    renderTo: document.body,\n    height: 200,\n    width: 400,\n    title: 'Sales Areas',\n    rootVisible: false,\n    store: {\n        model: 'myApp.TerritoryRoot', // Needs to be this so it knows to create 'Country' child nodes\n        root: {\n            children: [{\n                name: 'Europe, ME, Africa',\n                children: [{\n                    name: 'UK of GB &amp; NI',\n                    children: [{\n                        name: 'London',\n                        leaf: true\n                    }]\n                }]\n            }, {\n                name: 'North America',\n                children: [{\n                    name: 'USA',\n                    children: [{\n                        name: 'Redwood City',\n                        leaf: true\n                    }]\n                }]\n            }]\n        }\n    }\n});\n</code></pre>\n\n<h1>Data structure</h1>\n\n<p>The TreeStore maintains a root node and a hierarchical structure of nodes.</p>\n\n<p>The <a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">UI</a> of the tree is driven by a {Ext.data.NodeStore NodeStore} which is a flattened view of <em>visible</em> nodes.\nThe NodeStore is dynamically updated to reflect the visibility state of nodes as nodes are added, removed or expanded. The UI\nresponds to mutation events fire by the NodeStore.</p>\n\n<p>Note that nodes have several more fields in order to describe their state within the hierarchy.</p>\n\n<p>If you add store listeners to the update event, then you will recieve notification when any of this state changes.\nYou should check the array of modified field names passed to the listener to decide whether the listener should take action or ignore the event.</p>\n"},"plugin":{"TreeViewDragDrop":{"!doc":"<p>This plugin provides drag and/or drop functionality for a TreeView.</p>\n\n<p>It creates a specialized instance of <a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a> which knows how to drag out of a\n<a href=\"#!/api/Ext.tree.View\" rel=\"Ext.tree.View\" class=\"docClass\">TreeView</a> and loads the data object which is passed to a cooperating\n<a href=\"#!/api/Ext.dd.DragZone\" rel=\"Ext.dd.DragZone\" class=\"docClass\">DragZone</a>'s methods with the following properties:</p>\n\n<ul>\n<li><p>copy : Boolean</p>\n\n<p>The value of the TreeView's <code>copy</code> property, or <code>true</code> if the TreeView was configured with <code>allowCopy: true</code> <em>and</em>\nthe control key was pressed when the drag operation was begun.</p></li>\n<li><p>view : TreeView</p>\n\n<p>The source TreeView from which the drag originated.</p></li>\n<li><p>ddel : HTMLElement</p>\n\n<p>The drag proxy element which moves with the mouse</p></li>\n<li><p>item : HTMLElement</p>\n\n<p>The TreeView node upon which the mousedown event was registered.</p></li>\n<li><p>records : Array</p>\n\n<p>An Array of Models representing the selected data being dragged from the source TreeView.</p></li>\n</ul>\n\n\n<p>It also creates a specialized instance of <a href=\"#!/api/Ext.dd.DropZone\" rel=\"Ext.dd.DropZone\" class=\"docClass\">Ext.dd.DropZone</a> which cooperates with other DropZones which are\nmembers of the same ddGroup which processes such data objects.</p>\n\n<p>Adding this plugin to a view means that two new events may be fired from the client TreeView, <a href=\"#!/api/Ext.tree.plugin.TreeViewDragDrop-event-beforedrop\" rel=\"Ext.tree.plugin.TreeViewDragDrop-event-beforedrop\" class=\"docClass\">beforedrop</a> and\n<a href=\"#!/api/Ext.tree.plugin.TreeViewDragDrop-event-drop\" rel=\"Ext.tree.plugin.TreeViewDragDrop-event-drop\" class=\"docClass\">drop</a>.</p>\n\n<p>Note that the plugin must be added to the tree view, not to the tree panel. For example using viewConfig:</p>\n\n<pre><code>viewConfig: {\n    plugins: { ptype: 'treeviewdragdrop' }\n}\n</code></pre>\n"}},"View":{"!doc":"<p>Used as a view by <a href=\"#!/api/Ext.tree.Panel\" rel=\"Ext.tree.Panel\" class=\"docClass\">TreePanel</a>.</p>\n"},"ViewDragZone":{"!doc":"\n"},"ViewDropZone":{"!doc":"\n"}},"WindowManager":{"!doc":"<p>The default global floating Component group that is available automatically.</p>\n\n<p>This manages instances of floating Components which were rendered programatically without\nbeing added to a <a href=\"#!/api/Ext.container.Container\" rel=\"Ext.container.Container\" class=\"docClass\">Container</a>, and for floating Components\nwhich were added into non-floating Containers.</p>\n\n<p><em>Floating</em> Containers create their own instance of ZIndexManager, and floating Components\nadded at any depth below there are managed by that ZIndexManager.</p>\n"},"ZIndexManager":{"!doc":"<p>A class that manages a group of <a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Ext.Component.floating</a> Components and provides z-order management,\nand Component activation behavior, including masking below the active (topmost) Component.</p>\n\n<p><a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Floating</a> Components which are rendered directly into the document (such as\n<a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Window</a>s) which are <a href=\"#!/api/Ext.Component-method-show\" rel=\"Ext.Component-method-show\" class=\"docClass\">show</a>n are managed by a\n<a href=\"#!/api/Ext.WindowManager\" rel=\"Ext.WindowManager\" class=\"docClass\">global instance</a>.</p>\n\n<p><a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">Floating</a> Components which are descendants of <a href=\"#!/api/Ext.Component-cfg-floating\" rel=\"Ext.Component-cfg-floating\" class=\"docClass\">floating</a>\n<em>Containers</em> (for example a <a href=\"#!/api/Ext.view.BoundList\" rel=\"Ext.view.BoundList\" class=\"docClass\">BoundList</a> within an <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Window</a>,\nor a <a href=\"#!/api/Ext.menu.Menu\" rel=\"Ext.menu.Menu\" class=\"docClass\">Menu</a>), are managed by a ZIndexManager owned by that floating Container. Therefore\nComboBox dropdowns within Windows will have managed z-indices guaranteed to be correct, relative to the Window.</p>\n"}}}

});  
