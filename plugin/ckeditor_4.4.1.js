(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(require("tern/lib/infer"), require("tern/lib/tern"));
  if (typeof define == "function" && define.amd) // AMD
    return define([ "tern/lib/infer", "tern/lib/tern" ], mod);
  mod(tern, tern);
})(function(infer, tern) {
  "use strict";

  tern.registerPlugin("ckeditor_4.4.1", function(server, options) {
    server._ckeditor = {};
    return {
      defs : defs
    };
  });

  var defs = {"!name":"ckeditor","!define":{},"CKEDITOR":{"ajax":{"!doc":"<p>Ajax methods for data loading.</p>\n","load":{"!type":"fn(url: string, callback?: ?)","!doc":"<p>Loads data from a URL as plain text.</p>\n\n<pre><code>// Load data synchronously.\nvar data = <a href=\"#!/api/CKEDITOR.ajax-method-load\" rel=\"CKEDITOR.ajax-method-load\" class=\"docClass\">CKEDITOR.ajax.load</a>( 'somedata.txt' );\nalert( data );\n\n// Load data asynchronously.\nvar data = <a href=\"#!/api/CKEDITOR.ajax-method-load\" rel=\"CKEDITOR.ajax-method-load\" class=\"docClass\">CKEDITOR.ajax.load</a>( 'somedata.txt', function( data ) {\n    alert( data );\n} );\n</code></pre>\n"},"loadXml":{"!type":"fn(url: string, callback?: ?)","!doc":"<p>Loads data from a URL as XML.</p>\n\n<pre><code>// Load XML synchronously.\nvar xml = <a href=\"#!/api/CKEDITOR.ajax-method-loadXml\" rel=\"CKEDITOR.ajax-method-loadXml\" class=\"docClass\">CKEDITOR.ajax.loadXml</a>( 'somedata.xml' );\nalert( xml.getInnerXml( '//' ) );\n\n// Load XML asynchronously.\nvar data = <a href=\"#!/api/CKEDITOR.ajax-method-loadXml\" rel=\"CKEDITOR.ajax-method-loadXml\" class=\"docClass\">CKEDITOR.ajax.loadXml</a>( 'somedata.xml', function( xml ) {\n    alert( xml.getInnerXml( '//' ) );\n} );\n</code></pre>\n"},"post":{"!type":"fn(url: string, data: ?, contentType?: string, callback: ?)","!doc":"<p>Creates an asynchronous POST <code>XMLHttpRequest</code> of the given <code>url</code>, <code>data</code> and optional <code>contentType</code>.\nOnce the request is done, regardless if it is successful or not, the <code>callback</code> is called\nwith <code>XMLHttpRequest#responseText</code> or <code>null</code> as an argument.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.ajax-method-post\" rel=\"CKEDITOR.ajax-method-post\" class=\"docClass\">CKEDITOR.ajax.post</a>( 'url/post.php', 'foo=bar', null, function( data ) {\n    console.log( data );\n} );\n\n<a href=\"#!/api/CKEDITOR.ajax-method-post\" rel=\"CKEDITOR.ajax-method-post\" class=\"docClass\">CKEDITOR.ajax.post</a>( 'url/post.php', JSON.stringify( { foo: 'bar' } ), 'application/json', function( data ) {\n    console.log( data );\n} );\n</code></pre>\n"}},"command":{"!doc":"<p>Represents a command that can be executed on an editor instance.</p>\n\n<pre><code>var command = new <a href=\"#!/api/CKEDITOR.command\" rel=\"CKEDITOR.command\" class=\"docClass\">CKEDITOR.command</a>( editor, {\n    exec: function( editor ) {\n        alert( editor.document.getBody().getHtml() );\n    }\n} );\n</code></pre>\n","contextSensitive":{"!type":"bool","!doc":"<p>Indicates that this command is sensible to the selection context.\nIf <code>true</code>, the <a href=\"#!/api/CKEDITOR.command-method-refresh\" rel=\"CKEDITOR.command-method-refresh\" class=\"docClass\">refresh</a> method will be\ncalled for this command on the <a href=\"#!/api/CKEDITOR.editor-event-selectionChange\" rel=\"CKEDITOR.editor-event-selectionChange\" class=\"docClass\">CKEDITOR.editor.selectionChange</a> event.</p>\n"},"editorFocus":{"!type":"bool","!doc":"<p>Indicates that the editor will get the focus before executing\nthe command.</p>\n\n<pre><code>// Do not force the editor to have focus when executing the command.\ncommand.editorFocus = false;\n</code></pre>\n"},"modes":{"!doc":"<p>The editor modes within which the command can be executed. The\nexecution will have no action if the current mode is not listed\nin this property.</p>\n\n<pre><code>// Enable the command in both WYSIWYG and Source modes.\ncommand.modes = { wysiwyg:1,source:1 };\n\n// Enable the command in Source mode only.\ncommand.modes = { source:1 };\n</code></pre>\n\n<p>@see <a href=\"#!/api/CKEDITOR.editor-property-mode\" rel=\"CKEDITOR.editor-property-mode\" class=\"docClass\">CKEDITOR.editor.mode</a></p>\n"},"prototype":{"previousState":{"!type":"number","!doc":"<p>Indicates the previous command state.</p>\n\n<pre><code>alert( command.previousState );@see <a href=\"#!/api/CKEDITOR.command-property-state\" rel=\"CKEDITOR.command-property-state\" class=\"docClass\">state</a>\n</code></pre>\n"},"constructor":{"!type":"fn(editor: ?, commandDefinition: ?)","!doc":"<p>Creates a command class instance.</p>\n"}},"state":{"!type":"number","!doc":"<p>Indicates the editor state. Possible values are:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>: the command is\n  disabled. It's execution will have no effect. Same as <a href=\"#!/api/CKEDITOR.command-method-disable\" rel=\"CKEDITOR.command-method-disable\" class=\"docClass\">disable</a>.</li>\n<li><a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a>: the command is enabled\n  and currently active in the editor (for context sensitive commands, for example).</li>\n<li><a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>: the command is enabled\n  and currently inactive in the editor (for context sensitive commands, for example).</li>\n</ul>\n\n\n<p>Do not set this property directly, using the <a href=\"#!/api/CKEDITOR.command-method-setState\" rel=\"CKEDITOR.command-method-setState\" class=\"docClass\">setState</a> method instead.</p>\n\n<pre><code>if ( command.state == <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> )\n    alert( 'This command is disabled' );\n</code></pre>\n"},"uiItems":{"!doc":"<p>Lists UI items that are associated to this command. This list can be\nused to interact with the UI on command execution (by the execution code\nitself, for example).</p>\n\n<pre><code>alert( 'Number of UI items associated to this command: ' + command.uiItems.length );\n</code></pre>\n"},"checkAllowed":{"!type":"fn(noCache?: bool)","!doc":"<p>Checks whether this command is allowed by the active allowed\ncontent filter (<a href=\"#!/api/CKEDITOR.editor-property-activeFilter\" rel=\"CKEDITOR.editor-property-activeFilter\" class=\"docClass\">CKEDITOR.editor.activeFilter</a>). This means\nthat if command implements <a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">CKEDITOR.feature</a> interface it will be tested\nby the <a href=\"#!/api/CKEDITOR.filter-method-checkFeature\" rel=\"CKEDITOR.filter-method-checkFeature\" class=\"docClass\">CKEDITOR.filter.checkFeature</a> method.</p>\n"},"disable":{"!type":"fn()","!doc":"<p>Disables the command for execution. The command state (see\n<a href=\"#!/api/CKEDITOR.command-property-state\" rel=\"CKEDITOR.command-property-state\" class=\"docClass\">state</a>) will be set to <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>.</p>\n\n<pre><code>command.disable();\ncommand.exec(); // \"false\" - Nothing happens.\n</code></pre>\n"},"enable":{"!type":"fn()","!doc":"<p>Enables the command for execution. The command state (see\n<a href=\"#!/api/CKEDITOR.command-property-state\" rel=\"CKEDITOR.command-property-state\" class=\"docClass\">state</a>) available before disabling it is restored.</p>\n\n<pre><code>command.enable();\ncommand.exec(); // Execute the command.\n</code></pre>\n"},"exec":{"!type":"fn(data?: ?)","!doc":"<p>Executes the command.</p>\n\n<pre><code>command.exec(); // The command gets executed.\n</code></pre>\n"},"refresh":{"!type":"fn(editor: ?, path: ?)","!doc":"<p>Explicitly update the status of the command, by firing the <a href=\"#!/api/CKEDITOR.command-event-refresh\" rel=\"CKEDITOR.command-event-refresh\" class=\"docClass\">refresh</a> event,\nas well as invoke the <a href=\"#!/api/CKEDITOR.commandDefinition-method-refresh\" rel=\"CKEDITOR.commandDefinition-method-refresh\" class=\"docClass\">CKEDITOR.commandDefinition.refresh</a> method if defined, this method\nis to allow different parts of the editor code to contribute in command status resolution.</p>\n"},"setState":{"!type":"fn(newState: number)","!doc":"<p>Sets the command state.</p>\n\n<pre><code>command.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a> );\ncommand.exec(); // Execute the command.\ncommand.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> );\ncommand.exec(); // 'false' - Nothing happens.\ncommand.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> );\ncommand.exec(); // Execute the command.\n</code></pre>\n"},"toggleState":{"!type":"fn()","!doc":"<p>Toggles the on/off (active/inactive) state of the command. This is\nmainly used internally by context sensitive commands.</p>\n\n<pre><code>command.toggleState();\n</code></pre>\n"}},"event":{"capture":{"!type":"fn()","!doc":"<p>Register event handler under the capturing stage on supported target.</p>\n"},"define":{"!type":"fn(name: string, meta: ?)","!doc":"<p>Predefine some intrinsic properties on a specific event name.</p>\n"},"fire":{"!type":"fn(eventName: string, data?: ?, editor?: ?)","!doc":"<p>Fires an specific event in the object. All registered listeners are\ncalled at this point.</p>\n\n<pre><code>someObject.on( 'someEvent', function() { ... } );\nsomeObject.on( 'someEvent', function() { ... } );\nsomeObject.fire( 'someEvent' );             // Both listeners are called.\n\nsomeObject.on( 'someEvent', function( event ) {\n    alert( event.data );                    // 'Example'\n} );\nsomeObject.fire( 'someEvent', 'Example' );\n</code></pre>\n"},"fireOnce":{"!type":"fn(eventName: string, data?: ?, editor?: ?)","!doc":"<p>Fires an specific event in the object, releasing all listeners\nregistered to that event. The same listeners are not called again on\nsuccessive calls of it or of <a href=\"#!/api/CKEDITOR.event-method-fire\" rel=\"CKEDITOR.event-method-fire\" class=\"docClass\">fire</a>.</p>\n\n<pre><code>someObject.on( 'someEvent', function() { ... } );\nsomeObject.fire( 'someEvent' );         // Above listener called.\nsomeObject.fireOnce( 'someEvent' );     // Above listener called.\nsomeObject.fire( 'someEvent' );         // No listeners called.\n</code></pre>\n"},"hasListeners":{"!type":"fn(eventName: string)","!doc":"<p>Checks if there is any listener registered to a given event.</p>\n\n<pre><code>var myListener = function() { ... };\nsomeObject.on( 'someEvent', myListener );\nalert( someObject.hasListeners( 'someEvent' ) );    // true\nalert( someObject.hasListeners( 'noEvent' ) );      // false\n</code></pre>\n"},"on":{"!type":"fn(eventName: string, listenerFunction: ?, scopeObj?: ?, listenerData?: ?, priority?: number)","!doc":"<p>Registers a listener to a specific event in the current object.</p>\n\n<pre><code>someObject.on( 'someEvent', function() {\n    alert( this == someObject );        // true\n} );\n\nsomeObject.on( 'someEvent', function() {\n    alert( this == anotherObject );     // true\n}, anotherObject );\n\nsomeObject.on( 'someEvent', function( event ) {\n    alert( event.listenerData );        // 'Example'\n}, null, 'Example' );\n\nsomeObject.on( 'someEvent', function() { ... } );                       // 2nd called\nsomeObject.on( 'someEvent', function() { ... }, null, null, 100 );      // 3rd called\nsomeObject.on( 'someEvent', function() { ... }, null, null, 1 );        // 1st called\n</code></pre>\n"},"once":{"!type":"fn()","!doc":"<p>Similiar with <a href=\"#!/api/CKEDITOR.event-method-on\" rel=\"CKEDITOR.event-method-on\" class=\"docClass\">on</a> but the listener will be called only once upon the next event firing.</p>\n\n<p>@see <a href=\"#!/api/CKEDITOR.event-method-on\" rel=\"CKEDITOR.event-method-on\" class=\"docClass\">CKEDITOR.event.on</a></p>\n"},"removeAllListeners":{"!type":"fn()","!doc":"<p>Remove all existing listeners on this object, for cleanup purpose.</p>\n"},"removeListener":{"!type":"fn(eventName: string, listenerFunction: ?)","!doc":"<p>Unregisters a listener function from being called at the specified\nevent. No errors are thrown if the listener has not been registered previously.</p>\n\n<pre><code>var myListener = function() { ... };\nsomeObject.on( 'someEvent', myListener );\nsomeObject.fire( 'someEvent' );                 // myListener called.\nsomeObject.removeListener( 'someEvent', myListener );\nsomeObject.fire( 'someEvent' );                 // myListener not called.\n</code></pre>\n"},"!doc":"<p>Creates an event class instance. This constructor is rearely used, being\nthe <a href=\"#!/api/CKEDITOR.event-static-method-implementOn\" rel=\"CKEDITOR.event-static-method-implementOn\" class=\"docClass\">implementOn</a> function used in class prototypes directly\ninstead.</p>\n\n<p>This is a base class for classes and objects that require event\nhandling features.</p>\n\n<p>Do not confuse this class with <a href=\"#!/api/CKEDITOR.dom.event\" rel=\"CKEDITOR.dom.event\" class=\"docClass\">CKEDITOR.dom.event</a> which is\ninstead used for DOM events. The <a href=\"#!/api/CKEDITOR.event\" rel=\"CKEDITOR.event\" class=\"docClass\">CKEDITOR.event</a> class implements the\ninternal event system used by the CKEditor to fire API related events.</p>\n","useCapture":{"!type":"bool","!doc":"<p>@todo</p>\n"},"prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates an event class instance.</p>\n"}},"implementOn":{"!type":"fn(targetObject: ?)","!doc":"<p>Implements the <a href=\"#!/api/CKEDITOR.event\" rel=\"CKEDITOR.event\" class=\"docClass\">CKEDITOR.event</a> features in an object.</p>\n\n<pre><code>var myObject = { message: 'Example' };\n<a href=\"#!/api/CKEDITOR.event-static-method-implementOn\" rel=\"CKEDITOR.event-static-method-implementOn\" class=\"docClass\">CKEDITOR.event.implementOn</a>( myObject );\n\nmyObject.on( 'testEvent', function() {\n    alert( this.message );\n} );\nmyObject.fire( 'testEvent' ); // 'Example'\n</code></pre>\n"}},"commandDefinition":{"!doc":"<p>Virtual class that illustrates the features of command objects to be\npassed to the <a href=\"#!/api/CKEDITOR.editor-method-addCommand\" rel=\"CKEDITOR.editor-method-addCommand\" class=\"docClass\">CKEDITOR.editor.addCommand</a> function.</p>\n","prototype":{"async":{"!type":"bool","!doc":"<p>Whether the command is asynchronous, which means that the\n<a href=\"#!/api/CKEDITOR.editor-event-afterCommandExec\" rel=\"CKEDITOR.editor-event-afterCommandExec\" class=\"docClass\">CKEDITOR.editor.afterCommandExec</a> event will be fired by the\ncommand itself manually, and that the return value of this command is not to\nbe returned by the <a href=\"#!/api/CKEDITOR.commandDefinition-method-exec\" rel=\"CKEDITOR.commandDefinition-method-exec\" class=\"docClass\">exec</a> function.</p>\n\n<pre><code>    editorInstance.addCommand( 'loadOptions', {\n        exec: function( editor ) {\n            // Asynchronous operation below.\n            <a href=\"#!/api/CKEDITOR.ajax-method-loadXml\" rel=\"CKEDITOR.ajax-method-loadXml\" class=\"docClass\">CKEDITOR.ajax.loadXml</a>( 'data.xml', function() {\n                editor.fire( 'afterCommandExec' );\n            } );\n        },\n        async: true // The command need some time to complete after exec function returns.\n    } );\n</code></pre>\n"},"canUndo":{"!type":"bool","!doc":"<p>Whether the command need to be hooked into the redo/undo system.</p>\n\n<pre><code>editorInstance.addCommand( 'alertName', {\n    exec: function( editor ) {\n        alert( editor.name );\n    },\n    canUndo: false // No support for undo/redo.\n} );\n</code></pre>\n"},"context":{"!type":"bool","!doc":"<p>Sets the element name used to reflect the command state on selection changes.\nIf the selection is in a place where the element is not allowed, the command\nwill be disabled.\nSetting this property overrides <a href=\"#!/api/CKEDITOR.commandDefinition-property-contextSensitive\" rel=\"CKEDITOR.commandDefinition-property-contextSensitive\" class=\"docClass\">contextSensitive</a> to <code>true</code>.</p>\n"},"contextSensitive":{"!type":"bool","!doc":"<p>Indicates that this command is sensible to the selection context.\nIf <code>true</code>, the <a href=\"#!/api/CKEDITOR.command-method-refresh\" rel=\"CKEDITOR.command-method-refresh\" class=\"docClass\">CKEDITOR.command.refresh</a> method will be\ncalled for this command on selection changes, with a single parameter\nrepresenting the current elements path.</p>\n"},"editorFocus":{"!type":"bool","!doc":"<p>Whether the command should give focus to the editor before execution.</p>\n\n<pre><code>editorInstance.addCommand( 'maximize', {\n        exec: function( editor ) {\n        // ...\n    },\n    editorFocus: false // The command doesn't require focusing the editing document.\n} );@see <a href=\"#!/api/CKEDITOR.command-property-editorFocus\" rel=\"CKEDITOR.command-property-editorFocus\" class=\"docClass\">CKEDITOR.command.editorFocus</a>\n</code></pre>\n"},"modes":{"!doc":"<p>The editor modes within which the command can be executed. The execution\nwill have no action if the current mode is not listed in this property.</p>\n\n<pre><code>editorInstance.addCommand( 'link', {\n    exec: function( editor ) {\n        // ...\n    },\n    modes: { wysiwyg:1 } // Command is available in wysiwyg mode only.\n} );@see <a href=\"#!/api/CKEDITOR.command-property-modes\" rel=\"CKEDITOR.command-property-modes\" class=\"docClass\">CKEDITOR.command.modes</a>\n</code></pre>\n"},"startDisabled":{"!type":"bool","!doc":"<p>Whether the command state should be set to <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> on startup.</p>\n\n<pre><code>editorInstance.addCommand( 'unlink', {\n    exec: function( editor ) {\n        // ...\n    },\n    startDisabled: true // Command is unavailable until selection is inside a link.\n} );\n</code></pre>\n"},"exec":{"!type":"fn(editor: ?, data?: ?)","!doc":"<p>The function to be fired when the commend is executed.</p>\n\n<pre><code>editorInstance.addCommand( 'sample', {\n    exec: function( editor ) {\n        alert( 'Executing a command for the editor name \"' + editor.name + '\"!' );\n    }\n} );\n</code></pre>\n"},"refresh":{"!type":"fn(editor: ?, path: ?)","!doc":"<p>Defined by command definition a function to determinate the command state, it will be invoked\nwhen editor has it's <code>states</code> or <code>selection</code> changed.</p>\n\n<p><strong>Note:</strong> The function provided must be calling <a href=\"#!/api/CKEDITOR.command-method-setState\" rel=\"CKEDITOR.command-method-setState\" class=\"docClass\">CKEDITOR.command.setState</a> in all circumstance,\nif it is intended to update the command state.</p>\n"}}},"config":{"!doc":"<p>Stores default configuration settings. Changes to this object are\nreflected in all editor instances, if not specified otherwise for a particular\ninstance.</p>\n","prototype":{}},"dataProcessor":{"!doc":"<p>Represents a data processor, which is responsible to translate and\ntransform the editor data on input and output.</p>\n\n<p>This class is here for documentation purposes only and is not really part of\nthe API. It serves as the base (\"interface\") for data processors implementation.</p>\n","prototype":{"toDataFormat":{"!type":"fn(html: string, fixForBody: string)","!doc":"<p>Transforms HTML into data to be outputted by the editor, in the format\nexpected by the data processor.</p>\n\n<p>While the editor is able to handle non HTML data (like BBCode), at runtime\nit can handle HTML data only. The role of the data processor is transforming\nthe HTML data containined by the editor into a specific data format through\nthis function.</p>\n\n<pre><code>// Tranforming into BBCode data, having a custom BBCode data processor.\nvar html = '&lt;p&gt;This is &lt;b&gt;an example&lt;/b&gt;.&lt;/p&gt;';\nvar data = editor.dataProcessor.toDataFormat( html ); // 'This is [b]an example[/b].'\n</code></pre>\n"},"toHtml":{"!type":"fn(data: string, fixForBody?: string)","!doc":"<p>Transforms input data into HTML to be loaded in the editor.\nWhile the editor is able to handle non HTML data (like BBCode), at runtime\nit can handle HTML data only. The role of the data processor is transforming\nthe input data into HTML through this function.</p>\n\n<pre><code>// Tranforming BBCode data, having a custom BBCode data processor.\nvar data = 'This is [b]an example[/b].';\nvar html = editor.dataProcessor.toHtml( data ); // '&lt;p&gt;This is &lt;b&gt;an example&lt;/b&gt;.&lt;/p&gt;'\n</code></pre>\n"}}},"dialog":{"definition":{"button":{"!doc":"<p>The definition of a button.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create buttons.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.button\" rel=\"CKEDITOR.ui.dialog.button\" class=\"docClass\">CKEDITOR.ui.dialog.button</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'button',\n    id: 'buttonId',\n    label: 'Click me',\n    title: 'My title',\n    onClick: function() {\n        // this = <a href=\"#!/api/CKEDITOR.ui.dialog.button\" rel=\"CKEDITOR.ui.dialog.button\" class=\"docClass\">CKEDITOR.ui.dialog.button</a>\n        alert( 'Clicked: ' + this.id );\n    }\n}\n</code></pre>\n","prototype":{"disabled":{"!type":"bool","!doc":"<p>Whether the button is disabled.</p>\n"},"label":{"!type":"string","!doc":"<p>The label of the UI element.</p>\n"}}},"uiElement":{"prototype":{"align":{"!type":"string","!doc":"<p>Horizontal alignment (in container) of the UI element.</p>\n"},"className":{"!type":"string","!doc":"<p>CSS class names to append to the UI element.</p>\n"},"commit":{"!doc":"<p>Function to execute whenever the UI element's parent\ndialog's <a href=\"#!/api/CKEDITOR.dialog-method-commitContent\" rel=\"CKEDITOR.dialog-method-commitContent\" class=\"docClass\">CKEDITOR.dialog.commitContent</a> method is executed.\nIt usually takes care of the respective UI element as a standalone element.</p>\n"},"id":{"!type":"string","!doc":"<p>The id of the UI element.</p>\n"},"onHide":{"!doc":"<p>Function to execute whenever the UI element's parent dialog is closed.</p>\n"},"onLoad":{"!doc":"<p>Function to execute the first time the UI element is displayed.</p>\n"},"onShow":{"!doc":"<p>Function to execute whenever the UI element's parent dialog is displayed.</p>\n"},"requiredContent":{"!doc":"<p>The content that needs to be allowed to enable this UI element.\nAll formats accepted by <a href=\"#!/api/CKEDITOR.filter-method-check\" rel=\"CKEDITOR.filter-method-check\" class=\"docClass\">CKEDITOR.filter.check</a> may be used.</p>\n\n<p>When all UI elements in a tab are disabled, this tab will be disabled automatically.</p>\n"},"setup":{"!doc":"<p>Function to execute whenever the UI element's parent\ndialog's <a href=\"#!/api/CKEDITOR.dialog-method-setupContent\" rel=\"CKEDITOR.dialog-method-setupContent\" class=\"docClass\">CKEDITOR.dialog.setupContent</a> method is executed.\nIt usually takes care of the respective UI element as a standalone element.</p>\n"},"style":{"!type":"string","!doc":"<p>Inline CSS classes to append to the UI element.</p>\n"},"title":{"!type":"string","!doc":"<p>The popup label of the UI element.</p>\n"},"type":{"!type":"string","!doc":"<p>The type of the UI element. Required.</p>\n"}},"!doc":"<p>The definition of user interface element (textarea, radio etc).</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create dialog UI elements.</p>\n\n<p>@see <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement\" rel=\"CKEDITOR.ui.dialog.uiElement\" class=\"docClass\">CKEDITOR.ui.dialog.uiElement</a></p>\n"},"checkbox":{"!doc":"<p>The definition of a checkbox element.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create groups of checkbox buttons.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.checkbox\" rel=\"CKEDITOR.ui.dialog.checkbox\" class=\"docClass\">CKEDITOR.ui.dialog.checkbox</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'checkbox',\n    id: 'agree',\n    label: 'I agree',\n    'default': 'checked',\n    onClick: function() {\n        // this = <a href=\"#!/api/CKEDITOR.ui.dialog.checkbox\" rel=\"CKEDITOR.ui.dialog.checkbox\" class=\"docClass\">CKEDITOR.ui.dialog.checkbox</a>\n        alert( 'Checked: ' + this.getValue() );\n    }\n}\n</code></pre>\n","prototype":{"default":{"!type":"string","!doc":"<p>The default state.</p>\n"},"label":{"!type":"string","!doc":"<p>The label of the UI element.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"content":{"!doc":"<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create dialog content pages.</p>\n\n<p>.</p>\n","prototype":{"accessKey":{"!type":"string","!doc":"<p>The CTRL hotkey for switching to the tab.</p>\n\n<pre><code>contentDefinition.accessKey = 'Q'; // Switch to this page when CTRL-Q is pressed.\n</code></pre>\n"},"elements":{"!doc":"<p>The UI elements contained in this content page, defined as an array of\n<a href=\"#!/api/CKEDITOR.dialog.definition.uiElement\" rel=\"CKEDITOR.dialog.definition.uiElement\" class=\"docClass\">CKEDITOR.dialog.definition.uiElement</a> objects.</p>\n"},"id":{"!type":"string","!doc":"<p>The id of the content page.</p>\n"},"label":{"!type":"string","!doc":"<p>The tab label of the content page.</p>\n"},"title":{"!type":"string","!doc":"<p>The popup message of the tab label.</p>\n"}}},"contentObject":{"!doc":"<p>This class is not really part of the API. It is the template of the\nobjects representing content pages inside the\n<a href=\"#!/api/CKEDITOR.dialog.definitionObject\" rel=\"CKEDITOR.dialog.definitionObject\" class=\"docClass\">CKEDITOR.dialog.definitionObject</a>.</p>\n\n<pre><code>CKEDITOR.on( 'dialogDefinition', function( evt ) {\n    var definition = evt.data.definition;\n    var content = definition.getContents( 'page1' );\n    content.remove( 'textInput1' );\n    // ...\n} );\n</code></pre>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a contentObject class instance.</p>\n"}},"add":{"!type":"fn(elementDefinition: ?, nextSiblingId: string)","!doc":"<p>Adds a UI element definition to the content definition.</p>\n"},"get":{"!type":"fn(id: string)","!doc":"<p>Gets a UI element definition under the content definition.</p>\n"},"remove":{"!type":"fn(id: string)","!doc":"<p>Removes a UI element definition from the content definition.</p>\n"}},"file":{"!doc":"<p>The definition of a file upload input.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create file upload elements.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.file\" rel=\"CKEDITOR.ui.dialog.file\" class=\"docClass\">CKEDITOR.ui.dialog.file</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'file',\n    id: 'upload',\n    label: 'Select file from your computer',\n    size: 38\n},\n{\n    type: 'fileButton',\n    id: 'fileId',\n    label: 'Upload file',\n    'for': [ 'tab1', 'upload' ],\n    filebrowser: {\n        onSelect: function( fileUrl, data ) {\n            alert( 'Successfully uploaded: ' + fileUrl );\n        }\n    }\n}\n</code></pre>\n","prototype":{"action":{"!type":"string","!doc":"<p>(Optional) The action attribute of the form element associated with this file upload input.\nIf empty, CKEditor will use path to server connector for currently opened folder.</p>\n"},"size":{"!type":"number","!doc":"<p>The size of the UI element.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"labeledElement":{"prototype":{"controlStyle":{"!type":"string","!doc":"<p>Specify the inline style of the input element container.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label',\n    controlStyle: 'width: 3em'\n}\n</code></pre>\n"},"inputStyle":{"!type":"string","!doc":"<p>Specify the inline style of the input element.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label',\n    inputStyle: 'text-align: center'\n}\n</code></pre>\n"},"label":{"!type":"string","!doc":"<p>The label of the UI element.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label'\n}\n</code></pre>\n"},"labelLayout":{"!type":"string","!doc":"<p>(Optional) Specify the layout of the label. Set to <code>'horizontal'</code> for horizontal layout.\nThe default layout is vertical.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label',\n    labelLayout: 'horizontal'\n}\n</code></pre>\n"},"labelStyle":{"!type":"string","!doc":"<p>Specify the inline style of the uiElement label.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label',\n    labelStyle: 'color: red'\n}\n</code></pre>\n"},"widths":{"!doc":"<p>(Optional) Applies only to horizontal layouts: a two elements array of lengths to specify the widths of the\nlabel and the content element. See also <a href=\"#!/api/CKEDITOR.dialog.definition.labeledElement-property-labelLayout\" rel=\"CKEDITOR.dialog.definition.labeledElement-property-labelLayout\" class=\"docClass\">labelLayout</a>.</p>\n\n<pre><code>{\n    type: 'text',\n    label: 'My Label',\n    labelLayout: 'horizontal',\n    widths: [100, 200]\n}\n</code></pre>\n"}},"!doc":"<p>The definition of labeled user interface element (textarea, textInput etc).</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create dialog UI elements.</p>\n\n<p>@see <a href=\"#!/api/CKEDITOR.ui.dialog.labeledElement\" rel=\"CKEDITOR.ui.dialog.labeledElement\" class=\"docClass\">CKEDITOR.ui.dialog.labeledElement</a></p>\n"},"fileButton":{"!doc":"<p>The definition of a button for submitting the file in a file upload input.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create a button for submitting the file in a file upload input.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.fileButton\" rel=\"CKEDITOR.ui.dialog.fileButton\" class=\"docClass\">CKEDITOR.ui.dialog.fileButton</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n","prototype":{"filebrowser":{"!type":"string","!doc":"<p>The instruction for CKEditor how to deal with file upload.\nBy default, the file and fileButton elements will not work \"as expected\" if this attribute is not set.</p>\n\n<pre><code>// Update field with id 'txtUrl' in the 'tab1' tab when file is uploaded.\nfilebrowser: 'tab1:txtUrl'\n\n// Call custom onSelect function when file is successfully uploaded.\nfilebrowser: {\n    onSelect: function( fileUrl, data ) {\n        alert( 'Successfully uploaded: ' + fileUrl );\n    }\n}/Object\n</code></pre>\n"},"for":{"!type":"string","!doc":"<p>An array that contains pageId and elementId of the file upload input element for which this button is created.</p>\n\n<pre><code>[ pageId, elementId ]\n</code></pre>\n"},"label":{"!type":"string","!doc":"<p>The label of the UI element.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"hbox":{"!doc":"<p>Horizontal layout box for dialog UI elements, auto-expends to available width of container.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create horizontal layouts.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.hbox\" rel=\"CKEDITOR.ui.dialog.hbox\" class=\"docClass\">CKEDITOR.ui.dialog.hbox</a> object and can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'hbox',\n    widths: [ '25%', '25%', '50%' ],\n    children: [\n        {\n            type: 'text',\n            id: 'id1',\n            width: '40px',\n        },\n        {\n            type: 'text',\n            id: 'id2',\n            width: '40px',\n        },\n        {\n            type: 'text',\n            id: 'id3'\n        }\n    ]\n}\n</code></pre>\n","prototype":{"align":{"!type":"string","!doc":"<p>(Optional) The alignment of the whole layout. Example: center, top.</p>\n"},"children":{"!doc":"<p>Array of <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement\" rel=\"CKEDITOR.ui.dialog.uiElement\" class=\"docClass\">CKEDITOR.ui.dialog.uiElement</a> objects inside this container.</p>\n"},"height":{"!type":"number","!doc":"<p>(Optional) The height of the layout.</p>\n"},"padding":{"!type":"number","!doc":"<p>(Optional) The padding width inside child cells. Example: 0, 1.</p>\n"},"styles":{"!type":"string","!doc":"<p>The CSS styles to apply to this element.</p>\n"},"widths":{"!doc":"<p>(Optional) The widths of child cells.</p>\n"}}},"html":{"!doc":"<p>The definition of a raw HTML element.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create elements made from raw HTML code.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.html\" rel=\"CKEDITOR.ui.dialog.html\" class=\"docClass\">CKEDITOR.ui.dialog.html</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.\nTo access HTML elements use <a href=\"#!/api/CKEDITOR.dom.document-method-getById\" rel=\"CKEDITOR.dom.document-method-getById\" class=\"docClass\">CKEDITOR.dom.document.getById</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example 1:\n{\n    type: 'html',\n    html: '&lt;h3&gt;This is some sample HTML content.&lt;/h3&gt;'\n}\n\n// Example 2:\n// Complete sample with document.getById() call when the \"Ok\" button is clicked.\nvar dialogDefinition = {\n    title: 'Sample dialog',\n    minWidth: 300,\n    minHeight: 200,\n    onOk: function() {\n        // \"this\" is now a <a href=\"#!/api/CKEDITOR.dialog\" rel=\"CKEDITOR.dialog\" class=\"docClass\">CKEDITOR.dialog</a> object.\n        var document = this.getElement().getDocument();\n        // document = <a href=\"#!/api/CKEDITOR.dom.document\" rel=\"CKEDITOR.dom.document\" class=\"docClass\">CKEDITOR.dom.document</a>\n        var element = &lt;b&gt;document.getById( 'myDiv' );&lt;/b&gt;\n        if ( element )\n            alert( element.getHtml() );\n    },\n    contents: [\n        {\n            id: 'tab1',\n            label: '',\n            title: '',\n            elements: [\n                {\n                    type: 'html',\n                    html: '&lt;div id=\"myDiv\"&gt;Sample &lt;b&gt;text&lt;/b&gt;.&lt;/div&gt;&lt;div id=\"otherId\"&gt;Another div.&lt;/div&gt;'\n                }\n            ]\n        }\n    ],\n    buttons: [ <a href=\"#!/api/CKEDITOR.dialog-static-method-cancelButton\" rel=\"CKEDITOR.dialog-static-method-cancelButton\" class=\"docClass\">CKEDITOR.dialog.cancelButton</a>, <a href=\"#!/api/CKEDITOR.dialog-static-method-okButton\" rel=\"CKEDITOR.dialog-static-method-okButton\" class=\"docClass\">CKEDITOR.dialog.okButton</a> ]\n};\n</code></pre>\n","prototype":{"html":{"!type":"string","!doc":"<p>(Required) HTML code of this element.</p>\n"}}},"!doc":"<p>The definition of a dialog window.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create dialogs.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n<a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>( 'testOnly', function( editor ) {\n    return {\n        title:          'Test Dialog',\n        resizable:      <a href=\"#!/api/CKEDITOR-property-DIALOG_RESIZE_BOTH\" rel=\"CKEDITOR-property-DIALOG_RESIZE_BOTH\" class=\"docClass\">CKEDITOR.DIALOG_RESIZE_BOTH</a>,\n        minWidth:       500,\n        minHeight:      400,\n        contents: [\n            {\n                id:         'tab1',\n                label:      'First Tab',\n                title:      'First Tab Title',\n                accessKey:  'Q',\n                elements: [\n                    {\n                        type:           'text',\n                        label:          'Test Text 1',\n                        id:             'testText1',\n                        'default':      'hello world!'\n                    }\n                ]\n            }\n        ]\n    };\n} );\n</code></pre>\n","prototype":{"buttons":{"!doc":"<p>The buttons in the dialog, defined as an array of\n<a href=\"#!/api/CKEDITOR.dialog.definition.button\" rel=\"CKEDITOR.dialog.definition.button\" class=\"docClass\">CKEDITOR.dialog.definition.button</a> objects.</p>\n"},"contents":{"!doc":"<p>The contents in the dialog, defined as an array of\n<a href=\"#!/api/CKEDITOR.dialog.definition.content\" rel=\"CKEDITOR.dialog.definition.content\" class=\"docClass\">CKEDITOR.dialog.definition.content</a> objects. Required.</p>\n"},"height":{"!type":"number","!doc":"<p>The initial height of the dialog, in pixels.</p>\n"},"minHeight":{"!type":"number","!doc":"<p>The minimum height of the dialog, in pixels.</p>\n"},"minWidth":{"!type":"number","!doc":"<p>The minimum width of the dialog, in pixels.</p>\n"},"onCancel":{"!doc":"<p>The function to execute when Cancel is pressed.</p>\n"},"onLoad":{"!doc":"<p>The function to execute when the dialog is displayed for the first time.</p>\n"},"onOk":{"!doc":"<p>The function to execute when OK is pressed.</p>\n"},"onShow":{"!doc":"<p>The function to execute when the dialog is loaded (executed every time the dialog is opened).</p>\n"},"resizable":{"!type":"number","!doc":"<p>How the dialog can be resized, must be one of the four contents defined below.</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR-property-DIALOG_RESIZE_NONE\" rel=\"CKEDITOR-property-DIALOG_RESIZE_NONE\" class=\"docClass\">CKEDITOR.DIALOG_RESIZE_NONE</a></li>\n<li><a href=\"#!/api/CKEDITOR-property-DIALOG_RESIZE_WIDTH\" rel=\"CKEDITOR-property-DIALOG_RESIZE_WIDTH\" class=\"docClass\">CKEDITOR.DIALOG_RESIZE_WIDTH</a></li>\n<li><a href=\"#!/api/CKEDITOR-property-DIALOG_RESIZE_HEIGHT\" rel=\"CKEDITOR-property-DIALOG_RESIZE_HEIGHT\" class=\"docClass\">CKEDITOR.DIALOG_RESIZE_HEIGHT</a></li>\n<li><a href=\"#!/api/CKEDITOR-property-DIALOG_RESIZE_BOTH\" rel=\"CKEDITOR-property-DIALOG_RESIZE_BOTH\" class=\"docClass\">CKEDITOR.DIALOG_RESIZE_BOTH</a></li>\n</ul>\n\n"},"title":{"!type":"string","!doc":"<p>The dialog title, displayed in the dialog's header. Required.</p>\n"},"width":{"!type":"number","!doc":"<p>The initial width of the dialog, in pixels.</p>\n"}},"radio":{"!doc":"<p>The definition of a radio group.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create groups of radio buttons.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.radio\" rel=\"CKEDITOR.ui.dialog.radio\" class=\"docClass\">CKEDITOR.ui.dialog.radio</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'radio',\n    id: 'country',\n    label: 'Which country is bigger',\n    items: [ [ 'France', 'FR' ], [ 'Germany', 'DE' ] ],\n    style: 'color: green',\n    'default': 'DE',\n    onClick: function() {\n        // this = <a href=\"#!/api/CKEDITOR.ui.dialog.radio\" rel=\"CKEDITOR.ui.dialog.radio\" class=\"docClass\">CKEDITOR.ui.dialog.radio</a>\n        alert( 'Current value: ' + this.getValue() );\n    }\n}\n</code></pre>\n","prototype":{"default":{"!type":"string","!doc":"<p>The default value.</p>\n"},"items":{"!doc":"<p>An array of options. Each option is a 1- or 2-item array of format <code>[ 'Description', 'Value' ]</code>.\nIf <code>'Value'</code> is missing, then the value would be assumed to be the same as the description.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"select":{"!doc":"<p>The definition of a select element.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create select elements.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.select\" rel=\"CKEDITOR.ui.dialog.select\" class=\"docClass\">CKEDITOR.ui.dialog.select</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'select',\n    id: 'sport',\n    label: 'Select your favourite sport',\n    items: [ [ 'Basketball' ], [ 'Baseball' ], [ 'Hockey' ], [ 'Football' ] ],\n    'default': 'Football',\n    onChange: function( api ) {\n        // this = <a href=\"#!/api/CKEDITOR.ui.dialog.select\" rel=\"CKEDITOR.ui.dialog.select\" class=\"docClass\">CKEDITOR.ui.dialog.select</a>\n        alert( 'Current value: ' + this.getValue() );\n    }\n}\n</code></pre>\n","prototype":{"default":{"!type":"string","!doc":"<p>The default value.</p>\n"},"items":{"!doc":"<p>An array of options. Each option is a 1- or 2-item array of format <code>[ 'Description', 'Value' ]</code>.\nIf <code>'Value'</code> is missing, then the value would be assumed to be the same as the description.</p>\n"},"multiple":{"!type":"bool","!doc":"<p>(Optional) Set this to true if you'd like to have a multiple-choice select box.</p>\n"},"size":{"!type":"number","!doc":"<p>(Optional) The number of items to display in the select box.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"textarea":{"!doc":"<p>The definition of a text field (multiple lines).</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create textarea.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.textarea\" rel=\"CKEDITOR.ui.dialog.textarea\" class=\"docClass\">CKEDITOR.ui.dialog.textarea</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>    // There is no constructor for this class, the user just has to define an\n    // object with the appropriate properties.\n\n    // Example:\n    {\n        type: 'textarea',\n        id: 'message',\n        label: 'Your comment',\n        'default': '',\n        validate: function() {\n            if ( this.getValue().length &lt; 5 ) {\n                api.openMsgDialog( 'The comment is too short.' );\n                return false;\n            }\n        }\n    }\n</code></pre>\n","prototype":{"cols":{"!type":"number","!doc":"<p>The number of columns.</p>\n"},"default":{"!type":"string","!doc":"<p>The default value.</p>\n"},"rows":{"!type":"number","!doc":"<p>The number of rows.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"textInput":{"!doc":"<p>The definition of a text field (single line).</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create text fields.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.textInput\" rel=\"CKEDITOR.ui.dialog.textInput\" class=\"docClass\">CKEDITOR.ui.dialog.textInput</a> object\nand can be accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<p>For a complete example of dialog definition, please check <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n{\n    type: 'text',\n    id: 'name',\n    label: 'Your name',\n    'default': '',\n    validate: function() {\n        if ( !this.getValue() ) {\n            api.openMsgDialog( '', 'Name cannot be empty.' );\n            return false;\n        }\n    }\n}\n</code></pre>\n","prototype":{"default":{"!type":"string","!doc":"<p>The default value.</p>\n"},"maxLength":{"!type":"number","!doc":"<p>(Optional) The maximum length.</p>\n"},"size":{"!type":"number","!doc":"<p>(Optional) The size of the input field.</p>\n"},"validate":{"!doc":"<p>(Optional) The validation function.</p>\n"}}},"vbox":{"!doc":"<p>Vertical layout box for dialog UI elements.</p>\n\n<p>This class is not really part of the API. It just illustrates the properties\nthat developers can use to define and create vertical layouts.</p>\n\n<p>Once the dialog is opened, the created element becomes a <a href=\"#!/api/CKEDITOR.ui.dialog.vbox\" rel=\"CKEDITOR.ui.dialog.vbox\" class=\"docClass\">CKEDITOR.ui.dialog.vbox</a> object and can\nbe accessed with <a href=\"#!/api/CKEDITOR.dialog-method-getContentElement\" rel=\"CKEDITOR.dialog-method-getContentElement\" class=\"docClass\">CKEDITOR.dialog.getContentElement</a>.</p>\n\n<pre><code>// There is no constructor for this class, the user just has to define an\n// object with the appropriate properties.\n\n// Example:\n{\n    type: 'vbox',\n    align: 'right',\n    width: '200px',\n    children: [\n        {\n            type: 'text',\n            id: 'age',\n            label: 'Age'\n        },\n        {\n            type: 'text',\n            id: 'sex',\n            label: 'Sex'\n        },\n        {\n            type: 'text',\n            id: 'nationality',\n            label: 'Nationality'\n        }\n    ]\n}\n</code></pre>\n","prototype":{"align":{"!type":"string","!doc":"<p>(Optional) The alignment of the whole layout. Example: center, top.</p>\n"},"children":{"!doc":"<p>Array of <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement\" rel=\"CKEDITOR.ui.dialog.uiElement\" class=\"docClass\">CKEDITOR.ui.dialog.uiElement</a> objects inside this container.</p>\n"},"expand":{"!type":"bool","!doc":"<p>(Optional) Whether the layout should expand vertically to fill its container.</p>\n"},"heights":{"!type":"number","!doc":"<p>(Optional) The heights of individual cells.</p>\n"},"padding":{"!type":"number","!doc":"<p>(Optional) The padding width inside child cells. Example: 0, 1.</p>\n"},"styles":{"!type":"string","!doc":"<p>The CSS styles to apply to this element.</p>\n"},"width":{"!doc":"<p>(Optional) The width of the layout.</p>\n"}}}},"definitionObject":{"!doc":"<p>This class is not really part of the API. It is the <code>definition</code> property value\npassed to <code>dialogDefinition</code> event handlers.</p>\n\n<pre><code>CKEDITOR.on( 'dialogDefinition', function( evt ) {\n    var definition = evt.data.definition;\n    var content = definition.getContents( 'page1' );\n        // ...\n} );\n</code></pre>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a definitionObject class instance.</p>\n"}},"addButton":{"!type":"fn(buttonDefinition: ?, nextSiblingId?: string)","!doc":"<p>Adds a button definition object under this dialog definition.</p>\n"},"addContents":{"!type":"fn(contentDefinition: ?, nextSiblingId?: string)","!doc":"<p>Adds a content definition object under this dialog definition.</p>\n"},"getButton":{"!type":"fn(id: string)","!doc":"<p>Gets a button definition.</p>\n"},"getContents":{"!type":"fn(id: string)","!doc":"<p>Gets a content definition.</p>\n"},"removeButton":{"!type":"fn(id: string)","!doc":"<p>Removes a button definition from the dialog definition.</p>\n"},"removeContents":{"!type":"fn(id: string)","!doc":"<p>Removes a content definition from this dialog definition.</p>\n"}},"!doc":"<p>This is the base class for runtime dialog objects. An instance of this\nclass represents a single named dialog for a single editor instance.</p>\n\n<pre><code>var dialogObj = new <a href=\"#!/api/CKEDITOR.dialog\" rel=\"CKEDITOR.dialog\" class=\"docClass\">CKEDITOR.dialog</a>( editor, 'smiley' );\n</code></pre>\n","prototype":{"constructor":{"!type":"fn(editor: ?, dialogName: string)","!doc":"<p>Creates a dialog class instance.</p>\n"}},"addFocusable":{"!type":"fn(element: ?, index?: number)","!doc":"<p>Adds element to dialog's focusable list.</p>\n"},"addPage":{"!type":"fn(contents: ?)","!doc":"<p>Adds a tabbed page into the dialog.</p>\n"},"click":{"!type":"fn(id: string)","!doc":"<p>Simulates a click to a dialog button in the dialog's button row.</p>\n"},"commitContent":{"!type":"fn()","!doc":"<p>Calls the <a href=\"#!/api/CKEDITOR.dialog.definition.uiElement-property-commit\" rel=\"CKEDITOR.dialog.definition.uiElement-property-commit\" class=\"docClass\">CKEDITOR.dialog.definition.uiElement.commit</a> method of each\nof the UI elements, with the arguments passed through it.\nIt is usually being called when the user confirms the dialog, to process the values.</p>\n\n<pre><code>dialogObj.commitContent();\n\nvar timestamp = ( new Date() ).valueOf();\ndialogObj.commitContent( timestamp );\n</code></pre>\n"},"disableButton":{"!type":"fn(id: string)","!doc":"<p>Disables a dialog button.</p>\n"},"enableButton":{"!type":"fn(id: string)","!doc":"<p>Enables a dialog button.</p>\n"},"foreach":{"!type":"fn(fn: ?)","!doc":"<p>Executes a function for each UI element.</p>\n"},"getButton":{"!type":"fn(id: string)","!doc":"<p>Gets the UI element of a button in the dialog's button row.</p>\n"},"getContentElement":{"!type":"fn(pageId: string, elementId: string)","!doc":"<p>Gets a dialog UI element object from a dialog page.</p>\n\n<pre><code>dialogObj.getContentElement( 'tabId', 'elementId' ).setValue( 'Example' );\n</code></pre>\n"},"getElement":{"!type":"fn()","!doc":"<p>Gets the root DOM element of the dialog.</p>\n\n<pre><code>var dialogElement = dialogObj.getElement().getFirst();\ndialogElement.setStyle( 'padding', '5px' );\n</code></pre>\n"},"getName":{"!type":"fn()","!doc":"<p>Gets the name of the dialog.</p>\n\n<pre><code>var dialogName = dialogObj.getName();\n</code></pre>\n"},"getPageCount":{"!type":"fn()","!doc":"<p>Gets the number of pages in the dialog.</p>\n"},"getParentEditor":{"!type":"fn()","!doc":"<p>Gets the editor instance which opened this dialog.</p>\n"},"getPosition":{"!type":"fn()","!doc":"<p>Gets the dialog's position in the window.</p>\n\n<pre><code>var dialogX = dialogObj.getPosition().x;\n</code></pre>\n"},"getSelectedElement":{"!type":"fn()","!doc":"<p>Gets the element that was selected when opening the dialog, if any.</p>\n"},"getSize":{"!type":"fn()","!doc":"<p>Gets the current size of the dialog in pixels.</p>\n\n<p>var width = dialogObj.getSize().width;</p>\n"},"getValueOf":{"!type":"fn(pageId: string, elementId: string)","!doc":"<p>Gets the value of a dialog UI element.</p>\n\n<pre><code>alert( dialogObj.getValueOf( 'tabId', 'elementId' ) );\n</code></pre>\n"},"hide":{"!type":"fn()","!doc":"<p>Hides the dialog box.</p>\n\n<pre><code>dialogObj.hide();\n</code></pre>\n"},"hidePage":{"!type":"fn(id: string)","!doc":"<p>Hides a page's tab away from the dialog.</p>\n\n<pre><code>dialog.hidePage( 'tab_3' );\n</code></pre>\n"},"layout":{"!type":"fn()","!doc":"<p>Rearrange the dialog to its previous position or the middle of the window.</p>\n"},"move":{"!type":"fn(x: number, y: number, save: bool)","!doc":"<p>Moves the dialog to an <code>(x, y)</code> coordinate relative to the window.</p>\n\n<p>dialogObj.move( 10, 40 );</p>\n"},"reset":{"!type":"fn()","!doc":"<p>Resets all input values in the dialog.</p>\n\n<pre><code>dialogObj.reset();\n</code></pre>\n"},"resize":{"!type":"fn(width: number, height: number)","!doc":"<p>Resizes the dialog.</p>\n\n<pre><code>dialogObj.resize( 800, 640 );\n</code></pre>\n"},"selectPage":{"!type":"fn(id: string)","!doc":"<p>Activates a tab page in the dialog by its id.</p>\n\n<pre><code>dialogObj.selectPage( 'tab_1' );\n</code></pre>\n"},"setValueOf":{"!type":"fn(pageId: string, elementId: string, value: ?)","!doc":"<p>Sets the value of a dialog UI element.</p>\n\n<pre><code>dialogObj.setValueOf( 'tabId', 'elementId', 'Example' );\n</code></pre>\n"},"setupContent":{"!type":"fn()","!doc":"<p>Calls the <a href=\"#!/api/CKEDITOR.dialog.definition.uiElement-property-setup\" rel=\"CKEDITOR.dialog.definition.uiElement-property-setup\" class=\"docClass\">CKEDITOR.dialog.definition.uiElement.setup</a> method of each\nof the UI elements, with the arguments passed through it.\nIt is usually being called when the dialog is opened, to put the initial value inside the field.</p>\n\n<pre><code>dialogObj.setupContent();\n\nvar timestamp = ( new Date() ).valueOf();\ndialogObj.setupContent( timestamp );\n</code></pre>\n"},"show":{"!type":"fn()","!doc":"<p>Shows the dialog box.</p>\n\n<pre><code>dialogObj.show();\n</code></pre>\n"},"showPage":{"!type":"fn(id: string)","!doc":"<p>Unhides a page's tab.</p>\n\n<pre><code>dialog.showPage( 'tab_2' );\n</code></pre>\n"},"updateStyle":{"!type":"fn()","!doc":"<p>Dialog state-specific style updates.</p>\n"},"add":{"!type":"fn(name: string, dialogDefinition: ?)","!doc":"<p>Registers a dialog.</p>\n\n<pre><code>// Full sample plugin, which does not only register a dialog window but also adds an item to the context menu.\n// To open the dialog window, choose \"Open dialog\" in the context menu.\n<a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'myplugin', {\n    init: function( editor ) {\n        editor.addCommand( 'mydialog',new <a href=\"#!/api/CKEDITOR.dialogCommand\" rel=\"CKEDITOR.dialogCommand\" class=\"docClass\">CKEDITOR.dialogCommand</a>( 'mydialog' ) );\n\n        if ( editor.contextMenu ) {\n            editor.addMenuGroup( 'mygroup', 10 );\n            editor.addMenuItem( 'My Dialog', {\n                label: 'Open dialog',\n                command: 'mydialog',\n                group: 'mygroup'\n            } );\n            editor.contextMenu.addListener( function( element ) {\n                return { 'My Dialog': <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> };\n            } );\n        }\n\n        <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>( 'mydialog', function( api ) {\n            // <a href=\"#!/api/CKEDITOR.dialog.definition\" rel=\"CKEDITOR.dialog.definition\" class=\"docClass\">CKEDITOR.dialog.definition</a>\n            var dialogDefinition = {\n                title: 'Sample dialog',\n                minWidth: 390,\n                minHeight: 130,\n                contents: [\n                    {\n                        id: 'tab1',\n                        label: 'Label',\n                        title: 'Title',\n                        expand: true,\n                        padding: 0,\n                        elements: [\n                            {\n                                type: 'html',\n                                html: '&lt;p&gt;This is some sample HTML content.&lt;/p&gt;'\n                            },\n                            {\n                                type: 'textarea',\n                                id: 'textareaId',\n                                rows: 4,\n                                cols: 40\n                            }\n                        ]\n                    }\n                ],\n                buttons: [ <a href=\"#!/api/CKEDITOR.dialog-static-method-okButton\" rel=\"CKEDITOR.dialog-static-method-okButton\" class=\"docClass\">CKEDITOR.dialog.okButton</a>, <a href=\"#!/api/CKEDITOR.dialog-static-method-cancelButton\" rel=\"CKEDITOR.dialog-static-method-cancelButton\" class=\"docClass\">CKEDITOR.dialog.cancelButton</a> ],\n                onOk: function() {\n                    // \"this\" is now a <a href=\"#!/api/CKEDITOR.dialog\" rel=\"CKEDITOR.dialog\" class=\"docClass\">CKEDITOR.dialog</a> object.\n                    // Accessing dialog elements:\n                    var textareaObj = this.getContentElement( 'tab1', 'textareaId' );\n                    alert( \"You have entered: \" + textareaObj.getValue() );\n                }\n            };\n\n            return dialogDefinition;\n        } );\n    }\n} );\n\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1', { extraPlugins: 'myplugin' } );\n</code></pre>\n"},"addIframe":{"!type":"fn(name: string, title: string, minWidth: number, minHeight: number, onContentLoad?: ?, userDefinition?: ?)","!doc":"<p>An iframe base dialog.</p>\n"},"addUIElement":{"!type":"fn(typeName: string, builder: ?)","!doc":"<p>Registers a dialog UI element.</p>\n"},"cancelButton":{"!type":"fn()","!doc":"<p>The default cancel button for dialogs. Fires the <code>cancel</code> event and\ncloses the dialog if no UI element value changed.</p>\n"},"exists":{"!type":"fn(name: ?)","!doc":"<p>@todo</p>\n"},"getCurrent":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"isTabEnabled":{"!type":"fn(editor: ?, dialogName: string, tabName: string)","!doc":"<p>Check whether tab wasn't removed by <a href=\"#!/api/CKEDITOR.config-cfg-removeDialogTabs\" rel=\"CKEDITOR.config-cfg-removeDialogTabs\" class=\"docClass\">CKEDITOR.config.removeDialogTabs</a>.</p>\n"},"okButton":{"!type":"fn()","!doc":"<p>The default OK button for dialogs. Fires the <code>ok</code> event and closes the dialog if the event succeeds.</p>\n"}},"dialogCommand":{"!doc":"<p>Generic dialog command. It opens a specific dialog when executed.</p>\n\n<pre><code>// Register the \"link\" command, which opens the \"link\" dialog.\neditor.addCommand( 'link', new <a href=\"#!/api/CKEDITOR.dialogCommand\" rel=\"CKEDITOR.dialogCommand\" class=\"docClass\">CKEDITOR.dialogCommand</a>( 'link' ) );\n</code></pre>\n","value":{"!doc":"<p>It's important for validate functions to be able to accept the value\nas argument in addition to this.getValue(), so that it is possible to\ncombine validate functions together to make more sophisticated\nvalidators.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialogName: string, ext?: ?)","!doc":"<p>Creates a dialogCommand class instance.</p>\n"}}},"dom":{"comment":{"!doc":"<p>Represents a DOM comment node.</p>\n\n<pre><code>var nativeNode = document.createComment( 'Example' );\nvar comment = new <a href=\"#!/api/CKEDITOR.dom.comment\" rel=\"CKEDITOR.dom.comment\" class=\"docClass\">CKEDITOR.dom.comment</a>( nativeNode );\n\nvar comment = new <a href=\"#!/api/CKEDITOR.dom.comment\" rel=\"CKEDITOR.dom.comment\" class=\"docClass\">CKEDITOR.dom.comment</a>( 'Example' );\n</code></pre>\n","type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_COMMENT\" rel=\"CKEDITOR-property-NODE_COMMENT\" class=\"docClass\">CKEDITOR.NODE_COMMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(comment: ?, ownerDocument?: ?)","!doc":"<p>Creates a comment class instance.</p>\n"}},"getOuterHtml":{"!type":"fn()","!doc":"<p>Gets the outer HTML of this comment.</p>\n"}},"domObject":{"$":{"!doc":"<p>The native DOM object represented by this class instance.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nalert( element.$.nodeType ); // '1'\n</code></pre>\n"},"clearCustomData":{"!type":"fn()","!doc":"<p>Removes any data stored on this object.\nTo avoid memory leaks we must assure that there are no\nreferences left after the object is no longer needed.</p>\n"},"equals":{"!type":"fn(object: ?)","!doc":"<p>Determines whether the specified object is equal to the current object.</p>\n\n<pre><code>var doc = new <a href=\"#!/api/CKEDITOR.dom.document\" rel=\"CKEDITOR.dom.document\" class=\"docClass\">CKEDITOR.dom.document</a>( document );\nalert( doc.equals( <a href=\"#!/api/CKEDITOR-property-document\" rel=\"CKEDITOR-property-document\" class=\"docClass\">CKEDITOR.document</a> ) );   // true\nalert( doc == <a href=\"#!/api/CKEDITOR-property-document\" rel=\"CKEDITOR-property-document\" class=\"docClass\">CKEDITOR.document</a> );          // false\n</code></pre>\n"},"getCustomData":{"!type":"fn(key: string)","!doc":"<p>Gets the value set to a data slot in this object.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nalert( element.getCustomData( 'hasCustomData' ) );      // e.g. 'true'\nalert( element.getCustomData( 'nonExistingKey' ) );     // null\n</code></pre>\n"},"getPrivate":{"!type":"fn()","!doc":"<p>Get the private <code>_</code> object which is bound to the native\nDOM object using <a href=\"#!/api/CKEDITOR.dom.domObject-method-getCustomData\" rel=\"CKEDITOR.dom.domObject-method-getCustomData\" class=\"docClass\">getCustomData</a>.</p>\n\n<pre><code>var elementA = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( nativeElement );\nelementA.getPrivate().value = 1;\n...\nvar elementB = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( nativeElement );\nelementB.getPrivate().value; // 1\n</code></pre>\n"},"getUniqueId":{"!type":"fn()","!doc":"<p>Gets an ID that can be used to identify this DOM object in\nthe running session.</p>\n\n<p><strong>Note</strong>: This method does not work on text nodes prior to Internet Explorer 9.</p>\n"},"removeAllListeners":{"!type":"fn()","!doc":"<p>Removes any listener set on this object.</p>\n\n<p>To avoid memory leaks we must assure that there are no\nreferences left after the object is no longer needed.</p>\n"},"removeCustomData":{"!type":"fn(key: string)","!doc":"<p>Removes the value in data slot under given <code>key</code>.</p>\n"},"setCustomData":{"!type":"fn(key: string, value: ?)","!doc":"<p>Sets a data slot value for this object. These values are shared by all\ninstances pointing to that same DOM object.</p>\n\n<p><strong>Note:</strong> The created data slot is only guarantied to be available on this unique dom node,\nthus any wish to continue access it from other element clones (either created by\nclone node or from <code>innerHtml</code>) will fail, for such usage, please use\n<a href=\"#!/api/CKEDITOR.dom.element-method-setAttribute\" rel=\"CKEDITOR.dom.element-method-setAttribute\" class=\"docClass\">CKEDITOR.dom.element.setAttribute</a> instead.</p>\n\n<p><strong>Note</strong>: This method does not work on text nodes prior to Internet Explorer 9.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nelement.setCustomData( 'hasCustomData', true );\n</code></pre>\n"},"!doc":"<p>Represents a DOM object. This class is not intended to be used directly. It\nserves as the base class for other classes representing specific DOM\nobjects.</p>\n","prototype":{"constructor":{"!type":"fn(nativeDomObject: ?)","!doc":"<p>Creates a domObject class instance.</p>\n"}}},"node":{"appendTo":{"!type":"fn(element: ?)","!doc":"<p>Makes this node a child of another element.</p>\n\n<pre><code>var p = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'p' );\nvar strong = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'strong' );\nstrong.appendTo( p );\n\n// Result: '&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;'.\n</code></pre>\n"},"clone":{"!type":"fn(includeChildren?: bool, cloneId?: bool)","!doc":"<p>Clone this node.</p>\n\n<p><strong>Note</strong>: Values set by {<a href=\"#!/api/CKEDITOR.dom.node-method-setCustomData\" rel=\"CKEDITOR.dom.node-method-setCustomData\" class=\"docClass\">setCustomData</a>} won't be available in the clone.</p>\n"},"getAddress":{"!type":"fn(normalized?: bool)","!doc":"<p>Retrieves a uniquely identifiable tree address for this node.\nThe tree address returned is an array of integers, with each integer\nindicating a child index of a DOM node, starting from\n<code>document.documentElement</code>.</p>\n\n<p>For example, assuming <code>&lt;body&gt;</code> is the second child\nof <code>&lt;html&gt;</code> (<code>&lt;head&gt;</code> being the first),\nand we would like to address the third child under the\nfourth child of <code>&lt;body&gt;</code>, the tree address returned would be:\n<code>[1, 3, 2]</code>.</p>\n\n<p>The tree address cannot be used for finding back the DOM tree node once\nthe DOM tree structure has been modified.</p>\n"},"getAscendant":{"!type":"fn(reference: string, includeSelf?: bool)","!doc":"<p>Gets the closest ancestor node of this node, specified by its name.</p>\n\n<pre><code>// Suppose we have the following HTML structure:\n// &lt;div id=\"outer\"&gt;&lt;div id=\"inner\"&gt;&lt;p&gt;&lt;b&gt;Some text&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\n// If node == &lt;b&gt;\nascendant = node.getAscendant( 'div' );             // ascendant == &lt;div id=\"inner\"&gt;\nascendant = node.getAscendant( 'b' );               // ascendant == null\nascendant = node.getAscendant( 'b', true );         // ascendant == &lt;b&gt;\nascendant = node.getAscendant( { div:1,p:1 } );     // Searches for the first 'div' or 'p': ascendant == &lt;div id=\"inner\"&gt;\n</code></pre>\n"},"getCommonAncestor":{"!type":"fn(node: ?)","!doc":"<p>@todo</p>\n"},"getDocument":{"!type":"fn()","!doc":"<p>Gets the document containing this element.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'example' );\nalert( element.getDocument().equals( <a href=\"#!/api/CKEDITOR-property-document\" rel=\"CKEDITOR-property-document\" class=\"docClass\">CKEDITOR.document</a> ) ); // true\n</code></pre>\n"},"getIndex":{"!type":"fn(normalized: bool)","!doc":"<p>Get index of a node in an array of its parent.childNodes.</p>\n\n<p>Let's assume having childNodes array:</p>\n\n<pre><code>[ emptyText, element1, text, text, element2 ]\nelement1.getIndex();        // 1\nelement1.getIndex( true );  // 0\nelement2.getIndex();        // 4\nelement2.getIndex( true );  // 2\n</code></pre>\n"},"getNext":{"!type":"fn(evaluator?: ?)","!doc":"<p>Gets the node that follows this element in its parent's child list.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;&lt;b&gt;Example&lt;/b&gt;&lt;i&gt;next&lt;/i&gt;&lt;/div&gt;' );\nvar last = element.getFirst().getNext();\nalert( last.getName() ); // 'i'\n</code></pre>\n"},"getNextSourceNode":{"!type":"fn(startFromSibling: ?, nodeType: ?, guard: ?)","!doc":"<p>@todo</p>\n"},"getParent":{"!type":"fn(allowFragmentParent?: bool)","!doc":"<p>Gets the parent element for this node.</p>\n\n<pre><code>var node = editor.document.getBody().getFirst();\nvar parent = node.getParent();\nalert( parent.getName() ); // 'body'\n</code></pre>\n"},"getParents":{"!type":"fn(closerFirst?: bool)","!doc":"<p>Returns array containing node parents and node itself. By default nodes are in <em>descending</em> order.</p>\n\n<pre><code>// Assuming that body has paragraph as first child.\nvar node = editor.document.getBody().getFirst();\nvar parents = node.getParents();\nalert( parents[ 0 ].getName() + ',' + parents[ 2 ].getName() ); // 'html,p'\n</code></pre>\n"},"getPosition":{"!type":"fn(otherNode: ?)","!doc":"<p>@todo</p>\n"},"getPrevious":{"!type":"fn(evaluator?: ?)","!doc":"<p>Gets the node that preceed this element in its parent's child list.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;&lt;i&gt;prev&lt;/i&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;' );\nvar first = element.getLast().getPrev();\nalert( first.getName() ); // 'i'\n</code></pre>\n"},"getPreviousSourceNode":{"!type":"fn(startFromSibling: ?, nodeType: ?, guard: ?)","!doc":"<p>@todo</p>\n"},"hasAscendant":{"!type":"fn(name: ?, includeSelf: ?)","!doc":"<p>@todo</p>\n"},"hasNext":{"!type":"fn()","!doc":"<p>Check if node is succeeded by any sibling.</p>\n"},"hasPrevious":{"!type":"fn()","!doc":"<p>Check if node is preceded by any sibling.</p>\n"},"insertAfter":{"!type":"fn(node: ?)","!doc":"<p>Inserts this element after a node.</p>\n\n<pre><code>var em = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'em' );\nvar strong = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'strong' );\nstrong.insertAfter( em );\n\n// Result: '&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;'\n</code></pre>\n"},"insertBefore":{"!type":"fn(node: ?)","!doc":"<p>Inserts this element before a node.</p>\n\n<pre><code>var em = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'em' );\nvar strong = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'strong' );\nstrong.insertBefore( em );\n\n// result: '&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;'\n</code></pre>\n"},"insertBeforeMe":{"!type":"fn(node: ?)","!doc":"<p>Inserts node before this node.</p>\n\n<pre><code>var em = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'em' );\nvar strong = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'strong' );\nstrong.insertBeforeMe( em );\n\n// result: '&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;'\n</code></pre>\n"},"isReadOnly":{"!type":"fn()","!doc":"<p>Checks if this node is read-only (should not be changed).</p>\n\n<p><strong>Note:</strong> When <code>attributeCheck</code> is not used, this method only work for elements\nthat are already presented in the document, otherwise the result\nis not guaranteed, it's mainly for performance consideration.</p>\n\n<pre><code>// For the following HTML:\n// &lt;div contenteditable=\"false\"&gt;Some &lt;b&gt;text&lt;/b&gt;&lt;/div&gt;\n\n// If \"ele\" is the above &lt;div&gt;\nelement.isReadOnly(); // true\n</code></pre>\n"},"ltrim":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"move":{"!type":"fn(target: ?, toStart: ?)","!doc":"<p>@todo</p>\n"},"remove":{"!type":"fn(preserveChildren?: bool)","!doc":"<p>Removes this node from the document DOM.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'MyElement' );\nelement.remove();\n</code></pre>\n"},"replace":{"!type":"fn(nodeToReplace: ?)","!doc":"<p>@todo</p>\n"},"rtrim":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"trim":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"!doc":"<p>Base class for classes representing DOM nodes. This constructor may return\nan instance of a class that inherits from this class, like\n<a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a> or <a href=\"#!/api/CKEDITOR.dom.text\" rel=\"CKEDITOR.dom.text\" class=\"docClass\">CKEDITOR.dom.text</a>.</p>\n","prototype":{"constructor":{"!type":"fn(domNode: ?)","!doc":"<p>Creates a node class instance.</p>\n"}}},"document":{"!doc":"<p>Represents a DOM document.</p>\n\n<pre><code>var document = new <a href=\"#!/api/CKEDITOR.dom.document\" rel=\"CKEDITOR.dom.document\" class=\"docClass\">CKEDITOR.dom.document</a>( document );\n</code></pre>\n","type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_DOCUMENT\" rel=\"CKEDITOR-property-NODE_DOCUMENT\" class=\"docClass\">CKEDITOR.NODE_DOCUMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(domDocument: ?)","!doc":"<p>Creates a document class instance.</p>\n"}},"_getHtml5ShivFrag":{"!type":"fn()","!doc":"<p>IE8 only method. It returns document fragment which has all HTML5 elements enabled.</p>\n"},"appendStyleSheet":{"!type":"fn(cssFileUrl: string)","!doc":"<p>Appends a CSS file to the document.</p>\n\n<pre><code>CKEDITOR.document.appendStyleSheet( '/mystyles.css' );\n</code></pre>\n"},"appendStyleText":{"!type":"fn(cssStyleText: ?)","!doc":"<p>Creates a CSS style sheet and inserts it into the document.</p>\n"},"createElement":{"!type":"fn(name: ?, attribsAndStyles: ?)","!doc":"<p>Creates <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a> instance in this document.</p>\n"},"createText":{"!type":"fn(text: string)","!doc":"<p>Creates <a href=\"#!/api/CKEDITOR.dom.text\" rel=\"CKEDITOR.dom.text\" class=\"docClass\">CKEDITOR.dom.text</a> instance in this document.</p>\n"},"find":{"!type":"fn(selector: string)","!doc":"<p>Wrapper for <code>querySelectorAll</code>. Returns a list of elements within this document that match\nspecified <code>selector</code>.</p>\n\n<p><strong>Note:</strong> returned list is not a live collection (like a result of native <code>querySelectorAll</code>).</p>\n"},"findOne":{"!type":"fn(selector: string)","!doc":"<p>Wrapper for <code>querySelector</code>. Returns first element within this document that matches\nspecified <code>selector</code>.</p>\n"},"focus":{"!type":"fn()","!doc":"<p>Moves the selection focus to this document's window.</p>\n"},"getActive":{"!type":"fn()","!doc":"<p>Returns the element that is currently designated as the active element in the document.</p>\n\n<p><strong>Note:</strong> Only one element can be active at a time in a document.\nAn active element does not necessarily have focus,\nbut an element with focus is always the active element in a document.</p>\n"},"getBody":{"!type":"fn()","!doc":"<p>Gets the <code>&lt;body&gt;</code> element for this document.</p>\n\n<pre><code>var element = CKEDITOR.document.getBody();\nalert( element.getName() ); // 'body'\n</code></pre>\n"},"getByAddress":{"!type":"fn(address: ?, normalized?: bool)","!doc":"<p>Gets a node based on its address. See <a href=\"#!/api/CKEDITOR.dom.node-method-getAddress\" rel=\"CKEDITOR.dom.node-method-getAddress\" class=\"docClass\">CKEDITOR.dom.node.getAddress</a>.</p>\n"},"getById":{"!type":"fn(elementId: string)","!doc":"<p>Gets an element based on its id.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nalert( element.getId() ); // 'myElement'\n</code></pre>\n"},"getDocumentElement":{"!type":"fn()","!doc":"<p>Gets the DOM document element for this document.</p>\n"},"getElementsByTag":{"!type":"fn(tagName: string)","!doc":"<p>Gets elements list based on given tag name.</p>\n"},"getHead":{"!type":"fn()","!doc":"<p>Gets the <code>&lt;head&gt;</code> element for this document.</p>\n\n<pre><code>var element = CKEDITOR.document.getHead();\nalert( element.getName() ); // 'head'\n</code></pre>\n"},"getSelection":{"!type":"fn()","!doc":"<p>Gets the current selection in context of the document's body element.</p>\n\n<pre><code>var selection = CKEDITOR.instances.editor1.document.getSelection();\nalert( selection.getType() );\n</code></pre>\n"},"getWindow":{"!type":"fn()","!doc":"<p>Gets the window object that holds this document.</p>\n"},"write":{"!type":"fn(html: string)","!doc":"<p>Defines the document contents through document.write. Note that the\nprevious document contents will be lost (cleaned).</p>\n\n<pre><code>document.write(\n    '&lt;html&gt;' +\n        '&lt;head&gt;&lt;title&gt;Sample Doc&lt;/title&gt;&lt;/head&gt;' +\n        '&lt;body&gt;Document contents created by code&lt;/body&gt;' +\n    '&lt;/html&gt;'\n);\n</code></pre>\n"}},"documentFragment":{"!doc":"<p>DocumentFragment is a \"lightweight\" or \"minimal\" Document object. It is\ncommonly used to extract a portion of a document's tree or to create a new\nfragment of a document. Various operations may take DocumentFragment objects\nas arguments and results in all the child nodes of the DocumentFragment being\nmoved to the child list of this node.</p>\n","type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_DOCUMENT_FRAGMENT\" rel=\"CKEDITOR-property-NODE_DOCUMENT_FRAGMENT\" class=\"docClass\">CKEDITOR.NODE_DOCUMENT_FRAGMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(nodeOrDoc: ?)","!doc":"<p>Creates a document fragment class instance.</p>\n"}},"insertAfterNode":{"!type":"fn(node: ?)","!doc":"<p>Inserts document fragment's contents after specified node.</p>\n"}},"element":{"!doc":"<p>Represents a DOM element.</p>\n\n<pre><code>// Create a new &lt;span&gt; element.\nvar element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\n\n// Create an element based on a native DOM element.\nvar element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( document.getElementById( 'myId' ) );\n</code></pre>\n","type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_ELEMENT\" rel=\"CKEDITOR-property-NODE_ELEMENT\" class=\"docClass\">CKEDITOR.NODE_ELEMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(element: ?, ownerDocument?: ?)","!doc":"<p>Creates an element class instance.</p>\n"}},"addClass":{"!type":"fn(className: string)","!doc":"<p>Adds a CSS class to the element. It appends the class to the\nalready existing names.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'div' );\nelement.addClass( 'classA' ); // &lt;div class=\"classA\"&gt;\nelement.addClass( 'classB' ); // &lt;div class=\"classA classB\"&gt;\nelement.addClass( 'classA' ); // &lt;div class=\"classA classB\"&gt;\n</code></pre>\n"},"append":{"!type":"fn(node: ?, toStart?: bool)","!doc":"<p>Append a node as a child of this element.</p>\n\n<pre><code>var p = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'p' );\n\nvar strong = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'strong' );\np.append( strong );\n\nvar em = p.append( 'em' );\n\n// Result: '&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;'\n</code></pre>\n"},"appendBogus":{"!type":"fn(force?: bool)","!doc":"<p>Appends a <code>&lt;br&gt;</code> filler element to this element if the filler is not present already.\nBy default filler is appended only if <a href=\"#!/api/CKEDITOR.env-property-needsBrFiller\" rel=\"CKEDITOR.env-property-needsBrFiller\" class=\"docClass\">CKEDITOR.env.needsBrFiller</a> is <code>true</code>,\nhowever when <code>force</code> is set to <code>true</code> filler will be appended regardless of the environment.</p>\n"},"appendHtml":{"!type":"fn(html: string)","!doc":"<p>Append HTML as a child(ren) of this element.</p>\n"},"appendText":{"!type":"fn(text: string)","!doc":"<p>Append text to this element.</p>\n\n<pre><code>var p = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'p' );\np.appendText( 'This is' );\np.appendText( ' some text' );\n\n// Result: '&lt;p&gt;This is some text&lt;/p&gt;'\n</code></pre>\n"},"breakParent":{"!type":"fn(parent: ?)","!doc":"<p>Breaks one of the ancestor element in the element position, moving\nthis element between the broken parts.</p>\n\n<pre><code>// Before breaking:\n//      &lt;b&gt;This &lt;i&gt;is some&lt;span /&gt; sample&lt;/i&gt; test text&lt;/b&gt;\n// If \"element\" is &lt;span /&gt; and \"parent\" is &lt;i&gt;:\n//      &lt;b&gt;This &lt;i&gt;is some&lt;/i&gt;&lt;span /&gt;&lt;i&gt; sample&lt;/i&gt; test text&lt;/b&gt;\nelement.breakParent( parent );\n\n// Before breaking:\n//      &lt;b&gt;This &lt;i&gt;is some&lt;span /&gt; sample&lt;/i&gt; test text&lt;/b&gt;\n// If \"element\" is &lt;span /&gt; and \"parent\" is &lt;b&gt;:\n//      &lt;b&gt;This &lt;i&gt;is some&lt;/i&gt;&lt;/b&gt;&lt;span /&gt;&lt;b&gt;&lt;i&gt; sample&lt;/i&gt; test text&lt;/b&gt;\nelement.breakParent( parent );\n</code></pre>\n"},"contains":{"!type":"fn(node: ?)","!doc":"<p>Checks if this element contains given node.</p>\n"},"copyAttributes":{"!type":"fn(dest: ?, skipAttributes: ?)","!doc":"<p>Copy all the attributes from one node to the other, kinda like a clone\nskipAttributes is an object with the attributes that must <strong>not</strong> be copied.</p>\n"},"data":{"!type":"fn(name: string, value?: string)","!doc":"<p>Gets, sets and removes custom data to be stored as HTML5 data-* attributes.</p>\n\n<pre><code>element.data( 'extra-info', 'test' );   // Appended the attribute data-extra-info=\"test\" to the element.\nalert( element.data( 'extra-info' ) );  // 'test'\nelement.data( 'extra-info', false );    // Remove the data-extra-info attribute from the element.\n</code></pre>\n"},"disableContextMenu":{"!type":"fn()","!doc":"<p>Disables browser's context menu in this element.</p>\n"},"find":{"!type":"fn(selector: string)","!doc":"<p>Returns list of elements within this element that match specified <code>selector</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>Not available in IE7.</li>\n<li>Returned list is not a live collection (like a result of native <code>querySelectorAll</code>).</li>\n<li><p>Unlike native <code>querySelectorAll</code> this method ensures selector contextualization. This is:</p>\n\n<pre><code>  HTML:       '&lt;body&gt;&lt;div&gt;&lt;i&gt;foo&lt;/i&gt;&lt;/div&gt;&lt;/body&gt;'\n  Native:     div.querySelectorAll( 'body i' ) // -&gt;      [ &lt;i&gt;foo&lt;/i&gt; ]\n  Method:     div.find( 'body i' ) // -&gt;                  []\n              div.find( 'i' ) // -&gt;                       [ &lt;i&gt;foo&lt;/i&gt; ]\n</code></pre></li>\n</ul>\n\n"},"findOne":{"!type":"fn(selector: string)","!doc":"<p>Returns first element within this element that matches specified <code>selector</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>Not available in IE7.</li>\n<li><p>Unlike native <code>querySelectorAll</code> this method ensures selector contextualization. This is:</p>\n\n<pre><code>  HTML:       '&lt;body&gt;&lt;div&gt;&lt;i&gt;foo&lt;/i&gt;&lt;/div&gt;&lt;/body&gt;'\n  Native:     div.querySelector( 'body i' ) // -&gt;         &lt;i&gt;foo&lt;/i&gt;\n  Method:     div.findOne( 'body i' ) // -&gt;               null\n              div.findOne( 'i' ) // -&gt;                    &lt;i&gt;foo&lt;/i&gt;\n</code></pre></li>\n</ul>\n\n"},"focus":{"!type":"fn(defer: bool)","!doc":"<p>Moves the selection focus to this element.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myTextarea' );\nelement.focus();\n</code></pre>\n"},"focusNext":{"!type":"fn(ignoreChildren?: bool, indexToUse?: number)","!doc":"<p>Moves the UI focus to the element following this element in the tabindex order.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'example' );\nelement.focusNext();\n</code></pre>\n"},"focusPrevious":{"!type":"fn(ignoreChildren?: bool, indexToUse?: number)","!doc":"<p>Moves the UI focus to the element before this element in the tabindex order.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'example' );\nelement.focusPrevious();\n</code></pre>\n"},"forEach":{"!type":"fn(callback: ?, type?: number, skipRoot?: bool)","!doc":"<p>Traverse the DOM of this element (inclusive), executing a callback for\neach node.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;&lt;p&gt;foo&lt;b&gt;bar&lt;/b&gt;bom&lt;/p&gt;&lt;/div&gt;' );\nelement.forEach( function( node ) {\n    console.log( node );\n} );\n// Will log:\n// 1. &lt;div&gt; element,\n// 2. &lt;p&gt; element,\n// 3. \"foo\" text node,\n// 4. &lt;b&gt; element,\n// 5. \"bar\" text node,\n// 6. \"bom\" text node.\n</code></pre>\n"},"getAttribute":{"!type":"fn(name: string)","!doc":"<p>Gets the value of an element attribute.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;input type=\"text\" /&gt;' );\nalert( element.getAttribute( 'type' ) ); // 'text'\n</code></pre>\n"},"getBogus":{"!type":"fn()","!doc":"<p>Checks if there's a filler node at the end of an element, and returns it.</p>\n"},"getChild":{"!type":"fn(indices: ?)","!doc":"<p>Gets a DOM tree descendant under the current node.</p>\n\n<pre><code>var strong = p.getChild( 0 );\n</code></pre>\n"},"getChildCount":{"!type":"fn()","!doc":"<p>Gets number of element's children.</p>\n"},"getChildren":{"!type":"fn()","!doc":"<p>Gets the nodes list containing all children of this element.</p>\n"},"getClientRect":{"!type":"fn()","!doc":"<p>Retrieve the bounding rectangle of the current element, in pixels,\nrelative to the upper-left corner of the browser's client area.</p>\n"},"getComputedStyle":{"!type":"fn(propertyName: string)","!doc":"<p>Gets the current computed value of one of the element CSS style\nproperties.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nalert( element.getComputedStyle( 'display' ) ); // 'inline'\n</code></pre>\n"},"getDirection":{"!type":"fn(useComputed: ?)","!doc":"<p>Gets element's direction. Supports both CSS <code>direction</code> prop and <code>dir</code> attr.</p>\n"},"getDocumentPosition":{"!type":"fn(refDocument?: ?)","!doc":"<p>Gets this element's position in document.</p>\n"},"getDtd":{"!type":"fn()","!doc":"<p>Gets the DTD entries for this element.</p>\n"},"getEditor":{"!type":"fn()","!doc":"<p>Retrieves an editor instance which is based on this element (if any).\nIt basically loops over <a href=\"#!/api/CKEDITOR-property-instances\" rel=\"CKEDITOR-property-instances\" class=\"docClass\">CKEDITOR.instances</a> in search for an instance\nthat uses the element.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'div' );\nelement.appendTo( CKEDITOR.document.getBody() );\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( element );\nalert( element.getEditor().name ); // 'editor1'\n</code></pre>\n"},"getElementsByTag":{"!type":"fn(tagName: string)","!doc":"<p>Gets all this element's descendants having given tag name.</p>\n"},"getFirst":{"!type":"fn(evaluator: ?)","!doc":"<p>Gets the first child node of this element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;' );\nvar first = element.getFirst();\nalert( first.getName() ); // 'b'\n</code></pre>\n"},"getFrameDocument":{"!type":"fn()","!doc":"<p>Returns the inner document of this <code>&lt;iframe&gt;</code> element.</p>\n"},"getHtml":{"!type":"fn()","!doc":"<p>Gets the inner HTML of this element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;' );\nalert( element.getHtml() ); // '&lt;b&gt;Example&lt;/b&gt;'\n</code></pre>\n"},"getId":{"!type":"fn()","!doc":"<p>Gets the value of the <code>id</code> attribute of this element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;p id=\"myId\"&gt;&lt;/p&gt;' );\nalert( element.getId() ); // 'myId'\n</code></pre>\n"},"getLast":{"!type":"fn(evaluator: ?)","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.element-method-getFirst\" rel=\"CKEDITOR.dom.element-method-getFirst\" class=\"docClass\">getFirst</a>.</p>\n"},"getName":{"!type":"fn()","!doc":"<p>Gets the element name (tag name). The returned name is guaranteed to\nbe always full lowercased.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nalert( element.getName() ); // 'span'\n</code></pre>\n"},"getNameAtt":{"!type":"fn()","!doc":"<p>Gets the value of the <code>name</code> attribute of this element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;input name=\"myName\"&gt;&lt;/input&gt;' );\nalert( &lt;b&gt;element.getNameAtt()&lt;/b&gt; ); // 'myName'\n</code></pre>\n"},"getOuterHtml":{"!type":"fn()","!doc":"<p>Gets the outer (inner plus tags) HTML of this element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div class=\"bold\"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;' );\nalert( element.getOuterHtml() ); // '&lt;div class=\"bold\"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;'\n</code></pre>\n"},"getPositionedAncestor":{"!type":"fn()","!doc":"<p>Gets closest positioned (<code>position != static</code>) ancestor.</p>\n"},"getSize":{"!type":"fn(type: ?, isBorderBox: bool)","!doc":"<p>Gets the element size, possibly considering the box model.</p>\n"},"getStyle":{"!type":"fn(name: string)","!doc":"<p>Gets CSS style value.</p>\n"},"getTabIndex":{"!type":"fn()","!doc":"<p>Gets the computed tabindex for this element.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myDiv' );\nalert( element.getTabIndex() ); // (e.g.) '-1'\n</code></pre>\n"},"getText":{"!type":"fn()","!doc":"<p>Gets the text value of this element.</p>\n\n<p>Only in IE (which uses innerText), <code>&lt;br&gt;</code> will cause linebreaks,\nand sucessive whitespaces (including line breaks) will be reduced to\na single space. This behavior is ok for us, for now. It may change\nin the future.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;Sample &lt;i&gt;text&lt;/i&gt;.&lt;/div&gt;' );\nalert( &lt;b&gt;element.getText()&lt;/b&gt; ); // 'Sample text.'\n</code></pre>\n"},"getValue":{"!type":"fn()","!doc":"<p>Gets the value set to this element. This value is usually available\nfor form field elements.</p>\n"},"getWindow":{"!type":"fn()","!doc":"<p>Gets the window object that contains this element.</p>\n"},"hasAttribute":{"!type":"fn(name: string)","!doc":"<p>Checks if the specified attribute is defined for this element.</p>\n"},"hasAttributes":{"!type":"fn()","!doc":"<p>Checks if the element has any defined attributes.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div title=\"Test\"&gt;Example&lt;/div&gt;' );\nalert( element.hasAttributes() ); // true\n\nvar element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div&gt;Example&lt;/div&gt;' );\nalert( element.hasAttributes() ); // false\n</code></pre>\n"},"hasClass":{"!type":"fn(className: string)","!doc":"<p>Checks if element has class name.</p>\n"},"hide":{"!type":"fn()","!doc":"<p>Hides this element (sets <code>display: none</code>).</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.hide();\n</code></pre>\n"},"is":{"!type":"fn(name: ?)","!doc":"<p>Checks if the element name matches the specified criteria.</p>\n\n<pre><code>var element = new CKEDITOR.element( 'span' );\nalert( element.is( 'span' ) );          // true\nalert( element.is( 'p', 'span' ) );     // true\nalert( element.is( 'p' ) );             // false\nalert( element.is( 'p', 'div' ) );      // false\nalert( element.is( { p:1,span:1 } ) );  // true\n</code></pre>\n"},"isBlockBoundary":{"!type":"fn(customNodeNames?: ?)","!doc":"<p>Checks whether element is displayed as a block.</p>\n"},"isEditable":{"!type":"fn(textCursor?: bool)","!doc":"<p>Decide whether one element is able to receive cursor.</p>\n"},"isEmptyInlineRemoveable":{"!type":"fn()","!doc":"<p>Whether it's an empty inline elements which has no visual impact when removed.</p>\n"},"isIdentical":{"!type":"fn(otherElement: ?)","!doc":"<p>Compare this element's inner html, tag name, attributes, etc. with other one.</p>\n\n<p>See <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode\">W3C's DOM Level 3 spec - node#isEqualNode</a>\nfor more details.</p>\n"},"isVisible":{"!type":"fn()","!doc":"<p>Checks if this element is visible. May not work if the element is\nchild of an element with visibility set to <code>hidden</code>, but works well\non the great majority of cases.</p>\n"},"mergeSiblings":{"!type":"fn(inlineOnly?: bool)","!doc":"<p>Merges sibling elements that are identical to this one.</p>\n\n<p>Identical child elements are also merged. For example:</p>\n\n<pre><code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt; =&gt; &lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n"},"moveChildren":{"!type":"fn(target: ?, toStart?: bool)","!doc":"<p>Moves this element's children to the target element.</p>\n"},"removeAttribute":{"!type":"fn(name: string)","!doc":"<p>Removes an attribute from the element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div class=\"classA\"&gt;&lt;/div&gt;' );\nelement.removeAttribute( 'class' );\n</code></pre>\n"},"removeAttributes":{"!type":"fn(attributes?: ?)","!doc":"<p>Removes all element's attributes or just given ones.</p>\n"},"removeClass":{"!type":"fn(className: string)","!doc":"<p>Removes a CSS class name from the elements classes. Other classes\nremain untouched.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'div' );\nelement.addClass( 'classA' );       // &lt;div class=\"classA\"&gt;\nelement.addClass( 'classB' );       // &lt;div class=\"classA classB\"&gt;\nelement.removeClass( 'classA' );    // &lt;div class=\"classB\"&gt;\nelement.removeClass( 'classB' );    // &lt;div&gt;\n</code></pre>\n"},"removeStyle":{"!type":"fn(name: string)","!doc":"<p>Removes a style from the element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;div style=\"display:none\"&gt;&lt;/div&gt;' );\nelement.removeStyle( 'display' );\n</code></pre>\n"},"renameNode":{"!type":"fn(newTag: string)","!doc":"<p>Changes the tag name of the current element.</p>\n"},"scrollIntoParent":{"!type":"fn(parent: ?, alignToTop?: bool, hscroll?: bool)","!doc":"<p>Make any page element visible inside one of the ancestors by scrolling the parent.</p>\n"},"scrollIntoView":{"!type":"fn(alignToTop?: bool)","!doc":"<p>Make any page element visible inside the browser viewport.</p>\n"},"setAttribute":{"!type":"fn(name: string, value: string)","!doc":"<p>Sets the value of an element attribute.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.setAttribute( 'class', 'myClass' );\nelement.setAttribute( 'title', 'This is an example' );\n</code></pre>\n"},"setAttributes":{"!type":"fn(attributesPairs: ?)","!doc":"<p>Sets the value of several element attributes.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.setAttributes( {\n    'class':    'myClass',\n    title:      'This is an example'\n} );\n</code></pre>\n"},"setHtml":{"!type":"fn(html: string)","!doc":"<p>Sets the inner HTML of this element.</p>\n\n<pre><code>var p = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'p' );\np.setHtml( '&lt;b&gt;Inner&lt;/b&gt; HTML' );\n\n// Result: '&lt;p&gt;&lt;b&gt;Inner&lt;/b&gt; HTML&lt;/p&gt;'\n</code></pre>\n"},"setOpacity":{"!type":"fn(opacity: number)","!doc":"<p>Sets the opacity of an element.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.setOpacity( 0.75 );\n</code></pre>\n"},"setSize":{"!type":"fn(type: ?, size: number, isBorderBox: bool)","!doc":"<p>Sets the element size considering the box model.</p>\n"},"setState":{"!type":"fn(state: number, base?: ?, useAria?: ?)","!doc":"<p>Switch the <code>class</code> attribute to reflect one of the triple states of an\nelement in one of <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a>, <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>\nor <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>.</p>\n\n<pre><code>link.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a> );\n// &lt;a class=\"cke_on\" aria-pressed=\"true\"&gt;...&lt;/a&gt;\nlink.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> );\n// &lt;a class=\"cke_off\"&gt;...&lt;/a&gt;\nlink.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> );\n// &lt;a class=\"cke_disabled\" aria-disabled=\"true\"&gt;...&lt;/a&gt;\n\nspan.setState( <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a>, 'cke_button' );\n// &lt;span class=\"cke_button_on\"&gt;...&lt;/span&gt;\n</code></pre>\n"},"setStyle":{"!type":"fn(name: string, value: string)","!doc":"<p>Sets the value of an element style.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.setStyle( 'background-color', '#ff0000' );\nelement.setStyle( 'margin-top', '10px' );\nelement.setStyle( 'float', 'right' );\n</code></pre>\n"},"setStyles":{"!type":"fn(stylesPairs: ?)","!doc":"<p>Sets the value of several element styles.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.setStyles( {\n    position:   'absolute',\n    float:      'right'\n} );\n</code></pre>\n"},"setText":{"!type":"fn(text: string)","!doc":"<p>Sets the element contents as plain text.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'div' );\nelement.setText( 'A &gt; B &amp; C &lt; D' );\nalert( element.innerHTML ); // 'A &amp;gt; B &amp;amp; C &amp;lt; D'\n</code></pre>\n"},"setValue":{"!type":"fn(value: string)","!doc":"<p>Sets the element value. This function is usually used with form\nfield element.</p>\n"},"show":{"!type":"fn()","!doc":"<p>Shows this element (displays it).</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.show();\n</code></pre>\n"},"unselectable":{"!type":"fn()","!doc":"<p>Makes the element and its children unselectable.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.unselectable();\n</code></pre>\n"},"clearAllMarkers":{"!type":"fn(database: ?)","!doc":"<p>@todo</p>\n"},"clearMarkers":{"!type":"fn(database: ?, element: ?, removeFromDatabase: ?)","!doc":"<p>@todo</p>\n"},"createFromHtml":{"!type":"fn(html: string)","!doc":"<p>Creates an instance of the <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a> class based on the\nHTML representation of an element.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;strong class=\"anyclass\"&gt;My element&lt;/strong&gt;' );\nalert( element.getName() ); // 'strong'\n</code></pre>\n"},"get":{"!type":"fn(element: ?)","!doc":"<p>The the <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a> representing and element. If the\nelement is a native DOM element, it will be transformed into a valid\n<a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a> object.</p>\n\n<pre><code>var element = new <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>( 'span' );\nalert( element == <a href=\"#!/api/CKEDITOR.dom.element-static-method-get\" rel=\"CKEDITOR.dom.element-static-method-get\" class=\"docClass\">CKEDITOR.dom.element.get</a>( element ) ); // true\n\nvar element = document.getElementById( 'myElement' );\nalert( <a href=\"#!/api/CKEDITOR.dom.element-static-method-get\" rel=\"CKEDITOR.dom.element-static-method-get\" class=\"docClass\">CKEDITOR.dom.element.get</a>( element ).getName() ); // (e.g.) 'p'\n</code></pre>\n"},"setMarker":{"!type":"fn(database: ?, element: ?, name: ?, value: ?)","!doc":"<p>@todo</p>\n"}},"elementPath":{"!doc":"<p>Retrieve the list of nodes walked from the start node up to the editable element of the editor.</p>\n","block":{"!doc":"<p>First non-empty block element which:</p>\n\n<ul>\n<li>is not a <a href=\"#!/api/CKEDITOR.dtd-property-S-blockLimit\" rel=\"CKEDITOR.dtd-property-S-blockLimit\" class=\"docClass\">CKEDITOR.dtd.$blockLimit</a>,</li>\n<li>or is a <code>div</code> which does not contain block elements and is not a <code>root</code>.</li>\n</ul>\n\n\n<p>This means a first, splittable block in elements path.</p>\n"},"blockLimit":{"!doc":"<p>See the <a href=\"#!/api/CKEDITOR.dtd-property-S-blockLimit\" rel=\"CKEDITOR.dtd-property-S-blockLimit\" class=\"docClass\">CKEDITOR.dtd.$blockLimit</a> description.</p>\n"},"elements":{"!doc":"<p>An array of elements (from <code>startNode</code> to <code>root</code>) in the path.</p>\n"},"prototype":{"lastElement":{"!doc":"<p>The last element of the elements path - <code>startNode</code> or its parent.</p>\n"},"constructor":{"!type":"fn(startNode: ?, root: ?)","!doc":"<p>Creates an element path class instance.</p>\n"}},"root":{"!doc":"<p>The root of the elements path - <code>root</code> argument passed to class constructor or a <code>body</code> element.</p>\n"},"compare":{"!type":"fn(otherPath: ?)","!doc":"<p>Compares this element path with another one.</p>\n"},"contains":{"!type":"fn(query: ?, excludeRoot?: bool, fromTop?: bool)","!doc":"<p>Search the path elements that meets the specified criteria.</p>\n"},"direction":{"!type":"fn()","!doc":"<p>Retrieve the text direction for this elements path.</p>\n"},"isContextFor":{"!type":"fn(tag: string)","!doc":"<p>Check whether the elements path is the proper context for the specified\ntag name in the DTD.</p>\n"}},"event":{"!doc":"<p>Represents a native DOM event object.</p>\n","$":{"!doc":"<p>The native DOM event object represented by this class instance.</p>\n"},"prototype":{"constructor":{"!type":"fn(domEvent: ?)","!doc":"<p>Creates an event class instance.</p>\n"}},"getKey":{"!type":"fn()","!doc":"<p>Gets the key code associated to the event.</p>\n\n<pre><code>alert( event.getKey() ); // '65' is 'a' has been pressed\n</code></pre>\n"},"getKeystroke":{"!type":"fn()","!doc":"<p>Gets a number represeting the combination of the keys pressed during the\nevent. It is the sum with the current key code and the <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a>,\n<a href=\"#!/api/CKEDITOR-property-SHIFT\" rel=\"CKEDITOR-property-SHIFT\" class=\"docClass\">CKEDITOR.SHIFT</a> and <a href=\"#!/api/CKEDITOR-property-ALT\" rel=\"CKEDITOR-property-ALT\" class=\"docClass\">CKEDITOR.ALT</a> constants.</p>\n\n<pre><code>alert( event.getKeystroke() == 65 );                                    // 'a' key\nalert( event.getKeystroke() == <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 65 );                    // CTRL + 'a' key\nalert( event.getKeystroke() == <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + <a href=\"#!/api/CKEDITOR-property-SHIFT\" rel=\"CKEDITOR-property-SHIFT\" class=\"docClass\">CKEDITOR.SHIFT</a> + 65 );   // CTRL + SHIFT + 'a' key\n</code></pre>\n"},"getPageOffset":{"!type":"fn()","!doc":"<p>Retrieves the coordinates of the mouse pointer relative to the top-left\ncorner of the document, in mouse related event.</p>\n\n<pre><code>element.on( 'mousemouse', function( ev ) {\n    var pageOffset = ev.data.getPageOffset();\n    alert( pageOffset.x );          // page offset X\n    alert( pageOffset.y );          // page offset Y\n} );\n</code></pre>\n"},"getPhase":{"!type":"fn()","!doc":"<p>Returns an integer value that indicates the current processing phase of an event.\nFor browsers that doesn't support event phase, <a href=\"#!/api/CKEDITOR-property-EVENT_PHASE_AT_TARGET\" rel=\"CKEDITOR-property-EVENT_PHASE_AT_TARGET\" class=\"docClass\">CKEDITOR.EVENT_PHASE_AT_TARGET</a> is always returned.</p>\n"},"getTarget":{"!type":"fn()","!doc":"<p>Returns the DOM node where the event was targeted to.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.on( 'click', function( ev ) {\n    // The DOM event object is passed by the 'data' property.\n    var domEvent = ev.data;\n    // Add a CSS class to the event target.\n    domEvent.getTarget().addClass( 'clicked' );\n} );\n</code></pre>\n"},"preventDefault":{"!type":"fn(stopPropagation?: bool)","!doc":"<p>Prevents the original behavior of the event to happen. It can optionally\nstop propagating the event in the event chain.</p>\n\n<pre><code>var element = CKEDITOR.document.getById( 'myElement' );\nelement.on( 'click', function( ev ) {\n    // The DOM event object is passed by the 'data' property.\n    var domEvent = ev.data;\n    // Prevent the click to chave any effect in the element.\n    domEvent.preventDefault();\n} );\n</code></pre>\n"},"stopPropagation":{"!type":"fn()","!doc":"<p>Stops this event propagation in the event chain.</p>\n"}},"iterator":{"!doc":"<p>Represents iterator class. It can be used to iterate\nover all elements (or even text nodes in case of <a href=\"#!/api/CKEDITOR.dom.iterator-property-enlargeBr\" rel=\"CKEDITOR.dom.iterator-property-enlargeBr\" class=\"docClass\">enlargeBr</a> set to <code>false</code>)\nwhich establish \"paragraph-like\" spaces within passed range.</p>\n\n<pre><code>// &lt;h1&gt;[foo&lt;/h1&gt;&lt;p&gt;bar]&lt;/p&gt;\nvar iterator = range.createIterator();\niterator.getNextParagraph(); // h1 element\niterator.getNextParagraph(); // p element\n\n// &lt;ul&gt;&lt;li&gt;[foo&lt;/li&gt;&lt;li&gt;bar]&lt;/li&gt;\n// With enforceRealBlocks set to false iterator will return two list item elements.\n// With enforceRealBlocks set to true iterator will return two paragraphs and the DOM will be changed to:\n// &lt;ul&gt;&lt;li&gt;&lt;p&gt;foo&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;bar&lt;/p&gt;&lt;/li&gt;\n</code></pre>\n","prototype":{"activeFilter":{"!doc":"<p>Iterator's active filter. It is set by the <a href=\"#!/api/CKEDITOR.dom.iterator-method-getNextParagraph\" rel=\"CKEDITOR.dom.iterator-method-getNextParagraph\" class=\"docClass\">getNextParagraph</a> method\nwhen it enters nested editable.</p>\n"},"filter":{"!doc":"<p>Default iterator's filter. It is set only for nested iterators.</p>\n"},"constructor":{"!type":"fn(range: ?)","!doc":"<p>Creates an iterator class instance.</p>\n"}},"enforceRealBlocks":{"!type":"bool","!doc":"<p>Whether iterator should create transformable block\nif the current one contains text and it cannot be transformed.\nFor example new blocks will be established in elements like\n<code>&lt;li&gt;</code> or <code>&lt;td&gt;</code>.</p>\n"},"enlargeBr":{"!type":"bool","!doc":"<p>Whether include <code>&lt;br&gt;</code>s into the enlarged range. Should be\nset to <code>false</code> when using iterator in <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a> mode.</p>\n"},"getNextParagraph":{"!type":"fn(blockTag?: string)","!doc":"<p>Returns next paragraph-like element or <code>null</code> if reached the end of range.</p>\n"}},"nodeList":{"!doc":"<p>Represents a list of <a href=\"#!/api/CKEDITOR.dom.node\" rel=\"CKEDITOR.dom.node\" class=\"docClass\">CKEDITOR.dom.node</a> objects.\nIt's a wrapper for native nodes list.</p>\n\n<pre><code>var nodeList = CKEDITOR.document.getBody().getChildren();\nalert( nodeList.count() ); // number [0;N]\n</code></pre>\n","prototype":{"constructor":{"!type":"fn(nativeList: ?)","!doc":"<p>Creates a document class instance.</p>\n"}},"count":{"!type":"fn()","!doc":"<p>Get count of nodes in this list.</p>\n"},"getItem":{"!type":"fn(index: ?)","!doc":"<p>Get node from the list.</p>\n"}},"range":{"!doc":"<p>Represents a delimited piece of content in a DOM Document.\nIt is contiguous in the sense that it can be characterized as selecting all\nof the content between a pair of boundary-points.</p>\n\n<p>This class shares much of the W3C\n<a href=\"http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html\">Document Object Model Range</a>\nideas and features, adding several range manipulation tools to it, but it's\nnot intended to be compatible with it.</p>\n\n<pre><code>// Create a range for the entire contents of the editor document body.\nvar range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\n// Delete the contents.\nrange.deleteContents();\n</code></pre>\n\n<p>Usually you will want to work on a ranges rooted in the editor's <a href=\"#!/api/CKEDITOR.editable\" rel=\"CKEDITOR.editable\" class=\"docClass\">editable</a>\nelement. Such ranges can be created with a shorthand method &ndash; <a href=\"#!/api/CKEDITOR.editor-method-createRange\" rel=\"CKEDITOR.editor-method-createRange\" class=\"docClass\">editor.createRange</a>.</p>\n\n<pre><code>var range = editor.createRange();\nrange.root.equals( editor.editable() ); // -&gt; true\n</code></pre>\n\n<p>Note that the <a href=\"#!/api/CKEDITOR.dom.range-property-root\" rel=\"CKEDITOR.dom.range-property-root\" class=\"docClass\">root</a> of a range is an important property, which limits many\nalgorithms implemented in range's methods. Therefore it is crucial, especially\nwhen using ranges inside inline editors, to specify correct root, so using\nthe <a href=\"#!/api/CKEDITOR.editor-method-createRange\" rel=\"CKEDITOR.editor-method-createRange\" class=\"docClass\">CKEDITOR.editor.createRange</a> method is highly recommended.</p>\n\n<h3>Selection</h3>\n\n<p>Range is only a logical representation of a piece of content in a DOM. It should not\nbe confused with a <a href=\"#!/api/CKEDITOR.dom.selection\" rel=\"CKEDITOR.dom.selection\" class=\"docClass\">selection</a> which represents \"physically\nmarked\" content. It is possible to create unlimited number of various ranges, when\nonly one real selection may exist at a time in a document. Ranges are used to read position\nof selection in the DOM and to move selection to new positions.</p>\n\n<p>The editor selection may be retrieved using the <a href=\"#!/api/CKEDITOR.editor-method-getSelection\" rel=\"CKEDITOR.editor-method-getSelection\" class=\"docClass\">CKEDITOR.editor.getSelection</a> method:</p>\n\n<pre><code>var sel = editor.getSelection(),\n    ranges = sel.getRange(); // <a href=\"#!/api/CKEDITOR.dom.rangeList\" rel=\"CKEDITOR.dom.rangeList\" class=\"docClass\">CKEDITOR.dom.rangeList</a> instance.\n\nvar range = ranges[ 0 ];\nrange.root; // -&gt; editor's editable element.\n</code></pre>\n\n<p>A range can also be selected:</p>\n\n<pre><code>var range = editor.createRange();\nrange.selectNodeContents( editor.editable() );\nsel.selectRanges( [ range ] );\n</code></pre>\n","collapsed":{"!type":"bool","!doc":"<p>Indicates that this is a collapsed range. A collapsed range has its\nstart and end boundaries at the very same point so nothing is contained\nin it.</p>\n\n<pre><code>var range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\nalert( range.collapsed ); // false\nrange.collapse();\nalert( range.collapsed ); // true\n</code></pre>\n"},"document":{"!doc":"<p>The document within which the range can be used.</p>\n\n<pre><code>// Selects the body contents of the range document.\nrange.selectNodeContents( range.document.getBody() );\n</code></pre>\n"},"endContainer":{"!doc":"<p>Node within which the range ends.</p>\n\n<pre><code>var range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\nalert( range.endContainer.getName() ); // 'body'\n</code></pre>\n"},"endOffset":{"!type":"number","!doc":"<p>Offset within the ending node of the range.</p>\n\n<pre><code>var range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\nalert( range.endOffset ); // == editor.document.getBody().getChildCount()\n</code></pre>\n"},"root":{"!doc":"<p>The ancestor DOM element within which the range manipulation are limited.</p>\n"},"startContainer":{"!doc":"<p>Node within which the range begins.</p>\n\n<pre><code>var range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\nalert( range.startContainer.getName() ); // 'body'\n</code></pre>\n"},"startOffset":{"!type":"number","!doc":"<p>Offset within the starting node of the range.</p>\n\n<pre><code>var range = new <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>( editor.document );\nrange.selectNodeContents( editor.document.getBody() );\nalert( range.startOffset ); // 0\n</code></pre>\n"},"prototype":{"constructor":{"!type":"fn(root: ?)","!doc":"<p>Creates a <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a> instance that can be used inside a specific DOM Document.</p>\n"}},"checkBoundaryOfElement":{"!type":"fn(element: ?, checkType: number)","!doc":"<p>Check whether a range boundary is at the inner boundary of a given\nelement.</p>\n"},"checkEndOfBlock":{"!type":"fn()","!doc":"<p><strong>Note:</strong> Calls to this function may produce changes to the DOM. The range may\nbe updated to reflect such changes.</p>\n"},"checkReadOnly":{"!type":"fn()","!doc":"<p>Check if elements at which the range boundaries anchor are read-only,\nwith respect to <code>contenteditable</code> attribute.</p>\n"},"checkStartOfBlock":{"!type":"fn()","!doc":"<p><strong>Note:</strong> Calls to this function may produce changes to the DOM. The range may\nbe updated to reflect such changes.</p>\n"},"clone":{"!type":"fn()","!doc":"<p>Clones this range.</p>\n"},"cloneContents":{"!type":"fn()","!doc":"<p>The content nodes of the range are cloned and added to a document fragment, which is returned.</p>\n\n<p><strong>Note:</strong> Text selection may lost after invoking this method (caused by text node splitting).</p>\n"},"collapse":{"!type":"fn(toStart: bool)","!doc":"<p>Makes range collapsed by moving its start point (or end point if <code>toStart==true</code>)\nto the second end.</p>\n"},"createBookmark":{"!type":"fn(serializable?: bool)","!doc":"<p>Creates a bookmark object, which can be later used to restore the\nrange by using the <a href=\"#!/api/CKEDITOR.dom.range-method-moveToBookmark\" rel=\"CKEDITOR.dom.range-method-moveToBookmark\" class=\"docClass\">moveToBookmark</a> function.</p>\n\n<p>This is an \"intrusive\" way to create a bookmark. It includes <code>&lt;span&gt;</code> tags\nin the range boundaries. The advantage of it is that it is possible to\nhandle DOM mutations when moving back to the bookmark.</p>\n\n<p><strong>Note:</strong> The inclusion of nodes in the DOM is a design choice and\nshould not be changed as there are other points in the code that may be\nusing those nodes to perform operations.</p>\n"},"createBookmark2":{"!type":"fn(normalized?: bool)","!doc":"<p>Creates a \"non intrusive\" and \"mutation sensible\" bookmark. This\nkind of bookmark should be used only when the DOM is supposed to\nremain stable after its creation.</p>\n"},"createIterator":{"!type":"fn()","!doc":"<p>Creates {<a href=\"#!/api/CKEDITOR.dom.iterator\" rel=\"CKEDITOR.dom.iterator\" class=\"docClass\">CKEDITOR.dom.iterator</a>} instance for this range.</p>\n"},"deleteContents":{"!type":"fn(mergeThen?: bool)","!doc":"<p>Deletes the content nodes of the range permanently from the DOM tree.</p>\n"},"endPath":{"!type":"fn()","!doc":"<p>Gets <a href=\"#!/api/CKEDITOR.dom.elementPath\" rel=\"CKEDITOR.dom.elementPath\" class=\"docClass\">CKEDITOR.dom.elementPath</a> for the <a href=\"#!/api/CKEDITOR.dom.range-property-endContainer\" rel=\"CKEDITOR.dom.range-property-endContainer\" class=\"docClass\">endContainer</a>.</p>\n"},"enlarge":{"!type":"fn(unit: ?, excludeBrs?: bool)","!doc":"<p>Expands the range so that partial units are completely contained.</p>\n"},"extractContents":{"!type":"fn(mergeThen?: bool)","!doc":"<p>The content nodes of the range are cloned and added to a document fragment,\nmeanwhile they are removed permanently from the DOM tree.</p>\n"},"fixBlock":{"!type":"fn(isStart?: bool, blockTag: string)","!doc":"<p>Wraps inline content found around the range's start or end boundary\nwith a block element.</p>\n\n<pre><code>// Assuming following range:\n// &lt;h1&gt;foo&lt;/h1&gt;ba^r&lt;br /&gt;bom&lt;p&gt;foo&lt;/p&gt;\n// The result of executing:\nrange.fixBlock( true, 'p' );\n// Will be:\n// &lt;h1&gt;foo&lt;/h1&gt;&lt;p&gt;ba^r&lt;br /&gt;bom&lt;/p&gt;&lt;p&gt;foo&lt;/p&gt;\n</code></pre>\n\n<p>Non collapsed range:</p>\n\n<pre><code>// Assuming following range:\n// ba[r&lt;p&gt;foo&lt;/p&gt;bo]m\n// The result of executing:\nrange.fixBlock( false, 'p' );\n// Will be:\n// ba[r&lt;p&gt;foo&lt;/p&gt;&lt;p&gt;bo]m&lt;/p&gt;\n</code></pre>\n"},"getBoundaryNodes":{"!type":"fn()","!doc":"<p>Returns two nodes which are on the boundaries of this range.</p>\n"},"getCommonAncestor":{"!type":"fn(includeSelf?: bool, ignoreTextNode?: bool)","!doc":"<p>Find the node which fully contains the range.</p>\n"},"getEnclosedNode":{"!type":"fn()","!doc":"<p>Get the single node enclosed within the range if there's one.</p>\n"},"getNextEditableNode":{"!type":"fn()","!doc":"<p>Gets next node which can be a container of a selection.\nThis methods mimics a behavior of right/left arrow keys in case of\ncollapsed selection. It does not return an exact position (with offset) though,\nbut just a selection's container.</p>\n\n<p>Note: use this method on a collapsed range.</p>\n"},"getNextNode":{"!type":"fn(evaluator: ?, guard?: ?, boundary?: ?)","!doc":"<p>Traverse with <a href=\"#!/api/CKEDITOR.dom.walker\" rel=\"CKEDITOR.dom.walker\" class=\"docClass\">CKEDITOR.dom.walker</a> to retrieve the next element before the range start.</p>\n"},"getPreviousEditableNode":{"!type":"fn()","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-getNextEditableNode\" rel=\"CKEDITOR.dom.range-method-getNextEditableNode\" class=\"docClass\">getNextEditableNode</a>.</p>\n"},"getPreviousNode":{"!type":"fn(evaluator: ?, guard?: ?, boundary?: ?)","!doc":"<p>Traverse with <a href=\"#!/api/CKEDITOR.dom.walker\" rel=\"CKEDITOR.dom.walker\" class=\"docClass\">CKEDITOR.dom.walker</a> to retrieve the previous element before the range start.</p>\n"},"getTouchedEndNode":{"!type":"fn()","!doc":"<p>Get the node adjacent to the range end or <a href=\"#!/api/CKEDITOR.dom.range-property-endContainer\" rel=\"CKEDITOR.dom.range-property-endContainer\" class=\"docClass\">endContainer</a>.</p>\n"},"getTouchedStartNode":{"!type":"fn()","!doc":"<p>Get the node adjacent to the range start or <a href=\"#!/api/CKEDITOR.dom.range-property-startContainer\" rel=\"CKEDITOR.dom.range-property-startContainer\" class=\"docClass\">startContainer</a>.</p>\n"},"insertNode":{"!type":"fn(node: ?)","!doc":"<p>Inserts a node at the start of the range. The range will be expanded\nthe contain the node.</p>\n"},"moveToBookmark":{"!type":"fn(bookmark: ?)","!doc":"<p>Moves this range to the given bookmark. See <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark\" rel=\"CKEDITOR.dom.range-method-createBookmark\" class=\"docClass\">createBookmark</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark2\" rel=\"CKEDITOR.dom.range-method-createBookmark2\" class=\"docClass\">createBookmark2</a>.</p>\n\n<p>If serializable bookmark passed, then its <code>&lt;span&gt;</code> markers will be removed.</p>\n"},"moveToClosestEditablePosition":{"!type":"fn(element: ?, isMoveToEnd: bool)","!doc":"<p>Moves the range boundaries to the closest editing point after/before an\nelement.</p>\n\n<p>For example, if the start element has <code>id=\"start\"</code>,\n<code>&lt;p&gt;&lt;b&gt;foo&lt;/b&gt;&lt;span id=\"start\"&gt;start&lt;/start&gt;&lt;/p&gt;</code>, the closest previous editing point is\n<code>&lt;p&gt;&lt;b&gt;foo&lt;/b&gt;^&lt;span id=\"start\"&gt;start&lt;/start&gt;&lt;/p&gt;</code> (between <code>&lt;b&gt;</code> and <code>&lt;span&gt;</code>).</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.dom.range-method-moveToElementEditablePosition\" rel=\"CKEDITOR.dom.range-method-moveToElementEditablePosition\" class=\"docClass\">moveToElementEditablePosition</a>.</p>\n"},"moveToElementEditEnd":{"!type":"fn(target: ?)","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-moveToElementEditablePosition\" rel=\"CKEDITOR.dom.range-method-moveToElementEditablePosition\" class=\"docClass\">moveToElementEditablePosition</a>.</p>\n"},"moveToElementEditStart":{"!type":"fn(target: ?)","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-moveToElementEditablePosition\" rel=\"CKEDITOR.dom.range-method-moveToElementEditablePosition\" class=\"docClass\">moveToElementEditablePosition</a>.</p>\n"},"moveToElementEditablePosition":{"!type":"fn(el: ?, isMoveToEnd: bool)","!doc":"<p>Moves the range boundaries to the first/end editing point inside an\nelement.</p>\n\n<p>For example, in an element tree like\n<code>&lt;p&gt;&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt; Text&lt;/p&gt;</code>, the start editing point is\n<code>&lt;p&gt;&lt;b&gt;&lt;i&gt;^&lt;/i&gt;&lt;/b&gt; Text&lt;/p&gt;</code> (inside <code>&lt;i&gt;</code>).</p>\n"},"moveToPosition":{"!type":"fn(node: ?, position: number)","!doc":"<p>Moves the range to given position according to specified node.</p>\n\n<pre><code>// HTML: &lt;p&gt;Foo &lt;b&gt;bar&lt;/b&gt;&lt;/p&gt;\nrange.moveToPosition( elB, <a href=\"#!/api/CKEDITOR-property-POSITION_BEFORE_START\" rel=\"CKEDITOR-property-POSITION_BEFORE_START\" class=\"docClass\">CKEDITOR.POSITION_BEFORE_START</a> );\n// Range will be moved to: &lt;p&gt;Foo ^&lt;b&gt;bar&lt;/b&gt;&lt;/p&gt;\n</code></pre>\n\n<p>See also <a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">setEndAt</a>.</p>\n"},"moveToRange":{"!type":"fn(range: ?)","!doc":"<p>Moves the range to the exact position of the specified range.</p>\n"},"optimize":{"!type":"fn()","!doc":"<p>Transforms the <a href=\"#!/api/CKEDITOR.dom.range-property-startContainer\" rel=\"CKEDITOR.dom.range-property-startContainer\" class=\"docClass\">startContainer</a> and <a href=\"#!/api/CKEDITOR.dom.range-property-endContainer\" rel=\"CKEDITOR.dom.range-property-endContainer\" class=\"docClass\">endContainer</a> properties from text\nnodes to element nodes, whenever possible. This is actually possible\nif either of the boundary containers point to a text node, and its\noffset is set to zero, or after the last char in the node.</p>\n"},"optimizeBookmark":{"!type":"fn()","!doc":"<p>Move the range out of bookmark nodes if they'd been the container.</p>\n"},"removeEmptyBlocksAtEnd":{"!type":"fn(atEnd: bool)","!doc":"<p>Recursively remove any empty path blocks at the range boundary.</p>\n"},"scrollIntoView":{"!type":"fn()","!doc":"<p>Scrolls the start of current range into view.</p>\n"},"select":{"!type":"fn()","!doc":"<p>Select this range as the only one with <a href=\"#!/api/CKEDITOR.dom.selection-method-selectRanges\" rel=\"CKEDITOR.dom.selection-method-selectRanges\" class=\"docClass\">CKEDITOR.dom.selection.selectRanges</a>.</p>\n"},"selectNodeContents":{"!type":"fn(node: ?)","!doc":"<p>Select nodes content. Range will start and end inside this node.</p>\n"},"setEnd":{"!type":"fn(endNode: ?, endOffset: number)","!doc":"<p>Sets the end position of a Range.</p>\n"},"setEndAfter":{"!type":"fn(node: ?)","!doc":"<p>Sets end of this range after the specified node.</p>\n\n<pre><code>// Range: &lt;p&gt;foo^&lt;b&gt;bar&lt;/b&gt;&lt;/p&gt;\nrange.setEndAfter( elB );\n// The range will be changed to:\n// &lt;p&gt;foo[&lt;b&gt;bar&lt;/b&gt;]&lt;/p&gt;\n</code></pre>\n"},"setEndAt":{"!type":"fn(node: ?, position: number)","!doc":"<p>Moves the end of this range to given position according to specified node.</p>\n\n<pre><code>// HTML: &lt;p&gt;^Foo &lt;b&gt;bar&lt;/b&gt;&lt;/p&gt;\nrange.setEndAt( textBar, <a href=\"#!/api/CKEDITOR-property-POSITION_BEFORE_START\" rel=\"CKEDITOR-property-POSITION_BEFORE_START\" class=\"docClass\">CKEDITOR.POSITION_BEFORE_START</a> );\n// The range will be changed to:\n// &lt;p&gt;[Foo &lt;b&gt;]bar&lt;/b&gt;&lt;/p&gt;\n</code></pre>\n\n<p>See also <a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">moveToPosition</a>.</p>\n"},"setEndBefore":{"!type":"fn(node: ?)","!doc":"<p>Sets end of this range before the specified node.</p>\n\n<pre><code>// Range: &lt;p&gt;^foo&lt;b&gt;bar&lt;/b&gt;&lt;/p&gt;\nrange.setStartAfter( textBar );\n// The range will be changed to:\n// &lt;p&gt;[foo&lt;b&gt;]bar&lt;/b&gt;&lt;/p&gt;\n</code></pre>\n"},"setStart":{"!type":"fn(startNode: ?, startOffset: number)","!doc":"<p>Sets the start position of a range.</p>\n"},"setStartAfter":{"!type":"fn(node: ?)","!doc":"<p>Sets start of this range after the specified node.</p>\n\n<pre><code>// Range: &lt;p&gt;foo&lt;b&gt;bar&lt;/b&gt;^&lt;/p&gt;\nrange.setStartAfter( textFoo );\n// The range will be changed to:\n// &lt;p&gt;foo[&lt;b&gt;bar&lt;/b&gt;]&lt;/p&gt;\n</code></pre>\n"},"setStartAt":{"!type":"fn(node: ?, position: number)","!doc":"<p>Moves the start of this range to given position according to specified node.</p>\n\n<pre><code>// HTML: &lt;p&gt;Foo &lt;b&gt;bar&lt;/b&gt;^&lt;/p&gt;\nrange.setStartAt( elB, <a href=\"#!/api/CKEDITOR-property-POSITION_AFTER_START\" rel=\"CKEDITOR-property-POSITION_AFTER_START\" class=\"docClass\">CKEDITOR.POSITION_AFTER_START</a> );\n// The range will be changed to:\n// &lt;p&gt;Foo &lt;b&gt;[bar&lt;/b&gt;]&lt;/p&gt;\n</code></pre>\n\n<p>See also <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">setEndAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">moveToPosition</a>.</p>\n"},"setStartBefore":{"!type":"fn(node: ?)","!doc":"<p>Sets start of this range after the specified node.</p>\n\n<pre><code>// Range: &lt;p&gt;foo&lt;b&gt;bar&lt;/b&gt;^&lt;/p&gt;\nrange.setStartBefore( elB );\n// The range will be changed to:\n// &lt;p&gt;foo[&lt;b&gt;bar&lt;/b&gt;]&lt;/p&gt;\n</code></pre>\n"},"shrink":{"!type":"fn(mode: number, selectContents: bool)","!doc":"<p>Descrease the range to make sure that boundaries\nalways anchor beside text nodes or innermost element.</p>\n"},"splitBlock":{"!type":"fn(blockTag: ?)","!doc":"<p>@todo</p>\n"},"splitElement":{"!type":"fn(element: ?)","!doc":"<p>Branch the specified element from the collapsed range position and\nplace the caret between the two result branches.</p>\n\n<p><strong>Note:</strong> The range must be collapsed and been enclosed by this element.</p>\n"},"startPath":{"!type":"fn()","!doc":"<p>Gets <a href=\"#!/api/CKEDITOR.dom.elementPath\" rel=\"CKEDITOR.dom.elementPath\" class=\"docClass\">CKEDITOR.dom.elementPath</a> for the <a href=\"#!/api/CKEDITOR.dom.range-property-startContainer\" rel=\"CKEDITOR.dom.range-property-startContainer\" class=\"docClass\">startContainer</a>.</p>\n"},"trim":{"!type":"fn(ignoreStart?: bool, ignoreEnd?: bool)","!doc":"\n"}},"rangeList":{"!doc":"<p>Represents a list os <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a> objects, which can be easily\niterated sequentially.</p>\n","prototype":{"constructor":{"!type":"fn(ranges?: ?)","!doc":"<p>Creates a rangeList class instance.</p>\n"}},"createBookmarks":{"!type":"fn(serializable?: bool)","!doc":"<p>Create bookmarks for all ranges. See <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark\" rel=\"CKEDITOR.dom.range-method-createBookmark\" class=\"docClass\">CKEDITOR.dom.range.createBookmark</a>.</p>\n"},"createBookmarks2":{"!type":"fn(normalized?: bool)","!doc":"<p>Create \"unobtrusive\" bookmarks for all ranges. See <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark2\" rel=\"CKEDITOR.dom.range-method-createBookmark2\" class=\"docClass\">CKEDITOR.dom.range.createBookmark2</a>.</p>\n"},"createIterator":{"!type":"fn()","!doc":"<p>Creates an instance of the rangeList iterator, it should be used\nonly when the ranges processing could be DOM intrusive, which\nmeans it may pollute and break other ranges in this list.\nOtherwise, it's enough to just iterate over this array in a for loop.</p>\n"},"moveToBookmarks":{"!type":"fn(bookmarks: ?)","!doc":"<p>Move each range in the list to the position specified by a list of bookmarks.</p>\n"}},"rangeListIterator":{"!doc":"<p>(Virtual Class) Do not call this constructor. This class is not really part\nof the API. It just describes the return type of <a href=\"#!/api/CKEDITOR.dom.rangeList-method-createIterator\" rel=\"CKEDITOR.dom.rangeList-method-createIterator\" class=\"docClass\">CKEDITOR.dom.rangeList.createIterator</a>.</p>\n","getNextRange":{"!type":"fn(mergeConsequent?: bool)","!doc":"<p>Retrieves the next range in the list.</p>\n"}},"selection":{"!doc":"<p>Manipulates the selection within a DOM element. If the current browser selection\nspans outside of the element, an empty selection object is returned.</p>\n\n<p>Despite the fact that selection's constructor allows to create selection instances,\nusually it's better to get selection from the editor instance:</p>\n\n<pre><code>var sel = editor.getSelection();\n</code></pre>\n\n<p>See <a href=\"#!/api/CKEDITOR.editor-method-getSelection\" rel=\"CKEDITOR.editor-method-getSelection\" class=\"docClass\">CKEDITOR.editor.getSelection</a>.</p>\n","prototype":{"document":{"!doc":"<p>Document in which selection is anchored.</p>\n"},"isFake":{"!type":"bool","!doc":"<p>Whether selection is a fake selection.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.dom.selection-method-fake\" rel=\"CKEDITOR.dom.selection-method-fake\" class=\"docClass\">fake</a> method.</p>\n"},"isLocked":{"!type":"bool","!doc":"<p>Whether selection is locked (cannot be modified).</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.dom.selection-method-lock\" rel=\"CKEDITOR.dom.selection-method-lock\" class=\"docClass\">lock</a> and <a href=\"#!/api/CKEDITOR.dom.selection-method-unlock\" rel=\"CKEDITOR.dom.selection-method-unlock\" class=\"docClass\">unlock</a> methods.</p>\n"},"rev":{"!type":"number","!doc":"<p>Selection's revision. This value is incremented every time new\nselection is created or existing one is modified.</p>\n"},"root":{"!doc":"<p>Selection's root element.</p>\n"},"constructor":{"!type":"fn(target: ?)","!doc":"<p>Creates a selection class instance.</p>\n\n<pre><code>// Selection scoped in document.\nvar sel = new <a href=\"#!/api/CKEDITOR.dom.selection\" rel=\"CKEDITOR.dom.selection\" class=\"docClass\">CKEDITOR.dom.selection</a>( <a href=\"#!/api/CKEDITOR-property-document\" rel=\"CKEDITOR-property-document\" class=\"docClass\">CKEDITOR.document</a> );\n\n// Selection scoped in element with 'editable' id.\nvar sel = new <a href=\"#!/api/CKEDITOR.dom.selection\" rel=\"CKEDITOR.dom.selection\" class=\"docClass\">CKEDITOR.dom.selection</a>( CKEDITOR.document.getById( 'editable' ) );\n\n// Cloning selection.\nvar clone = new <a href=\"#!/api/CKEDITOR.dom.selection\" rel=\"CKEDITOR.dom.selection\" class=\"docClass\">CKEDITOR.dom.selection</a>( sel );\n</code></pre>\n"}},"createBookmarks":{"!type":"fn(serializable: ?)","!doc":"<p>Creates a bookmark for each range of this selection (from <a href=\"#!/api/CKEDITOR.dom.selection-method-getRanges\" rel=\"CKEDITOR.dom.selection-method-getRanges\" class=\"docClass\">getRanges</a>)\nby calling the <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark\" rel=\"CKEDITOR.dom.range-method-createBookmark\" class=\"docClass\">CKEDITOR.dom.range.createBookmark</a> method,\nwith extra care taken to avoid interference among those ranges. The arguments\nreceived are the same as with the underlying range method.</p>\n\n<pre><code>var bookmarks = editor.getSelection().createBookmarks();\n</code></pre>\n"},"createBookmarks2":{"!type":"fn(normalized: ?)","!doc":"<p>Creates a bookmark for each range of this selection (from <a href=\"#!/api/CKEDITOR.dom.selection-method-getRanges\" rel=\"CKEDITOR.dom.selection-method-getRanges\" class=\"docClass\">getRanges</a>)\nby calling the <a href=\"#!/api/CKEDITOR.dom.range-method-createBookmark2\" rel=\"CKEDITOR.dom.range-method-createBookmark2\" class=\"docClass\">CKEDITOR.dom.range.createBookmark2</a> method,\nwith extra care taken to avoid interference among those ranges. The arguments\nreceived are the same as with the underlying range method.</p>\n\n<pre><code>var bookmarks = editor.getSelection().createBookmarks2();\n</code></pre>\n"},"fake":{"!type":"fn(element: ?)","!doc":"<p>Makes a \"fake selection\" of an element.</p>\n\n<p>A fake selection does not render UI artifacts over the selected\nelement. Additionally, the browser native selection system is not\naware of the fake selection. In practice, the native selection is\nmoved to a hidden place where no native selection UI artifacts are\ndisplayed to the user.</p>\n"},"getCommonAncestor":{"!type":"fn()","!doc":"<p>Retrieves the common ancestor node of the first range and the last range.</p>\n\n<pre><code>var ancestor = editor.getSelection().getCommonAncestor();\n</code></pre>\n"},"getNative":{"!type":"fn()","!doc":"<p>Gets the native selection object from the browser.</p>\n\n<pre><code>var selection = editor.getSelection().getNative();\n</code></pre>\n"},"getRanges":{"!type":"fn(onlyEditables?: bool)","!doc":"<p>Retrieves the <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a> instances that represent the current selection.</p>\n\n<p>Note: Some browsers return multiple ranges even for a continuous selection. Firefox, for example, returns\none range for each table cell when one or more table rows are selected.</p>\n\n<pre><code>var ranges = selection.getRanges();\nalert( ranges.length );\n</code></pre>\n"},"getSelectedElement":{"!type":"fn()","!doc":"<p>Gets the currently selected element.</p>\n\n<pre><code>var element = editor.getSelection().getSelectedElement();\nalert( element.getName() );\n</code></pre>\n"},"getSelectedText":{"!type":"fn()","!doc":"<p>Retrieves the text contained within the range. An empty string is returned for non-text selection.</p>\n\n<pre><code>var text = editor.getSelection().getSelectedText();\nalert( text );\n</code></pre>\n"},"getStartElement":{"!type":"fn()","!doc":"<p>Gets the DOM element in which the selection starts.</p>\n\n<pre><code>var element = editor.getSelection().getStartElement();\nalert( element.getName() );\n</code></pre>\n"},"getType":{"!type":"fn()","!doc":"<p>Gets the type of the current selection. The following values are\navailable:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR-property-SELECTION_NONE\" rel=\"CKEDITOR-property-SELECTION_NONE\" class=\"docClass\">CKEDITOR.SELECTION_NONE</a> (1): No selection.</li>\n<li><a href=\"#!/api/CKEDITOR-property-SELECTION_TEXT\" rel=\"CKEDITOR-property-SELECTION_TEXT\" class=\"docClass\">CKEDITOR.SELECTION_TEXT</a> (2): A text or a collapsed selection is selected.</li>\n<li><a href=\"#!/api/CKEDITOR-property-SELECTION_ELEMENT\" rel=\"CKEDITOR-property-SELECTION_ELEMENT\" class=\"docClass\">CKEDITOR.SELECTION_ELEMENT</a> (3): An element is selected.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>if ( editor.getSelection().getType() == <a href=\"#!/api/CKEDITOR-property-SELECTION_TEXT\" rel=\"CKEDITOR-property-SELECTION_TEXT\" class=\"docClass\">CKEDITOR.SELECTION_TEXT</a> )\n    alert( 'A text is selected' );\n</code></pre>\n"},"isHidden":{"!type":"fn()","!doc":"<p>Checks whether selection is placed in hidden element.</p>\n\n<p>This method is to be used to verify whether fake selection\n(see <a href=\"#!/api/CKEDITOR.dom.selection-method-fake\" rel=\"CKEDITOR.dom.selection-method-fake\" class=\"docClass\">fake</a>) is still hidden.</p>\n\n<p><strong>Note:</strong> this method should be executed on real selection - e.g.:</p>\n\n<pre><code>editor.getSelection( true ).isHidden();\n</code></pre>\n"},"lock":{"!type":"fn()","!doc":"<p>Locks the selection made in the editor in order to make it possible to\nmanipulate it without browser interference. A locked selection is\ncached and remains unchanged until it is released with the <a href=\"#!/api/CKEDITOR.dom.selection-method-unlock\" rel=\"CKEDITOR.dom.selection-method-unlock\" class=\"docClass\">unlock</a> method.</p>\n\n<pre><code>editor.getSelection().lock();\n</code></pre>\n"},"removeAllRanges":{"!type":"fn()","!doc":"<p>Remove all the selection ranges from the document.</p>\n"},"reset":{"!type":"fn()","!doc":"<p>Clears the selection cache.</p>\n\n<pre><code>editor.getSelection().reset();\n</code></pre>\n"},"scrollIntoView":{"!type":"fn()","!doc":"<p>Moves the scrollbar to the starting position of the current selection.</p>\n\n<pre><code>editor.getSelection().scrollIntoView();\n</code></pre>\n"},"selectBookmarks":{"!type":"fn(bookmarks: ?)","!doc":"<p>Selects the virtual ranges denoted by the bookmarks by calling <a href=\"#!/api/CKEDITOR.dom.selection-method-selectRanges\" rel=\"CKEDITOR.dom.selection-method-selectRanges\" class=\"docClass\">selectRanges</a>.</p>\n\n<pre><code>var bookmarks = editor.getSelection().createBookmarks();\neditor.getSelection().selectBookmarks( bookmarks );\n</code></pre>\n"},"selectElement":{"!type":"fn(element: ?)","!doc":"<p>Makes the current selection of type <a href=\"#!/api/CKEDITOR-property-SELECTION_ELEMENT\" rel=\"CKEDITOR-property-SELECTION_ELEMENT\" class=\"docClass\">CKEDITOR.SELECTION_ELEMENT</a> by enclosing the specified element.</p>\n\n<pre><code>var element = editor.document.getById( 'sampleElement' );\neditor.getSelection().selectElement( element );\n</code></pre>\n"},"selectRanges":{"!type":"fn(ranges: ?)","!doc":"<p>Clears the original selection and adds the specified ranges to the document selection.</p>\n\n<pre><code>    // Move selection to the end of the editable element.\nvar range = editor.createRange();\nrange.moveToPosition( range.root, <a href=\"#!/api/CKEDITOR-property-POSITION_BEFORE_END\" rel=\"CKEDITOR-property-POSITION_BEFORE_END\" class=\"docClass\">CKEDITOR.POSITION_BEFORE_END</a> );\neditor.getSelection().selectRanges( [ ranges ] );\n</code></pre>\n"},"unlock":{"!type":"fn(restore: ?)","!doc":"<p>@todo</p>\n"}},"text":{"!doc":"<p>Represents a DOM text node.</p>\n\n<pre><code>var nativeNode = document.createTextNode( 'Example' );\nvar text = <a href=\"#!/api/CKEDITOR.dom.text\" rel=\"CKEDITOR.dom.text\" class=\"docClass\">CKEDITOR.dom.text</a>( nativeNode );\n\nvar text = <a href=\"#!/api/CKEDITOR.dom.text\" rel=\"CKEDITOR.dom.text\" class=\"docClass\">CKEDITOR.dom.text</a>( 'Example' );\n</code></pre>\n","type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_TEXT\" rel=\"CKEDITOR-property-NODE_TEXT\" class=\"docClass\">CKEDITOR.NODE_TEXT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(text: ?, ownerDocument?: ?)","!doc":"<p>Creates a text class instance.</p>\n"}},"getLength":{"!type":"fn()","!doc":"<p>Gets length of node's value.</p>\n"},"getText":{"!type":"fn()","!doc":"<p>Gets node's value.</p>\n"},"setText":{"!type":"fn(text: string)","!doc":"<p>Sets node's value.</p>\n"},"split":{"!type":"fn(The: number)","!doc":"<p>Breaks this text node into two nodes at the specified offset,\nkeeping both in the tree as siblings. This node then only contains\nall the content up to the offset point. A new text node, which is\ninserted as the next sibling of this node, contains all the content\nat and after the offset point. When the offset is equal to the\nlength of this node, the new node has no data.</p>\n"},"substring":{"!type":"fn(indexA: number, indexB?: number)","!doc":"<p>Extracts characters from indexA up to but not including <code>indexB</code>.</p>\n"}},"walker":{"!doc":"<p>Utility class to \"walk\" the DOM inside a range boundaries. If the\nrange starts or ends in the middle of the text node this node will\nbe included as a whole. Outside changes to the range may break the walker.</p>\n\n<p>The walker may return nodes that are not totaly included into the\nrange boundaires. Let's take the following range representation,\nwhere the square brackets indicate the boundaries:</p>\n\n<pre><code>[&lt;p&gt;Some &lt;b&gt;sample] text&lt;/b&gt;\n</code></pre>\n\n<p>While walking forward into the above range, the following nodes are\nreturned: <code>&lt;p&gt;</code>, <code>\"Some \"</code>, <code>&lt;b&gt;</code> and <code>\"sample\"</code>. Going\nbackwards instead we have: <code>\"sample\"</code> and <code>\"Some \"</code>. So note that the\nwalker always returns nodes when \"entering\" them, but not when\n\"leaving\" them. The guard function is instead called both when\nentering and leaving nodes.</p>\n","_":{"!doc":"\n"},"prototype":{"evaluator":{"!doc":"<p>A function executed for every matched node, to check whether\nit's to be considered into the walk or not. If not provided, all\nmatched nodes are considered good.</p>\n\n<p>If the function returns <code>false</code> the node is ignored.</p>\n"},"guard":{"!doc":"<p>A function executed for every node the walk pass by to check\nwhether the walk is to be finished. It's called when both\nentering and exiting nodes, as well as for the matched nodes.</p>\n\n<p>If this function returns <code>false</code>, the walking ends and no more\nnodes are evaluated.</p>\n"},"constructor":{"!type":"fn(range: ?)","!doc":"<p>Creates a walker class instance.</p>\n"}},"checkBackward":{"!type":"fn()","!doc":"<p>Check all nodes at left, executing the evaluation function.</p>\n"},"checkForward":{"!type":"fn()","!doc":"<p>Check all nodes at right, executing the evaluation function.</p>\n"},"end":{"!type":"fn()","!doc":"<p>Stops walking. No more nodes are retrieved if this function gets called.</p>\n"},"lastBackward":{"!type":"fn()","!doc":"<p>Executes a full walk backwards (to the left), until no more nodes\nare available, returning the last valid node.</p>\n"},"lastForward":{"!type":"fn()","!doc":"<p>Executes a full walk forward (to the right), until no more nodes\nare available, returning the last valid node.</p>\n"},"next":{"!type":"fn()","!doc":"<p>Retrieves the next node (at right).</p>\n"},"previous":{"!type":"fn()","!doc":"<p>Retrieves the previous node (at left).</p>\n"},"reset":{"!type":"fn()","!doc":"<p>Resets walker.</p>\n"},"blockBoundary":{"!type":"fn(customNodeNames: ?)","!doc":"<p>Returns a function which checks whether the node is a block boundary.\nSee <a href=\"#!/api/CKEDITOR.dom.element-method-isBlockBoundary\" rel=\"CKEDITOR.dom.element-method-isBlockBoundary\" class=\"docClass\">CKEDITOR.dom.element.isBlockBoundary</a>.</p>\n"},"bogus":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether node is a bogus (filler) node from\ncontenteditable element's point of view.</p>\n"},"bookmark":{"!type":"fn(contentOnly?: bool, isReject?: bool)","!doc":"<p>Returns a function which checks whether the node is a bookmark node OR bookmark node\ninner contents.</p>\n"},"editable":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether node can be a container or a sibling\nof selection end.</p>\n\n<p>This includes:</p>\n\n<ul>\n<li>text nodes (but not whitespaces),</li>\n<li>inline elements,</li>\n<li>intersection of <a href=\"#!/api/CKEDITOR.dtd-property-S-empty\" rel=\"CKEDITOR.dtd-property-S-empty\" class=\"docClass\">CKEDITOR.dtd.$empty</a> and <a href=\"#!/api/CKEDITOR.dtd-property-S-block\" rel=\"CKEDITOR.dtd-property-S-block\" class=\"docClass\">CKEDITOR.dtd.$block</a> (currenly\nit's only <code>&lt;hr&gt;</code>),</li>\n<li>non-editable blocks (special case - such blocks cannot be containers nor\nsiblings, they need to be selected entirely),</li>\n<li>empty blocks which can contain text (IE only).</li>\n</ul>\n\n"},"ignored":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether node should be ignored in terms of \"editability\".</p>\n\n<p>This includes:</p>\n\n<ul>\n<li>whitespaces (see <a href=\"#!/api/CKEDITOR.dom.walker-static-method-whitespaces\" rel=\"CKEDITOR.dom.walker-static-method-whitespaces\" class=\"docClass\">whitespaces</a>),</li>\n<li>bookmarks (see <a href=\"#!/api/CKEDITOR.dom.walker-static-method-bookmark\" rel=\"CKEDITOR.dom.walker-static-method-bookmark\" class=\"docClass\">bookmark</a>),</li>\n<li>temporary elements (see <a href=\"#!/api/CKEDITOR.dom.walker-static-method-temp\" rel=\"CKEDITOR.dom.walker-static-method-temp\" class=\"docClass\">temp</a>).</li>\n</ul>\n\n"},"invisible":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether the node is invisible in wysiwyg mode.</p>\n"},"listItemBoundary":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"nodeType":{"!type":"fn(type: number, isReject?: bool)","!doc":"<p>Returns a function which checks whether node's type is equal to passed one.</p>\n"},"temp":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether node is a temporary element\n(element with <code>data-cke-temp</code> attribute) or its child.</p>\n"},"whitespaces":{"!type":"fn(isReject?: bool)","!doc":"<p>Returns a function which checks whether the node is a text node containing only whitespaces characters.</p>\n"}},"window":{"!doc":"<p>Represents a DOM window.</p>\n\n<pre><code>var document = new <a href=\"#!/api/CKEDITOR.dom.window\" rel=\"CKEDITOR.dom.window\" class=\"docClass\">CKEDITOR.dom.window</a>( window );\n</code></pre>\n","prototype":{"constructor":{"!type":"fn(domWindow: ?)","!doc":"<p>Creates a window class instance.</p>\n"}},"focus":{"!type":"fn()","!doc":"<p>Moves the selection focus to this window.</p>\n\n<pre><code>var win = new <a href=\"#!/api/CKEDITOR.dom.window\" rel=\"CKEDITOR.dom.window\" class=\"docClass\">CKEDITOR.dom.window</a>( window );\nwin.focus();\n</code></pre>\n"},"getFrame":{"!type":"fn()","!doc":"<p>Gets the frame element containing this window context.</p>\n"},"getScrollPosition":{"!type":"fn()","!doc":"<p>Gets the current position of the window's scroll.</p>\n\n<pre><code>var win = new <a href=\"#!/api/CKEDITOR.dom.window\" rel=\"CKEDITOR.dom.window\" class=\"docClass\">CKEDITOR.dom.window</a>( window );\nvar pos = win.getScrollPosition();\nalert( pos.x );\nalert( pos.y );\n</code></pre>\n"},"getViewPaneSize":{"!type":"fn()","!doc":"<p>Gets the width and height of this window's viewable area.</p>\n\n<pre><code>var win = new <a href=\"#!/api/CKEDITOR.dom.window\" rel=\"CKEDITOR.dom.window\" class=\"docClass\">CKEDITOR.dom.window</a>( window );\nvar size = win.getViewPaneSize();\nalert( size.width );\nalert( size.height );\n</code></pre>\n"}}},"dtd":{"!doc":"<p>Holds and object representation of the HTML DTD to be used by the\neditor in its internal operations.</p>\n\n<p>Each element in the DTD is represented by a property in this object. Each\nproperty contains the list of elements that can be contained by the element.\nText is represented by the <code>#</code> property.</p>\n\n<p>Several special grouping properties are also available. Their names start\nwith the <code>$</code> character.</p>\n\n<pre><code>// Check if &lt;div&gt; can be contained in a &lt;p&gt; element.\nalert( !!<a href=\"#!/api/CKEDITOR.dtd\" rel=\"CKEDITOR.dtd\" class=\"docClass\">CKEDITOR.dtd</a>[ 'p' ][ 'div' ] ); // false\n\n// Check if &lt;p&gt; can be contained in a &lt;div&gt; element.\nalert( !!<a href=\"#!/api/CKEDITOR.dtd\" rel=\"CKEDITOR.dtd\" class=\"docClass\">CKEDITOR.dtd</a>[ 'div' ][ 'p' ] ); // true\n\n// Check if &lt;p&gt; is a block element.\nalert( !!<a href=\"#!/api/CKEDITOR.dtd-property-S-block\" rel=\"CKEDITOR.dtd-property-S-block\" class=\"docClass\">CKEDITOR.dtd.$block</a>[ 'p' ] ); // true\n</code></pre>\n","$block":{"!doc":"<p>List of block elements, like <code>&lt;p&gt;</code> or <code>&lt;div&gt;</code>.</p>\n"},"$blockLimit":{"!doc":"<p>List of elements that contain other blocks, in which block-level operations should be limited,\nthis property is not intended to be checked directly, use <a href=\"#!/api/CKEDITOR.dom.elementPath-property-blockLimit\" rel=\"CKEDITOR.dom.elementPath-property-blockLimit\" class=\"docClass\">CKEDITOR.dom.elementPath.blockLimit</a> instead.</p>\n\n<p>Some examples of editor behaviors that are impacted by block limits:</p>\n\n<ul>\n<li>Enter key never split a block-limit element;</li>\n<li>Style application is constraint by the block limit of the current selection.</li>\n<li>Pasted html will be inserted into the block limit of the current selection.</li>\n</ul>\n\n\n<p><strong>Note:</strong> As an exception <code>&lt;li&gt;</code> is not considered as a block limit, as it's generally used as a text block.</p>\n"},"$cdata":{"!doc":"<p>List of elements that contain character data.</p>\n"},"$editable":{"!doc":"<p>List of elements that are accepted as inline editing hosts.</p>\n"},"$empty":{"!doc":"<p>List of empty (self-closing) elements, like <code>&lt;br&gt;</code> or <code>&lt;img&gt;</code>.</p>\n"},"$inline":{"!doc":"<p>List of inline (<code>&lt;span&gt;</code> like) elements.</p>\n"},"$intermediate":{"!doc":"<p>List of elements that are not to exist standalone that must live under it's parent element.</p>\n"},"$list":{"!doc":"<p>List of list root elements.</p>\n"},"$listItem":{"!doc":"<p>List of list item elements, like <code>&lt;li&gt;</code> or <code>&lt;dd&gt;</code>.</p>\n"},"$nonBodyContent":{"!doc":"<p>List of elements which may live outside body.</p>\n"},"$nonEditable":{"!doc":"<p>Elements that accept text nodes, but are not possible to edit into the browser.</p>\n"},"$object":{"!doc":"<p>Elements that are considered objects, therefore selected as a whole in the editor.</p>\n"},"$removeEmpty":{"!doc":"<p>List of elements that can be ignored if empty, like <code>&lt;b&gt;</code> or <code>&lt;span&gt;</code>.</p>\n"},"$tabIndex":{"!doc":"<p>List of elements that have tabindex set to zero by default.</p>\n"},"$tableContent":{"!doc":"<p>List of elements used inside the <code>&lt;table&gt;</code> element, like <code>&lt;tbody&gt;</code> or <code>&lt;td&gt;</code>.</p>\n"},"$transparent":{"!doc":"<p>List of \"transparent\" elements. See <a href=\"http://dev.w3.org/html5/markup/terminology.html#transparent\">W3C's definition of \"transparent\" element</a>.</p>\n"},"parentOf":{"!type":"fn(tagName: string)","!doc":"<p>Return the DTD-valid parent tag names of the specified one.</p>\n"}},"editable":{"!doc":"<p>Editable class which provides all editing related activities by\nthe <code>contenteditable</code> element, dynamically get attached to editor instance.</p>\n","hasFocus":{"!type":"bool","!doc":"<p>Indicates whether the editable element gained focus.</p>\n"},"status":{"!type":"string","!doc":"<p>Indicates the initialization status of the editable element. The following statuses are available:</p>\n\n<ul>\n<li><strong>unloaded</strong> &ndash; the initial state. The editable's instance was created but\nis not fully loaded (in particular it has no data).</li>\n<li><strong>ready</strong> &ndash; the editable is fully initialized. The <code>ready</code> status is set after\nthe first <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">CKEDITOR.editor.setData</a> is called.</li>\n<li><strong>detached</strong> &ndash; the editable was detached.</li>\n</ul>\n\n"},"prototype":{"constructor":{"!type":"fn(editor: ?, element: ?)","!doc":"<p>The constructor only stores generic editable creation logic that is commonly shared among all different editable elements.Creates an editable class instance.</p>\n"}},"attachClass":{"!type":"fn(className: string)","!doc":"<p>Adds a CSS class name to this editable that needs to be removed on detaching.</p>\n"},"attachListener":{"!type":"fn(obj: ?, eventName: string, listenerFunction: ?, scopeObj?: ?, listenerData?: ?, priority?: number)","!doc":"<p>Registers an event listener that needs to be removed when detaching this editable.\nThis means that it will be automatically removed when <a href=\"#!/api/CKEDITOR.editable-method-detach\" rel=\"CKEDITOR.editable-method-detach\" class=\"docClass\">detach</a> is executed,\nfor example on <a href=\"#!/api/CKEDITOR.editor-method-setMode\" rel=\"CKEDITOR.editor-method-setMode\" class=\"docClass\">changing editor mode</a> or destroying editor.</p>\n\n<p>Except for <code>obj</code> all other arguments have the same meaning as in <a href=\"#!/api/CKEDITOR.event-method-on\" rel=\"CKEDITOR.event-method-on\" class=\"docClass\">CKEDITOR.event.on</a>.</p>\n\n<p>This method is strongly related to the <a href=\"#!/api/CKEDITOR.editor-event-contentDom\" rel=\"CKEDITOR.editor-event-contentDom\" class=\"docClass\">CKEDITOR.editor.contentDom</a> and\n<a href=\"#!/api/CKEDITOR.editor-event-contentDomUnload\" rel=\"CKEDITOR.editor-event-contentDomUnload\" class=\"docClass\">CKEDITOR.editor.contentDomUnload</a> events, because they are fired\nwhen an editable is being attached and detached. Therefore, this method is usually used\nin the following way:</p>\n\n<pre><code>editor.on( 'contentDom', function() {\n    var editable = editor.editable();\n    editable.attachListener( editable, 'mousedown', function() {\n        // ...\n    } );\n} );\n</code></pre>\n\n<p>This code will attach the <code>mousedown</code> listener every time a new editable is attached\nto the editor, which in classic (<code>iframe</code>-based) editor happens every time the\ndata or the mode is set. This listener will also be removed when that editable is detached.</p>\n\n<p>It is also possible to attach a listener to another object (e.g. to a document).</p>\n\n<pre><code>editor.on( 'contentDom', function() {\n    editor.editable().attachListener( editor.document, 'mousedown', function() {\n        // ...\n    } );\n} );\n</code></pre>\n"},"changeAttr":{"!type":"fn(attr: string, val: string)","!doc":"<p>Make an attribution change that would be reverted on editable detaching.</p>\n"},"clearListeners":{"!type":"fn()","!doc":"<p>Remove all event listeners registered from <a href=\"#!/api/CKEDITOR.editable-method-attachListener\" rel=\"CKEDITOR.editable-method-attachListener\" class=\"docClass\">attachListener</a>.</p>\n"},"detach":{"!type":"fn()","!doc":"<p>Detach this editable object from the DOM (remove classes, listeners, etc.)</p>\n"},"getData":{"!type":"fn(isSnapshot: ?)","!doc":"<p>@see <a href=\"#!/api/CKEDITOR.editor-method-getData\" rel=\"CKEDITOR.editor-method-getData\" class=\"docClass\">CKEDITOR.editor.getData</a></p>\n"},"insertElement":{"!type":"fn(element: ?, range: ?)","!doc":"<p>@see <a href=\"#!/api/CKEDITOR.editor-method-insertElement\" rel=\"CKEDITOR.editor-method-insertElement\" class=\"docClass\">CKEDITOR.editor.insertElement</a></p>\n"},"insertElementIntoRange":{"!type":"fn(element: ?, range: ?)","!doc":"<p>Inserts an element into the position in the editor determined by range.</p>\n"},"insertElementIntoSelection":{"!type":"fn(element: ?)","!doc":"<p>Inserts an element into the currently selected position in the editor.</p>\n"},"insertHtml":{"!type":"fn(data: ?, mode: ?)","!doc":"<p>@see <a href=\"#!/api/CKEDITOR.editor-method-insertHtml\" rel=\"CKEDITOR.editor-method-insertHtml\" class=\"docClass\">CKEDITOR.editor.insertHtml</a></p>\n"},"insertText":{"!type":"fn(text: ?)","!doc":"<p>@see <a href=\"#!/api/CKEDITOR.editor-method-insertText\" rel=\"CKEDITOR.editor-method-insertText\" class=\"docClass\">CKEDITOR.editor.insertText</a></p>\n"},"isInline":{"!type":"fn()","!doc":"<p>Check if the editable is one of the host page element, indicates the\nan inline editing environment.</p>\n"},"on":{"!type":"fn(name: ?, fn: ?)","!doc":"<p>Overrides <a href=\"#!/api/CKEDITOR.dom.element-method-on\" rel=\"CKEDITOR.dom.element-method-on\" class=\"docClass\">CKEDITOR.dom.element.on</a> to have special <code>focus/blur</code> handling.\nThe <code>focusin/focusout</code> events are used in IE to replace regular <code>focus/blur</code> events\nbecause we want to avoid the asynchronous nature of later ones.</p>\n"},"restoreAttrs":{"!type":"fn()","!doc":"<p>Restore all attribution changes made by {@link <a href=\"#!/api/CKEDITOR.editable-method-changeAttr\" rel=\"CKEDITOR.editable-method-changeAttr\" class=\"docClass\">changeAttr</a> }.</p>\n"},"setData":{"!type":"fn(data: ?, isSnapshot: ?)","!doc":"<p>@see <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">CKEDITOR.editor.setData</a></p>\n"},"setReadOnly":{"!type":"fn(isReadOnly: bool)","!doc":"<p>Change the read-only state on this editable.</p>\n"},"setup":{"!type":"fn()","!doc":"<p>Editable element bootstrapping.</p>\n"}},"editor":{"!doc":"<p>Represents an editor instance. This constructor should be rarely\nused in favor of the <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a> editor creation functions.</p>\n","prototype":{"activeEnterMode":{"!type":"number","!doc":"<p>The dynamic enter mode which should be used in the current context (selection location).\nBy default it equals the <a href=\"#!/api/CKEDITOR.editor-property-enterMode\" rel=\"CKEDITOR.editor-property-enterMode\" class=\"docClass\">enterMode</a> and it can be changed by the <a href=\"#!/api/CKEDITOR.editor-method-setActiveEnterMode\" rel=\"CKEDITOR.editor-method-setActiveEnterMode\" class=\"docClass\">setActiveEnterMode</a> method.</p>\n\n<p>See also the <a href=\"#!/api/CKEDITOR.editor-method-setActiveEnterMode\" rel=\"CKEDITOR.editor-method-setActiveEnterMode\" class=\"docClass\">setActiveEnterMode</a> method for an explanation of dynamic settings.</p>\n"},"activeFilter":{"!doc":"<p>The active filter instance which should be used in the current context (location selection).\nThis instance will be used to make a decision which commands, buttons and other\n<a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">features</a> can be enabled.</p>\n\n<p>By default it equals the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">filter</a> and it can be changed by the <a href=\"#!/api/CKEDITOR.editor-method-setActiveFilter\" rel=\"CKEDITOR.editor-method-setActiveFilter\" class=\"docClass\">setActiveFilter</a> method.</p>\n\n<pre><code>editor.on( 'activeFilterChange', function() {\n    if ( editor.activeFilter.check( 'cite' ) )\n        // Do something when &lt;cite&gt; was enabled - e.g. enable a button.\n    else\n        // Otherwise do something else.\n} );\n</code></pre>\n\n<p>See also the <a href=\"#!/api/CKEDITOR.editor-method-setActiveEnterMode\" rel=\"CKEDITOR.editor-method-setActiveEnterMode\" class=\"docClass\">setActiveEnterMode</a> method for an explanation of dynamic settings.</p>\n"},"activeShiftEnterMode":{"!type":"number","!doc":"<p>See the <a href=\"#!/api/CKEDITOR.editor-property-activeEnterMode\" rel=\"CKEDITOR.editor-property-activeEnterMode\" class=\"docClass\">activeEnterMode</a> property.</p>\n"},"container":{"!doc":"<p>The outermost element in the DOM tree in which the editable element resides. It is provided\nby a specific editor creator after editor UI is created and is not intended to\nbe modified.</p>\n\n<pre><code>var editor = CKEDITOR.instances.editor1;\nalert( editor.container.getName() ); // 'span'\n</code></pre>\n"},"dataProcessor":{"!doc":"<p>If defined, points to the data processor which is responsible to translate\nand transform the editor data on input and output.\nGeneraly it will point to an instance of <a href=\"#!/api/CKEDITOR.htmlDataProcessor\" rel=\"CKEDITOR.htmlDataProcessor\" class=\"docClass\">CKEDITOR.htmlDataProcessor</a>,\nwhich handles HTML data. The editor may also handle other data formats by\nusing different data processors provided by specific plugins.</p>\n"},"document":{"!doc":"<p>The document that stores the editor contents.</p>\n\n<ul>\n<li>For the classic (<code>iframe</code>-based) editor it is equal to the document inside the\n<code>iframe</code> containing the editable element.</li>\n<li>For the inline editor it is equal to <a href=\"#!/api/CKEDITOR-property-document\" rel=\"CKEDITOR-property-document\" class=\"docClass\">CKEDITOR.document</a>.</li>\n</ul>\n\n\n<p>The document object is available after the <a href=\"#!/api/CKEDITOR.editor-event-contentDom\" rel=\"CKEDITOR.editor-event-contentDom\" class=\"docClass\">contentDom</a> event is fired\nand may be invalidated when the <a href=\"#!/api/CKEDITOR.editor-event-contentDomUnload\" rel=\"CKEDITOR.editor-event-contentDomUnload\" class=\"docClass\">contentDomUnload</a> event is fired\n(classic editor only).</p>\n\n<pre><code>editor.on( 'contentDom', function() {\n    console.log( editor.document );\n} );\n</code></pre>\n"},"enterMode":{"!type":"number","!doc":"<p>The main (static) enter mode which is a validated version of the <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a> setting.\nCurrently only one rule exists &ndash; <a href=\"#!/api/CKEDITOR.editor-property-blockless\" rel=\"CKEDITOR.editor-property-blockless\" class=\"docClass\">blockless editors</a> may have\nenter modes set only to <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>.</p>\n"},"filter":{"!doc":"<p>The main filter instance used for input data filtering, data\ntransformations, and activation of features.</p>\n\n<p>It points to a <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> instance set up based on\neditor configuration.</p>\n"},"lang":{"!doc":"<p>An object that contains all language strings used by the editor interface.</p>\n\n<pre><code>alert( editor.lang.basicstyles.bold ); // e.g. 'Negrito' (if the language is set to Portuguese)\n</code></pre>\n"},"mode":{"!type":"string","!doc":"<p>The current editing mode. An editing mode basically provides\ndifferent ways of editing or viewing the contents.</p>\n\n<pre><code>alert( CKEDITOR.instances.editor1.mode ); // (e.g.) 'wysiwyg'\n</code></pre>\n"},"shiftEnterMode":{"!type":"number","!doc":"<p>See the <a href=\"#!/api/CKEDITOR.editor-property-enterMode\" rel=\"CKEDITOR.editor-property-enterMode\" class=\"docClass\">enterMode</a> property.</p>\n"},"toolbar":{"!doc":"<p>Toolbar definition used by the editor. It is crated from the\n<a href=\"#!/api/CKEDITOR.config-cfg-toolbar\" rel=\"CKEDITOR.config-cfg-toolbar\" class=\"docClass\">CKEDITOR.config.toolbar</a> if it is set or automatically\nbased on <a href=\"#!/api/CKEDITOR.config-cfg-toolbarGroups\" rel=\"CKEDITOR.config-cfg-toolbarGroups\" class=\"docClass\">CKEDITOR.config.toolbarGroups</a>.</p>\n"},"window":{"!doc":"<p>The window instance related to the <a href=\"#!/api/CKEDITOR.editor-property-document\" rel=\"CKEDITOR.editor-property-document\" class=\"docClass\">document</a> property.</p>\n\n<p>It is always equal to the <code>editor.document.getWindow()</code>.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.editor-property-document\" rel=\"CKEDITOR.editor-property-document\" class=\"docClass\">document</a> property documentation.</p>\n"},"constructor":{"!type":"fn(instanceConfig?: ?, element?: ?, mode?: number)","!doc":"<p>Creates an editor class instance.</p>\n"}},"blockless":{"!type":"bool","!doc":"<p>Indicates that the editor is running in an environment where\nno block elements are accepted inside the content.</p>\n\n<p>This can be for example inline editor based on <code>&lt;h1&gt;</code> element.</p>\n"},"config":{"!doc":"<p>The configurations for this editor instance. It inherits all\nsettings defined in <a href=\"#!/api/CKEDITOR.config\" rel=\"CKEDITOR.config\" class=\"docClass\">CKEDITOR.config</a>, combined with settings\nloaded from custom configuration files and those defined inline in\nthe page when creating the editor.</p>\n\n<pre><code>var editor = CKEDITOR.instances.editor1;\nalert( editor.config.skin ); // e.g. 'moono'\n</code></pre>\n"},"contextMenu":{"!doc":"\n"},"element":{"!doc":"<p>The original host page element upon which the editor is created, it's only\nsupposed to be provided by the concrete editor creator and is not subjected to\nbe modified.</p>\n"},"elementMode":{"!type":"number","!doc":"<p>This property indicate the way how this instance is associated with the <a href=\"#!/api/CKEDITOR.editor-property-element\" rel=\"CKEDITOR.editor-property-element\" class=\"docClass\">element</a>.@see <a href=\"#!/api/CKEDITOR-property-ELEMENT_MODE_INLINE\" rel=\"CKEDITOR-property-ELEMENT_MODE_INLINE\" class=\"docClass\">CKEDITOR.ELEMENT_MODE_INLINE</a>\n@see <a href=\"#!/api/CKEDITOR-property-ELEMENT_MODE_REPLACE\" rel=\"CKEDITOR-property-ELEMENT_MODE_REPLACE\" class=\"docClass\">CKEDITOR.ELEMENT_MODE_REPLACE</a></p>\n"},"focusManager":{"!doc":"<p>Controls the focus state of this editor instance. This property\nis rarely used for normal API operations. It is mainly\ndestinated to developer adding UI elements to the editor interface.</p>\n"},"id":{"!type":"string","!doc":"<p>A unique random string assigned to each editor instance in the page.</p>\n"},"keystrokeHandler":{"!doc":"<p>Controls keystrokes typing in this editor instance.</p>\n"},"langCode":{"!type":"string","!doc":"<p>The code for the language resources that have been loaded\nfor the user interface elements of this editor instance.</p>\n\n<pre><code>alert( editor.langCode ); // e.g. 'en'\n</code></pre>\n"},"name":{"!type":"string","!doc":"<p>A unique identifier of this editor instance.</p>\n\n<p><strong>Note:</strong> It will be originated from the ID or name\nattribute of the <a href=\"#!/api/CKEDITOR.editor-property-element\" rel=\"CKEDITOR.editor-property-element\" class=\"docClass\">element</a>, otherwise a name pattern of\n<code>'editor{n}'</code> will be used.</p>\n"},"plugins":{"!doc":"<p>An object that contains references to all plugins used by this\neditor instance.</p>\n\n<pre><code>alert( editor.plugins.dialog.path ); // e.g. 'http://example.com/ckeditor/plugins/dialog/'\n\n// Check if a plugin is available.\nif ( editor.plugins.image ) {\n    ...\n}\n</code></pre>\n"},"readOnly":{"!type":"bool","!doc":"<p>Indicates the read-only state of this editor. This is a read-only property.@see <a href=\"#!/api/CKEDITOR.editor-method-setReadOnly\" rel=\"CKEDITOR.editor-method-setReadOnly\" class=\"docClass\">CKEDITOR.editor.setReadOnly</a></p>\n"},"status":{"!type":"string","!doc":"<p>Indicates editor initialization status. The following statuses are available:</p>\n\n<ul>\n<li><strong>unloaded</strong>: the initial state - editor's instance has been initialized,\nbut its components (config, plugins, language files) are not loaded yet.</li>\n<li><strong>loaded</strong>: editor's components have been loaded - see <a href=\"#!/api/CKEDITOR.editor-event-loaded\" rel=\"CKEDITOR.editor-event-loaded\" class=\"docClass\">loaded</a> event.</li>\n<li><strong>ready</strong>: editor is fully initialized and ready - see <a href=\"#!/api/CKEDITOR.editor-event-instanceReady\" rel=\"CKEDITOR.editor-event-instanceReady\" class=\"docClass\">instanceReady</a> event.</li>\n<li><strong>destroyed</strong>: the editor has been destroyed - see <a href=\"#!/api/CKEDITOR.editor-method-destroy\" rel=\"CKEDITOR.editor-method-destroy\" class=\"docClass\">destroy</a> method.</li>\n</ul>\n\n"},"tabIndex":{"!type":"number","!doc":"<p>The <a href=\"http://en.wikipedia.org/wiki/Tabbing_navigation\">tabbing navigation</a> order determined for this editor instance.\nThis can be set by the <code><a href=\"#!/api/CKEDITOR.config-cfg-tabIndex\" rel=\"CKEDITOR.config-cfg-tabIndex\" class=\"docClass\">CKEDITOR.config.tabIndex</a></code>\nsetting or taken from the <code>tabindex</code> attribute of the\n<a href=\"#!/api/CKEDITOR.editor-property-element\" rel=\"CKEDITOR.editor-property-element\" class=\"docClass\">element</a> associated with the editor.</p>\n\n<pre><code>alert( editor.tabIndex ); // e.g. 0\n</code></pre>\n"},"templates":{"!doc":"<p>Contains all UI templates created for this editor instance.</p>\n"},"title":{"!doc":"<p>Indicates the human-readable title of this editor. Although this is a read-only property,\nit can be initialized with <a href=\"#!/api/CKEDITOR.config-cfg-title\" rel=\"CKEDITOR.config-cfg-title\" class=\"docClass\">CKEDITOR.config.title</a>.</p>\n\n<p><strong>Note:</strong> Please do not confuse this property with <a href=\"#!/api/CKEDITOR.editor-property-name\" rel=\"CKEDITOR.editor-property-name\" class=\"docClass\">editor.name</a>\nwhich identifies the instance in the <a href=\"#!/api/CKEDITOR-property-instances\" rel=\"CKEDITOR-property-instances\" class=\"docClass\">CKEDITOR.instances</a> literal.</p>\n"},"ui":{"!doc":"<p>Namespace containing UI features related to this editor instance.</p>\n"},"widgets":{"!doc":"<p>An instance of widget repository. It contains all\n<a href=\"#!/api/CKEDITOR.plugins.widget.repository-property-registered\" rel=\"CKEDITOR.plugins.widget.repository-property-registered\" class=\"docClass\">registered widget definitions</a> and\n<a href=\"#!/api/CKEDITOR.plugins.widget.repository-property-instances\" rel=\"CKEDITOR.plugins.widget.repository-property-instances\" class=\"docClass\">initialized instances</a>.</p>\n\n<pre><code>editor.widgets.add( 'someName', {\n    // Widget definition...\n} );\n\neditor.widgets.registered.someName; // -&gt; Widget definition\n</code></pre>\n"},"_attachToForm":{"!type":"fn()","!doc":"<p>Attaches the editor to a form to call <a href=\"#!/api/CKEDITOR.editor-method-updateElement\" rel=\"CKEDITOR.editor-method-updateElement\" class=\"docClass\">updateElement</a> before form submission.\nThis method is called by both creators (<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">replace</a> and\n<a href=\"#!/api/CKEDITOR-method-inline\" rel=\"CKEDITOR-method-inline\" class=\"docClass\">inline</a>), so there is no reason to call it manually.</p>\n"},"addCommand":{"!type":"fn(commandName: string, commandDefinition: ?)","!doc":"<p>Adds a command definition to the editor instance. Commands added with\nthis function can be executed later with the <code><a href=\"#!/api/CKEDITOR.editor-method-execCommand\" rel=\"CKEDITOR.editor-method-execCommand\" class=\"docClass\">execCommand</a></code> method.</p>\n\n<pre><code>    editorInstance.addCommand( 'sample', {\n        exec: function( editor ) {\n            alert( 'Executing a command for the editor name \"' + editor.name + '\"!' );\n        }\n    } );\n</code></pre>\n"},"addContentsCss":{"!type":"fn(cssPath: string)","!doc":"<p>Adds the path to a stylesheet file to the exisiting <a href=\"#!/api/CKEDITOR.config-cfg-contentsCss\" rel=\"CKEDITOR.config-cfg-contentsCss\" class=\"docClass\">CKEDITOR.config.contentsCss</a> value.</p>\n\n<p><strong>Note:</strong> This method is available only with the <code>wysiwygarea</code> plugin and only affects\nclassic editors based on it (so it does not affect inline editors).</p>\n\n<pre><code>editor.addContentsCss( 'assets/contents.css' );\n</code></pre>\n"},"addFeature":{"!type":"fn(feature: ?)","!doc":"<p>Shorthand for <a href=\"#!/api/CKEDITOR.filter-method-addFeature\" rel=\"CKEDITOR.filter-method-addFeature\" class=\"docClass\">CKEDITOR.filter.addFeature</a>.</p>\n"},"addMenuGroup":{"!type":"fn(name: string, order?: number)","!doc":"<p>Registers an item group to the editor context menu in order to make it\npossible to associate it with menu items later.</p>\n"},"addMenuItem":{"!type":"fn(name: string, definition: ?)","!doc":"<p>Adds an item from the specified definition to the editor context menu.</p>\n"},"addMenuItems":{"!type":"fn(definitions: ?)","!doc":"<p>Adds one or more items from the specified definition array to the editor context menu.</p>\n"},"addMode":{"!type":"fn(mode: string, exec: ?)","!doc":"<p>Registers an editing mode. This function is to be used mainly by plugins.</p>\n"},"addRemoveFormatFilter":{"!type":"fn(func: ?)","!doc":"<p>Add to a collection of functions to decide whether a specific\nelement should be considered as formatting element and thus\ncould be removed during <code>removeFormat</code> command.</p>\n\n<p><strong>Note:</strong> Only available with the existence of <code>removeformat</code> plugin.</p>\n\n<pre><code>// Don't remove empty span.\neditor.addRemoveFormatFilter( function( element ) {\n    return !( element.is( 'span' ) &amp;&amp; <a href=\"#!/api/CKEDITOR.tools-method-isEmpty\" rel=\"CKEDITOR.tools-method-isEmpty\" class=\"docClass\">CKEDITOR.tools.isEmpty</a>( element.getAttributes() ) );\n} );\n</code></pre>\n"},"applyStyle":{"!type":"fn(style: ?)","!doc":"<p>Applies the style upon the editor's current selection. Shorthand for\n<a href=\"#!/api/CKEDITOR.style-method-apply\" rel=\"CKEDITOR.style-method-apply\" class=\"docClass\">CKEDITOR.style.apply</a>.</p>\n"},"attachStyleStateChange":{"!type":"fn(style: ?, callback: ?)","!doc":"<p>Registers a function to be called whenever the selection position changes in the\nediting area. The current state is passed to the function. The possible\nstates are <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a> and <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>.</p>\n\n<pre><code>// Create a style object for the &lt;b&gt; element.\nvar style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'b' } );\nvar editor = CKEDITOR.instances.editor1;\neditor.attachStyleStateChange( style, function( state ) {\n    if ( state == <a href=\"#!/api/CKEDITOR-property-TRISTATE_ON\" rel=\"CKEDITOR-property-TRISTATE_ON\" class=\"docClass\">CKEDITOR.TRISTATE_ON</a> )\n        alert( 'The current state for the B element is ON' );\n    else\n        alert( 'The current state for the B element is OFF' );\n} );\n</code></pre>\n"},"checkDirty":{"!type":"fn()","!doc":"<p>Checks whether the current editor contents present changes when\ncompared to the contents loaded into the editor at startup, or to\nthe contents available in the editor when <a href=\"#!/api/CKEDITOR.editor-method-resetDirty\" rel=\"CKEDITOR.editor-method-resetDirty\" class=\"docClass\">resetDirty</a>\nwas called.</p>\n\n<pre><code>function beforeUnload( evt ) {\n    if ( CKEDITOR.instances.editor1.checkDirty() )\n        return evt.returnValue = \"You will lose the changes made in the editor.\";\n}\n\nif ( window.addEventListener )\n    window.addEventListener( 'beforeunload', beforeUnload, false );\nelse\n    window.attachEvent( 'onbeforeunload', beforeUnload );\n</code></pre>\n"},"createFakeElement":{"!type":"fn(realElement: ?, className: ?, realElementType: ?, isResizable: ?)","!doc":"<p>@todo</p>\n"},"createFakeParserElement":{"!type":"fn(realElement: ?, className: ?, realElementType: ?, isResizable: ?)","!doc":"<p>@todo</p>\n"},"createRange":{"!type":"fn()","!doc":"<p>Shortcut to create a <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a> instance from the editable element.</p>\n"},"destroy":{"!type":"fn(noUpdate?: bool)","!doc":"<p>Destroys the editor instance, releasing all resources used by it.\nIf the editor replaced an element, the element will be recovered.</p>\n\n<pre><code>alert( CKEDITOR.instances.editor1 ); // e.g. object\nCKEDITOR.instances.editor1.destroy();\nalert( CKEDITOR.instances.editor1 ); // undefined\n</code></pre>\n"},"editable":{"!type":"fn(elementOrEditable: ?)","!doc":"<p>Create, retrieve or detach an editable element of the editor,\nthis method should always be used instead of calling directly <a href=\"#!/api/CKEDITOR.editable\" rel=\"CKEDITOR.editable\" class=\"docClass\">CKEDITOR.editable</a>.</p>\n"},"elementPath":{"!type":"fn(startNode?: ?)","!doc":"<p>Returns an <a href=\"#!/api/CKEDITOR.dom.elementPath\" rel=\"CKEDITOR.dom.elementPath\" class=\"docClass\">element path</a> for the selection in the editor.</p>\n"},"execCommand":{"!type":"fn(commandName: string, data?: ?)","!doc":"<p>Executes a command associated with the editor.</p>\n\n<pre><code>editorInstance.execCommand( 'bold' );\n</code></pre>\n"},"focus":{"!type":"fn()","!doc":"<p>Moves the selection focus to the editing area space in the editor.</p>\n"},"forceNextSelectionCheck":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"getClipboardData":{"!type":"fn(options: ?, callback: ?)","!doc":"<p>Gets clipboard data by directly accessing the clipboard (IE only) or opening paste dialog.</p>\n\n<pre><code>editor.getClipboardData( { title: 'Get my data' }, function( data ) {\n    if ( data )\n        alert( data.type + ' ' + data.dataValue );\n} );\n</code></pre>\n"},"getColorFromDialog":{"!type":"fn(callback: ?, scope?: ?)","!doc":"<p>Open up color dialog and to receive the selected color.</p>\n"},"getCommand":{"!type":"fn(commandName: string)","!doc":"<p>Gets one of the registered commands. Note that after registering a\ncommand definition with <a href=\"#!/api/CKEDITOR.editor-method-addCommand\" rel=\"CKEDITOR.editor-method-addCommand\" class=\"docClass\">addCommand</a>, it is\ntransformed internally into an instance of\n<a href=\"#!/api/CKEDITOR.command\" rel=\"CKEDITOR.command\" class=\"docClass\">CKEDITOR.command</a>, which will then be returned by this function.</p>\n"},"getData":{"!type":"fn(noEvents: ?)","!doc":"<p>Gets the editor data. The data will be in raw format. It is the same\ndata that is posted by the editor.</p>\n\n<pre><code>if ( CKEDITOR.instances.editor1.getData() == '' )\n    alert( 'There is no data available' );\n</code></pre>\n"},"getMenuItem":{"!type":"fn(name: string)","!doc":"<p>Retrieves a particular menu item definition from the editor context menu.</p>\n"},"getResizable":{"!type":"fn(forContents: bool)","!doc":"<p>Gets the element that can be used to check the editor size. This method\nis mainly used by the <code>resize</code> plugin, which adds a UI handle that can be used\nto resize the editor.</p>\n"},"getSelection":{"!type":"fn(forceRealSelection: bool)","!doc":"<p>Retrieve the editor selection in scope of editable element.</p>\n\n<p><strong>Note:</strong> Since the native browser selection provides only one single\nselection at a time per document, so if editor's editable element has lost focus,\nthis method will return a null value unless the <a href=\"#!/api/CKEDITOR.editor-method-lockSelection\" rel=\"CKEDITOR.editor-method-lockSelection\" class=\"docClass\">lockSelection</a>\nhas been called beforehand so the saved selection is retrieved.</p>\n\n<pre><code>var selection = CKEDITOR.instances.editor1.getSelection();\nalert( selection.getType() );\n</code></pre>\n"},"getSnapshot":{"!type":"fn()","!doc":"<p>Gets the \"raw data\" currently available in the editor. This is a\nfast method which returns the data as is, without processing, so it is\nnot recommended to use it on resulting pages. Instead it can be used\ncombined with the <a href=\"#!/api/CKEDITOR.editor-method-loadSnapshot\" rel=\"CKEDITOR.editor-method-loadSnapshot\" class=\"docClass\">loadSnapshot</a> method in order\nto be able to automatically save the editor data from time to time\nwhile the user is using the editor, to avoid data loss, without risking\nperformance issues.</p>\n\n<pre><code>alert( editor.getSnapshot() );\n</code></pre>\n\n<p>@see <a href=\"#!/api/CKEDITOR.editor-method-getData\" rel=\"CKEDITOR.editor-method-getData\" class=\"docClass\">CKEDITOR.editor.getData</a></p>\n"},"getStylesSet":{"!type":"fn(callback: ?)","!doc":"<p>Gets the current <code>stylesSet</code> for this instance.</p>\n\n<pre><code>editor.getStylesSet( function( stylesDefinitions ) {} );\n</code></pre>\n\n<p>See also <a href=\"#!/api/CKEDITOR.editor-event-stylesSet\" rel=\"CKEDITOR.editor-event-stylesSet\" class=\"docClass\">stylesSet</a> event.</p>\n"},"getUiColor":{"!type":"fn()","!doc":"<p>Gets the color of the editor user interface.</p>\n\n<pre><code>CKEDITOR.instances.editor1.getUiColor();\n</code></pre>\n"},"insertElement":{"!type":"fn(element: ?)","!doc":"<p>Inserts an element into the currently selected position in the\neditor in WYSIWYG mode.</p>\n\n<pre><code>var element = <a href=\"#!/api/CKEDITOR.dom.element-static-method-createFromHtml\" rel=\"CKEDITOR.dom.element-static-method-createFromHtml\" class=\"docClass\">CKEDITOR.dom.element.createFromHtml</a>( '&lt;img src=\"hello.png\" border=\"0\" title=\"Hello\" /&gt;' );\nCKEDITOR.instances.editor1.insertElement( element );\n</code></pre>\n"},"insertHtml":{"!type":"fn(html: string, mode?: string)","!doc":"<p>Inserts HTML code into the currently selected position in the editor in WYSIWYG mode.</p>\n\n<ul>\n<li><code>\"html\"</code> - content being inserted will completely override styles\n of selected position.</li>\n<li><code>\"unfiltered_html\"</code> - like <code>\"html\"</code> but content isn't filtered with <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>.</li>\n<li><code>\"text\"</code> - content being inserted will inherit styles applied in\n selected position. This mode should be used when inserting \"htmlified\" plain text\n (HTML without inline styles and styling elements like\n <code>&lt;b/&gt;, &lt;strong/&gt;, &lt;span style=\"...\"/&gt;</code>).</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>CKEDITOR.instances.editor1.insertHtml( '&lt;p&gt;This is a new paragraph.&lt;/p&gt;' );\n</code></pre>\n"},"insertText":{"!type":"fn(text: string)","!doc":"<p>Insert text content into the currently selected position in the\neditor in WYSIWYG mode. The styles of the selected element will be applied to the inserted text.\nSpaces around the text will be leaving untouched.</p>\n\n<pre><code>CKEDITOR.instances.editor1.insertText( ' line1 \\n\\n line2' );\n</code></pre>\n"},"loadSnapshot":{"!type":"fn(snapshot: ?)","!doc":"<p>Loads \"raw data\" into the editor. The data is loaded with processing\nstraight to the editing area. It should not be used as a way to load\nany kind of data, but instead in combination with\n<a href=\"#!/api/CKEDITOR.editor-method-getSnapshot\" rel=\"CKEDITOR.editor-method-getSnapshot\" class=\"docClass\">getSnapshot</a> produced data.</p>\n\n<pre><code>var data = editor.getSnapshot();\neditor.loadSnapshot( data );\n</code></pre>\n\n<p>@see <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">CKEDITOR.editor.setData</a></p>\n"},"lockSelection":{"!type":"fn(sel?: ?)","!doc":"<p>Locks the selection made in the editor in order to make it possible to\nmanipulate it without browser interference. A locked selection is\ncached and remains unchanged until it is released with the\n<a href=\"#!/api/CKEDITOR.editor-method-unlockSelection\" rel=\"CKEDITOR.editor-method-unlockSelection\" class=\"docClass\">unlockSelection</a> method.</p>\n"},"openDialog":{"!type":"fn(dialogName: string, callback: ?)","!doc":"<p>Loads and opens a registered dialog.</p>\n\n<pre><code>CKEDITOR.instances.editor1.openDialog( 'smiley' );\n</code></pre>\n"},"popup":{"!type":"fn(url: string, width?: ?, height?: ?, options?: string)","!doc":"<p>Opens Browser in a popup. The <code>width</code> and <code>height</code> parameters accept\nnumbers (pixels) or percent (of screen size) values.</p>\n"},"removeMenuItem":{"!type":"fn(name: string)","!doc":"<p>Removes a particular menu item added before from the editor context menu.</p>\n"},"removeStyle":{"!type":"fn(style: ?)","!doc":"<p>Removes the style from the editor's current selection. Shorthand for\n<a href=\"#!/api/CKEDITOR.style-method-remove\" rel=\"CKEDITOR.style-method-remove\" class=\"docClass\">CKEDITOR.style.remove</a>.</p>\n"},"resetDirty":{"!type":"fn()","!doc":"<p>Resets the \"dirty state\" of the editor so subsequent calls to\n<a href=\"#!/api/CKEDITOR.editor-method-checkDirty\" rel=\"CKEDITOR.editor-method-checkDirty\" class=\"docClass\">checkDirty</a> will return <code>false</code> if the user will not\nhave made further changes to the contents.</p>\n\n<pre><code>alert( editor.checkDirty() ); // e.g. true\neditor.resetDirty();\nalert( editor.checkDirty() ); // false\n</code></pre>\n"},"resetUndo":{"!type":"fn()","!doc":"<p>Resets the undo stack.</p>\n"},"resize":{"!type":"fn(width: ?, height: ?, isContentHeight?: bool, resizeInner?: bool)","!doc":"<p>Resizes the editor interface.</p>\n\n<pre><code>editor.resize( 900, 300 );\n\neditor.resize( '100%', 450, true );\n</code></pre>\n"},"restoreRealElement":{"!type":"fn(fakeElement: ?)","!doc":"<p>@todo</p>\n"},"selectionChange":{"!type":"fn(checkNow?: bool)","!doc":"<p>Check the selection change in editor and potentially fires\nthe <a href=\"#!/api/CKEDITOR.editor-event-selectionChange\" rel=\"CKEDITOR.editor-event-selectionChange\" class=\"docClass\">selectionChange</a> event.</p>\n"},"setActiveEnterMode":{"!type":"fn(enterMode: number, shiftEnterMode: number)","!doc":"<p>Sets the active enter modes (<a href=\"#!/api/CKEDITOR.editor-property-enterMode\" rel=\"CKEDITOR.editor-property-enterMode\" class=\"docClass\">enterMode</a> and <a href=\"#!/api/CKEDITOR.editor-property-shiftEnterMode\" rel=\"CKEDITOR.editor-property-shiftEnterMode\" class=\"docClass\">shiftEnterMode</a>).\nFires the <a href=\"#!/api/CKEDITOR.editor-event-activeEnterModeChange\" rel=\"CKEDITOR.editor-event-activeEnterModeChange\" class=\"docClass\">activeEnterModeChange</a> event.</p>\n\n<p>Prior to CKEditor 4.3 enter modes were static and it was enough to check <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a>\nand <a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> when implementing a feature which should depend on the enter modes.\nSince CKEditor 4.3 these options are source of initial:</p>\n\n<ul>\n<li>static <a href=\"#!/api/CKEDITOR.editor-property-enterMode\" rel=\"CKEDITOR.editor-property-enterMode\" class=\"docClass\">enterMode</a> and <a href=\"#!/api/CKEDITOR.editor-property-shiftEnterMode\" rel=\"CKEDITOR.editor-property-shiftEnterMode\" class=\"docClass\">shiftEnterMode</a> values,</li>\n<li>dynamic <a href=\"#!/api/CKEDITOR.editor-property-activeEnterMode\" rel=\"CKEDITOR.editor-property-activeEnterMode\" class=\"docClass\">activeEnterMode</a> and <a href=\"#!/api/CKEDITOR.editor-property-activeShiftEnterMode\" rel=\"CKEDITOR.editor-property-activeShiftEnterMode\" class=\"docClass\">activeShiftEnterMode</a> values.</li>\n</ul>\n\n\n<p>However, the dynamic enter modes can be changed during runtime by using this method, to reflect the selection context.\nFor example, if selection is moved to the <a href=\"#!/api/CKEDITOR.plugins.widget\" rel=\"CKEDITOR.plugins.widget\" class=\"docClass\">widget</a>'s nested editable which\nis a <a href=\"#!/api/CKEDITOR.editor-property-blockless\" rel=\"CKEDITOR.editor-property-blockless\" class=\"docClass\">blockless one</a>, then the active enter modes should be changed to <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>\n(in this case <a href=\"#!/guide/dev_widgets\">Widget System</a> takes care of that).</p>\n\n<p><strong>Note:</strong> This method should not be used to configure editor &ndash; use <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a> and\n<a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> instead. This method should be used only to dynamically change\nenter modes during runtime based on selection changes.\nKeep in mind that changed enter mode may be overwritten by other plugin/feature when it decided that\nthe changed context requires this.</p>\n\n<p><strong>Note:</strong> In case of blockless editor (inline editor based on element which cannot contain block elements\n&ndash; see <a href=\"#!/api/CKEDITOR.editor-property-blockless\" rel=\"CKEDITOR.editor-property-blockless\" class=\"docClass\">blockless</a>) only <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a> is a valid enter mode. Therefore\nthis method will not allow to set other values.</p>\n\n<p><strong>Note:</strong> Changing the <a href=\"#!/api/CKEDITOR.editor-property-activeFilter\" rel=\"CKEDITOR.editor-property-activeFilter\" class=\"docClass\">active filter</a> may cause enter mode change if default enter modes\nare not allowed by the new filter.</p>\n"},"setActiveFilter":{"!type":"fn(filter: ?)","!doc":"<p>Sets the active filter (<a href=\"#!/api/CKEDITOR.editor-property-activeFilter\" rel=\"CKEDITOR.editor-property-activeFilter\" class=\"docClass\">activeFilter</a>). Fires <a href=\"#!/api/CKEDITOR.editor-event-activeFilterChange\" rel=\"CKEDITOR.editor-event-activeFilterChange\" class=\"docClass\">activeFilterChange</a> event.</p>\n\n<pre><code>// Set active filter which allows only 4 elements.\n// Buttons like Bold, Italic will be disabled.\nvar filter = new <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>( 'p strong em br' );\neditor.setActiveFilter( filter );\n</code></pre>\n\n<p>Setting new filter will also change the <a href=\"#!/api/CKEDITOR.editor-method-setActiveEnterMode\" rel=\"CKEDITOR.editor-method-setActiveEnterMode\" class=\"docClass\">active enter modes</a> to the first values\nallowed by the new filter (see <a href=\"#!/api/CKEDITOR.filter-method-getAllowedEnterMode\" rel=\"CKEDITOR.filter-method-getAllowedEnterMode\" class=\"docClass\">CKEDITOR.filter.getAllowedEnterMode</a>).</p>\n"},"setData":{"!type":"fn(data: string, callback: ?, internal: bool)","!doc":"<p>Sets the editor data. The data must be provided in the raw format (HTML).</p>\n\n<p>Note that this method is asynchronous. The <code>callback</code> parameter must\nbe used if interaction with the editor is needed after setting the data.</p>\n\n<pre><code>CKEDITOR.instances.editor1.setData( '&lt;p&gt;This is the editor data.&lt;/p&gt;' );\n\nCKEDITOR.instances.editor1.setData( '&lt;p&gt;Some other editor data.&lt;/p&gt;', function() {\n    this.checkDirty(); // true\n});\n</code></pre>\n"},"setKeystroke":{"!type":"fn(keystroke: ?, behavior?: ?)","!doc":"<p>Assigns keystrokes associated to editor commands.</p>\n\n<pre><code>editor.setKeystroke( <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 115, 'save' ); // Assigned CTRL+S to \"save\" command.\neditor.setKeystroke( <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 115, false );  // Disabled CTRL+S keystroke assignment.\neditor.setKeystroke( [\n    [ <a href=\"#!/api/CKEDITOR-property-ALT\" rel=\"CKEDITOR-property-ALT\" class=\"docClass\">CKEDITOR.ALT</a> + 122, false ],\n    [ <a href=\"#!/api/CKEDITOR-property-CTRL\" rel=\"CKEDITOR-property-CTRL\" class=\"docClass\">CKEDITOR.CTRL</a> + 121, 'link' ],\n    [ <a href=\"#!/api/CKEDITOR-property-SHIFT\" rel=\"CKEDITOR-property-SHIFT\" class=\"docClass\">CKEDITOR.SHIFT</a> + 120, 'bold' ]\n] );\n</code></pre>\n\n<p>This method may be used in the following cases:</p>\n\n<ul>\n<li>By plugins (like <code>link</code> or <code>basicstyles</code>) to set their keystrokes when plugins are being loaded.</li>\n<li>During the runtime to modify existing keystrokes.</li>\n</ul>\n\n\n<p>The editor handles keystroke configuration in the following order:</p>\n\n<ol>\n<li>Plugins use this method to define default keystrokes.</li>\n<li>Editor extends default keystrokes with <a href=\"#!/api/CKEDITOR.config-cfg-keystrokes\" rel=\"CKEDITOR.config-cfg-keystrokes\" class=\"docClass\">CKEDITOR.config.keystrokes</a>.</li>\n<li>Editor blocks keystrokes defined in <a href=\"#!/api/CKEDITOR.config-cfg-blockedKeystrokes\" rel=\"CKEDITOR.config-cfg-blockedKeystrokes\" class=\"docClass\">CKEDITOR.config.blockedKeystrokes</a>.</li>\n</ol>\n\n\n<p>After all, you can still set new keystrokes using this method during the runtime.</p>\n"},"setMode":{"!type":"fn(newMode?: string, callback?: ?)","!doc":"<p>Changes the editing mode of this editor instance.</p>\n\n<p><strong>Note:</strong> The mode switch could be asynchronous depending on the mode provider.\nUse the <code>callback</code> to hook subsequent code.</p>\n\n<pre><code>// Switch to \"source\" view.\nCKEDITOR.instances.editor1.setMode( 'source' );\n// Switch to \"wysiwyg\" view and be notified on completion.\nCKEDITOR.instances.editor1.setMode( 'wysiwyg', function() { alert( 'wysiwyg mode loaded!' ); } );\n</code></pre>\n"},"setReadOnly":{"!type":"fn(isReadOnly?: bool)","!doc":"<p>Puts or restores the editor into read-only state. When in read-only,\nthe user is not able to change the editor contents, but can still use\nsome editor features. This function sets the <a href=\"#!/api/CKEDITOR.editor-property-readOnly\" rel=\"CKEDITOR.editor-property-readOnly\" class=\"docClass\">readOnly</a>\nproperty of the editor, firing the <a href=\"#!/api/CKEDITOR.editor-event-readOnly\" rel=\"CKEDITOR.editor-event-readOnly\" class=\"docClass\">readOnly</a> event.</p>\n\n<p><strong>Note:</strong> the current editing area will be reloaded.</p>\n"},"setUiColor":{"!type":"fn(color: string)","!doc":"<p>Sets the color of the editor user interface. This method accepts a color value in\nhexadecimal notation, with a <code>#</code> character (e.g. #ffffff).</p>\n\n<pre><code>    CKEDITOR.instances.editor1.setUiColor( '#ff00ff' );\n</code></pre>\n"},"unlockSelection":{"!type":"fn(restore?: bool)","!doc":"<p>Unlocks the selection made in the editor and locked with the\n<a href=\"#!/api/CKEDITOR.editor-method-unlockSelection\" rel=\"CKEDITOR.editor-method-unlockSelection\" class=\"docClass\">unlockSelection</a> method. An unlocked selection\nis no longer cached and can be changed.</p>\n"},"updateElement":{"!type":"fn()","!doc":"<p>Updates the <code>&lt;textarea&gt;</code> element that was replaced by the editor with\nthe current data available in the editor.</p>\n\n<p><strong>Note:</strong> This method will only affect those editor instances created\nwith <a href=\"#!/api/CKEDITOR-property-ELEMENT_MODE_REPLACE\" rel=\"CKEDITOR-property-ELEMENT_MODE_REPLACE\" class=\"docClass\">CKEDITOR.ELEMENT_MODE_REPLACE</a> element mode or inline instances\nbound to <code>&lt;textarea&gt;</code> elements.</p>\n\n<pre><code>CKEDITOR.instances.editor1.updateElement();\nalert( document.getElementById( 'editor1' ).value ); // The current editor data.\n</code></pre>\n\n<p>@see <a href=\"#!/api/CKEDITOR.editor-property-element\" rel=\"CKEDITOR.editor-property-element\" class=\"docClass\">CKEDITOR.editor.element</a></p>\n"}},"env":{"!doc":"<p>Environment and browser information.</p>\n","air":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Adobe AIR.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-air\" rel=\"CKEDITOR.env-property-air\" class=\"docClass\">CKEDITOR.env.air</a> )\n    alert( 'I\\'m on AIR!' );\n</code></pre>\n"},"prototype":{"chrome":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Chrome.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-chrome\" rel=\"CKEDITOR.env-property-chrome\" class=\"docClass\">CKEDITOR.env.chrome</a> )\n    alert( 'I\\'m running in Chrome!' );\n</code></pre>\n"},"hc":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running on a High Contrast environment.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-hc\" rel=\"CKEDITOR.env-property-hc\" class=\"docClass\">CKEDITOR.env.hc</a> )\n    alert( 'You\\'re running on High Contrast mode. The editor interface will get adapted to provide you a better experience.' );\n</code></pre>\n"},"ie6Compat":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in an IE6-like environment, which\nincludes IE6 itself as well as IE7, IE8 and IE9 in Quirks Mode.</p>\n"},"ie7Compat":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in an IE7-like environment, which\nincludes IE7 itself and IE8's IE7 Document Mode.</p>\n"},"ie8Compat":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Internet Explorer 8 on\nStandards Mode.</p>\n"},"ie9Compat":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Internet Explorer 9 on\nStandards Mode.</p>\n"},"safari":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Safari (including the mobile version).</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-safari\" rel=\"CKEDITOR.env-property-safari\" class=\"docClass\">CKEDITOR.env.safari</a> )\n    alert( 'I\\'m on Safari!' );\n</code></pre>\n"}},"cssClass":{"!type":"string","!doc":"<p>A CSS class that denotes the browser where CKEditor runs and is appended\nto the HTML element that contains the editor. It makes it easier to apply\nbrowser-specific styles to editor instances.</p>\n\n<pre><code>myDiv.className = <a href=\"#!/api/CKEDITOR.env-property-cssClass\" rel=\"CKEDITOR.env-property-cssClass\" class=\"docClass\">CKEDITOR.env.cssClass</a>;\n</code></pre>\n"},"gecko":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a Gecko-based browser, like\nFirefox.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-gecko\" rel=\"CKEDITOR.env-property-gecko\" class=\"docClass\">CKEDITOR.env.gecko</a> )\n    alert( 'I\\'m riding a gecko!' );\n</code></pre>\n"},"hidpi":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in the HiDPI environment.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-hidpi\" rel=\"CKEDITOR.env-property-hidpi\" class=\"docClass\">CKEDITOR.env.hidpi</a> )\n    alert( 'You are using a screen with high pixel density.' );\n</code></pre>\n"},"iOS":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running on Apple iPhone/iPad/iPod devices.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-iOS\" rel=\"CKEDITOR.env-property-iOS\" class=\"docClass\">CKEDITOR.env.iOS</a> )\n    alert( 'I like little apples!' );\n</code></pre>\n"},"ie":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in Internet Explorer.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-ie\" rel=\"CKEDITOR.env-property-ie\" class=\"docClass\">CKEDITOR.env.ie</a> )\n    alert( 'I\\'m running in IE!' );\n</code></pre>\n"},"isCompatible":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a compatible browser.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-isCompatible\" rel=\"CKEDITOR.env-property-isCompatible\" class=\"docClass\">CKEDITOR.env.isCompatible</a> )\n    alert( 'Your browser is pretty cool!' );\n</code></pre>\n"},"mac":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running on Macintosh.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-mac\" rel=\"CKEDITOR.env-property-mac\" class=\"docClass\">CKEDITOR.env.mac</a> )\n    alert( 'I love apples!'' );\n</code></pre>\n"},"mobile":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a mobile environemnt.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-mobile\" rel=\"CKEDITOR.env-property-mobile\" class=\"docClass\">CKEDITOR.env.mobile</a> )\n    alert( 'I\\'m running with CKEditor today!' );\n</code></pre>\n"},"needsBrFiller":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a browser which uses a bogus\n<code>&lt;br&gt;</code> filler in order to correctly display caret in empty blocks.</p>\n"},"needsNbspFiller":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a browser which needs a\nnon-breaking space filler in order to correctly display caret in empty blocks.</p>\n"},"quirks":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a Quirks Mode environment.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-quirks\" rel=\"CKEDITOR.env-property-quirks\" class=\"docClass\">CKEDITOR.env.quirks</a> )\n    alert( 'Nooooo!' );\n</code></pre>\n\n<p>Internet Explorer 10 introduced the <em>New Quirks Mode</em>, which is similar to the <em>Quirks Mode</em>\nimplemented in other modern browsers and defined in the HTML5 specification. It can be handled\nas the Standards mode, so the value of this property will be set to <code>false</code>.</p>\n\n<p>The <em>Internet Explorer 5 Quirks</em> mode which is still available in Internet Explorer 10+\nsets this value to <code>true</code> and <a href=\"#!/api/CKEDITOR.env-property-version\" rel=\"CKEDITOR.env-property-version\" class=\"docClass\">version</a> to <code>7</code>.</p>\n\n<p>Read more: <a href=\"http://blogs.msdn.com/b/ie/archive/2011/12/14/interoperable-html5-quirks-mode-in-ie10.aspx\">IEBlog</a></p>\n"},"version":{"!type":"number","!doc":"<p>Contains the browser version.</p>\n\n<p>For Gecko-based browsers (like Firefox) it contains the revision\nnumber with first three parts concatenated with a padding zero\n(e.g. for revision 1.9.0.2 we have 10900).</p>\n\n<p>For WebKit-based browsers (like Safari and Chrome) it contains the\nWebKit build version (e.g. 522).</p>\n\n<p>For IE browsers, it matches the \"Document Mode\".</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-ie\" rel=\"CKEDITOR.env-property-ie\" class=\"docClass\">CKEDITOR.env.ie</a> &amp;&amp; <a href=\"#!/api/CKEDITOR.env-property-version\" rel=\"CKEDITOR.env-property-version\" class=\"docClass\">CKEDITOR.env.version</a> &lt;= 6 )\n    alert( 'Ouch!' );\n</code></pre>\n"},"webkit":{"!type":"bool","!doc":"<p>Indicates that CKEditor is running in a WebKit-based browser, like Safari.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-property-webkit\" rel=\"CKEDITOR.env-property-webkit\" class=\"docClass\">CKEDITOR.env.webkit</a> )\n    alert( 'I\\'m running in a WebKit browser!' );\n</code></pre>\n"},"isCustomDomain":{"!type":"fn()","!doc":"<p>Indicates that the browser has a custom domain enabled. This has\nbeen set with <code>document.domain</code>.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-method-isCustomDomain\" rel=\"CKEDITOR.env-method-isCustomDomain\" class=\"docClass\">CKEDITOR.env.isCustomDomain</a>() )\n    alert( 'I\\'m in a custom domain!' );\n</code></pre>\n"},"secure":{"!type":"fn()","!doc":"<p>Indicates that the page is running under an encrypted connection.</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR.env-method-secure\" rel=\"CKEDITOR.env-method-secure\" class=\"docClass\">CKEDITOR.env.secure</a> )\n    alert( 'I\\'m on SSL!' );\n</code></pre>\n"}},"eventInfo":{"!doc":"<p>Virtual class that illustrates the features of the event object to be\npassed to event listeners by a <a href=\"#!/api/CKEDITOR.event\" rel=\"CKEDITOR.event\" class=\"docClass\">CKEDITOR.event</a> based object.</p>\n\n<p>This class is not really part of the API.</p>\n","prototype":{"data":{"!doc":"<p>Any kind of additional data. Its format and usage is event dependent.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.data ); // 'Example'\n} );\nsomeObject.fire( 'someEvent', 'Example' );\n</code></pre>\n"},"editor":{"!doc":"<p>The editor instance that holds the sender. May be the same as sender. May be\nnull if the sender is not part of an editor instance, like a component\nrunning in standalone mode.</p>\n\n<pre><code>myButton.on( 'someEvent', function( event ) {\n    alert( event.editor == myEditor ); // true\n} );\nmyButton.fire( 'someEvent', null, myEditor );\n</code></pre>\n"},"listenerData":{"!doc":"<p>Any extra data appended during the listener registration.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.listenerData ); // 'Example'\n}, null, 'Example' );\n</code></pre>\n"},"name":{"!type":"string","!doc":"<p>The event name.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.name ); // 'someEvent'\n} );\nsomeObject.fire( 'someEvent' );\n</code></pre>\n"},"sender":{"!doc":"<p>The object that publishes (sends) the event.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    alert( event.sender == someObject ); // true\n} );\nsomeObject.fire( 'someEvent' );\n</code></pre>\n"},"cancel":{"!type":"fn()","!doc":"<p>Indicates that the event is to be cancelled (if cancelable).</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.cancel();\n} );\nsomeObject.on( 'someEvent', function( event ) {\n    // This one will not be called.\n} );\nalert( someObject.fire( 'someEvent' ) ); // true\n</code></pre>\n"},"removeListener":{"!type":"fn()","!doc":"<p>Removes the current listener.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.removeListener();\n    // Now this function won't be called again by 'someEvent'.\n} );\n</code></pre>\n"},"stop":{"!type":"fn()","!doc":"<p>Indicates that no further listeners are to be called.</p>\n\n<pre><code>someObject.on( 'someEvent', function( event ) {\n    event.stop();\n} );\nsomeObject.on( 'someEvent', function( event ) {\n    // This one will not be called.\n} );\nalert( someObject.fire( 'someEvent' ) ); // false\n</code></pre>\n"}}},"feature":{"!doc":"<p>Interface that may be automatically implemented by any\ninstance of any class which has at least the <code>name</code> property and\ncan be meant as an editor feature.</p>\n\n<p>For example:</p>\n\n<ul>\n<li>\"Bold\" command, button, and keystroke &ndash; it does not mean exactly\n<code>&lt;strong&gt;</code> or <code>&lt;b&gt;</code> but just the ability to create bold text.</li>\n<li>\"Format\" drop-down list &ndash; it also does not imply any HTML tag.</li>\n<li>\"Link\" command, button, and keystroke.</li>\n<li>\"Image\" command, button, and dialog window.</li>\n</ul>\n\n\n<p>Thus most often a feature is an instance of one of the following classes:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR.command\" rel=\"CKEDITOR.command\" class=\"docClass\">CKEDITOR.command</a></li>\n<li><a href=\"#!/api/CKEDITOR.ui.button\" rel=\"CKEDITOR.ui.button\" class=\"docClass\">CKEDITOR.ui.button</a></li>\n<li><a href=\"#!/api/CKEDITOR.ui.richCombo\" rel=\"CKEDITOR.ui.richCombo\" class=\"docClass\">CKEDITOR.ui.richCombo</a></li>\n</ul>\n\n\n<p>None of them have a <code>name</code> property explicitly defined, but\nit is set by <a href=\"#!/api/CKEDITOR.editor-method-addCommand\" rel=\"CKEDITOR.editor-method-addCommand\" class=\"docClass\">CKEDITOR.editor.addCommand</a> and <a href=\"#!/api/CKEDITOR.ui-method-add\" rel=\"CKEDITOR.ui-method-add\" class=\"docClass\">CKEDITOR.ui.add</a>.</p>\n\n<p>During editor initialization all features that the editor should activate\nshould be passed to <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a> (shorthand for <a href=\"#!/api/CKEDITOR.filter-method-addFeature\" rel=\"CKEDITOR.filter-method-addFeature\" class=\"docClass\">CKEDITOR.filter.addFeature</a>).</p>\n\n<p>This method checks if a feature can be activated (see <a href=\"#!/api/CKEDITOR.feature-property-requiredContent\" rel=\"CKEDITOR.feature-property-requiredContent\" class=\"docClass\">requiredContent</a>) and if yes,\nthen it registers allowed content rules required by this feature (see <a href=\"#!/api/CKEDITOR.feature-property-allowedContent\" rel=\"CKEDITOR.feature-property-allowedContent\" class=\"docClass\">allowedContent</a>) along\nwith two kinds of transformations: <a href=\"#!/api/CKEDITOR.feature-property-contentForms\" rel=\"CKEDITOR.feature-property-contentForms\" class=\"docClass\">contentForms</a> and <a href=\"#!/api/CKEDITOR.feature-property-contentTransformations\" rel=\"CKEDITOR.feature-property-contentTransformations\" class=\"docClass\">contentTransformations</a>.</p>\n\n<p>By default all buttons that are included in <a href=\"#!/guide/dev_toolbar\">toolbar layout configuration</a>\nare checked and registered with <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a>, all styles available in the\n'Format' and 'Styles' drop-down lists are checked and registered too and so on.</p>\n","prototype":{"allowedContent":{"!doc":"<p>HTML code that can be generated by this feature.</p>\n\n<p>For example a basic image feature (image button displaying the image dialog window)\nmay allow <code>'img[!src,alt,width,height]'</code>.</p>\n\n<p>During the feature activation this value is passed to <a href=\"#!/api/CKEDITOR.filter-method-allow\" rel=\"CKEDITOR.filter-method-allow\" class=\"docClass\">CKEDITOR.filter.allow</a>.</p>\n"},"contentForms":{"!doc":"<p>Feature content forms to be registered in the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>\nduring the feature activation.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.filter-method-addContentForms\" rel=\"CKEDITOR.filter-method-addContentForms\" class=\"docClass\">CKEDITOR.filter.addContentForms</a> for more details.</p>\n"},"contentTransformations":{"!doc":"<p>Transformations (usually for content generated by this feature, but not necessarily)\nthat will be registered in the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a> during the feature activation.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.filter-method-addTransformations\" rel=\"CKEDITOR.filter-method-addTransformations\" class=\"docClass\">CKEDITOR.filter.addTransformations</a> for more details.</p>\n"},"name":{"!type":"string","!doc":"<p>The name of the feature.</p>\n\n<p>It is used for example to identify which <a href=\"#!/api/CKEDITOR.filter-property-allowedContent\" rel=\"CKEDITOR.filter-property-allowedContent\" class=\"docClass\">CKEDITOR.filter.allowedContent</a>\nrule was added for which feature.</p>\n"},"requiredContent":{"!doc":"<p>Minimal HTML code that this feature must be allowed to\ngenerate in order to work.</p>\n\n<p>For example a basic image feature (image button displaying the image dialog window)\nneeds <code>'img[src,alt]'</code> in order to be activated.</p>\n\n<p>During the feature validation this value is passed to <a href=\"#!/api/CKEDITOR.filter-method-check\" rel=\"CKEDITOR.filter-method-check\" class=\"docClass\">CKEDITOR.filter.check</a>.</p>\n\n<p>If this value is not provided, a feature will be always activated.</p>\n"},"toFeature":{"!type":"fn()","!doc":"<p>Returns a feature that this feature needs to register.</p>\n\n<p>In some cases, during activation, one feature may need to register\nanother feature. For example a <a href=\"#!/api/CKEDITOR.ui.button\" rel=\"CKEDITOR.ui.button\" class=\"docClass\">CKEDITOR.ui.button</a> often registers\na related command. See <a href=\"#!/api/CKEDITOR.ui.button-method-toFeature\" rel=\"CKEDITOR.ui.button-method-toFeature\" class=\"docClass\">CKEDITOR.ui.button.toFeature</a>.</p>\n\n<p>This method is executed when a feature is passed to the <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a>.</p>\n"}}},"filter":{"allowedContentRules":{"!doc":"<p>Virtual class which is the <a href=\"#!/guide/dev_allowed_content_rules\">Allowed Content Rules</a> formats type.</p>\n\n<p>Possible formats are:</p>\n\n<ul>\n<li>the <a href=\"#!/guide/dev_allowed_content_rules-section-2\">string format</a>,</li>\n<li>the <a href=\"#!/guide/dev_allowed_content_rules-section-3\">object format</a>,</li>\n<li>a <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> instance &ndash; used mainly for integrating plugins with Advanced Content Filter,</li>\n<li>an array of the above formats.</li>\n</ul>\n\n"},"contentRule":{"!doc":"<p>Virtual class representing <a href=\"#!/api/CKEDITOR.filter-method-check\" rel=\"CKEDITOR.filter-method-check\" class=\"docClass\">CKEDITOR.filter.check</a> argument.</p>\n\n<p>This is a simplified version of the <a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a> type.\nIt may contain only one element and its styles, classes, and attributes. Only the\nstring format and a <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> instances are accepted. Required properties\nare not allowed in this format.</p>\n\n<p>Example:</p>\n\n<pre><code>'img[src,alt](foo)' // Correct rule.\n'ol, ul(!foo)'      // Incorrect rule. Multiple elements and required\n                    // properties are not supported.\n</code></pre>\n"},"disallowedContentRules":{"!doc":"<p>Virtual class representing the <a href=\"#!/api/CKEDITOR.filter-method-disallow\" rel=\"CKEDITOR.filter-method-disallow\" class=\"docClass\">CKEDITOR.filter.disallow</a> argument and a type of\nthe <a href=\"#!/api/CKEDITOR.config-cfg-disallowedContent\" rel=\"CKEDITOR.config-cfg-disallowedContent\" class=\"docClass\">CKEDITOR.config.disallowedContent</a> option.</p>\n\n<p>This is a simplified version of the <a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a> type.\nOnly the string format and object format are accepted. Required properties\nare not allowed in this format.</p>\n\n<p>Read more in the <a href=\"#!/guide/dev_disallowed_content\">Disallowed Content guide</a>.</p>\n"},"!doc":"<p>Highly configurable class which implements input data filtering mechanisms\nand core functions used for the activation of editor features.</p>\n\n<p>A filter instance is always available under the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>\nproperty and is used by the editor in its core features like filtering input data,\napplying data transformations, validating whether a feature may be enabled for\nthe current setup. It may be configured in two ways:</p>\n\n<ul>\n<li>By the user, with the <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> setting.</li>\n<li>Automatically, by loaded features (toolbar items, commands, etc.).</li>\n</ul>\n\n\n<p>In both cases additional allowed content rules may be added by\nsetting the <a href=\"#!/api/CKEDITOR.config-cfg-extraAllowedContent\" rel=\"CKEDITOR.config-cfg-extraAllowedContent\" class=\"docClass\">CKEDITOR.config.extraAllowedContent</a>\nconfiguration option.</p>\n\n<p><strong>Note</strong>: Filter rules will be extended with the following elements\ndepending on the <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a> and\n<a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> settings:</p>\n\n<ul>\n<li><code>'p'</code> &ndash; for <a href=\"#!/api/CKEDITOR-property-ENTER_P\" rel=\"CKEDITOR-property-ENTER_P\" class=\"docClass\">CKEDITOR.ENTER_P</a>,</li>\n<li><code>'div'</code> &ndash; for <a href=\"#!/api/CKEDITOR-property-ENTER_DIV\" rel=\"CKEDITOR-property-ENTER_DIV\" class=\"docClass\">CKEDITOR.ENTER_DIV</a>,</li>\n<li><code>'br'</code> &ndash; for <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>.</li>\n</ul>\n\n\n<p><strong>Read more</strong> about the Advanced Content Filter in <a href=\"#!/guide/dev_advanced_content_filter\">guides</a>.</p>\n\n<p>Filter may also be used as a standalone instance by passing\n<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a> instead of <a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a>\nto the constructor:</p>\n\n<pre><code>var filter = new <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>( 'b' );\n\nfilter.check( 'b' ); // -&gt; true\nfilter.check( 'i' ); // -&gt; false\nfilter.allow( 'i' );\nfilter.check( 'i' ); // -&gt; true\n</code></pre>\n","allowedContent":{"!doc":"<p>Array of rules added by the <a href=\"#!/api/CKEDITOR.filter-method-allow\" rel=\"CKEDITOR.filter-method-allow\" class=\"docClass\">allow</a> method (including those\nloaded from <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> and\n<a href=\"#!/api/CKEDITOR.config-cfg-extraAllowedContent\" rel=\"CKEDITOR.config-cfg-extraAllowedContent\" class=\"docClass\">CKEDITOR.config.extraAllowedContent</a>).</p>\n\n<p>Rules in this array are in unified allowed content rules format.</p>\n\n<p>This property is useful for debugging issues with rules string parsing\nor for checking which rules were automatically added by editor features.</p>\n"},"prototype":{"customConfig":{"!type":"bool","!doc":"<p>Whether custom <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> was set.</p>\n\n<p>This property does not apply to the standalone filter.</p>\n"},"constructor":{"!type":"fn(editorOrRules: ?)","!doc":"<p>Creates a filter class instance.</p>\n"}},"disabled":{"!type":"bool","!doc":"<p>Whether the filter is disabled.</p>\n\n<p>To disable the filter, set <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> to <code>true</code>\nor use the <a href=\"#!/api/CKEDITOR.filter-method-disable\" rel=\"CKEDITOR.filter-method-disable\" class=\"docClass\">disable</a> method.</p>\n"},"disallowedContent":{"!doc":"<p>Array of rules added by the <a href=\"#!/api/CKEDITOR.filter-method-disallow\" rel=\"CKEDITOR.filter-method-disallow\" class=\"docClass\">disallow</a> method (including those\nloaded from <a href=\"#!/api/CKEDITOR.config-cfg-disallowedContent\" rel=\"CKEDITOR.config-cfg-disallowedContent\" class=\"docClass\">CKEDITOR.config.disallowedContent</a>).</p>\n\n<p>Rules in this array are in unified disallowed content rules format.</p>\n\n<p>This property is useful for debugging issues with rules string parsing\nor for checking which rules were automatically added by editor features.</p>\n"},"editor":{"!doc":"<p>Editor instance if not a standalone filter.</p>\n"},"elementCallbacks":{"!doc":"<p>Array of element callbacks. See <a href=\"#!/api/CKEDITOR.filter-method-addElementCallback\" rel=\"CKEDITOR.filter-method-addElementCallback\" class=\"docClass\">addElementCallback</a>.</p>\n"},"id":{"!type":"number","!doc":"<p>Filter's unique id. It can be used to find filter instance in\n<a href=\"#!/api/CKEDITOR.filter-static-property-instances\" rel=\"CKEDITOR.filter-static-property-instances\" class=\"docClass\">CKEDITOR.filter.instance</a> object.</p>\n"},"instances":{"!doc":"<p>Object containing all filter instances stored under their\n<a href=\"#!/api/CKEDITOR.filter-property-id\" rel=\"CKEDITOR.filter-property-id\" class=\"docClass\">id</a> properties.</p>\n\n<pre><code>var filter = new <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>( 'p' );\nfilter === <a href=\"#!/api/CKEDITOR.filter-static-property-instances\" rel=\"CKEDITOR.filter-static-property-instances\" class=\"docClass\">CKEDITOR.filter.instances</a>[ filter.id ];\n</code></pre>\n"},"addContentForms":{"!type":"fn(forms: ?)","!doc":"<p>Adds an array of <a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">CKEDITOR.feature</a> content forms. All forms\nwill then be transformed to the first form which is allowed by the filter.</p>\n\n<pre><code>editor.filter.allow( 'i; span{!font-style}' );\neditor.filter.addContentForms( [\n    'em',\n    'i',\n    [ 'span', function( el ) {\n        return el.styles[ 'font-style' ] == 'italic';\n    } ]\n] );\n// Now &lt;em&gt; and &lt;span style=\"font-style:italic\"&gt; will be replaced with &lt;i&gt;\n// because this is the first allowed form.\n// &lt;span&gt; is allowed too, but it is the last form and\n// additionaly, the editor cannot transform an element based on\n// the array+function form).\n</code></pre>\n\n<p>This method is used by the editor to register <a href=\"#!/api/CKEDITOR.feature-property-contentForms\" rel=\"CKEDITOR.feature-property-contentForms\" class=\"docClass\">CKEDITOR.feature.contentForms</a>\nwhen adding a feature with <a href=\"#!/api/CKEDITOR.filter-method-addFeature\" rel=\"CKEDITOR.filter-method-addFeature\" class=\"docClass\">addFeature</a> or <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a>.</p>\n"},"addElementCallback":{"!type":"fn(callback: ?)","!doc":"<p>Adds a callback which will be executed on every element\nthat the filter reaches when filtering, before the element is filtered.</p>\n\n<p>By returning <a href=\"#!/api/CKEDITOR-property-FILTER_SKIP_TREE\" rel=\"CKEDITOR-property-FILTER_SKIP_TREE\" class=\"docClass\">CKEDITOR.FILTER_SKIP_TREE</a> it is possible to\nskip filtering of the current element and all its ancestors.</p>\n\n<pre><code>editor.filter.addElementCallback( function( el ) {\n    if ( el.hasClass( 'protected' ) )\n        return <a href=\"#!/api/CKEDITOR-property-FILTER_SKIP_TREE\" rel=\"CKEDITOR-property-FILTER_SKIP_TREE\" class=\"docClass\">CKEDITOR.FILTER_SKIP_TREE</a>;\n} );\n</code></pre>\n\n<p><strong>Note:</strong> At this stage the element passed to the callback does not\ncontain <code>attributes</code>, <code>classes</code>, and <code>styles</code> properties which are available\ntemporarily on later stages of the filtering process. Therefore you need to\n use the pure <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a> interface.</p>\n"},"addFeature":{"!type":"fn(feature: ?)","!doc":"<p>Checks whether a feature can be enabled for the HTML restrictions in place\nfor the current CKEditor instance, based on the HTML code the feature might\ngenerate and the minimal HTML code the feature needs to be able to generate.</p>\n\n<pre><code>// TODO example\n</code></pre>\n"},"addTransformations":{"!type":"fn(transformations: ?)","!doc":"<p>Adds an array of content transformation groups. One group\nmay contain many transformation rules, but only the first\nmatching rule in a group is executed.</p>\n\n<p>A single transformation rule is an object with four properties:</p>\n\n<ul>\n<li><code>check</code> (optional) &ndash; if set and <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> does\n  not accept this <a href=\"#!/api/CKEDITOR.filter.contentRule\" rel=\"CKEDITOR.filter.contentRule\" class=\"docClass\">CKEDITOR.filter.contentRule</a>, this transformation rule\n  will not be executed (it does not <em>match</em>). This value is passed\n  to <a href=\"#!/api/CKEDITOR.filter-method-check\" rel=\"CKEDITOR.filter-method-check\" class=\"docClass\">check</a>.</li>\n<li><code>element</code> (optional) &ndash; this string property tells the filter on which\n  element this transformation can be run. It is optional, because\n  the element name can be obtained from <code>check</code> (if it is a String format)\n  or <code>left</code> (if it is a <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> instance).</li>\n<li><code>left</code> (optional) &ndash; a function accepting an element or a <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>\n  instance verifying whether the transformation should be\n  executed on this specific element. If it returns <code>false</code> or if an element\n  does not match this style, this transformation rule does not <em>match</em>.</li>\n<li><code>right</code> &ndash; a function accepting an element and <a href=\"#!/api/CKEDITOR.filter.transformationsTools\" rel=\"CKEDITOR.filter.transformationsTools\" class=\"docClass\">CKEDITOR.filter.transformationsTools</a>\n  or a string containing the name of the <a href=\"#!/api/CKEDITOR.filter.transformationsTools\" rel=\"CKEDITOR.filter.transformationsTools\" class=\"docClass\">CKEDITOR.filter.transformationsTools</a> method\n  that should be called on an element.</li>\n</ul>\n\n\n<p>A shorthand format is also available. A transformation rule can be defined by\na single string <code>'check:right'</code>. The string before <code>':'</code> will be used as\nthe <code>check</code> property and the second part as the <code>right</code> property.</p>\n\n<p>Transformation rules can be grouped. The filter will try to apply\nthe first rule in a group. If it <em>matches</em>, the filter will ignore subsequent rules and\nwill move to the next group. If it does not <em>match</em>, the next rule will be checked.</p>\n\n<p>Examples:</p>\n\n<pre><code>editor.filter.addTransformations( [\n    // First group.\n    [\n        // First rule. If table{width} is allowed, it\n        // executes <a href=\"#!/api/CKEDITOR.filter.transformationsTools-method-sizeToStyle\" rel=\"CKEDITOR.filter.transformationsTools-method-sizeToStyle\" class=\"docClass\">CKEDITOR.filter.transformationsTools.sizeToStyle</a> on a table element.\n        'table{width}: sizeToStyle',\n        // Second rule should not be executed if the first was.\n        'table[width]: sizeToAttribute'\n    ],\n    // Second group.\n    [\n        // This rule will add the foo=\"1\" attribute to all images that\n        // do not have it.\n        {\n            element: 'img',\n            left: function( el ) {\n                return !el.attributes.foo;\n            },\n            right: function( el, tools ) {\n                el.attributes.foo = '1';\n            }\n        }\n    ]\n] );\n\n// Case 1:\n// config.allowedContent = 'table{height,width}; tr td'.\n//\n// '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'       -&gt; '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'\n// '&lt;table height=\"100\" width=\"200\"&gt;...&lt;/table&gt;'                -&gt; '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'\n\n// Case 2:\n// config.allowedContent = 'table[height,width]; tr td'.\n//\n// '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'       -&gt; '&lt;table height=\"100\" width=\"200\"&gt;...&lt;/table&gt;'\n// '&lt;table height=\"100\" width=\"200\"&gt;...&lt;/table&gt;'                -&gt; '&lt;table height=\"100\" width=\"200\"\"&gt;...&lt;/table&gt;'\n\n// Case 3:\n// config.allowedContent = 'table{width,height}[height,width]; tr td'.\n//\n// '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'       -&gt; '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'\n// '&lt;table height=\"100\" width=\"200\"&gt;...&lt;/table&gt;'                -&gt; '&lt;table style=\"height:100px; width:200px\"&gt;...&lt;/table&gt;'\n//\n// Note: Both forms are allowed (size set by style and by attributes), but only\n// the first transformation is applied &amp;mdash; the size is always transformed to a style.\n// This is because only the first transformation matching allowed content rules is applied.\n</code></pre>\n\n<p>This method is used by the editor to add <a href=\"#!/api/CKEDITOR.feature-property-contentTransformations\" rel=\"CKEDITOR.feature-property-contentTransformations\" class=\"docClass\">CKEDITOR.feature.contentTransformations</a>\nwhen adding a feature by <a href=\"#!/api/CKEDITOR.filter-method-addFeature\" rel=\"CKEDITOR.filter-method-addFeature\" class=\"docClass\">addFeature</a> or <a href=\"#!/api/CKEDITOR.editor-method-addFeature\" rel=\"CKEDITOR.editor-method-addFeature\" class=\"docClass\">CKEDITOR.editor.addFeature</a>.</p>\n"},"allow":{"!type":"fn(newRules: ?, featureName?: string, overrideCustom?: bool)","!doc":"<p>Adds allowed content rules to the filter.</p>\n\n<p>Read about rules formats in <a href=\"#!/guide/dev_allowed_content_rules\">Allowed Content Rules guide</a>.</p>\n\n<pre><code>// Add a basic rule for custom image feature (e.g. 'MyImage' button).\neditor.filter.allow( 'img[!src,alt]', 'MyImage' );\n\n// Add rules for two header styles allowed by 'HeadersCombo'.\nvar header1Style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'h1' } ),\n    header2Style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'h2' } );\neditor.filter.allow( [ header1Style, header2Style ], 'HeadersCombo' );\n</code></pre>\n"},"applyTo":{"!type":"fn(fragment: ?, toHtml?: bool, transformOnly?: bool, enterMode?: number)","!doc":"<p>Applies this filter to passed <a href=\"#!/api/CKEDITOR.htmlParser.fragment\" rel=\"CKEDITOR.htmlParser.fragment\" class=\"docClass\">CKEDITOR.htmlParser.fragment</a> or <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>.\nThe result of filtering is a DOM tree without disallowed content.</p>\n\n<pre><code>    // Create standalone filter passing 'p' and 'b' elements.\nvar filter = new <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>( 'p b' ),\n    // Parse HTML string to pseudo DOM structure.\n    fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;p&gt;&lt;b&gt;foo&lt;/b&gt; &lt;i&gt;bar&lt;/i&gt;&lt;/p&gt;' ),\n    writer = new <a href=\"#!/api/CKEDITOR.htmlParser.basicWriter\" rel=\"CKEDITOR.htmlParser.basicWriter\" class=\"docClass\">CKEDITOR.htmlParser.basicWriter</a>();\n\nfilter.applyTo( fragment );\nfragment.writeHtml( writer );\nwriter.getHtml(); // -&gt; '&lt;p&gt;&lt;b&gt;foo&lt;/b&gt; bar&lt;/p&gt;'\n</code></pre>\n"},"check":{"!type":"fn(test: ?, applyTransformations?: bool, strictCheck?: bool)","!doc":"<p>Checks whether the content defined in the <code>test</code> argument is allowed\nby this filter.</p>\n\n<p>If <code>strictCheck</code> is set to <code>false</code> (default value), this method checks\nif all parts of the <code>test</code> (styles, attributes, and classes) are\naccepted by the filter. If <code>strictCheck</code> is set to <code>true</code>, the test\nmust also contain the required attributes, styles, and classes.</p>\n\n<p>For example:</p>\n\n<pre><code>// Rule: 'img[!src,alt]'.\nfilter.check( 'img[alt]' ); // -&gt; true\nfilter.check( 'img[alt]', true, true ); // -&gt; false\n</code></pre>\n\n<p>Second <code>check()</code> call returned <code>false</code> because <code>src</code> is required.</p>\n\n<p><strong>Note:</strong> The <code>test</code> argument is of <a href=\"#!/api/CKEDITOR.filter.contentRule\" rel=\"CKEDITOR.filter.contentRule\" class=\"docClass\">CKEDITOR.filter.contentRule</a> type, which is\na limited version of <a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>. Read more about it\nin the <a href=\"#!/api/CKEDITOR.filter.contentRule\" rel=\"CKEDITOR.filter.contentRule\" class=\"docClass\">CKEDITOR.filter.contentRule</a>'s documentation.</p>\n"},"checkFeature":{"!type":"fn(feature: ?)","!doc":"<p>Checks whether a <a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">CKEDITOR.feature</a> can be enabled. Unlike <a href=\"#!/api/CKEDITOR.filter-method-addFeature\" rel=\"CKEDITOR.filter-method-addFeature\" class=\"docClass\">addFeature</a>,\nthis method always checks the feature, even when the default configuration\nfor <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> is used.</p>\n\n<pre><code>// TODO example\n</code></pre>\n"},"disable":{"!type":"fn()","!doc":"<p>Disables Advanced Content Filter.</p>\n\n<p>This method is meant to be used by plugins which are not\ncompatible with the filter and in other cases in which the filter\nhas to be disabled during the initialization phase or runtime.</p>\n\n<p>In other cases the filter can be disabled by setting\n<a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> to <code>true</code>.</p>\n"},"disallow":{"!type":"fn(newRules: ?)","!doc":"<p>Adds disallowed content rules to the filter.</p>\n\n<p>Read about rules formats in the <a href=\"#!/guide/dev_allowed_content_rules\">Allowed Content Rules guide</a>.</p>\n\n<pre><code>// Disallow all styles on the image elements.\neditor.filter.disallow( 'img{*}' );\n\n// Disallow all span and div elements.\neditor.filter.disallow( 'span div' );\n</code></pre>\n"},"getAllowedEnterMode":{"!type":"fn(defaultMode: number, reverse?: bool)","!doc":"<p>Returns first enter mode allowed by this filter rules. Modes are checked in <code>p</code>, <code>div</code>, <code>br</code> order.\nIf none of tags is allowed this method will return <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>.</p>\n"},"transformationsTools":{"!doc":"<p>Singleton containing tools useful for transformation rules.</p>\n","alignmentToAttribute":{"!type":"fn(element: ?)","!doc":"<p>Converts the <code>float</code> style to the <code>align</code> attribute if not set.\nStyle is always removed.</p>\n"},"alignmentToStyle":{"!type":"fn(element: ?)","!doc":"<p>Converts the <code>align</code> attribute to the <code>float</code> style if not set. Attribute\nis always removed.</p>\n"},"lengthToAttribute":{"!type":"fn(element: ?, styleName: string, attrName?: string)","!doc":"<p>Converts length in the <code>styleName</code> style to a valid length attribute (like <code>width</code> or <code>height</code>).</p>\n"},"lengthToStyle":{"!type":"fn(element: ?, attrName: string, styleName?: string)","!doc":"<p>Converts length in the <code>attrName</code> attribute to a valid CSS length (like <code>width</code> or <code>height</code>).</p>\n"},"matchesStyle":{"!type":"fn(element: ?, style: ?)","!doc":"<p>Checks whether an element matches a given <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>.\nThe element can be a \"superset\" of a style, e.g. it may have\nmore classes, but needs to have at least those defined in the style.</p>\n"},"sizeToAttribute":{"!type":"fn(element: ?)","!doc":"<p>Converts <code>width</code> and <code>height</code> styles to attributes.</p>\n"},"sizeToStyle":{"!type":"fn(element: ?)","!doc":"<p>Converts <code>width</code> and <code>height</code> attributes to styles.</p>\n"},"transform":{"!type":"fn(el: ?, form: ?)","!doc":"<p>Transforms element to given form.</p>\n\n<p>Form may be a:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>,</li>\n<li>string &ndash; the new name of an element.</li>\n</ul>\n\n"}}},"focusManager":{"!doc":"<p>Manages the focus activity in an editor instance. This class is to be\nused mainly by UI elements coders when adding interface elements that need\nto set the focus state of the editor.</p>\n\n<pre><code>var focusManager = new <a href=\"#!/api/CKEDITOR.focusManager\" rel=\"CKEDITOR.focusManager\" class=\"docClass\">CKEDITOR.focusManager</a>( editor );\nfocusManager.focus();\n</code></pre>\n","_":{"!doc":"<p>Object used to hold private stuff.</p>\n","blurDelay":{"!type":"number","!doc":"<p>The delay (in milliseconds) to deactivate the editor when UI dom element has lost focus.</p>\n"}},"currentActive":{"!doc":"<p>Indicate the currently focused DOM element that makes the editor activated.</p>\n"},"hasFocus":{"!type":"bool","!doc":"<p>Indicates that the editor instance has focus.</p>\n\n<pre><code>alert( CKEDITOR.instances.editor1.focusManager.hasFocus ); // e.g. true\n</code></pre>\n"},"prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates a focusManager class instance.</p>\n"}},"add":{"!type":"fn(element: ?, isCapture: bool)","!doc":"<p>Register an UI DOM element to the focus manager, which will make the focus manager \"hasFocus\"\nonce input focus is relieved on the element, it's to be used by plugins to expand the jurisdiction of the editor focus.</p>\n"},"blur":{"!type":"fn(noDelay?: bool)","!doc":"<p>Used to indicate that the editor instance has been deactivated by the specified\nelement which has just lost focus.</p>\n\n<p><strong>Note:</strong> that this functions acts asynchronously with a delay of 100ms to\navoid temporary deactivation. Use instead the <code>noDelay</code> parameter\nto deactivate immediately.</p>\n\n<pre><code>var editor = CKEDITOR.instances.editor1;\neditor.focusManager.blur();\n</code></pre>\n"},"focus":{"!type":"fn(currentActive?: ?)","!doc":"<p>Indicate this editor instance is activated (due to DOM focus change),\nthe <code>activated</code> state is a symbolic indicator of an active user\ninteraction session.</p>\n\n<p><strong>Note:</strong> This method will not introduce UI focus\nimpact on DOM, it's here to record editor UI focus state internally.\nIf you want to make the cursor blink inside of the editable, use\n<a href=\"#!/api/CKEDITOR.editor-method-focus\" rel=\"CKEDITOR.editor-method-focus\" class=\"docClass\">CKEDITOR.editor.focus</a> instead.</p>\n\n<pre><code>var editor = CKEDITOR.instances.editor1;\neditor.focusManage.focus( editor.editable() );\n</code></pre>\n"},"lock":{"!type":"fn()","!doc":"<p>Prevent from changing the focus manager state until next <a href=\"#!/api/CKEDITOR.focusManager-method-unlock\" rel=\"CKEDITOR.focusManager-method-unlock\" class=\"docClass\">unlock</a> is called.</p>\n"},"remove":{"!type":"fn(element: ?)","!doc":"<p>Dismiss an element from the the focus manager delegations added by <a href=\"#!/api/CKEDITOR.focusManager-method-add\" rel=\"CKEDITOR.focusManager-method-add\" class=\"docClass\">add</a>.</p>\n"},"unlock":{"!type":"fn()","!doc":"<p>Restore the automatic focus management, if <a href=\"#!/api/CKEDITOR.focusManager-method-lock\" rel=\"CKEDITOR.focusManager-method-lock\" class=\"docClass\">lock</a> is called.</p>\n"}},"htmlDataProcessor":{"!doc":"<p>Represents an HTML data processor, which is responsible for translating and\ntransforming the editor data on input and output.</p>\n","dataFilter":{"!doc":"<p>Data filter used when processing input by <a href=\"#!/api/CKEDITOR.htmlDataProcessor-method-toHtml\" rel=\"CKEDITOR.htmlDataProcessor-method-toHtml\" class=\"docClass\">toHtml</a>.</p>\n"},"htmlFilter":{"!doc":"<p>HTML filter used when processing output by <a href=\"#!/api/CKEDITOR.htmlDataProcessor-method-toDataFormat\" rel=\"CKEDITOR.htmlDataProcessor-method-toDataFormat\" class=\"docClass\">toDataFormat</a>.</p>\n"},"writer":{"!doc":"<p>The HTML writer used by this data processor to format the output.</p>\n"},"prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates an htmlDataProcessor class instance.</p>\n"}},"toDataFormat":{"!type":"fn(html: string, options?: ?)","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dataProcessor-method-toDataFormat\" rel=\"CKEDITOR.dataProcessor-method-toDataFormat\" class=\"docClass\">CKEDITOR.dataProcessor.toDataFormat</a>.</p>\n\n<p>This method fires the <a href=\"#!/api/CKEDITOR.editor-event-toDataFormat\" rel=\"CKEDITOR.editor-event-toDataFormat\" class=\"docClass\">CKEDITOR.editor.toDataFormat</a> event which makes it possible\nto hook into the process at various steps.</p>\n"},"toHtml":{"!type":"fn(data: string, options?: ?)","!doc":"<p>Processes the input (potentially malformed) HTML to a purified form which\nis suitable for using in the WYSIWYG editable.</p>\n\n<p>This method fires the <a href=\"#!/api/CKEDITOR.editor-event-toHtml\" rel=\"CKEDITOR.editor-event-toHtml\" class=\"docClass\">CKEDITOR.editor.toHtml</a> event which makes it possible\nto hook into the process at various stages.</p>\n\n<p><strong>Note:</strong> Since CKEditor 4.3 the signature of this method changed and all options\nare now grouped in one <code>options</code> object. Previously <code>context</code>, <code>fixForBody</code> and <code>dontFilter</code>\nwere passed separately.</p>\n"}},"htmlParser":{"basicWriter":{"!doc":"<p>TODO</p>\n\n<p>@todo</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a basicWriter class instance.</p>\n"}},"attribute":{"!type":"fn(attName: string, attValue: string)","!doc":"<p>Writes an attribute. This function should be called after opening the\ntag with <a href=\"#!/api/CKEDITOR.htmlParser.basicWriter-method-openTagClose\" rel=\"CKEDITOR.htmlParser.basicWriter-method-openTagClose\" class=\"docClass\">openTagClose</a>.</p>\n\n<pre><code>// Writes ' class=\"MyClass\"'.\nwriter.attribute( 'class', 'MyClass' );\n</code></pre>\n"},"closeTag":{"!type":"fn(tagName: string)","!doc":"<p>Writes a closer tag.</p>\n\n<pre><code>// Writes '&lt;/p&gt;'.\nwriter.closeTag( 'p' );\n</code></pre>\n"},"comment":{"!type":"fn(comment: string)","!doc":"<p>Writes a comment.</p>\n\n<pre><code>// Writes '&lt;!-- My comment --&gt;'.\nwriter.comment( ' My comment ' );\n</code></pre>\n"},"getHtml":{"!type":"fn(reset: bool)","!doc":"<p>Empties the current output buffer.</p>\n\n<pre><code>var html = writer.getHtml();\n</code></pre>\n"},"openTag":{"!type":"fn(tagName: string, attributes: ?)","!doc":"<p>Writes the tag opening part for a opener tag.</p>\n\n<pre><code>// Writes '&lt;p'.\nwriter.openTag( 'p', { class : 'MyClass', id : 'MyId' } );\n</code></pre>\n"},"openTagClose":{"!type":"fn(tagName: string, isSelfClose: bool)","!doc":"<p>Writes the tag closing part for a opener tag.</p>\n\n<pre><code>// Writes '&gt;'.\nwriter.openTagClose( 'p', false );\n\n// Writes ' /&gt;'.\nwriter.openTagClose( 'br', true );\n</code></pre>\n"},"reset":{"!type":"fn()","!doc":"<p>Empties the current output buffer.</p>\n\n<pre><code>writer.reset();\n</code></pre>\n"},"text":{"!type":"fn(text: string)","!doc":"<p>Writes text.</p>\n\n<pre><code>// Writes 'Hello Word'.\nwriter.text( 'Hello Word' );\n</code></pre>\n"},"write":{"!type":"fn(data: string)","!doc":"<p>Writes any kind of data to the ouput.</p>\n\n<pre><code>writer.write( 'This is an &lt;b&gt;example&lt;/b&gt;.' );\n</code></pre>\n"}},"cdata":{"!doc":"<p>A lightweight representation of HTML CDATA.</p>\n","type":{"!type":"number","!doc":"<p>CDATA has the same type as <a href=\"#!/api/CKEDITOR.htmlParser.text\" rel=\"CKEDITOR.htmlParser.text\" class=\"docClass\">CKEDITOR.htmlParser.text</a> This is\na constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_TEXT\" rel=\"CKEDITOR-property-NODE_TEXT\" class=\"docClass\">CKEDITOR.NODE_TEXT</a>.</p>\n"},"value":{"!type":"string","!doc":"<p>The CDATA value.</p>\n"},"prototype":{"constructor":{"!type":"fn(value: string)","!doc":"<p>Creates a cdata class instance.</p>\n"}},"writeHtml":{"!type":"fn(writer: ?)","!doc":"<p>Writes the CDATA with no special manipulations.</p>\n"}},"node":{"getAscendant":{"!type":"fn(condition: ?)","!doc":"<p>Gets the closest ancestor element of this element which satisfies given condition</p>\n"},"getIndex":{"!type":"fn()","!doc":"<p>Gets this node's index in its parent's children array.</p>\n"},"insertAfter":{"!type":"fn(node: ?)","!doc":"<p>Insert this node after given one.</p>\n"},"insertBefore":{"!type":"fn(node: ?)","!doc":"<p>Insert this node before given one.</p>\n"},"remove":{"!type":"fn()","!doc":"<p>Remove this node from a tree.</p>\n"},"replaceWith":{"!type":"fn(node: ?)","!doc":"<p>Replace this node with given one.</p>\n"},"wrapWith":{"!type":"fn(wrapper: ?)","!doc":"<p>Wraps this element with given <code>wrapper</code>.</p>\n"},"!doc":"<p>A lightweight representation of HTML node.</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a node class instance.</p>\n"}}},"comment":{"!doc":"<p>A lightweight representation of an HTML comment.</p>\n","_":{"!doc":"\n"},"type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_COMMENT\" rel=\"CKEDITOR-property-NODE_COMMENT\" class=\"docClass\">CKEDITOR.NODE_COMMENT</a>.</p>\n"},"value":{"!type":"string","!doc":"<p>The comment text.</p>\n"},"prototype":{"constructor":{"!type":"fn(value: string)","!doc":"<p>Creates a comment class instance.</p>\n"}},"filter":{"!type":"fn(filter: ?)","!doc":"<p>Filter this comment with given filter.</p>\n"},"writeHtml":{"!type":"fn(writer: ?, filter?: ?)","!doc":"<p>Writes the HTML representation of this comment to a <a href=\"#!/api/CKEDITOR.htmlWriter\" rel=\"CKEDITOR.htmlWriter\" class=\"docClass\">CKEDITOR.htmlWriter</a>.</p>\n"}},"cssStyle":{"!doc":"<p>Object presentation of CSS style declaration text.</p>\n","prototype":{"constructor":{"!type":"fn(elementOrStyleText: ?)","!doc":"<p>Creates a <code>cssStyle</code> class instance.</p>\n"}},"populate":{"!type":"fn(obj: ?)","!doc":"<p>Applies the styles to the specified element or object.</p>\n"},"toString":{"!type":"fn()","!doc":"<p>Serializes CSS style declaration to a string.</p>\n"}},"element":{"!doc":"<p>A lightweight representation of an HTML element.</p>\n","_":{"!doc":"\n"},"attributes":{"!doc":"<p>Stores the attributes defined for this element.</p>\n"},"children":{"!doc":"<p>The nodes that are direct children of this element.</p>\n"},"name":{"!type":"string","!doc":"<p>The element name.</p>\n"},"type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_ELEMENT\" rel=\"CKEDITOR-property-NODE_ELEMENT\" class=\"docClass\">CKEDITOR.NODE_ELEMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(name: string, attributes: ?)","!doc":"<p>Creates an element class instance.</p>\n"}},"add":{"!type":"fn(node: ?, index?: number)","!doc":"<p>Adds a node to the element children list.</p>\n"},"addClass":{"!type":"fn(className: string)","!doc":"<p>Adds a class name to the list of classes.</p>\n"},"clone":{"!type":"fn()","!doc":"<p>Clones this element.</p>\n"},"filter":{"!type":"fn(filter: ?)","!doc":"<p>Filters this element and its children with the given filter.</p>\n"},"filterChildren":{"!type":"fn(filter: ?)","!doc":"<p>Filters this element's children with the given filter.</p>\n\n<p>Element's children may only be filtered once by one\ninstance of the filter.</p>\n"},"forEach":{"!type":"fn(callback: ?, type?: number, skipRoot?: bool)","!doc":"<p>Executes a callback on each node (of the given type) in this element.</p>\n\n<pre><code>// Create a &lt;p&gt; element with foo&lt;b&gt;bar&lt;/b&gt;bom as its content.\nvar elP = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( 'foo&lt;b&gt;bar&lt;/b&gt;bom', 'p' );\nelP.forEach( function( node ) {\n    console.log( node );\n} );\n// Will log:\n// 1. document fragment,\n// 2. &lt;p&gt; element,\n// 3. \"foo\" text node,\n// 4. &lt;b&gt; element,\n// 5. \"bar\" text node,\n// 6. \"bom\" text node.\n</code></pre>\n"},"getFirst":{"!type":"fn(condition: ?)","!doc":"<p>Gets this element's first child. If <code>condition</code> is given, this method returns\nthe first child which satisfies that condition.</p>\n"},"getHtml":{"!type":"fn()","!doc":"<p>Gets this element's inner HTML.</p>\n"},"getOuterHtml":{"!type":"fn()","!doc":"<p>Gets this element's outer HTML.</p>\n"},"hasClass":{"!type":"fn(className: string)","!doc":"<p>Checkes whether this element has a class name.</p>\n"},"removeClass":{"!type":"fn(className: string)","!doc":"<p>Removes a class name from the list of classes.</p>\n"},"replaceWithChildren":{"!type":"fn()","!doc":"<p>Replaces this element with its children.</p>\n"},"setHtml":{"!type":"fn(html: string)","!doc":"<p>Sets this element's inner HTML.</p>\n"},"split":{"!type":"fn(index: number)","!doc":"<p>Splits this element at the given index.</p>\n"},"writeChildrenHtml":{"!type":"fn(writer: ?, filter?: ?)","!doc":"<p>Sends children of this element to the writer.</p>\n"},"writeHtml":{"!type":"fn(writer: ?, filter?: ?)","!doc":"<p>Writes the element HTML to the <a href=\"#!/api/CKEDITOR.htmlWriter\" rel=\"CKEDITOR.htmlWriter\" class=\"docClass\">CKEDITOR.htmlWriter</a>.</p>\n"}},"filter":{"!doc":"<p>Filter is a configurable tool for transforming and filtering <a href=\"#!/api/CKEDITOR.htmlParser.node\" rel=\"CKEDITOR.htmlParser.node\" class=\"docClass\">nodes</a>.\nIt is mainly used during data processing phase which is done not on real DOM nodes,\nbut on their simplified form represented by <a href=\"#!/api/CKEDITOR.htmlParser.node\" rel=\"CKEDITOR.htmlParser.node\" class=\"docClass\">CKEDITOR.htmlParser.node</a> class and its subclasses.</p>\n\n<pre><code>var filter = new <a href=\"#!/api/CKEDITOR.htmlParser.filter\" rel=\"CKEDITOR.htmlParser.filter\" class=\"docClass\">CKEDITOR.htmlParser.filter</a>( {\n    text: function( value ) {\n        return '@' + value + '@';\n    },\n    elements: {\n        p: function( element ) {\n            element.attributes.foo = '1';\n        }\n    }\n} );\n\nvar fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;p&gt;Foo&lt;b&gt;bar!&lt;/b&gt;&lt;/p&gt;' ),\n    writer = new <a href=\"#!/api/CKEDITOR.htmlParser.basicWriter\" rel=\"CKEDITOR.htmlParser.basicWriter\" class=\"docClass\">CKEDITOR.htmlParser.basicWriter</a>();\nfilter.applyTo( fragment );\nfragment.writeHtml( writer );\nwriter.getHtml(); // '&lt;p foo=\"1\"&gt;@Foo@&lt;b&gt;@bar!@&lt;/b&gt;&lt;/p&gt;'\n</code></pre>\n","attributeNameRules":{"!doc":"<p>Rules for attribute names.</p>\n"},"attributesRules":{"!doc":"<p>Hash of attributeName => <a href=\"#!/api/CKEDITOR.htmlParser.filterRulesGroup\" rel=\"CKEDITOR.htmlParser.filterRulesGroup\" class=\"docClass\">rules for attributes</a>.</p>\n"},"commentRules":{"!doc":"<p>Rules for comment nodes.</p>\n"},"elementNameRules":{"!doc":"<p>Rules for element names.</p>\n"},"elementsRules":{"!doc":"<p>Hash of elementName => <a href=\"#!/api/CKEDITOR.htmlParser.filterRulesGroup\" rel=\"CKEDITOR.htmlParser.filterRulesGroup\" class=\"docClass\">rules for elements</a>.</p>\n"},"id":{"!type":"number","!doc":"<p>ID of filter instance, which is used to mark elements\nto which this filter has been already applied.</p>\n"},"rootRules":{"!doc":"<p>Rules for a root node.</p>\n"},"textRules":{"!doc":"<p>Rules for text nodes.</p>\n"},"prototype":{"constructor":{"!type":"fn(rules?: ?)","!doc":"<p>Creates a filter class instance.</p>\n"}},"addRules":{"!type":"fn(rules: ?, options?: ?)","!doc":"<p>Add rules to this filter.</p>\n"},"applyTo":{"!type":"fn(node: ?)","!doc":"<p>Apply this filter to given node.</p>\n"}},"filterRulesDefinition":{"!doc":"\n"},"filterRulesGroup":{"!doc":"<p>Class grouping filter rules for one subject (like element or attribute names).</p>\n","rules":{"!doc":"<p>Array of objects containing rule, priority and options.</p>\n"},"add":{"!type":"fn(rule: ?, priority: number, options: ?)","!doc":"<p>Adds specified rule to this group.</p>\n"},"addMany":{"!type":"fn(rules: ?, priority: number, options: ?)","!doc":"<p>Adds specified rules to this group.</p>\n"},"exec":{"!type":"fn(currentValue: ?)","!doc":"<p>Executes this rules group on given value. Applicable only if function based rules were added.</p>\n\n<p>All arguments passed to this function will be forwarded to rules' functions.</p>\n"},"execOnName":{"!type":"fn(currentName: string)","!doc":"<p>Executes this rules group on name. Applicable only if filter rules for names were added.</p>\n"},"findIndex":{"!type":"fn(priority: number)","!doc":"<p>Finds an index at which rule with given priority should be inserted.</p>\n"}},"fragment":{"!doc":"<p>A lightweight representation of an HTML DOM structure.</p>\n","_":{"!doc":"\n"},"children":{"!doc":"<p>The nodes contained in the root of this fragment.</p>\n\n<pre><code>var fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;b&gt;Sample&lt;/b&gt; Text' );\nalert( fragment.children.length ); // 2\n</code></pre>\n"},"parent":{"!doc":"<p>Get the fragment parent. Should always be null.</p>\n"},"type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_DOCUMENT_FRAGMENT\" rel=\"CKEDITOR-property-NODE_DOCUMENT_FRAGMENT\" class=\"docClass\">CKEDITOR.NODE_DOCUMENT_FRAGMENT</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a fragment class instance.</p>\n"}},"add":{"!type":"fn(node: ?, index?: number)","!doc":"<p>Adds a node to this fragment.</p>\n"},"filter":{"!type":"fn(filter: ?)","!doc":"<p>Filter this fragment's content with given filter.</p>\n"},"filterChildren":{"!type":"fn(filter: ?, filterRoot?: bool)","!doc":"<p>Filter this fragment's children with given filter.</p>\n\n<p>Element's children may only be filtered once by one\ninstance of filter.</p>\n"},"forEach":{"!type":"fn(callback: ?, type?: number, skipRoot?: bool)","!doc":"<p>Execute callback on each node (of given type) in this document fragment.</p>\n\n<pre><code>var fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;p&gt;foo&lt;b&gt;bar&lt;/b&gt;bom&lt;/p&gt;' );\nfragment.forEach( function( node ) {\n    console.log( node );\n} );\n// Will log:\n// 1. document fragment,\n// 2. &lt;p&gt; element,\n// 3. \"foo\" text node,\n// 4. &lt;b&gt; element,\n// 5. \"bar\" text node,\n// 6. \"bom\" text node.\n</code></pre>\n"},"writeChildrenHtml":{"!type":"fn(writer: ?, filter?: ?, filterRoot?: bool)","!doc":"<p>Write and filtering the child nodes of this fragment.</p>\n"},"writeHtml":{"!type":"fn(writer: ?, filter?: ?)","!doc":"<p>Writes the fragment HTML to a <a href=\"#!/api/CKEDITOR.htmlParser.basicWriter\" rel=\"CKEDITOR.htmlParser.basicWriter\" class=\"docClass\">CKEDITOR.htmlParser.basicWriter</a>.</p>\n\n<pre><code>var writer = new <a href=\"#!/api/CKEDITOR.htmlWriter\" rel=\"CKEDITOR.htmlWriter\" class=\"docClass\">CKEDITOR.htmlWriter</a>();\nvar fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;P&gt;&lt;B&gt;Example' );\nfragment.writeHtml( writer );\nalert( writer.getHtml() ); // '&lt;p&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/p&gt;'\n</code></pre>\n"},"fromBBCode":{"!type":"fn(source: string)","!doc":"<p>Creates a <a href=\"#!/api/CKEDITOR.htmlParser.fragment\" rel=\"CKEDITOR.htmlParser.fragment\" class=\"docClass\">CKEDITOR.htmlParser.fragment</a> from an HTML string.</p>\n\n<pre><code>var fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;b&gt;Sample&lt;/b&gt; Text' );\nalert( fragment.children[ 0 ].name );       // 'b'\nalert( fragment.children[ 1 ].value );  // ' Text'\n</code></pre>\n"},"fromHtml":{"!type":"fn(fragmentHtml: string, parent?: ?, fixingBlock?: ?)","!doc":"<p>Creates a <a href=\"#!/api/CKEDITOR.htmlParser.fragment\" rel=\"CKEDITOR.htmlParser.fragment\" class=\"docClass\">CKEDITOR.htmlParser.fragment</a> from an HTML string.</p>\n\n<pre><code>var fragment = <a href=\"#!/api/CKEDITOR.htmlParser.fragment-static-method-fromHtml\" rel=\"CKEDITOR.htmlParser.fragment-static-method-fromHtml\" class=\"docClass\">CKEDITOR.htmlParser.fragment.fromHtml</a>( '&lt;b&gt;Sample&lt;/b&gt; Text' );\nalert( fragment.children[ 0 ].name );       // 'b'\nalert( fragment.children[ 1 ].value );  // ' Text'\n</code></pre>\n"}},"!doc":"<p>Provides an \"event like\" system to parse strings of HTML data.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onTagOpen = function( tagName, attributes, selfClosing ) {\n    alert( tagName );\n};\nparser.parse( '&lt;p&gt;Some &lt;b&gt;text&lt;/b&gt;.&lt;/p&gt;' ); // Alerts 'p', 'b'.\n</code></pre>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a htmlParser class instance.</p>\n"}},"onCDATA":{"!type":"fn(cdata: string)","!doc":"<p>Function to be fired when CDATA section is found. This function\nshould be overriden when using this class.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onCDATA = function( cdata ) {\n    alert( cdata ); // 'var hello;'\n} );\nparser.parse( '&lt;script&gt;var hello;&lt;/script&gt;' );\n</code></pre>\n"},"onComment":{"!type":"fn(comment: string)","!doc":"<p>Function to be fired when a commend is found. This function\nshould be overriden when using this class.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onComment = function( comment ) {\n    alert( comment ); // ' Example '\n} );\nparser.parse( '&lt;!-- Example --&gt;&lt;b&gt;Hello&lt;/b&gt;' );\n</code></pre>\n"},"onTagClose":{"!type":"fn(tagName: string)","!doc":"<p>Function to be fired when a tag closer is found. This function\nshould be overriden when using this class.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onTagClose = function( tagName ) {\n    alert( tagName ); // 'b'\n} );\nparser.parse( '&lt;!-- Example --&gt;&lt;b&gt;Hello&lt;/b&gt;' );\n</code></pre>\n"},"onTagOpen":{"!type":"fn(tagName: string, attributes: ?, selfClosing: bool)","!doc":"<p>Function to be fired when a tag opener is found. This function\nshould be overriden when using this class.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onTagOpen = function( tagName, attributes, selfClosing ) {\n    alert( tagName ); // e.g. 'b'\n} );\nparser.parse( '&lt;!-- Example --&gt;&lt;b&gt;Hello&lt;/b&gt;' );\n</code></pre>\n"},"onText":{"!type":"fn(text: string)","!doc":"<p>Function to be fired when text is found. This function\nshould be overriden when using this class.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\nparser.onText = function( text ) {\n    alert( text ); // 'Hello'\n} );\nparser.parse( '&lt;!-- Example --&gt;&lt;b&gt;Hello&lt;/b&gt;' );\n</code></pre>\n"},"parse":{"!type":"fn(html: string)","!doc":"<p>Parses text, looking for HTML tokens, like tag openers or closers,\nor comments. This function fires the onTagOpen, onTagClose, onText\nand onComment function during its execution.</p>\n\n<pre><code>var parser = new <a href=\"#!/api/CKEDITOR.htmlParser\" rel=\"CKEDITOR.htmlParser\" class=\"docClass\">CKEDITOR.htmlParser</a>();\n// The onTagOpen, onTagClose, onText and onComment should be overriden\n// at this point.\nparser.parse( '&lt;!-- Example --&gt;&lt;b&gt;Hello&lt;/b&gt;' );\n</code></pre>\n"},"text":{"!doc":"<p>A lightweight representation of HTML text.</p>\n","_":{"!doc":"\n"},"type":{"!type":"number","!doc":"<p>The node type. This is a constant value set to <a href=\"#!/api/CKEDITOR-property-NODE_TEXT\" rel=\"CKEDITOR-property-NODE_TEXT\" class=\"docClass\">CKEDITOR.NODE_TEXT</a>.</p>\n"},"value":{"!type":"string","!doc":"<p>The text value.</p>\n"},"prototype":{"constructor":{"!type":"fn(value: string)","!doc":"<p>Creates a text class instance.</p>\n"}},"filter":{"!type":"fn(filter: ?)","!doc":"<p>Filter this text node with given filter.</p>\n"},"writeHtml":{"!type":"fn(writer: ?, filter?: ?)","!doc":"<p>Writes the HTML representation of this text to a {<a href=\"#!/api/CKEDITOR.htmlParser.basicWriter\" rel=\"CKEDITOR.htmlParser.basicWriter\" class=\"docClass\">CKEDITOR.htmlParser.basicWriter</a>}.</p>\n"}}},"htmlWriter":{"!doc":"<p>Class used to write HTML data.</p>\n\n<pre><code>var writer = new <a href=\"#!/api/CKEDITOR.htmlWriter\" rel=\"CKEDITOR.htmlWriter\" class=\"docClass\">CKEDITOR.htmlWriter</a>();\nwriter.openTag( 'p' );\nwriter.attribute( 'class', 'MyClass' );\nwriter.openTagClose( 'p' );\nwriter.text( 'Hello' );\nwriter.closeTag( 'p' );\nalert( writer.getHtml() ); // '&lt;p class=\"MyClass\"&gt;Hello&lt;/p&gt;'\n</code></pre>\n","indentationChars":{"!type":"string","!doc":"<p>The characters to be used for each identation step.</p>\n\n<pre><code>// Use tab for indentation.\neditorInstance.dataProcessor.writer.indentationChars = '\\t';\n</code></pre>\n"},"lineBreakChars":{"!type":"string","!doc":"<p>The characters to be used for line breaks.</p>\n\n<pre><code>// Use CRLF for line breaks.\neditorInstance.dataProcessor.writer.lineBreakChars = '\\r\\n';\n</code></pre>\n"},"selfClosingEnd":{"!type":"string","!doc":"<p>The characters to be used to close \"self-closing\" elements, like <code>&lt;br&gt;</code> or <code>&lt;img&gt;</code>.</p>\n\n<pre><code>// Use HTML4 notation for self-closing elements.\neditorInstance.dataProcessor.writer.selfClosingEnd = '&gt;';\n</code></pre>\n"},"prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a htmlWriter class instance.</p>\n"}},"attribute":{"!type":"fn(attName: string, attValue: string)","!doc":"<p>Writes an attribute. This function should be called after opening the\ntag with <a href=\"#!/api/CKEDITOR.htmlWriter-method-openTagClose\" rel=\"CKEDITOR.htmlWriter-method-openTagClose\" class=\"docClass\">openTagClose</a>.</p>\n\n<pre><code>// Writes ' class=\"MyClass\"'.\nwriter.attribute( 'class', 'MyClass' );\n</code></pre>\n"},"closeTag":{"!type":"fn(tagName: string)","!doc":"<p>Writes a closer tag.</p>\n\n<pre><code>// Writes '&lt;/p&gt;'.\nwriter.closeTag( 'p' );\n</code></pre>\n"},"comment":{"!type":"fn(comment: string)","!doc":"<p>Writes a comment.</p>\n\n<pre><code>// Writes \"&lt;!-- My comment --&gt;\".\nwriter.comment( ' My comment ' );\n</code></pre>\n"},"indentation":{"!type":"fn()","!doc":"<p>Writes the current indentation chars. It uses the <a href=\"#!/api/CKEDITOR.htmlWriter-property-indentationChars\" rel=\"CKEDITOR.htmlWriter-property-indentationChars\" class=\"docClass\">indentationChars</a>\nproperty, repeating it for the current indentation steps.</p>\n\n<pre><code>// Writes '\\t' (e.g.).\nwriter.indentation();\n</code></pre>\n"},"lineBreak":{"!type":"fn()","!doc":"<p>Writes a line break. It uses the <a href=\"#!/api/CKEDITOR.htmlWriter-property-lineBreakChars\" rel=\"CKEDITOR.htmlWriter-property-lineBreakChars\" class=\"docClass\">lineBreakChars</a> property for it.</p>\n\n<pre><code>// Writes '\\n' (e.g.).\nwriter.lineBreak();\n</code></pre>\n"},"openTag":{"!type":"fn(tagName: string, attributes: ?)","!doc":"<p>Writes the tag opening part for a opener tag.</p>\n\n<pre><code>// Writes '&lt;p'.\nwriter.openTag( 'p', { class : 'MyClass', id : 'MyId' } );\n</code></pre>\n"},"openTagClose":{"!type":"fn(tagName: string, isSelfClose: bool)","!doc":"<p>Writes the tag closing part for a opener tag.</p>\n\n<pre><code>// Writes '&gt;'.\nwriter.openTagClose( 'p', false );\n\n// Writes ' /&gt;'.\nwriter.openTagClose( 'br', true );\n</code></pre>\n"},"reset":{"!type":"fn()","!doc":"<p>Empties the current output buffer. It also brings back the default\nvalues of the writer flags.</p>\n\n<pre><code>writer.reset();\n</code></pre>\n"},"setRules":{"!type":"fn(tagName: string, rules: ?)","!doc":"<p>Sets formatting rules for a give element. The possible rules are:</p>\n\n<ul>\n<li><code>indent</code>: indent the element contents.</li>\n<li><code>breakBeforeOpen</code>: break line before the opener tag for this element.</li>\n<li><code>breakAfterOpen</code>: break line after the opener tag for this element.</li>\n<li><code>breakBeforeClose</code>: break line before the closer tag for this element.</li>\n<li><code>breakAfterClose</code>: break line after the closer tag for this element.</li>\n</ul>\n\n\n<p>All rules default to <code>false</code>. Each call to the function overrides\nalready present rules, leaving the undefined untouched.</p>\n\n<p>By default, all elements available in the <a href=\"#!/api/CKEDITOR.dtd-property-S-block\" rel=\"CKEDITOR.dtd-property-S-block\" class=\"docClass\">CKEDITOR.dtd.$block</a>,\n<a href=\"#!/api/CKEDITOR.dtd-property-S-listItem\" rel=\"CKEDITOR.dtd-property-S-listItem\" class=\"docClass\">CKEDITOR.dtd.$listItem</a> and <a href=\"#!/api/CKEDITOR.dtd-property-S-tableContent\" rel=\"CKEDITOR.dtd-property-S-tableContent\" class=\"docClass\">CKEDITOR.dtd.$tableContent</a>\nlists have all the above rules set to <code>true</code>. Additionaly, the <code>&lt;br&gt;</code>\nelement has the <code>breakAfterOpen</code> set to <code>true</code>.</p>\n\n<pre><code>// Break line before and after \"img\" tags.\nwriter.setRules( 'img', {\n    breakBeforeOpen: true\n    breakAfterOpen: true\n} );\n\n// Reset the rules for the \"h1\" tag.\nwriter.setRules( 'h1', {} );\n</code></pre>\n"},"text":{"!type":"fn(text: string)","!doc":"<p>Writes text.</p>\n\n<pre><code>// Writes 'Hello Word'.\nwriter.text( 'Hello Word' );\n</code></pre>\n"}},"!doc":"<p>This is the API entry point. The entire CKEditor code runs under this object.</p>\n","prototype":{"currentInstance":{"!doc":"<p>The editor which is currently active (has user focus).</p>\n\n<pre><code>function showCurrentEditorName() {\n    if ( <a href=\"#!/api/CKEDITOR-property-currentInstance\" rel=\"CKEDITOR-property-currentInstance\" class=\"docClass\">CKEDITOR.currentInstance</a> )\n        alert( CKEDITOR.currentInstance.name );\n    else\n        alert( 'Please focus an editor first.' );\n}@see CKEDITOR#event-currentInstance\n</code></pre>\n"},"editorConfig":{"!type":"fn(config: ?)","!doc":"<p>Function called upon loading a custom configuration file that can\nmodify the editor instance configuration (<a href=\"#!/api/CKEDITOR.editor-property-config\" rel=\"CKEDITOR.editor-property-config\" class=\"docClass\">CKEDITOR.editor.config</a>).\nIt is usually defined inside the custom configuration files that can\ninclude developer defined settings.</p>\n\n<pre><code>// This is supposed to be placed in the config.js file.\n<a href=\"#!/api/CKEDITOR-method-editorConfig\" rel=\"CKEDITOR-method-editorConfig\" class=\"docClass\">CKEDITOR.editorConfig</a> = function( config ) {\n    // Define changes to default configuration here. For example:\n    config.language = 'fr';\n    config.uiColor = '#AADC6E';\n};\n</code></pre>\n"}},"ALT":{"!type":"number","!doc":"<p>ALT key (0x440000).</p>\n"},"CTRL":{"!type":"number","!doc":"<p>CTRL key (0x110000).</p>\n"},"DIALOG_RESIZE_BOTH":{"!type":"number","!doc":"<p>Allow the dialog to be resized in both directions.</p>\n"},"DIALOG_RESIZE_HEIGHT":{"!type":"number","!doc":"<p>Only allow vertical resizing for this dialog, disable horizontal resizing.</p>\n"},"DIALOG_RESIZE_NONE":{"!type":"number","!doc":"<p>No resize for this dialog.</p>\n"},"DIALOG_RESIZE_WIDTH":{"!type":"number","!doc":"<p>Only allow horizontal resizing for this dialog, disable vertical resizing.</p>\n"},"ELEMENT_MODE_APPENDTO":{"!type":"number","!doc":"<p>The editor is to be created inside the element.</p>\n"},"ELEMENT_MODE_INLINE":{"!type":"number","!doc":"<p>The editor is to be attached to the element, using it as the editing block.</p>\n"},"ELEMENT_MODE_NONE":{"!type":"number","!doc":"<p>The editor has no associated element.</p>\n"},"ELEMENT_MODE_REPLACE":{"!type":"number","!doc":"<p>The element is to be replaced by the editor instance.</p>\n"},"END":{"!type":"number","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-checkBoundaryOfElement\" rel=\"CKEDITOR.dom.range-method-checkBoundaryOfElement\" class=\"docClass\">CKEDITOR.dom.range.checkBoundaryOfElement</a>.</p>\n"},"ENTER_BR":{"!type":"number","!doc":"<p>Used in conjunction with <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a>\nand <a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> configuration\nsettings to make the editor produce <code>&lt;br&gt;</code> tags when\nusing the <em>Enter</em> key.</p>\n"},"ENTER_DIV":{"!type":"number","!doc":"<p>Used in conjunction with <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a>\nand <a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> configuration\nsettings to make the editor produce <code>&lt;div&gt;</code> tags when\nusing the <em>Enter</em> key.</p>\n"},"ENTER_P":{"!type":"number","!doc":"<p>Used in conjunction with <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a>\nand <a href=\"#!/api/CKEDITOR.config-cfg-shiftEnterMode\" rel=\"CKEDITOR.config-cfg-shiftEnterMode\" class=\"docClass\">CKEDITOR.config.shiftEnterMode</a> configuration\nsettings to make the editor produce <code>&lt;p&gt;</code> tags when\nusing the <em>Enter</em> key.</p>\n"},"EVENT_PHASE_AT_TARGET":{"!type":"number","!doc":"<p>Event at target.</p>\n"},"EVENT_PHASE_BUBBLING":{"!type":"number","!doc":"<p>Bubbling phase.</p>\n"},"EVENT_PHASE_CAPTURING":{"!type":"number","!doc":"<p>Capturing phase.</p>\n"},"FILTER_SKIP_TREE":{"!type":"number","!doc":"<p>A flag indicating that the current element and all its ancestors\nshould not be filtered.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.filter-method-addElementCallback\" rel=\"CKEDITOR.filter-method-addElementCallback\" class=\"docClass\">CKEDITOR.filter.addElementCallback</a> for more details.</p>\n"},"LINEUTILS_AFTER":{"!type":"number","!doc":"<p>Determines a position relative to an element in DOM (after).</p>\n"},"LINEUTILS_BEFORE":{"!type":"number","!doc":"<p>Determines a position relative to an element in DOM (before).</p>\n"},"LINEUTILS_INSIDE":{"!type":"number","!doc":"<p>Determines a position relative to an element in DOM (inside).</p>\n"},"NODE_COMMENT":{"!type":"number","!doc":"<p>Comment node type.</p>\n"},"NODE_DOCUMENT":{"!type":"number","!doc":"<p>Document node type.</p>\n"},"NODE_DOCUMENT_FRAGMENT":{"!type":"number","!doc":"<p>Document fragment node type.</p>\n"},"NODE_ELEMENT":{"!type":"number","!doc":"<p>Element node type.</p>\n"},"NODE_TEXT":{"!type":"number","!doc":"<p>Text node type.</p>\n"},"POSITION_AFTER_END":{"!type":"number","!doc":"<p>Indicates a position after end of a node.</p>\n\n<pre><code>// When used according to an element:\n// &lt;element&gt;contents&lt;/element&gt;^ (range is anchored in element's parent)\n\n// When used according to a text node:\n// \"text\"^ (range is anchored in text node's parent)\n</code></pre>\n\n<p>It is used as a parameter of methods like: <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">CKEDITOR.dom.range.moveToPosition</a>,\n<a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">CKEDITOR.dom.range.setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">CKEDITOR.dom.range.setEndAt</a>.</p>\n"},"POSITION_AFTER_START":{"!type":"number","!doc":"<p>Indicates a position after start of a node.</p>\n\n<pre><code>// When used according to an element:\n// &lt;element&gt;^contents&lt;/element&gt;\n\n// When used according to a text node:\n// \"^text\" (range is anchored in the text node)\n</code></pre>\n\n<p>It is used as a parameter of methods like: <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">CKEDITOR.dom.range.moveToPosition</a>,\n<a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">CKEDITOR.dom.range.setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">CKEDITOR.dom.range.setEndAt</a>.</p>\n"},"POSITION_BEFORE_END":{"!type":"number","!doc":"<p>Indicates a position before end of a node.</p>\n\n<pre><code>// When used according to an element:\n// &lt;element&gt;contents^&lt;/element&gt;\n\n// When used according to a text node:\n// \"text^\" (range is anchored in the text node)\n</code></pre>\n\n<p>It is used as a parameter of methods like: <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">CKEDITOR.dom.range.moveToPosition</a>,\n<a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">CKEDITOR.dom.range.setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">CKEDITOR.dom.range.setEndAt</a>.</p>\n"},"POSITION_BEFORE_START":{"!type":"number","!doc":"<p>Indicates a position before start of a node.</p>\n\n<pre><code>// When used according to an element:\n// ^&lt;element&gt;contents&lt;/element&gt; (range is anchored in element's parent)\n\n// When used according to a text node:\n// ^\"text\" (range is anchored in text node's parent)\n</code></pre>\n\n<p>It is used as a parameter of methods like: <a href=\"#!/api/CKEDITOR.dom.range-method-moveToPosition\" rel=\"CKEDITOR.dom.range-method-moveToPosition\" class=\"docClass\">CKEDITOR.dom.range.moveToPosition</a>,\n<a href=\"#!/api/CKEDITOR.dom.range-method-setStartAt\" rel=\"CKEDITOR.dom.range-method-setStartAt\" class=\"docClass\">CKEDITOR.dom.range.setStartAt</a> and <a href=\"#!/api/CKEDITOR.dom.range-method-setEndAt\" rel=\"CKEDITOR.dom.range-method-setEndAt\" class=\"docClass\">CKEDITOR.dom.range.setEndAt</a>.</p>\n"},"SELECTION_ELEMENT":{"!type":"number","!doc":"<p>Element selection.</p>\n\n<pre><code>if ( editor.getSelection().getType() == <a href=\"#!/api/CKEDITOR-property-SELECTION_ELEMENT\" rel=\"CKEDITOR-property-SELECTION_ELEMENT\" class=\"docClass\">CKEDITOR.SELECTION_ELEMENT</a> )\n    alert( 'An element is selected' );\n</code></pre>\n"},"SELECTION_NONE":{"!type":"number","!doc":"<p>No selection.</p>\n\n<pre><code>if ( editor.getSelection().getType() == <a href=\"#!/api/CKEDITOR-property-SELECTION_NONE\" rel=\"CKEDITOR-property-SELECTION_NONE\" class=\"docClass\">CKEDITOR.SELECTION_NONE</a> )\n    alert( 'Nothing is selected' );\n</code></pre>\n"},"SELECTION_TEXT":{"!type":"number","!doc":"<p>A text or a collapsed selection.</p>\n\n<pre><code>if ( editor.getSelection().getType() == <a href=\"#!/api/CKEDITOR-property-SELECTION_TEXT\" rel=\"CKEDITOR-property-SELECTION_TEXT\" class=\"docClass\">CKEDITOR.SELECTION_TEXT</a> )\n    alert( 'A text is selected' );\n</code></pre>\n"},"SHIFT":{"!type":"number","!doc":"<p>SHIFT key (0x220000).</p>\n"},"SHRINK_ELEMENT":{"!type":"number","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-shrink\" rel=\"CKEDITOR.dom.range-method-shrink\" class=\"docClass\">CKEDITOR.dom.range.shrink</a>.</p>\n"},"SHRINK_TEXT":{"!type":"number","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-shrink\" rel=\"CKEDITOR.dom.range-method-shrink\" class=\"docClass\">CKEDITOR.dom.range.shrink</a>.</p>\n"},"START":{"!type":"number","!doc":"<p>See <a href=\"#!/api/CKEDITOR.dom.range-method-checkBoundaryOfElement\" rel=\"CKEDITOR.dom.range-method-checkBoundaryOfElement\" class=\"docClass\">CKEDITOR.dom.range.checkBoundaryOfElement</a>.</p>\n"},"STYLE_BLOCK":{"!type":"number","!doc":"<p>Block style type.</p>\n\n<p>Read more in the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class documentation.</p>\n"},"STYLE_INLINE":{"!type":"number","!doc":"<p>Inline style type.</p>\n\n<p>Read more in the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class documentation.</p>\n"},"STYLE_OBJECT":{"!type":"number","!doc":"<p>Object style type.</p>\n\n<p>Read more in the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class documentation.</p>\n"},"TRISTATE_DISABLED":{"!type":"number","!doc":"<p>Used to indicate the DISABLED state.</p>\n"},"TRISTATE_OFF":{"!type":"number","!doc":"<p>Used to indicate the OFF or INACTIVE state.</p>\n"},"TRISTATE_ON":{"!type":"number","!doc":"<p>Used to indicate the ON or ACTIVE state.</p>\n"},"UI_BUTTON":{"!type":"string","!doc":"<p>Button UI element.</p>\n"},"UI_MENUBUTTON":{"!type":"string","!doc":"<p>Button UI element.</p>\n"},"UI_PANEL":{"!type":"string","!doc":"<p>Panel UI element.</p>\n"},"UI_PANELBUTTON":{"!type":"string","!doc":"<p>Button UI element.</p>\n"},"UI_RICHCOMBO":{"!type":"string","!doc":"<p>Button UI element.</p>\n"},"UI_SEPARATOR":{"!type":"string","!doc":"<p>Separator UI element.</p>\n"},"_":{"!doc":"<p>Private object used to hold core stuff. It should not be used outside of\nthe API code as properties defined here may change at any time\nwithout notice.</p>\n"},"basePath":{"!type":"string","!doc":"<p>The full URL for the CKEditor installation directory.\nIt is possible to manually provide the base path by setting a\nglobal variable named <code>CKEDITOR_BASEPATH</code>. This global variable\nmust be set <strong>before</strong> the editor script loading.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR-property-basePath\" rel=\"CKEDITOR-property-basePath\" class=\"docClass\">CKEDITOR.basePath</a> ); // e.g. 'http://www.example.com/ckeditor/'\n</code></pre>\n"},"document":{"!doc":"<p>The document of the window storing the CKEDITOR object.</p>\n\n<pre><code>alert( CKEDITOR.document.getBody().getName() ); // 'body'\n</code></pre>\n"},"instances":{"!doc":"<p>Stores references to all editor instances created. The name of the properties\nin this object correspond to instance names, and their values contain the\n<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a> object representing them.</p>\n\n<pre><code>alert( CKEDITOR.instances.editor1.name ); // 'editor1'\n</code></pre>\n"},"loadFullCoreTimeout":{"!type":"number","!doc":"<p>The time to wait (in seconds) to load the full editor code after the\npage load, if the \"ckeditor_basic\" file is used. If set to zero, the\neditor is loaded on demand, as soon as an instance is created.</p>\n\n<p>This value must be set on the page before the page load completion.</p>\n\n<pre><code>// Loads the full source after five seconds.\n<a href=\"#!/api/CKEDITOR-property-loadFullCoreTimeout\" rel=\"CKEDITOR-property-loadFullCoreTimeout\" class=\"docClass\">CKEDITOR.loadFullCoreTimeout</a> = 5;\n</code></pre>\n"},"revision":{"!type":"string","!doc":"<p>Contains the CKEditor revision number.\nThe revision number is incremented automatically, following each\nmodification to the CKEditor source code.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR-property-revision\" rel=\"CKEDITOR-property-revision\" class=\"docClass\">CKEDITOR.revision</a> ); // e.g. '3975'\n</code></pre>\n"},"rnd":{"!type":"number","!doc":"<p>A 3-digit random integer, valid for the entire life of the CKEDITOR object.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR-property-rnd\" rel=\"CKEDITOR-property-rnd\" class=\"docClass\">CKEDITOR.rnd</a> ); // e.g. 319\n</code></pre>\n"},"status":{"!type":"string","!doc":"<p>Indicates the API loading status. The following statuses are available:</p>\n\n<ul>\n<li><strong>unloaded</strong>: the API is not yet loaded.</li>\n<li><strong>basic_loaded</strong>: the basic API features are available.</li>\n<li><strong>basic_ready</strong>: the basic API is ready to load the full core code.</li>\n<li><strong>loaded</strong>: the API can be fully used.</li>\n</ul>\n\n\n<p>Example:</p>\n\n<pre><code>if ( <a href=\"#!/api/CKEDITOR-property-status\" rel=\"CKEDITOR-property-status\" class=\"docClass\">CKEDITOR.status</a> == 'loaded' ) {\n    // The API can now be fully used.\n    doSomething();\n} else {\n    // Wait for the full core to be loaded and fire its loading.\n    CKEDITOR.on( 'load', doSomething );\n    <a href=\"#!/api/CKEDITOR-method-loadFullCore\" rel=\"CKEDITOR-method-loadFullCore\" class=\"docClass\">CKEDITOR.loadFullCore</a> &amp;&amp; <a href=\"#!/api/CKEDITOR-method-loadFullCore\" rel=\"CKEDITOR-method-loadFullCore\" class=\"docClass\">CKEDITOR.loadFullCore</a>();\n}\n</code></pre>\n"},"timestamp":{"!type":"string","!doc":"<p>A constant string unique for each release of CKEditor. Its value\nis used, by default, to build the URL for all resources loaded\nby the editor code, guaranteeing clean cache results when\nupgrading.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR-property-timestamp\" rel=\"CKEDITOR-property-timestamp\" class=\"docClass\">CKEDITOR.timestamp</a> ); // e.g. '87dm'\n</code></pre>\n"},"version":{"!type":"string","!doc":"<p>Contains the CKEditor version number.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR-property-version\" rel=\"CKEDITOR-property-version\" class=\"docClass\">CKEDITOR.version</a> ); // e.g. 'CKEditor 3.4.1'\n</code></pre>\n"},"add":{"!type":"fn(editor: ?)","!doc":"<p>Adds an editor instance to the global <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a> object. This function\nis available for internal use mainly.</p>\n"},"addCss":{"!type":"fn(css: string)","!doc":"<p>Adds CSS rules to be appended to the editor document.\nThis method is mostly used by plugins to add custom styles to the editor\ndocument. For basic content styling the <code>contents.css</code> file should be\nused instead.</p>\n\n<p><strong>Note:</strong> This function should be called before the creation of editor instances.</p>\n\n<pre><code>// Add styles for all headings inside editable contents.\n<a href=\"#!/api/CKEDITOR-method-addCss\" rel=\"CKEDITOR-method-addCss\" class=\"docClass\">CKEDITOR.addCss</a>( '.cke_editable h1,.cke_editable h2,.cke_editable h3 { border-bottom: 1px dotted red }' );\n</code></pre>\n"},"addTemplate":{"!type":"fn(name: string, source: string)","!doc":"<p>Adds a named <a href=\"#!/api/CKEDITOR.template\" rel=\"CKEDITOR.template\" class=\"docClass\">CKEDITOR.template</a> instance to be reused among all editors.\nThis will return the existing one if a template with same name is already\ndefined. Additionally, it fires the \"template\" event to allow template source customization.</p>\n"},"appendTo":{"!type":"fn(element: ?, config?: ?, data?: string)","!doc":"<p>Creates a new editor instance at the end of a specific DOM element.</p>\n\n<pre><code>&lt;div id=\"editorSpace\"&gt;&lt;/div&gt;\n...\n<a href=\"#!/api/CKEDITOR-method-appendTo\" rel=\"CKEDITOR-method-appendTo\" class=\"docClass\">CKEDITOR.appendTo</a>( 'editorSpace' );\n</code></pre>\n"},"domReady":{"!type":"fn()","!doc":"<p>Specify a function to execute when the DOM is fully loaded.</p>\n\n<p>If called after the DOM has been initialized, the function passed in will\nbe executed immediately.</p>\n\n<p>@todo</p>\n"},"getCss":{"!type":"fn()","!doc":"<p>Returns a string will all CSS rules passed to the <a href=\"#!/api/CKEDITOR-method-addCss\" rel=\"CKEDITOR-method-addCss\" class=\"docClass\">addCss</a> method.</p>\n"},"getTemplate":{"!type":"fn(name: string)","!doc":"<p>Retrieves a defined template created with <a href=\"#!/api/CKEDITOR-method-addTemplate\" rel=\"CKEDITOR-method-addTemplate\" class=\"docClass\">addTemplate</a>.</p>\n"},"getUrl":{"!type":"fn(resource: string)","!doc":"<p>Gets the full URL for CKEditor resources. By default, URLs\nreturned by this function contain a querystring parameter (\"t\")\nset to the <a href=\"#!/api/CKEDITOR-property-timestamp\" rel=\"CKEDITOR-property-timestamp\" class=\"docClass\">timestamp</a> value.</p>\n\n<p>It is possible to provide a custom implementation of this\nfunction by setting a global variable named <code>CKEDITOR_GETURL</code>.\nThis global variable must be set <strong>before</strong> the editor script\nloading. If the custom implementation returns nothing (<code>==null</code>), the\ndefault implementation is used.</p>\n\n<pre><code>// e.g. 'http://www.example.com/ckeditor/skins/default/editor.css?t=87dm'\nalert( <a href=\"#!/api/CKEDITOR-method-getUrl\" rel=\"CKEDITOR-method-getUrl\" class=\"docClass\">CKEDITOR.getUrl</a>( 'skins/default/editor.css' ) );\n\n// e.g. 'http://www.example.com/skins/default/editor.css?t=87dm'\nalert( <a href=\"#!/api/CKEDITOR-method-getUrl\" rel=\"CKEDITOR-method-getUrl\" class=\"docClass\">CKEDITOR.getUrl</a>( '/skins/default/editor.css' ) );\n\n// e.g. 'http://www.somesite.com/skins/default/editor.css?t=87dm'\nalert( <a href=\"#!/api/CKEDITOR-method-getUrl\" rel=\"CKEDITOR-method-getUrl\" class=\"docClass\">CKEDITOR.getUrl</a>( 'http://www.somesite.com/skins/default/editor.css' ) );\n</code></pre>\n"},"inline":{"!type":"fn(element: ?, instanceConfig?: ?)","!doc":"<p>Turns a DOM element with <code>contenteditable</code> attribute set to <code>true</code> into a\nCKEditor instance. Check <a href=\"#!/api/CKEDITOR.dtd-property-S-editable\" rel=\"CKEDITOR.dtd-property-S-editable\" class=\"docClass\">CKEDITOR.dtd.$editable</a> for the list of\nallowed element names.</p>\n\n<pre><code>&lt;div contenteditable=\"true\" id=\"content\"&gt;...&lt;/div&gt;\n...\n<a href=\"#!/api/CKEDITOR-method-inline\" rel=\"CKEDITOR-method-inline\" class=\"docClass\">CKEDITOR.inline</a>( 'content' );\n</code></pre>\n\n<p>It is also possible to create an inline editor from the <code>&lt;textarea&gt;</code> element.\nIf you do so, an additional <code>&lt;div&gt;</code> element with editable content will be created\ndirectly after the <code>&lt;textarea&gt;</code> element and the <code>&lt;textarea&gt;</code> element will be hidden.</p>\n"},"inlineAll":{"!type":"fn()","!doc":"<p>Calls <a href=\"#!/api/CKEDITOR-method-inline\" rel=\"CKEDITOR-method-inline\" class=\"docClass\">inline</a> for all page elements with\n<code>contenteditable</code> attribute set to <code>true</code>.</p>\n"},"loadFullCore":{"!type":"fn()","!doc":"<p>Forces the full CKEditor core code, in the case only the basic code has been\nloaded (<code>ckeditor_basic.js</code>). This method self-destroys (becomes undefined) in\nthe first call or as soon as the full code is available.</p>\n\n<pre><code>// Check if the full core code has been loaded and load it.\nif ( <a href=\"#!/api/CKEDITOR-method-loadFullCore\" rel=\"CKEDITOR-method-loadFullCore\" class=\"docClass\">CKEDITOR.loadFullCore</a> )\n    <a href=\"#!/api/CKEDITOR-method-loadFullCore\" rel=\"CKEDITOR-method-loadFullCore\" class=\"docClass\">CKEDITOR.loadFullCore</a>();\n</code></pre>\n"},"remove":{"!type":"fn(editor: ?)","!doc":"<p>Removes an editor instance from the global <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a> object. This function\nis available for internal use only. External code must use <a href=\"#!/api/CKEDITOR.editor-method-destroy\" rel=\"CKEDITOR.editor-method-destroy\" class=\"docClass\">CKEDITOR.editor.destroy</a>.</p>\n"},"replace":{"!type":"fn(element: ?, config?: ?)","!doc":"<p>Replaces a <code>&lt;textarea&gt;</code> or a DOM element (<code>&lt;div&gt;</code>) with a CKEditor\ninstance. For textareas, the initial value in the editor will be the\ntextarea value. For DOM elements, their <code>innerHTML</code> will be used\ninstead. We recommend using <code>&lt;textarea&gt;</code> and <code>&lt;div&gt;</code> elements only.</p>\n\n<pre><code>&lt;textarea id=\"myfield\" name=\"myfield\"&gt;&lt;/textarea&gt;\n...\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'myfield' );\n\nvar textarea = document.body.appendChild( document.createElement( 'textarea' ) );\n<a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( textarea );\n</code></pre>\n"},"replaceAll":{"!type":"fn(className?: string, function?: ?)","!doc":"<p>Replaces all <code>&lt;textarea&gt;</code> elements available in the document with\neditor instances.</p>\n\n<pre><code>// Replace all &lt;textarea&gt; elements in the page.\n<a href=\"#!/api/CKEDITOR-method-replaceAll\" rel=\"CKEDITOR-method-replaceAll\" class=\"docClass\">CKEDITOR.replaceAll</a>();\n\n// Replace all &lt;textarea class=\"myClassName\"&gt; elements in the page.\n<a href=\"#!/api/CKEDITOR-method-replaceAll\" rel=\"CKEDITOR-method-replaceAll\" class=\"docClass\">CKEDITOR.replaceAll</a>( 'myClassName' );\n\n// Selectively replace &lt;textarea&gt; elements, based on custom assertions.\n<a href=\"#!/api/CKEDITOR-method-replaceAll\" rel=\"CKEDITOR-method-replaceAll\" class=\"docClass\">CKEDITOR.replaceAll</a>( function( textarea, config ) {\n    // An assertion function that needs to be evaluated for the &lt;textarea&gt;\n    // to be replaced. It must explicitely return \"false\" to ignore a\n    // specific &lt;textarea&gt;.\n    // You can also customize the editor instance by having the function\n    // modify the \"config\" parameter.\n} );\n</code></pre>\n"},"keystrokeHandler":{"!doc":"<p>Controls keystrokes typing in an editor instance.</p>\n","blockedKeystrokes":{"!doc":"<p>List of keystrokes that should be blocked if not defined at\n<a href=\"#!/api/CKEDITOR.keystrokeHandler-property-keystrokes\" rel=\"CKEDITOR.keystrokeHandler-property-keystrokes\" class=\"docClass\">keystrokes</a>. In this way it is possible to block the default\nbrowser behavior for those keystrokes.</p>\n"},"keystrokes":{"!doc":"<p>List of keystrokes associated to commands. Each entry points to the\ncommand to be executed.</p>\n\n<p>Since CKEditor 4 there's no need to modify this property directly during the runtime.\nUse <a href=\"#!/api/CKEDITOR.editor-method-setKeystroke\" rel=\"CKEDITOR.editor-method-setKeystroke\" class=\"docClass\">CKEDITOR.editor.setKeystroke</a> instead.</p>\n"},"prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates a keystrokeHandler class instance.</p>\n"}},"attach":{"!type":"fn(domObject: ?)","!doc":"<p>Attaches this keystroke handle to a DOM object. Keystrokes typed\nover this object will get handled by this keystrokeHandler.</p>\n"}},"lang":{"!doc":"<p>Stores language-related functions.</p>\n","languages":{"!doc":"<p>The list of languages available in the editor core.</p>\n\n<pre><code>alert( CKEDITOR.lang.languages.en ); // 1\n</code></pre>\n"},"rtl":{"!doc":"<p>The list of languages that are written Right-To-Left (RTL) and are supported by the editor.</p>\n"},"detect":{"!type":"fn(defaultLanguage: string, probeLanguage?: string)","!doc":"<p>Returns the language that best fits the user language. For example,\nsuppose that the user language is \"pt-br\". If this language is\nsupported by the editor, it is returned. Otherwise, if only \"pt\" is\nsupported, it is returned instead. If none of the previous are\nsupported, a default language is then returned.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.lang-method-detect\" rel=\"CKEDITOR.lang-method-detect\" class=\"docClass\">CKEDITOR.lang.detect</a>( 'en' ) ); // e.g., in a German browser: 'de'\n</code></pre>\n"},"load":{"!type":"fn(languageCode: string, defaultLanguage: string, callback: ?)","!doc":"<p>Loads a specific language file, or auto detects it. A callback is\nthen called when the file gets loaded.</p>\n"}},"loader":{"!doc":"<p>Load core scripts and their dependencies from _source.</p>\n","loadedScripts":{"!doc":"<p>The list of loaded scripts in their loading order.</p>\n\n<pre><code>// Alert the loaded script names.\nalert( <a href=\"#!/api/CKEDITOR.loader-property-loadedScripts\" rel=\"CKEDITOR.loader-property-loadedScripts\" class=\"docClass\">CKEDITOR.loader.loadedScripts</a> );\n</code></pre>\n"},"scripts":{"!doc":"<p>Table of script names and their dependencies.</p>\n"},"load":{"!type":"fn(scriptName: string, defer?: bool)","!doc":"<p>Loads a specific script, including its dependencies. This is not a\nsynchronous loading, which means that the code to be loaded will\nnot necessarily be available after this call.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.loader-method-load\" rel=\"CKEDITOR.loader-method-load\" class=\"docClass\">CKEDITOR.loader.load</a>( 'dom/element' );\n</code></pre>\n"},"loadPending":{"!type":"fn()","!doc":"<p>@todo</p>\n"}},"menu":{"!doc":"<p>@todo</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"\n"}},"add":{"!type":"fn(item: ?)","!doc":"<p>Adds an item.</p>\n"},"addListener":{"!type":"fn(listenerFn: ?)","!doc":"<p>Adds a callback executed on opening the menu. Items\nreturned by that callback are added to the menu.</p>\n"},"hide":{"!type":"fn(returnFocus?: bool)","!doc":"<p>Hides the menu.</p>\n"},"removeAll":{"!type":"fn()","!doc":"<p>Removes all items.</p>\n"},"show":{"!type":"fn(offsetParent: ?, corner?: number, offsetX?: number, offsetY?: number)","!doc":"<p>Shows the menu in given location.</p>\n"}},"menuItem":{"!doc":"<p>@todo</p>\n"},"pluginDefinition":{"!doc":"<p>Virtual class which just illustrates the features of plugin objects to be\npassed to the <a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a> method.</p>\n\n<p>This class is not really part of the API, so its constructor should not be called.</p>\n","prototype":{"hidpi":{"!type":"bool","!doc":"<p>Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. <em>Retina</em>)\nby providing high-resolution icons and images. HiDPI icons must be twice as big\n(defaults are <code>16px x 16px</code>) and stored under <code>plugin_name/icons/hidpi/</code> directory.</p>\n\n<p>The common place for additional HiDPI images used by the plugin (<strong>but not icons</strong>)\nis <code>plugin_name/images/hidpi/</code> directory.</p>\n\n<p>This property is optional and only makes sense if <code>32px x 32px</code> icons\nand high-resolution images actually exist. If this flag is set <code>true</code>, the editor\nwill automatically detect the HiDPI environment and attempt to load the\nhigh-resolution resources.</p>\n"},"lang":{"!doc":"<p>A list of language files available for this plugin. These files are stored inside\nthe <code>lang</code> directory inside the plugin directory, follow the name\npattern of <code>langCode.js</code>, and contain the language definition created with\n<a href=\"#!/api/CKEDITOR.plugins-method-setLang\" rel=\"CKEDITOR.plugins-method-setLang\" class=\"docClass\">CKEDITOR.plugins.setLang</a>.</p>\n\n<p>When the plugin is being loaded, the editor checks this list to see if\na language file of the current editor language (<a href=\"#!/api/CKEDITOR.editor-property-langCode\" rel=\"CKEDITOR.editor-property-langCode\" class=\"docClass\">CKEDITOR.editor.langCode</a>)\nis available, and if so, loads it. Otherwise, the file represented by the first item\nin the list is loaded.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    lang: [ 'en', 'fr' ]\n} );\n</code></pre>\n"},"requires":{"!doc":"<p>A list of plugins that are required by this plugin. Note that this property\ndoes not determine the loading order of the plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    requires: [ 'button', 'selection' ]\n} );\n</code></pre>\n"},"beforeInit":{"!type":"fn(editor: ?)","!doc":"<p>A function called on initialization of every editor instance created in the\npage before the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> call task. The <code>beforeInit</code> function will be called for\nall plugins, after that the <code>init</code> function is called for all of them. This\nfeature makes it possible to initialize things that could be used in the\n<code>init</code> function of other plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    beforeInit: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is to be initialized!' );\n    }\n} );\n</code></pre>\n"},"init":{"!type":"fn(editor: ?)","!doc":"<p>Function called on initialization of every editor instance created in the page.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    init: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is being initialized!' );\n    }\n} );\n</code></pre>\n"}}},"plugins":{"codesnippet":{"highlighter":{"!doc":"<p>A Code Snippet highlighter. It can be set as a default highlighter\nusing <a href=\"#!/api/CKEDITOR.plugins.codesnippet-method-setHighlighter\" rel=\"CKEDITOR.plugins.codesnippet-method-setHighlighter\" class=\"docClass\">CKEDITOR.plugins.codesnippet.setHighlighter</a>, for example:</p>\n\n<pre><code>// Create a new plugin which registers a custom code highlighter\n// based on customEngine in order to replace the one that comes\n// with the Code Snippet plugin.\n<a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'myCustomHighlighter', {\n    afterInit: function( editor ) {\n        // Create a new instance of the highlighter.\n        var myHighlighter = new <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter\" rel=\"CKEDITOR.plugins.codesnippet.highlighter\" class=\"docClass\">CKEDITOR.plugins.codesnippet.highlighter</a>( {\n            init: function( ready ) {\n                // Asynchronous code to load resources and libraries for customEngine.\n                customEngine.loadResources( function() {\n                    // Let the editor know that everything is ready.\n                    ready();\n                } );\n            },\n            highlighter: function( code, language, callback ) {\n                // Let the customEngine highlight the code.\n                customEngine.highlight( code, language, function() {\n                    callback( highlightedCode );\n                } );\n            }\n        } );\n\n        // Check how it performs.\n        myHighlighter.highlight( 'foo()', 'javascript', function( highlightedCode ) {\n            console.log( highlightedCode ); // -&gt; &lt;span class=\"pretty\"&gt;foo()&lt;/span&gt;\n        } );\n\n        // From now on, myHighlighter will be used as a Code Snippet\n        // highlighter, overwriting the default engine.\n        editor.plugins.codesnippet.setHighlighter( myHighlighter );\n    }\n} );\n</code></pre>\n","prototype":{"highlighter":{"!doc":"<p>A function which highlights given plain text <code>code</code> in a given <code>language</code> and, once done,\ncalls the <code>callback</code> function with highlighted markup as an argument.</p>\n"},"init":{"!doc":"<p>If specified, this function should asynchronously load highlighter-specific\nresources and execute <code>ready</code> when the highlighter is ready.</p>\n"},"languages":{"!doc":"<p>Defines languages supported by the highlighter.\nThey can be restricted with the <a href=\"#!/api/CKEDITOR.config-cfg-codeSnippet_languages\" rel=\"CKEDITOR.config-cfg-codeSnippet_languages\" class=\"docClass\">CKEDITOR.config.codeSnippet_languages</a> configuration option.</p>\n\n<p><strong>Note</strong>: If <a href=\"#!/api/CKEDITOR.config-cfg-codeSnippet_languages\" rel=\"CKEDITOR.config-cfg-codeSnippet_languages\" class=\"docClass\">CKEDITOR.config.codeSnippet_languages</a> is set, <strong>it will\noverwrite</strong> the languages listed in <code>languages</code>.</p>\n\n<pre><code>languages: {\n    coffeescript: 'CoffeeScript',\n    cpp: 'C++',\n    cs: 'C#',\n    css: 'CSS'\n}\n</code></pre>\n\n<p>More information on how to change the list of languages is available\nin the <a href=\"#!/guide/dev_codesnippet-section-changing-languages-list\">Code Snippet documentation</a>.</p>\n"},"ready":{"!type":"bool","!doc":"<p>A flag which indicates whether the highlighter is ready to do jobs\nfrom the <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-property-queue\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-property-queue\" class=\"docClass\">queue</a>.</p>\n"}},"queue":{"!doc":"<p>A queue of <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-method-highlight\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-method-highlight\" class=\"docClass\">highlight</a> jobs to be\ndone once the highlighter is <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-property-ready\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-property-ready\" class=\"docClass\">ready</a>.</p>\n"},"highlight":{"!type":"fn(code: string, lang: string, callback: ?)","!doc":"<p>Executes the <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-property-highlighter\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-property-highlighter\" class=\"docClass\">highlighter</a>. If the highlighter is not ready, it defers the job (<a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-property-queue\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-property-queue\" class=\"docClass\">queue</a>)\nand executes it when the highlighter is <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter-property-ready\" rel=\"CKEDITOR.plugins.codesnippet.highlighter-property-ready\" class=\"docClass\">ready</a>.</p>\n"}},"setHighlighter":{"!type":"fn(highlighter: ?)","!doc":"<p>Sets the custom syntax highlighter. See <a href=\"#!/api/CKEDITOR.plugins.codesnippet.highlighter\" rel=\"CKEDITOR.plugins.codesnippet.highlighter\" class=\"docClass\">CKEDITOR.plugins.codesnippet.highlighter</a>\nto learn how to register a custom highlighter.</p>\n"},"!doc":"<p>Global helpers and classes of the Code Snippet plugin.</p>\n\n<p>For more information see the <a href=\"#!/guide/dev_codesnippet\">Code Snippet Guide</a>.</p>\n"},"contextMenu":{"!doc":"<p>Class replacing the non-configurable native context menu with configurable CKEditor's equivalent.</p>\n","prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates the <a href=\"#!/api/CKEDITOR.plugins.contextMenu\" rel=\"CKEDITOR.plugins.contextMenu\" class=\"docClass\">CKEDITOR.plugins.contextMenu</a> class instance.</p>\n"}},"addTarget":{"!type":"fn(element: ?, nativeContextMenuOnCtrl?: bool)","!doc":"<p>Starts watching on native context menu triggers (option key, right click) on given element.</p>\n"},"open":{"!type":"fn(offsetParent: ?, corner?: number, offsetX?: number, offsetY?: number)","!doc":"<p>Opens context menu in given location. See the <a href=\"#!/api/CKEDITOR.menu-method-show\" rel=\"CKEDITOR.menu-method-show\" class=\"docClass\">CKEDITOR.menu.show</a> method.</p>\n"}},"find":{"characterRange":{"!doc":"<p>A range of cursors which represent a trunk of characters which try to\nmatch, it has the same length as the pattern  string.</p>\n\n<p><strong>Note:</strong> This class isn't accessible from global scope.</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a characterRange class instance.</p>\n"}},"highlight":{"!type":"fn()","!doc":"<p>Hightlight the current matched chunk of text.</p>\n"},"removeHighlight":{"!type":"fn()","!doc":"<p>Remove highlighted find result.</p>\n"},"toDomRange":{"!type":"fn()","!doc":"<p>Translate this range to <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">CKEDITOR.dom.range</a>.</p>\n"},"updateFromDomRange":{"!type":"fn(domRange: ?)","!doc":"<p>Reflect the latest changes from dom range.</p>\n"}}},"indent":{"genericDefinition":{"!doc":"<p>A base class for a generic command definition, responsible mainly for creating\nIncrease Indent and Decrease Indent toolbar buttons as well as for refreshing\nUI states.</p>\n\n<p>Commands of this class do not perform any indentation by themselves. They\ndelegate this job to content-specific indentation commands (i.e. indentlist).</p>\n","isIndent":{"!type":"bool","!doc":"<p>Determines whether the command belongs to the indentation family.\nOtherwise it is assumed to be an outdenting command.</p>\n"}},"!doc":"<p>Global command class definitions and global helpers.</p>\n","registerCommands":{"!type":"fn(editor: ?, commands: ?)","!doc":"<p>Registers content-specific commands as a part of the indentation system\ndirected by generic commands. Once a command is registered,\nit listens for events of a related generic command.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins.indent-method-registerCommands\" rel=\"CKEDITOR.plugins.indent-method-registerCommands\" class=\"docClass\">CKEDITOR.plugins.indent.registerCommands</a>( editor, {\n    'indentlist': new indentListCommand( editor, 'indentlist' ),\n    'outdentlist': new indentListCommand( editor, 'outdentlist' )\n} );\n</code></pre>\n\n<p>Content-specific commands listen for the generic command's <code>exec</code> and\ntry to execute their own jobs, one after another. If some execution is\nsuccessful, <code>evt.data.done</code> is set so no more jobs (commands) are involved.</p>\n\n<p>Content-specific commands also listen for the generic command's <code>refresh</code>\nand fill the <code>evt.data.states</code> object with states of jobs. A generic command\nuses this data to determine its own state and to update the UI.</p>\n"},"specificDefinition":{"!doc":"<p>A base class for specific indentation command definitions responsible for\nhandling a pre-defined set of elements i.e. indentlist for lists or\nindentblock for text block elements.</p>\n\n<p>Commands of this class perform indentation operations and modify the DOM structure.\nThey listen for events fired by <a href=\"#!/api/CKEDITOR.plugins.indent.genericDefinition\" rel=\"CKEDITOR.plugins.indent.genericDefinition\" class=\"docClass\">CKEDITOR.plugins.indent.genericDefinition</a>\nand execute defined actions.</p>\n\n<p><strong>NOTE</strong>: This is not an <a href=\"#!/api/CKEDITOR.command\" rel=\"CKEDITOR.command\" class=\"docClass\">editor command</a>.\nContext-specific commands are internal, for indentation system only.</p>\n","database":{"!doc":"<p>Stores created markers for the command so they can eventually be\npurged after the <code>exec</code> function is run.</p>\n"},"enterBr":{"!type":"bool","!doc":"<p>Determines whether the editor that the command belongs to has\n<a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">config.enterMode</a> set to <a href=\"#!/api/CKEDITOR-property-ENTER_BR\" rel=\"CKEDITOR-property-ENTER_BR\" class=\"docClass\">CKEDITOR.ENTER_BR</a>.</p>\n\n<p>@see <a href=\"#!/api/CKEDITOR.config-cfg-enterMode\" rel=\"CKEDITOR.config-cfg-enterMode\" class=\"docClass\">CKEDITOR.config.enterMode</a></p>\n"},"indentKey":{"!doc":"<p>A keystroke associated with this command (<em>Tab</em> or <em>Shift+Tab</em>).</p>\n"},"isIndent":{"!type":"bool","!doc":"<p>Determines whether the command belongs to the indentation family.\nOtherwise it is assumed to be an outdenting command.</p>\n"},"jobs":{"!doc":"<p>An object of jobs handled by the command. Each job consists\nof two functions: <code>refresh</code> and <code>exec</code> as well as the execution priority.</p>\n\n<ul>\n<li><p>The <code>refresh</code> function determines whether a job is doable for\na particular context. These functions are executed in the\norder of priorities, one by one, for all plugins that registered\njobs. As jobs are related to generic commands, refreshing\noccurs when the global command is firing the <code>refresh</code> event.</p>\n\n<p><strong>Note</strong>: This function must return either <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>\nor <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>.</p></li>\n<li><p>The <code>exec</code> function modifies the DOM if possible. Just like\n<code>refresh</code>, <code>exec</code> functions are executed in the order of priorities\nwhile the generic command is executed. This function is not executed\nif <code>refresh</code> for this job returned <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>.</p>\n\n<p><strong>Note</strong>: This function must return a Boolean value, indicating whether it\nwas successful. If a job was successful, then no other jobs are being executed.</p></li>\n</ul>\n\n\n<p>Sample definition:</p>\n\n<pre><code>command.jobs = {\n    // Priority = 20.\n    '20': {\n        refresh( editor, path ) {\n            if ( condition )\n                return <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>;\n            else\n                return <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>;\n        },\n        exec( editor ) {\n            // DOM modified! This was OK.\n            return true;\n        }\n    },\n    // Priority = 60. This job is done later.\n    '60': {\n        // Another job.\n    }\n};\n</code></pre>\n\n<p>For additional information, please check comments for\nthe <code>setupGenericListeners</code> function.</p>\n"},"relatedGlobal":{"!doc":"<p>The name of the global command related to this one.</p>\n"},"execJob":{"!type":"fn(editor: ?, priority: number)","!doc":"<p>Executes the content-specific procedure if the context is correct.\nIt calls the <code>exec</code> function of a job of the given <code>priority</code>\nthat modifies the DOM.</p>\n"},"getContext":{"!type":"fn(node: ?)","!doc":"<p>Checks if the element path contains the element handled\nby this indentation command.</p>\n"},"refreshJob":{"!type":"fn(editor: ?, priority: number)","!doc":"<p>Calls the <code>refresh</code> function of a job of the given <code>priority</code>.\nThe function returns the state of the job which can be either\n<a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a> or <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>.</p>\n"},"setupGenericListeners":{"!type":"fn(command: ?)","!doc":"<p>Attaches event listeners for this generic command. Since the indentation\nsystem is event-oriented, generic commands communicate with\ncontent-specific commands using the <code>exec</code> and <code>refresh</code> events.</p>\n\n<p>Listener priorities are crucial. Different indentation phases\nare executed with different priorities.</p>\n\n<p>For the <code>exec</code> event:</p>\n\n<ul>\n<li>0: Selection and bookmarks are saved by the generic command.</li>\n<li>1-99: Content-specific commands try to indent the code by executing\ntheir own jobs (<a href=\"#!/api/CKEDITOR.plugins.indent.specificDefinition-property-jobs\" rel=\"CKEDITOR.plugins.indent.specificDefinition-property-jobs\" class=\"docClass\">jobs</a>).</li>\n<li>100: Bookmarks are re-selected by the generic command.</li>\n</ul>\n\n\n<p>The visual interpretation looks as follows:</p>\n\n<pre><code>  +------------------+\n  | Exec event fired |\n  +------ + ---------+\n          |\n        0 -&lt;----------+ Selection and bookmarks saved.\n          |\n          |\n       25 -&lt;---+ Exec 1st job of plugin#1 (return false, continuing...).\n          |\n          |\n       50 -&lt;---+ Exec 1st job of plugin#2 (return false, continuing...).\n          |\n          |\n       75 -&lt;---+ Exec 2nd job of plugin#1 (only if plugin#2 failed).\n          |\n          |\n      100 -&lt;-----------+ Re-select bookmarks, clean-up.\n          |\n+-------- v ----------+\n| Exec event finished |\n+---------------------+\n</code></pre>\n\n<p>For the <code>refresh</code> event:</p>\n\n<ul>\n<li>&lt;100: Content-specific commands refresh their job states according\nto the given path. Jobs save their states in the <code>evt.data.states</code> object\npassed along with the event. This can be either <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>\nor <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>.</li>\n<li><p>100: Command state is determined according to what states\nhave been returned by content-specific jobs (<code>evt.data.states</code>).\nUI elements are updated at this stage.</p>\n\n<p><strong>Note</strong>: If there is at least one job with the <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> state,\nthen the generic command state is also <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>. Otherwise,\nthe command state is <a href=\"#!/api/CKEDITOR-property-TRISTATE_DISABLED\" rel=\"CKEDITOR-property-TRISTATE_DISABLED\" class=\"docClass\">CKEDITOR.TRISTATE_DISABLED</a>.</p></li>\n</ul>\n\n"}}},"!doc":"<p>Manages plugins registration and loading.</p>\n","setLang":{"!type":"fn(pluginName: string, languageCode: string, languageEntries: ?)","!doc":"<p>Loads a specific language file, or auto detect it. A callback is\nthen called when the file gets loaded.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-setLang\" rel=\"CKEDITOR.plugins-method-setLang\" class=\"docClass\">CKEDITOR.plugins.setLang</a>( 'myPlugin', 'en', {\n    title: 'My plugin',\n    selectOption: 'Please select an option'\n} );\n</code></pre>\n"},"lineutils":{"finder":{"!doc":"<p>An utility that traverses DOM tree and discovers elements\n(relations) matching user-defined lookups.</p>\n","prototype":{"lookups":{"!doc":"<p>A set of user-defined functions used by Finder to check if an element\nis a valid relation, belonging to <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-property-relations\" rel=\"CKEDITOR.plugins.lineutils.finder-property-relations\" class=\"docClass\">relations</a>.\nWhen the criterion is met, lookup returns a logical conjunction of <code><a href=\"#!/api/CKEDITOR-property-LINEUTILS_BEFORE\" rel=\"CKEDITOR-property-LINEUTILS_BEFORE\" class=\"docClass\">CKEDITOR.LINEUTILS_BEFORE</a></code>,\n<code><a href=\"#!/api/CKEDITOR-property-LINEUTILS_AFTER\" rel=\"CKEDITOR-property-LINEUTILS_AFTER\" class=\"docClass\">CKEDITOR.LINEUTILS_AFTER</a></code> or <code><a href=\"#!/api/CKEDITOR-property-LINEUTILS_INSIDE\" rel=\"CKEDITOR-property-LINEUTILS_INSIDE\" class=\"docClass\">CKEDITOR.LINEUTILS_INSIDE</a></code>.</p>\n\n<p>Lookups are passed along with Finder's definition.</p>\n\n<pre><code>lookups: {\n    'some lookup': function( el ) {\n        if ( someCondition )\n            return <a href=\"#!/api/CKEDITOR-property-LINEUTILS_BEFORE\" rel=\"CKEDITOR-property-LINEUTILS_BEFORE\" class=\"docClass\">CKEDITOR.LINEUTILS_BEFORE</a>;\n    },\n    ...\n}\n</code></pre>\n"},"relations":{"!doc":"<p>Relations express elements in DOM that match user-defined <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-property-lookups\" rel=\"CKEDITOR.plugins.lineutils.finder-property-lookups\" class=\"docClass\">lookups</a>.\nEvery relation has its own <code>type</code> that determines whether\nit refers to the space before, after or inside of <code>element</code>.\nThis object stores relations found by <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" rel=\"CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" class=\"docClass\">traverseSearch</a> or <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-greedySearch\" rel=\"CKEDITOR.plugins.lineutils.finder-method-greedySearch\" class=\"docClass\">greedySearch</a>, structured\nin the following way:</p>\n\n<pre><code>relations: {\n    // Unique identifier of the element.\n    Number: {\n        // Element of this relation.\n        element: <a href=\"#!/api/CKEDITOR.dom.element\" rel=\"CKEDITOR.dom.element\" class=\"docClass\">CKEDITOR.dom.element</a>\n        // Conjunction of <a href=\"#!/api/CKEDITOR-property-LINEUTILS_BEFORE\" rel=\"CKEDITOR-property-LINEUTILS_BEFORE\" class=\"docClass\">CKEDITOR.LINEUTILS_BEFORE</a>, <a href=\"#!/api/CKEDITOR-property-LINEUTILS_AFTER\" rel=\"CKEDITOR-property-LINEUTILS_AFTER\" class=\"docClass\">CKEDITOR.LINEUTILS_AFTER</a> and <a href=\"#!/api/CKEDITOR-property-LINEUTILS_INSIDE\" rel=\"CKEDITOR-property-LINEUTILS_INSIDE\" class=\"docClass\">CKEDITOR.LINEUTILS_INSIDE</a>.\n        type: Number\n    },\n    ...\n}\n</code></pre>\n"},"constructor":{"!type":"fn(editor: ?, def: ?)","!doc":"<p>Creates a Finder class instance.</p>\n"}},"getRange":{"!type":"fn(location: ?)","!doc":"<p>Returns a range representing the relation, according to its element\nand type.</p>\n"},"greedySearch":{"!type":"fn()","!doc":"<p>Unline <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" rel=\"CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" class=\"docClass\">traverseSearch</a>, it collects <strong>all</strong> elements from editable's DOM tree\nand runs lookups for every one of them, collecting relations.</p>\n"},"pixelSearch":{"!type":"fn(el: ?, x?: number, y?: number)","!doc":"<p>Iterates vertically pixel-by-pixel within given element starting\nfrom given coordinates, searching for elements in the neighbourhood.\nOnce an element is found it is processed by <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" rel=\"CKEDITOR.plugins.lineutils.finder-method-traverseSearch\" class=\"docClass\">traverseSearch</a>.</p>\n"},"start":{"!type":"fn(callback?: ?)","!doc":"<p>Initializes searching for elements with every mousemove event fired.\nTo stop searching use <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-stop\" rel=\"CKEDITOR.plugins.lineutils.finder-method-stop\" class=\"docClass\">stop</a>.</p>\n"},"stop":{"!type":"fn()","!doc":"<p>Stops observing mouse events attached by <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-method-start\" rel=\"CKEDITOR.plugins.lineutils.finder-method-start\" class=\"docClass\">start</a>.</p>\n"},"store":{"!type":"fn(el: ?, type: number)","!doc":"<p>Stores given relation in <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-property-relations\" rel=\"CKEDITOR.plugins.lineutils.finder-property-relations\" class=\"docClass\">relations</a> object. Processes the relation\nto normalize and avoid duplicates.</p>\n"},"traverseSearch":{"!type":"fn(el: ?)","!doc":"<p>Traverses DOM tree towards root, checking all ancestors\nwith lookup rules, avoiding duplicates. Stores positive relations\nin <a href=\"#!/api/CKEDITOR.plugins.lineutils.finder-property-relations\" rel=\"CKEDITOR.plugins.lineutils.finder-property-relations\" class=\"docClass\">relations</a> object.</p>\n"}},"!doc":"<p>Global namespace holding definitions and global helpers for the lineutils plugin.</p>\n","liner":{"!doc":"<p>An utility that draws horizontal lines in DOM according to locations\nreturned by <a href=\"#!/api/CKEDITOR.plugins.lineutils.locator\" rel=\"CKEDITOR.plugins.lineutils.locator\" class=\"docClass\">CKEDITOR.plugins.lineutils.locator</a>.</p>\n","prototype":{"constructor":{"!type":"fn(editor: ?, def: ?)","!doc":"<p>Creates a Liner class instance.</p>\n"}},"addLine":{"!type":"fn()","!doc":"<p>Adds a new line to DOM.</p>\n"},"cleanup":{"!type":"fn()","!doc":"<p>Hides all visible lines that don't belong to current hash\nand no-longer represent relations (locations).</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.lineutils.liner-method-prepare\" rel=\"CKEDITOR.plugins.lineutils.liner-method-prepare\" class=\"docClass\">prepare</a>.</p>\n"},"getStyle":{"!type":"fn(uid: number, type: number)","!doc":"<p>Creates style set to be used by the line, representing a particular\nrelation (location).</p>\n"},"hideLine":{"!type":"fn(line: ?)","!doc":"<p>Hides a given line.</p>\n"},"hideVisible":{"!type":"fn()","!doc":"<p>Hides all visible lines.</p>\n"},"placeLine":{"!type":"fn(location: ?, callback?: ?)","!doc":"<p>Shows a line at given location.</p>\n"},"prepare":{"!type":"fn(relations: ?, locations: ?)","!doc":"<p>Assigns an unique hash to the instance that is later utilized\nto tell unwanted lines from new ones. This method <strong>must</strong> be called\nbefore a new set of relations is to be visualized so <a href=\"#!/api/CKEDITOR.plugins.lineutils.liner-method-cleanup\" rel=\"CKEDITOR.plugins.lineutils.liner-method-cleanup\" class=\"docClass\">cleanup</a>\neventually hides obsolete lines. This is because lines\nare re-used between <a href=\"#!/api/CKEDITOR.plugins.lineutils.liner-method-placeLine\" rel=\"CKEDITOR.plugins.lineutils.liner-method-placeLine\" class=\"docClass\">placeLine</a> calls and the number of\nnecessary ones may vary according to the number of relations.</p>\n"},"queryViewport":{"!type":"fn()","!doc":"<p>Queries dimensions of the viewport, editable, frame etc.\nthat are used for correct positioning of the line.</p>\n"},"removeAll":{"!type":"fn()","!doc":"<p>Permanently removes all lines (both hidden and visible) from DOM.</p>\n"},"showLine":{"!type":"fn(line: ?)","!doc":"<p>Shows a given line.</p>\n"}},"locator":{"!doc":"<p>An utility that analyses relations found by\n<a href=\"#!/api/CKEDITOR.plugins.lineutils.finder\" rel=\"CKEDITOR.plugins.lineutils.finder\" class=\"docClass\">CKEDITOR.plugins.lineutils.finder</a> and locates them\nin the viewport as horizontal lines of specific coordinates.</p>\n","prototype":{"locations":{"!doc":"\n"},"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates a Locator class instance.</p>\n"}},"locate":{"!type":"fn(relations: ?)","!doc":"<p>Localizes Y coordinate for all types of every single relation and stores\nthem in the object.</p>\n"},"sort":{"!type":"fn(y: number, howMany?: number)","!doc":"<p>Calculates distances from every location to given vertical coordinate\nand sorts locations according to that distance.</p>\n"},"store":{"!type":"fn(uid: number, type: number, y: number)","!doc":"<p>Stores the location in a collection.</p>\n"}}},"link":{"!doc":"<p>Set of Link plugin helpers.</p>\n","prototype":{"emptyAnchorFix":{"!type":"bool","!doc":"<p>For browsers that have editing issues with an empty anchor.</p>\n"},"synAnchorSelector":{"!type":"bool","!doc":"<p>For browsers that do not support CSS3 <code>a[name]:empty()</code>. Note that IE9 is included because of #7783.</p>\n"}},"fakeAnchor":{"!type":"bool","!doc":"<p>Opera and WebKit do not make it possible to select empty anchors. Fake\nelements must be used for them.</p>\n"},"getEditorAnchors":{"!type":"fn(editor: ?)","!doc":"<p>Collects anchors available in the editor (i.e. used by the Link plugin).\nNote that the scope of search is different for inline (the \"global\" document) and\nclassic (<code>iframe</code>-based) editors (the \"inner\" document).</p>\n"},"getLinkAttributes":{"!type":"fn(editor: ?, data: ?)","!doc":"<p>Converts link data into an object which consists of attributes to be set\n(with their values) and an array of attributes to be removed. This method\ncan be used to synthesise or to update any link element with the given data.</p>\n"},"getSelectedLink":{"!type":"fn(editor: ?)","!doc":"<p>Get the surrounding link element of the current selection.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins.link-method-getSelectedLink\" rel=\"CKEDITOR.plugins.link-method-getSelectedLink\" class=\"docClass\">CKEDITOR.plugins.link.getSelectedLink</a>( editor );\n\n// The following selections will all return the link element.\n\n&lt;a href=\"#\"&gt;li^nk&lt;/a&gt;\n&lt;a href=\"#\"&gt;[link]&lt;/a&gt;\ntext[&lt;a href=\"#\"&gt;link]&lt;/a&gt;\n&lt;a href=\"#\"&gt;li[nk&lt;/a&gt;]\n[&lt;b&gt;&lt;a href=\"#\"&gt;li]nk&lt;/a&gt;&lt;/b&gt;]\n[&lt;a href=\"#\"&gt;&lt;b&gt;li]nk&lt;/b&gt;&lt;/a&gt;\n</code></pre>\n"},"parseLinkAttributes":{"!type":"fn(editor: ?, element: ?)","!doc":"<p>Parses attributes of the link element and returns an object representing\nthe current state (data) of the link. This data format is accepted e.g. by\nthe Link dialog window and <a href=\"#!/api/CKEDITOR.plugins.link-method-getLinkAttributes\" rel=\"CKEDITOR.plugins.link-method-getLinkAttributes\" class=\"docClass\">getLinkAttributes</a>.</p>\n"},"tryRestoreFakeAnchor":{"!type":"fn(editor: ?, element: ?)","!doc":"<p>Returns an element representing a real anchor restored from a fake anchor.</p>\n"}},"list":{"!doc":"\n","arrayToList":{"!type":"fn(listArray: ?, database: ?, baseIndex: ?, paragraphMode: ?, dir: ?)","!doc":"<p>Convert our internal representation of a list back to a DOM forest.</p>\n\n<p>@todo params</p>\n"},"listToArray":{"!type":"fn(listNode: ?, database: ?, baseArray: ?, baseIndentLevel: ?, grandparentNode: ?)","!doc":"<p>Convert a DOM list tree into a data structure that is easier to\nmanipulate. This operation should be non-intrusive in the sense that it\ndoes not change the DOM tree, with the exception that it may add some\nmarkers to the list item nodes when database is specified.</p>\n\n<p>@todo params</p>\n"}},"mathjax":{"frameWrapper":{"!doc":"<p>FrameWrapper is responsible for communication between the MathJax library\nand the <code>iframe</code> element that is used for rendering mathematical formulas\ninside the editor.\nIt lets you create visual mathematics by using the\n<a href=\"#!/api/CKEDITOR.plugins.mathjax.frameWrapper-method-setValue\" rel=\"CKEDITOR.plugins.mathjax.frameWrapper-method-setValue\" class=\"docClass\">setValue</a> method.</p>\n","prototype":{"constructor":{"!type":"fn(iFrame: ?, editor: ?)","!doc":"<p>Creates a class instance.</p>\n"}},"setValue":{"!type":"fn(value: string)","!doc":"<p>Sets the TeX value to be displayed in the <code>iframe</code> element inside\nthe editor. This function will activate the MathJax\nlibrary which interprets TeX expressions and converts them into\ntheir representation that is displayed in the editor.</p>\n"}},"!doc":"\n","fixSrc":{"!type":"string","!doc":"<p>A variable to fix problems with <code>iframe</code>. This variable is global\nbecause it is used in both the widget and the dialog window.</p>\n"},"loadingIcon":{"!type":"string","!doc":"<p>Loading indicator image generated by http://preloaders.net.</p>\n"},"copyStyles":{"!type":"fn(from: ?, to: ?)","!doc":"<p>Computes predefined styles and copies them to another element.</p>\n"},"trim":{"!type":"fn(value: string)","!doc":"<p>Trims MathJax value from '(1+1=2)' to '1+1=2'.</p>\n"}},"undo":{"Image":{"!doc":"<p>Undoes the snapshot which represents the current document status.</p>\n","prototype":{"constructor":{"!type":"fn(editor: ?, contentsOnly?: bool)","!doc":"<p>Creates an Image class instance.</p>\n"}}},"UndoManager":{"!doc":"<p>Main logic for the Redo/Undo feature.</p>\n\n<p><strong>Note:</strong> This class is not accessible from the global scope.</p>\n","prototype":{"locked":{"!doc":"<p>When <code>locked</code> property is not <code>null</code>, the undo manager is locked, so\noperations like <code>save</code> or <code>update</code> are forbidden.</p>\n\n<p>The manager can be locked/unlocked by the <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-lock\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-lock\" class=\"docClass\">lock</a> and <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-unlock\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-unlock\" class=\"docClass\">unlock</a> methods.</p>\n"},"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates an UndoManager class instance.</p>\n"}},"lock":{"!type":"fn(dontUpdate?: bool, forceUpdate?: bool)","!doc":"<p>Locks the snapshot stack to prevent any save/update operations and when necessary,\nupdates the tip of the snapshot stack with the DOM changes introduced during the\nlocked period, after the <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-unlock\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-unlock\" class=\"docClass\">unlock</a> method is called.</p>\n\n<p>It is mainly used to ensure any DOM operations that should not be recorded\n(e.g. auto paragraphing) are not added to the stack.</p>\n\n<p><strong>Note:</strong> For every <code>lock</code> call you must call <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-unlock\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-unlock\" class=\"docClass\">unlock</a> once to unlock the undo manager.</p>\n"},"redo":{"!type":"fn()","!doc":"<p>Performs redo on current index.</p>\n"},"redoable":{"!type":"fn()","!doc":"<p>Checks the current redo state.</p>\n"},"reset":{"!type":"fn()","!doc":"<p>Resets the undo stack.</p>\n"},"resetType":{"!type":"fn()","!doc":"<p>Resets all typing variables.</p>\n\n<p>@see <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-type\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-type\" class=\"docClass\">type</a></p>\n"},"save":{"!type":"fn(onContentOnly: ?, image: ?, autoFireChange: ?)","!doc":"<p>Saves a snapshot of the document image for later retrieval.</p>\n"},"type":{"!type":"fn(keystroke: number, isCharacter: bool)","!doc":"<p>Handles keystroke support for the undo manager. It is called whenever a keystroke that\ncan change the editor contents is pressed.</p>\n"},"undo":{"!type":"fn()","!doc":"<p>Performs undo on current index.</p>\n"},"undoable":{"!type":"fn()","!doc":"<p>Checks the current undo state.</p>\n"},"unlock":{"!type":"fn()","!doc":"<p>Unlocks the snapshot stack and checks to amend the last snapshot.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.plugins.undo.UndoManager-method-lock\" rel=\"CKEDITOR.plugins.undo.UndoManager-method-lock\" class=\"docClass\">lock</a> for more details.</p>\n"},"update":{"!type":"fn(newImage?: ?)","!doc":"<p>Updates the last snapshot of the undo stack with the current editor content.</p>\n"}}},"widget":{"definition":{"!doc":"<p>The widget definition from which this instance was created.</p>\n","prototype":{"dialog":{"!type":"string","!doc":"<p>The name of a dialog window which will be opened on <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a>.\nIf not defined, then the <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method will not perform any action and\nwidget's command will insert a new widget without opening a dialog window first.</p>\n"},"downcast":{"!doc":"<p>The function to be used to downcast this widget or\na name of the downcast option from the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcasts\" rel=\"CKEDITOR.plugins.widget.definition-property-downcasts\" class=\"docClass\">downcasts</a> object.</p>\n\n<p>The downcast funciton will be executed in the <a href=\"#!/api/CKEDITOR.plugins.widget\" rel=\"CKEDITOR.plugins.widget\" class=\"docClass\">CKEDITOR.plugins.widget</a> context\nand with <code>widgetElement</code> (<a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>) argument which is\nthe widget's main element.</p>\n\n<p>The function may return an instance of the <a href=\"#!/api/CKEDITOR.htmlParser.node\" rel=\"CKEDITOR.htmlParser.node\" class=\"docClass\">CKEDITOR.htmlParser.node</a> class if the widget\nneeds to be downcasted to a different node than the widget's main element.</p>\n"},"downcasts":{"!doc":"<p>The object containing functions which can be used to downcast this widget.\nOnly the one pointed by the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcast\" rel=\"CKEDITOR.plugins.widget.definition-property-downcast\" class=\"docClass\">downcast</a> property will be used.</p>\n\n<p>In most cases it is appropriate to use <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-downcast\" rel=\"CKEDITOR.plugins.widget.definition-property-downcast\" class=\"docClass\">downcast</a> directly,\nbecause majority of widgets have just one variant of downcasting (or none at all).\nHowever, in some cases the widget author may want to expose more than one variant\nand then this property may be used.</p>\n\n<pre><code>downcasts: {\n    // This downcast may transform the widget into the figure element.\n    figure: function() {\n        // ...\n    },\n    // This downcast may transform the widget into the image element with data-* attributes.\n    image: function() {\n        // ...\n    }\n}\n\n// Then, the widget user may choose one of the downcast options when setting up his editor.\neditor.on( 'widgetDefinition', function( evt ) {\n    if ( evt.data.name == 'image' )\n            evt.data.downcast = 'figure';\n} );\n</code></pre>\n"},"draggable":{"!type":"bool","!doc":"<p>Whether widget should be draggable. Defaults to <code>true</code>.\nIf set to <code>false</code> drag handler will not be displayed when hovering widget.</p>\n"},"edit":{"!doc":"<p>If set, it will be added as the <a href=\"#!/api/CKEDITOR.plugins.widget-event-edit\" rel=\"CKEDITOR.plugins.widget-event-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> event listener.\nThis means that it will be executed when a widget is being edited.\nSee the <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method.</p>\n"},"editables":{"!doc":"<p>An object containing definitions of nested editables (editable name => <a href=\"#!/api/CKEDITOR.plugins.widget.nestedEditable.definition\" rel=\"CKEDITOR.plugins.widget.nestedEditable.definition\" class=\"docClass\">CKEDITOR.plugins.widget.nestedEditable.definition</a>).</p>\n\n<pre><code>editables: {\n    header: 'h1',\n    content: {\n        selector: 'div.content',\n        allowedContent: 'p strong em; a[!href]'\n    }\n}\n</code></pre>\n"},"init":{"!doc":"<p>The method executed while initializing a widget, after a widget instance\nis created, but before it is ready. It is executed before the first\n<a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">CKEDITOR.plugins.widget.data</a> is fired so it is common to\nuse the <code>init</code> method to populate widget data with information loaded from\nthe DOM, like for exmaple:</p>\n\n<pre><code>init: function() {\n    this.setData( 'width', this.element.getStyle( 'width' ) );\n\n    if ( this.parts.caption.getStyle( 'display' ) != 'none' )\n        this.setData( 'showCaption', true );\n}\n</code></pre>\n"},"insert":{"!doc":"<p>The method to be executed when the widget's command is executed in order to insert a new widget\n(widget of this type is not focused). If not defined, then the default action will be\nperformed which means that:</p>\n\n<ul>\n<li>An instance of the widget will be created in a detached <a href=\"#!/api/CKEDITOR.dom.documentFragment\" rel=\"CKEDITOR.dom.documentFragment\" class=\"docClass\">document fragment</a>,</li>\n<li>The <a href=\"#!/api/CKEDITOR.plugins.widget-method-edit\" rel=\"CKEDITOR.plugins.widget-method-edit\" class=\"docClass\">CKEDITOR.plugins.widget.edit</a> method will be called to trigger widget editing,</li>\n<li>The widget element will be inserted into DOM.</li>\n</ul>\n\n"},"mask":{"!type":"bool","!doc":"<p>If set to <code>true</code>, the widget's element will be covered with a transparent mask.\nThis will prevent its content from being clickable, which matters in case\nof special elements like embedded Flash or iframes that generate a separate \"context\".</p>\n"},"name":{"!type":"string","!doc":"<p>Widget definition name. It is automatically set when the definition is\n<a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-add\" rel=\"CKEDITOR.plugins.widget.repository-method-add\" class=\"docClass\">registered</a>.</p>\n"},"pathName":{"!type":"string","!doc":"<p>Widget name displayed in elements path.</p>\n"},"styleToAllowedContentRules":{"!doc":"<p>Function transforming custom widget's <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> instance into\n<a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">CKEDITOR.filter.allowedContentRules</a>. It may be used when a static\n<a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleableElements\" rel=\"CKEDITOR.plugins.widget.definition-property-styleableElements\" class=\"docClass\">styleableElements</a> property is not enough to inform the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>\nwhat HTML features should be enabled when allowing the given style.</p>\n\n<p>In most cases, when style's classes just have to be added to element name(s) used by\nthe widget element, it is recommended to use simpler <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleableElements\" rel=\"CKEDITOR.plugins.widget.definition-property-styleableElements\" class=\"docClass\">styleableElements</a> property.</p>\n\n<p>In order to get parsed classes from the style definition you can use\n<a href=\"#!/api/CKEDITOR.style.customHandlers.widget-method-getClassesArray\" rel=\"CKEDITOR.style.customHandlers.widget-method-getClassesArray\" class=\"docClass\">CKEDITOR.style.customHandlers.widget.getClassesArray</a>.</p>\n\n<p>For example, if you want to use the <a href=\"#!/guide/dev_allowed_content_rules-section-object-format\">object format of allowed content rules</a>,\nto specify <code>match</code> validator, your implementation could look like this:</p>\n\n<pre><code>editor.widgets.add( 'customWidget', {\n    // ...\n\n    styleToAllowedContentRules: funciton( style ) {\n        // Retrieve classes defined in the style.\n        var classes = style.getClassesArray();\n\n        // Do something crazy - for example return allowed content rules in object format,\n        // with custom match property and propertiesOnly flag.\n        return {\n            h1: {\n                match: isWidgetElement,\n                propertiesOnly: true,\n                classes: classes\n            }\n        };\n    }\n} );\n</code></pre>\n"},"styleableElements":{"!type":"string","!doc":"<p>Names of element(s) (separated by spaces) for which the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> should allow classes\ndefined in the widget styles. For example if your widget is upcasted from a simple <code>&lt;div&gt;</code>\nelement, then in order to make it styleable you can set:</p>\n\n<pre><code>editor.widgets.add( 'customWidget', {\n    upcast: function( element ) {\n        return element.name == 'div';\n    },\n\n    // ...\n\n    styleableElements: 'div'\n} );\n</code></pre>\n\n<p>Then, when the following style is defined:</p>\n\n<pre><code>{\n    name: 'Thick border', type: 'widget', widget: 'customWidget',\n    attributes: { 'class': 'thickBorder' }\n}\n</code></pre>\n\n<p>a rule allowing the <code>thickBorder</code> class for <code>div</code> elements will be registered in the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a>.</p>\n\n<p>If you need to have more freedom when transforming widget style to allowed content rules,\nyou can use the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" rel=\"CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" class=\"docClass\">styleToAllowedContentRules</a> callback.</p>\n"},"upcast":{"!doc":"<p>The function to be used to upcast an element to this widget or a\ncomma-separated list of upcast methods from the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcasts\" rel=\"CKEDITOR.plugins.widget.definition-property-upcasts\" class=\"docClass\">upcasts</a> object.</p>\n\n<p>The upcast function <strong>is not</strong> executed in the widget context (because the widget\ndoes not exist yet) and two arguments are passed:</p>\n\n<ul>\n<li><code>element</code> (<a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>) &ndash; The element to be checked.</li>\n<li><code>data</code> (<code>Object</code>) &ndash; The object which can be extended with data which will then be passed to the widget.</li>\n</ul>\n\n\n<p>An element will be upcasted if a function returned <code>true</code> or an instance of\na <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a> if upcasting meant DOM structure changes\n(in this case the widget will be initialized on the returned element).</p>\n"},"upcasts":{"!doc":"<p>The object containing functions which can be used to upcast this widget.\nOnly those pointed by the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcast\" rel=\"CKEDITOR.plugins.widget.definition-property-upcast\" class=\"docClass\">upcast</a> property will be used.</p>\n\n<p>In most cases it is appropriate to use <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-upcast\" rel=\"CKEDITOR.plugins.widget.definition-property-upcast\" class=\"docClass\">upcast</a> directly,\nbecause majority of widgets need just one method.\nHowever, in some cases the widget author may want to expose more than one variant\nand then this property may be used.</p>\n\n<pre><code>upcasts: {\n    // This function may upcast only figure elements.\n    figure: function() {\n        // ...\n    },\n    // This function may upcast only image elements.\n    image: function() {\n        // ...\n    },\n    // More variants...\n}\n\n// Then, widget user may choose which upcast methods will be enabled.\neditor.on( 'widgetDefinition', function( evt ) {\n    if ( evt.data.name == 'image' )\n            evt.data.upcast = 'figure,image'; // Use both methods.\n} );\n</code></pre>\n"}}},"!doc":"<p>An instance of a widget. Together with <a href=\"#!/api/CKEDITOR.plugins.widget.repository\" rel=\"CKEDITOR.plugins.widget.repository\" class=\"docClass\">CKEDITOR.plugins.widget.repository</a> these\ntwo classes constitute the core of the Widget System.</p>\n\n<p>Note that neither the repository nor the widget instances can be created by using their constructors.\nA repository instance is automatically set up by the Widget plugin and is accessible under\n<a href=\"#!/api/CKEDITOR.editor-property-widgets\" rel=\"CKEDITOR.editor-property-widgets\" class=\"docClass\">CKEDITOR.editor.widgets</a>, while widget instances are created and destroyed by the repository.</p>\n\n<p>To create a widget, first you need to <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-add\" rel=\"CKEDITOR.plugins.widget.repository-method-add\" class=\"docClass\">register</a> its\n<a href=\"#!/api/CKEDITOR.plugins.widget.definition\" rel=\"CKEDITOR.plugins.widget.definition\" class=\"docClass\">definition</a>:</p>\n\n<pre><code>editor.widgets.add( 'simplebox', {\n    upcast: function( element ) {\n        // Defines which elements will become widgets.\n        if ( element.hasClass( 'simplebox' ) )\n            return true;\n    },\n    init: function() {\n        // ...\n    }\n} );\n</code></pre>\n\n<p>Once the widget definition is registered, widgets will be automatically\ncreated when loading data:</p>\n\n<pre><code>editor.setData( '&lt;div class=\"simplebox\"&gt;foo&lt;/div&gt;', function() {\n    console.log( editor.widgets.instances ); // -&gt; An object containing one instance.\n} );\n</code></pre>\n\n<p>It is also possible to create instances during runtime by using a command\n(if a <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-template\" rel=\"CKEDITOR.plugins.widget.definition-property-template\" class=\"docClass\">CKEDITOR.plugins.widget.definition.template</a> property was defined):</p>\n\n<pre><code>// You can execute an automatically defined command to\n// insert a new simplebox widget or edit the one currently focused.\neditor.execCommand( 'simplebox' );\n</code></pre>\n\n<p>Or in a completely custom way:</p>\n\n<pre><code>var element = editor.createElement( 'div' );\neditor.insertElement( element );\nvar widget = editor.widgets.initOn( element, 'simplebox' );\n</code></pre>\n","data":{"!doc":"<p>Widget's data object.</p>\n\n<p>The data can only be set by using the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> method.\nChanges made to the data fire the <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">data</a> event.</p>\n"},"dataReady":{"!type":"bool","!doc":"<p>Indicates if a widget is data-ready. Set to <code>true</code> when data from all sources\n(<a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-defaults\" rel=\"CKEDITOR.plugins.widget.definition-property-defaults\" class=\"docClass\">CKEDITOR.plugins.widget.definition.defaults</a>, set in the\n<a href=\"#!/api/CKEDITOR.plugins.widget-property-init\" rel=\"CKEDITOR.plugins.widget-property-init\" class=\"docClass\">init</a> method, loaded from the widget's element and startup data coming from the constructor)\nare finally loaded. This is immediately followed by the first <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">data</a>.</p>\n"},"editor":{"!doc":"<p>The editor instance.</p>\n"},"element":{"!doc":"<p>The widget element &mdash; the element on which the widget was initialized.</p>\n"},"focusedEditable":{"!doc":"<p>The nested editable element which is currently focused.</p>\n"},"id":{"!type":"number","!doc":"<p>This widget's unique (per editor instance) ID.</p>\n"},"inited":{"!type":"bool","!doc":"<p>Whether a widget instance was initialized. This means that:</p>\n\n<ul>\n<li>An instance was created,</li>\n<li>Its properties were set,</li>\n<li>The <code>init</code> method was executed.</li>\n</ul>\n\n\n<p><strong>Note</strong>: The first <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">data</a> event could not be fired yet which\nmeans that the widget's DOM has not been set up yet. Wait for the <a href=\"#!/api/CKEDITOR.plugins.widget-event-ready\" rel=\"CKEDITOR.plugins.widget-event-ready\" class=\"docClass\">ready</a>\nevent to be notified when a widget is fully initialized and ready.</p>\n\n<p><strong>Note</strong>: Use the <a href=\"#!/api/CKEDITOR.plugins.widget-method-isInited\" rel=\"CKEDITOR.plugins.widget-method-isInited\" class=\"docClass\">isInited</a> method to check whether a widget is initialized and\nhas not been destroyed.</p>\n"},"inline":{"!type":"bool","!doc":"<p>Whether this widget is an inline widget (based on an inline element unless\nforced otherwise by <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-inline\" rel=\"CKEDITOR.plugins.widget.definition-property-inline\" class=\"docClass\">CKEDITOR.plugins.widget.definition.inline</a>).</p>\n\n<p><strong>Note:</strong> This option does not allow to turn a block element into an inline widget.\nHowever, it makes it possible to turn an inline element into a block widget or to\nforce a correct type in case when automatic recognition fails.</p>\n"},"prototype":{"parts":{"!doc":"<p>An object of widget component elements.</p>\n\n<p>For every <code>partName =&gt; selector</code> pair in <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-parts\" rel=\"CKEDITOR.plugins.widget.definition-property-parts\" class=\"docClass\">CKEDITOR.plugins.widget.definition.parts</a>,\none <code>partName =&gt; element</code> pair is added to this object during the widget initialization.</p>\n"},"template":{"!doc":"<p>The template which will be used to create a new widget element (when the widget's command is executed).\nIt will be populated with <a href=\"#!/api/CKEDITOR.plugins.widget-property-defaults\" rel=\"CKEDITOR.plugins.widget-property-defaults\" class=\"docClass\">default values</a>.</p>\n"},"wrapper":{"!doc":"<p>The widget wrapper &mdash; a non-editable <code>div</code> or <code>span</code> element (depending on <a href=\"#!/api/CKEDITOR.plugins.widget-property-inline\" rel=\"CKEDITOR.plugins.widget-property-inline\" class=\"docClass\">inline</a>)\nwhich is a parent of the <a href=\"#!/api/CKEDITOR.plugins.widget-property-element\" rel=\"CKEDITOR.plugins.widget-property-element\" class=\"docClass\">element</a> and widget compontents like the drag handler and the <a href=\"#!/api/CKEDITOR.plugins.widget-property-mask\" rel=\"CKEDITOR.plugins.widget-property-mask\" class=\"docClass\">mask</a>.\nIt is the outermost widget element.</p>\n"},"constructor":{"!type":"fn(widgetsRepo: ?, id: number, element: ?, widgetDef: ?, startupData?: ?)","!doc":"<p>Creates an instance of the widget class. Do not use it directly, but instead initialize widgets\nby using the <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-initOn\" rel=\"CKEDITOR.plugins.widget.repository-method-initOn\" class=\"docClass\">CKEDITOR.plugins.widget.repository.initOn</a> method or by the upcasting system.</p>\n"}},"ready":{"!type":"bool","!doc":"<p>Whether a widget instance is ready. This means that the widget is <a href=\"#!/api/CKEDITOR.plugins.widget-property-inited\" rel=\"CKEDITOR.plugins.widget-property-inited\" class=\"docClass\">inited</a> and\nthat its DOM was finally set up.</p>\n\n<p><strong>Note:</strong> Use the <a href=\"#!/api/CKEDITOR.plugins.widget-method-isReady\" rel=\"CKEDITOR.plugins.widget-method-isReady\" class=\"docClass\">isReady</a> method to check whether a widget is ready and\nhas not been destroyed.</p>\n"},"repository":{"!doc":"<p>Widget repository. It keeps track of all <a href=\"#!/api/CKEDITOR.plugins.widget.repository-property-registered\" rel=\"CKEDITOR.plugins.widget.repository-property-registered\" class=\"docClass\">registered widget definitions</a> and\n<a href=\"#!/api/CKEDITOR.plugins.widget.repository-property-instances\" rel=\"CKEDITOR.plugins.widget.repository-property-instances\" class=\"docClass\">initialized instances</a>. An instance of the repository is available under\nthe <a href=\"#!/api/CKEDITOR.editor-property-widgets\" rel=\"CKEDITOR.editor-property-widgets\" class=\"docClass\">CKEDITOR.editor.widgets</a> property.</p>\n","MIN_SELECTION_CHECK_INTERVAL":{"!type":"number","!doc":"<p>Minimum interval between selection checks.</p>\n"},"editor":{"!doc":"<p>The editor instance for which this repository was created.</p>\n"},"focused":{"!doc":"<p>The focused widget instance. See also <a href=\"#!/api/CKEDITOR.plugins.widget-event-focus\" rel=\"CKEDITOR.plugins.widget-event-focus\" class=\"docClass\">CKEDITOR.plugins.widget.focus</a>\nand <a href=\"#!/api/CKEDITOR.plugins.widget-event-blur\" rel=\"CKEDITOR.plugins.widget-event-blur\" class=\"docClass\">CKEDITOR.plugins.widget.blur</a> events.</p>\n\n<pre><code>editor.on( 'selectionChange', function() {\n    if ( editor.widgets.focused ) {\n        // Do something when a widget is focused...\n    }\n} );\n</code></pre>\n"},"instances":{"!doc":"<p>An object containing initialized widget instances (widget id => <a href=\"#!/api/CKEDITOR.plugins.widget\" rel=\"CKEDITOR.plugins.widget\" class=\"docClass\">CKEDITOR.plugins.widget</a>).</p>\n"},"registered":{"!doc":"<p>A hash of registered widget definitions (definition name => <a href=\"#!/api/CKEDITOR.plugins.widget.definition\" rel=\"CKEDITOR.plugins.widget.definition\" class=\"docClass\">CKEDITOR.plugins.widget.definition</a>).</p>\n\n<p>To register a definition use the <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-add\" rel=\"CKEDITOR.plugins.widget.repository-method-add\" class=\"docClass\">add</a> method.</p>\n"},"selected":{"!doc":"<p>An array of selected widget instances.</p>\n"},"widgetHoldingFocusedEditable":{"!doc":"<p>The widget instance that contains the nested editable which is currently focused.</p>\n"},"prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates a widget repository instance. Note that the widget plugin automatically\ncreates a repository instance which is available under the <a href=\"#!/api/CKEDITOR.editor-property-widgets\" rel=\"CKEDITOR.editor-property-widgets\" class=\"docClass\">CKEDITOR.editor.widgets</a> property.</p>\n"}},"add":{"!type":"fn(name: string, widgetDef: ?)","!doc":"<p>Adds a widget definition to the repository. Fires the <a href=\"#!/api/CKEDITOR.editor-event-widgetDefinition\" rel=\"CKEDITOR.editor-event-widgetDefinition\" class=\"docClass\">CKEDITOR.editor.widgetDefinition</a> event\nwhich allows to modify the widget definition which is going to be registered.</p>\n"},"addUpcastCallback":{"!type":"fn(callback: ?)","!doc":"<p>Adds a callback for element upcasting. Each callback will be executed\nfor every element which is later tested by upcast methods. If a callback\nreturns <code>false</code>, the element will not be upcasted.</p>\n\n<pre><code>// Images with the \"banner\" class will not be upcasted (e.g. to the image widget).\neditor.widgets.addUpcastCallback( function( element ) {\n    if ( element.name == 'img' &amp;&amp; element.hasClass( 'banner' ) )\n        return false;\n} );\n</code></pre>\n"},"checkSelection":{"!type":"fn()","!doc":"<p>Checks the selection to update widget states (selection and focus).</p>\n\n<p>This method is triggered by the <a href=\"#!/api/CKEDITOR.plugins.widget.repository-event-checkSelection\" rel=\"CKEDITOR.plugins.widget.repository-event-checkSelection\" class=\"docClass\">checkSelection</a> event.</p>\n"},"checkWidgets":{"!type":"fn(options?: ?)","!doc":"<p>Checks if all widget instances are still present in the DOM.\nDestroys those instances that are not present.\nReinitializes widgets on widget wrappers for which widget instances\ncannot be found.</p>\n\n<p>This method triggers the <a href=\"#!/api/CKEDITOR.plugins.widget.repository-event-checkWidgets\" rel=\"CKEDITOR.plugins.widget.repository-event-checkWidgets\" class=\"docClass\">checkWidgets</a> event whose listeners\ncan cancel the method's execution or modify its options.</p>\n"},"del":{"!type":"fn(widget: ?)","!doc":"<p>Removes the widget from the editor and moves the selection to the closest\neditable position if the widget was focused before.</p>\n"},"destroy":{"!type":"fn(widget: ?, offline?: bool)","!doc":"<p>Destroys the widget instance.</p>\n"},"destroyAll":{"!type":"fn(offline?: bool)","!doc":"<p>Destroys all widget instances.</p>\n"},"finalizeCreation":{"!type":"fn(container: ?)","!doc":"<p>Finalizes a process of widget creation. This includes:</p>\n\n<ul>\n<li>inserting widget element into editor,</li>\n<li>marking widget instance as ready (see <a href=\"#!/api/CKEDITOR.plugins.widget-event-ready\" rel=\"CKEDITOR.plugins.widget-event-ready\" class=\"docClass\">CKEDITOR.plugins.widget.ready</a>),</li>\n<li>focusing widget instance.</li>\n</ul>\n\n\n<p>This method is used by the default widget's command and is called\nafter widget's dialog (if set) is closed. It may also be used in a\ncustomized process of widget creation and insertion.</p>\n\n<pre><code>widget.once( 'edit', function() {\n    // Finalize creation only of not ready widgets.\n    if ( widget.isReady() )\n        return;\n\n    // Cancel edit event to prevent automatic widget insertion.\n    evt.cancel();\n\n    CustomDialog.open( widget.data, function saveCallback( savedData ) {\n        // Cache the container, because widget may be destroyed while saving data,\n        // if this process will require some deep transformations.\n        var container = widget.wrapper.getParent();\n\n        widget.setData( savedData );\n\n        // Widget will be retrieved from container and inserted into editor.\n        editor.widgets.finalizeCreation( container );\n    } );\n} );\n</code></pre>\n"},"getByElement":{"!type":"fn(element: ?, checkWrapperOnly?: bool)","!doc":"<p>Finds a widget instance which contains a given element. The element will be the <a href=\"#!/api/CKEDITOR.plugins.widget-property-wrapper\" rel=\"CKEDITOR.plugins.widget-property-wrapper\" class=\"docClass\">wrapper</a>\nof the returned widget or a descendant of this <a href=\"#!/api/CKEDITOR.plugins.widget-property-wrapper\" rel=\"CKEDITOR.plugins.widget-property-wrapper\" class=\"docClass\">wrapper</a>.</p>\n\n<pre><code>editor.widgets.getByElement( someWidget.wrapper ); // -&gt; someWidget\neditor.widgets.getByElement( someWidget.parts.caption ); // -&gt; someWidget\n\n// Check wrapper only:\neditor.widgets.getByElement( someWidget.wrapper, true ); // -&gt; someWidget\neditor.widgets.getByElement( someWidget.parts.caption, true ); // -&gt; null\n</code></pre>\n"},"initOn":{"!type":"fn(element: ?, widgetDef?: ?, startupData?: ?)","!doc":"<p>Initializes a widget on a given element if the widget has not been initialized on it yet.</p>\n"},"initOnAll":{"!type":"fn(container?: ?)","!doc":"<p>Initializes widgets on all elements which were wrapped by <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-wrapElement\" rel=\"CKEDITOR.plugins.widget.repository-method-wrapElement\" class=\"docClass\">wrapElement</a> and\nhave not been initialized yet.</p>\n"},"parseElementClasses":{"!type":"fn(classes: string)","!doc":"<p>Parses element classes string and returns an object\nwhose keys contain class names. Skips all <code>cke_*</code> classes.</p>\n\n<p>This method is used by the <a href=\"#!/api/CKEDITOR.plugins.widget-method-getClasses\" rel=\"CKEDITOR.plugins.widget-method-getClasses\" class=\"docClass\">CKEDITOR.plugins.widget.getClasses</a> method and\nmay be used when overriding that method.</p>\n"},"wrapElement":{"!type":"fn(element: ?, widgetName?: string)","!doc":"<p>Wraps an element with a widget's non-editable container.</p>\n\n<p>If this method is called on an <a href=\"#!/api/CKEDITOR.htmlParser.element\" rel=\"CKEDITOR.htmlParser.element\" class=\"docClass\">CKEDITOR.htmlParser.element</a>, then it will\nalso take care of fixing the DOM after wrapping (the wrapper may not be allowed in element's parent).</p>\n"}},"addClass":{"!type":"fn(className: string)","!doc":"<p>Adds a class to the widget element. This method is used by\nthe <a href=\"#!/api/CKEDITOR.plugins.widget-method-applyStyle\" rel=\"CKEDITOR.plugins.widget-method-applyStyle\" class=\"docClass\">applyStyle</a> method and should be overriden by widgets\nwhich should handle classes differently (e.g. add them to other elements).</p>\n\n<p><strong>Note</strong>: This method should not be used directly. Use the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> method to\nset the <code>classes</code> property. Read more in the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> documentation.</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeClass\" rel=\"CKEDITOR.plugins.widget-method-removeClass\" class=\"docClass\">removeClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-hasClass\" rel=\"CKEDITOR.plugins.widget-method-hasClass\" class=\"docClass\">hasClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-getClasses\" rel=\"CKEDITOR.plugins.widget-method-getClasses\" class=\"docClass\">getClasses</a>.</p>\n"},"applyStyle":{"!type":"fn(style: ?)","!doc":"<p>Applies the specified style to the widget. It is highly recommended to use the\n<a href=\"#!/api/CKEDITOR.editor-method-applyStyle\" rel=\"CKEDITOR.editor-method-applyStyle\" class=\"docClass\">CKEDITOR.editor.applyStyle</a> or <a href=\"#!/api/CKEDITOR.style-method-apply\" rel=\"CKEDITOR.style-method-apply\" class=\"docClass\">CKEDITOR.style.apply</a> methods instead of\nusing this method directly, because unlike editor's and style's methods, this one\ndoes not perform any checks.</p>\n\n<p>By default this method handles only classes defined in the style. It clones existing\nclasses which are stored in the <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">widget data</a>'s <code>classes</code> property,\nadds new classes, and calls the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> method if at least one new class was added.\nThen, using the <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">data</a> event listener widget applies modifications passing\nnew classes to the <a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a> method.</p>\n\n<p>If you need to handle classes differently than in the default way, you can override the\n<a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a> and related methods. You can also handle other style properties than <code>classes</code>\nby overriding this method.</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-checkStyleActive\" rel=\"CKEDITOR.plugins.widget-method-checkStyleActive\" class=\"docClass\">checkStyleActive</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeStyle\" rel=\"CKEDITOR.plugins.widget-method-removeStyle\" class=\"docClass\">removeStyle</a>.</p>\n"},"checkStyleActive":{"!type":"fn(style: ?)","!doc":"<p>Checks if the specified style is applied to this widget. It is highly recommended to use the\n<a href=\"#!/api/CKEDITOR.style-method-checkActive\" rel=\"CKEDITOR.style-method-checkActive\" class=\"docClass\">CKEDITOR.style.checkActive</a> method instead of using this method directly,\nbecause unlike style's method, this one does not perform any checks.</p>\n\n<p>By default this method handles only classes defined in the style and passes\nthem to the <a href=\"#!/api/CKEDITOR.plugins.widget-method-hasClass\" rel=\"CKEDITOR.plugins.widget-method-hasClass\" class=\"docClass\">hasClass</a> method. You can override these methods to handle classes\ndifferently or to handle more of the style properties.</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-applyStyle\" rel=\"CKEDITOR.plugins.widget-method-applyStyle\" class=\"docClass\">applyStyle</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeStyle\" rel=\"CKEDITOR.plugins.widget-method-removeStyle\" class=\"docClass\">removeStyle</a>.</p>\n"},"destroy":{"!type":"fn(offline?: bool)","!doc":"<p>Destroys this widget instance.</p>\n\n<p>Use <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-destroy\" rel=\"CKEDITOR.plugins.widget.repository-method-destroy\" class=\"docClass\">CKEDITOR.plugins.widget.repository.destroy</a> when possible instead of this method.</p>\n\n<p>This method fires the {#event-destroy} event.</p>\n"},"destroyEditable":{"!type":"fn(editableName: string, offline?: bool)","!doc":"<p>Destroys a nested editable.</p>\n"},"edit":{"!type":"fn()","!doc":"<p>Starts widget editing.</p>\n\n<p>This method fires the <a href=\"#!/api/CKEDITOR.plugins.widget-event-edit\" rel=\"CKEDITOR.plugins.widget-event-edit\" class=\"docClass\">edit</a> event\nwhich may be cancelled in order to prevent it from opening a dialog window.</p>\n\n<p>The dialog window name is obtained from the event's data <code>dialog</code> property or\nfrom <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-dialog\" rel=\"CKEDITOR.plugins.widget.definition-property-dialog\" class=\"docClass\">CKEDITOR.plugins.widget.definition.dialog</a>.</p>\n"},"focus":{"!type":"fn()","!doc":"<p>Focuses a widget by selecting it.</p>\n"},"getClasses":{"!type":"fn()","!doc":"<p>Returns widget element classes parsed to an object. This method\nis used to populate the <code>classes</code> property of widget's <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">data</a>.</p>\n\n<p>This method reuses <a href=\"#!/api/CKEDITOR.plugins.widget.repository-method-parseElementClasses\" rel=\"CKEDITOR.plugins.widget.repository-method-parseElementClasses\" class=\"docClass\">CKEDITOR.plugins.widget.repository.parseElementClasses</a>.\nIt should be overriden if a widget should handle classes differently (e.g. on other elements).</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeClass\" rel=\"CKEDITOR.plugins.widget-method-removeClass\" class=\"docClass\">removeClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-hasClass\" rel=\"CKEDITOR.plugins.widget-method-hasClass\" class=\"docClass\">hasClass</a>.</p>\n"},"hasClass":{"!type":"fn(className: string, Whether: bool)","!doc":"<p>Checks if the widget element has specified class. This method is used by\nthe <a href=\"#!/api/CKEDITOR.plugins.widget-method-checkStyleActive\" rel=\"CKEDITOR.plugins.widget-method-checkStyleActive\" class=\"docClass\">checkStyleActive</a> method and should be overriden by widgets\nwhich should handle classes differently (e.g. on other elements).</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeClass\" rel=\"CKEDITOR.plugins.widget-method-removeClass\" class=\"docClass\">removeClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-getClasses\" rel=\"CKEDITOR.plugins.widget-method-getClasses\" class=\"docClass\">getClasses</a>.</p>\n"},"initEditable":{"!type":"fn(editableName: string, definition: ?)","!doc":"<p>Initializes a nested editable.</p>\n\n<p><strong>Note</strong>: Only elements from <a href=\"#!/api/CKEDITOR.dtd-property-S-editable\" rel=\"CKEDITOR.dtd-property-S-editable\" class=\"docClass\">CKEDITOR.dtd.$editable</a> may become editables.</p>\n"},"isInited":{"!type":"fn()","!doc":"<p>Checks if a widget has already been initialized and has not been destroyed yet.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.plugins.widget-property-inited\" rel=\"CKEDITOR.plugins.widget-property-inited\" class=\"docClass\">inited</a> for more details.</p>\n"},"isReady":{"!type":"fn()","!doc":"<p>Checks if a widget is ready and has not been destroyed yet.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.plugins.widget-property-ready\" rel=\"CKEDITOR.plugins.widget-property-ready\" class=\"docClass\">ready</a> for more details.</p>\n"},"removeClass":{"!type":"fn(className: string)","!doc":"<p>Removes a class from the widget element. This method is used by\nthe <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeStyle\" rel=\"CKEDITOR.plugins.widget-method-removeStyle\" class=\"docClass\">removeStyle</a> method and should be overriden by widgets\nwhich should handle classes differently (e.g. on other elements).</p>\n\n<p><strong>Note</strong>: This method should not be used directly. Use the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> method to\nset the <code>classes</code> property. Read more in the <a href=\"#!/api/CKEDITOR.plugins.widget-method-setData\" rel=\"CKEDITOR.plugins.widget-method-setData\" class=\"docClass\">setData</a> documentation.</p>\n\n<p>See also: <a href=\"#!/api/CKEDITOR.plugins.widget-method-hasClass\" rel=\"CKEDITOR.plugins.widget-method-hasClass\" class=\"docClass\">hasClass</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a>.</p>\n"},"removeStyle":{"!type":"fn(style: ?)","!doc":"<p>Removes the specified style from the widget. It is highly recommended to use the\n<a href=\"#!/api/CKEDITOR.editor-method-removeStyle\" rel=\"CKEDITOR.editor-method-removeStyle\" class=\"docClass\">CKEDITOR.editor.removeStyle</a> or <a href=\"#!/api/CKEDITOR.style-method-remove\" rel=\"CKEDITOR.style-method-remove\" class=\"docClass\">CKEDITOR.style.remove</a> methods instead of\nusing this method directly, because unlike editor's and style's methods, this one\ndoes not perform any checks.</p>\n\n<p>Read more about how applying/removing styles works in the <a href=\"#!/api/CKEDITOR.plugins.widget-method-applyStyle\" rel=\"CKEDITOR.plugins.widget-method-applyStyle\" class=\"docClass\">applyStyle</a> method documentation.</p>\n\n<p>See also <a href=\"#!/api/CKEDITOR.plugins.widget-method-checkStyleActive\" rel=\"CKEDITOR.plugins.widget-method-checkStyleActive\" class=\"docClass\">checkStyleActive</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-applyStyle\" rel=\"CKEDITOR.plugins.widget-method-applyStyle\" class=\"docClass\">applyStyle</a>, <a href=\"#!/api/CKEDITOR.plugins.widget-method-getClasses\" rel=\"CKEDITOR.plugins.widget-method-getClasses\" class=\"docClass\">getClasses</a>.</p>\n"},"setData":{"!type":"fn(keyOrData: ?, value: ?)","!doc":"<p>Sets widget value(s) in the <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">data</a> object.\nIf the given value(s) modifies current ones, the <a href=\"#!/api/CKEDITOR.plugins.widget-event-data\" rel=\"CKEDITOR.plugins.widget-event-data\" class=\"docClass\">data</a> event is fired.</p>\n\n<pre><code>this.setData( 'align', 'left' );\nthis.data.align; // -&gt; 'left'\n\nthis.setData( { align: 'right', opened: false } );\nthis.data.align; // -&gt; 'right'\nthis.data.opened; // -&gt; false\n</code></pre>\n\n<p>Set values are stored in <a href=\"#!/api/CKEDITOR.plugins.widget-property-element\" rel=\"CKEDITOR.plugins.widget-property-element\" class=\"docClass\">element</a>'s attribute (<code>data-cke-widget-data</code>),\nin a JSON string, therefore <a href=\"#!/api/CKEDITOR.plugins.widget-property-data\" rel=\"CKEDITOR.plugins.widget-property-data\" class=\"docClass\">data</a> should contain\nonly serializable data.</p>\n\n<p><strong>Note:</strong> A special data property, <code>classes</code>, exists. It contains an object with\nclasses which were returned by the <a href=\"#!/api/CKEDITOR.plugins.widget-method-getClasses\" rel=\"CKEDITOR.plugins.widget-method-getClasses\" class=\"docClass\">getClasses</a> method during the widget initialization.\nThis property is then used by the <a href=\"#!/api/CKEDITOR.plugins.widget-method-applyStyle\" rel=\"CKEDITOR.plugins.widget-method-applyStyle\" class=\"docClass\">applyStyle</a> and <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeStyle\" rel=\"CKEDITOR.plugins.widget-method-removeStyle\" class=\"docClass\">removeStyle</a> methods.\nWhen it is changed (the reference to object must be changed!), the widget updates its classes by\nusing the <a href=\"#!/api/CKEDITOR.plugins.widget-method-addClass\" rel=\"CKEDITOR.plugins.widget-method-addClass\" class=\"docClass\">addClass</a> and <a href=\"#!/api/CKEDITOR.plugins.widget-method-removeClass\" rel=\"CKEDITOR.plugins.widget-method-removeClass\" class=\"docClass\">removeClass</a> methods.</p>\n\n<pre><code>// Adding a new class.\nvar classes = <a href=\"#!/api/CKEDITOR.tools-method-clone\" rel=\"CKEDITOR.tools-method-clone\" class=\"docClass\">CKEDITOR.tools.clone</a>( widget.data.classes );\nclasses.newClass = 1;\nwidget.setData( 'classes', classes );\n\n// Removing a class.\nvar classes = <a href=\"#!/api/CKEDITOR.tools-method-clone\" rel=\"CKEDITOR.tools-method-clone\" class=\"docClass\">CKEDITOR.tools.clone</a>( widget.data.classes );\ndelete classes.newClass;\nwidget.setData( 'classes', classes );\n</code></pre>\n"},"setFocused":{"!type":"fn(selected: bool)","!doc":"<p>Changes the widget's focus state. This method is executed automatically after\na widget has been focused by the <a href=\"#!/api/CKEDITOR.plugins.widget-method-focus\" rel=\"CKEDITOR.plugins.widget-method-focus\" class=\"docClass\">focus</a> method or a selection was moved\nout of the widget.</p>\n"},"setSelected":{"!type":"fn(selected: bool)","!doc":"<p>Changes the widget's select state. This method is executed automatically after\na widget has been selected by the <a href=\"#!/api/CKEDITOR.plugins.widget-method-focus\" rel=\"CKEDITOR.plugins.widget-method-focus\" class=\"docClass\">focus</a> method or the selection\nwas moved out of widget.</p>\n"},"updateDragHandlerPosition":{"!type":"fn()","!doc":"<p>Repositions drag handler according to the widget's element position. Should be called from events, like mouseover.</p>\n"},"nestedEditable":{"definition":{"!doc":"<p>This is an abstract class that describes the definition of a widget's nested editable.\nIt is a type of values in the <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-editables\" rel=\"CKEDITOR.plugins.widget.definition-property-editables\" class=\"docClass\">CKEDITOR.plugins.widget.definition.editables</a> object.</p>\n\n<p>In the simplest case the definition is a string which is a CSS selector used to\nfind an element that will become a nested editable inside the widget. Note that\nthe widget element can be a nested editable, too.</p>\n\n<p>In the more advanced case a definition is an object with a required <code>selector</code> property.</p>\n\n<pre><code>editables: {\n    header: 'h1',\n    content: {\n        selector: 'div.content',\n        allowedContent: 'p strong em; a[!href]'\n    }\n}\n</code></pre>\n","prototype":{"allowedContent":{"!doc":"<p>The <a href=\"#!/guide/dev_advanced_content_filter\">Advanced Content Filter</a> rules\nwhich will be used to limit the content allowed in this nested editable.\nThis option is similar to <a href=\"#!/api/CKEDITOR.config-cfg-allowedContent\" rel=\"CKEDITOR.config-cfg-allowedContent\" class=\"docClass\">CKEDITOR.config.allowedContent</a> and one can\nuse it to limit the editor features available in the nested editable.</p>\n"},"pathName":{"!type":"string","!doc":"<p>Nested editable name displayed in elements path.</p>\n"},"selector":{"!type":"string","!doc":"<p>The CSS selector used to find an element which will become a nested editable.</p>\n"}}},"!doc":"<p>The wrapper class for editable elements inside widgets.</p>\n\n<p>Do not use directly. Use <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-editables\" rel=\"CKEDITOR.plugins.widget.definition-property-editables\" class=\"docClass\">CKEDITOR.plugins.widget.definition.editables</a> or\n<a href=\"#!/api/CKEDITOR.plugins.widget-method-initEditable\" rel=\"CKEDITOR.plugins.widget-method-initEditable\" class=\"docClass\">CKEDITOR.plugins.widget.initEditable</a>.</p>\n","prototype":{"editor":{"!doc":"<p>The editor instance.</p>\n"},"enterMode":{"!type":"number","!doc":"<p>The enter mode active in this editable.\nIt is determined from editable's name (whether it is a blockless editable),\nits allowed content rules (if defined) and the default editor's mode.</p>\n"},"filter":{"!doc":"<p>The filter instance if allowed content rules were defined.</p>\n"},"shiftEnterMode":{"!type":"number","!doc":"<p>The shift enter move active in this editable.</p>\n"},"constructor":{"!type":"fn(editor: ?, element: ?, config: ?)","!doc":"\n"}},"getData":{"!type":"fn()","!doc":"<p>Gets the editable data. Like <a href=\"#!/api/CKEDITOR.plugins.widget.nestedEditable-method-setData\" rel=\"CKEDITOR.plugins.widget.nestedEditable-method-setData\" class=\"docClass\">setData</a>, this method will process and filter the data.</p>\n"},"setData":{"!type":"fn(data: string)","!doc":"<p>Sets the editable data. The data will be passed through the <a href=\"#!/api/CKEDITOR.editor-property-dataProcessor\" rel=\"CKEDITOR.editor-property-dataProcessor\" class=\"docClass\">CKEDITOR.editor.dataProcessor</a>\nand the <a href=\"#!/api/CKEDITOR.editor-property-filter\" rel=\"CKEDITOR.editor-property-filter\" class=\"docClass\">CKEDITOR.editor.filter</a>. This ensures that the data was filtered and prepared to be\nedited like the <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">editor data</a>.</p>\n"}}}},"resourceManager":{"_":{"!doc":"\n"},"basePath":{"!type":"string","!doc":"<p>The base directory containing all resources.</p>\n"},"externals":{"!doc":"<p>Contains references to all resources that have already been registered\nwith <a href=\"#!/api/CKEDITOR.resourceManager-method-addExternal\" rel=\"CKEDITOR.resourceManager-method-addExternal\" class=\"docClass\">addExternal</a>.</p>\n"},"fileName":{"!type":"string","!doc":"<p>The name used for resource files.</p>\n"},"loaded":{"!doc":"<p>Contains references to all resources that have already been loaded\nwith <a href=\"#!/api/CKEDITOR.resourceManager-method-load\" rel=\"CKEDITOR.resourceManager-method-load\" class=\"docClass\">load</a>.</p>\n"},"registered":{"!doc":"<p>Contains references to all resources that have already been registered\nwith <a href=\"#!/api/CKEDITOR.resourceManager-method-add\" rel=\"CKEDITOR.resourceManager-method-add\" class=\"docClass\">add</a>.</p>\n"},"prototype":{"constructor":{"!type":"fn(basePath: string, fileName: string)","!doc":"<p>Creates a resourceManager class instance.</p>\n"}},"add":{"!type":"fn(name: string, definition?: ?)","!doc":"<p>Registers a resource.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', { ... plugin definition ... } );\n</code></pre>\n"},"addExternal":{"!type":"fn(names: string, path: string, fileName?: string)","!doc":"<p>Registers one or more resources to be loaded from an external path\ninstead of the core base path.</p>\n\n<pre><code>// Loads a plugin from '/myplugin/samples/plugin.js'.\n<a href=\"#!/api/CKEDITOR.plugins-method-addExternal\" rel=\"CKEDITOR.plugins-method-addExternal\" class=\"docClass\">CKEDITOR.plugins.addExternal</a>( 'sample', '/myplugins/sample/' );\n\n// Loads a plugin from '/myplugin/samples/my_plugin.js'.\n<a href=\"#!/api/CKEDITOR.plugins-method-addExternal\" rel=\"CKEDITOR.plugins-method-addExternal\" class=\"docClass\">CKEDITOR.plugins.addExternal</a>( 'sample', '/myplugins/sample/', 'my_plugin.js' );\n\n// Loads a plugin from '/myplugin/samples/my_plugin.js'.\n<a href=\"#!/api/CKEDITOR.plugins-method-addExternal\" rel=\"CKEDITOR.plugins-method-addExternal\" class=\"docClass\">CKEDITOR.plugins.addExternal</a>( 'sample', '/myplugins/sample/my_plugin.js', '' );\n</code></pre>\n"},"get":{"!type":"fn(name: string)","!doc":"<p>Gets the definition of a specific resource.</p>\n\n<pre><code>var definition = <a href=\"#!/api/CKEDITOR.plugins-method-get\" rel=\"CKEDITOR.plugins-method-get\" class=\"docClass\">CKEDITOR.plugins.get</a>( 'sample' );\n</code></pre>\n"},"getFilePath":{"!type":"fn(name: string)","!doc":"<p>Get the file path for a specific loaded resource.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.plugins-method-getFilePath\" rel=\"CKEDITOR.plugins-method-getFilePath\" class=\"docClass\">CKEDITOR.plugins.getFilePath</a>( 'sample' ) ); // '&lt;editor path&gt;/plugins/sample/plugin.js'\n</code></pre>\n"},"getPath":{"!type":"fn(name: string)","!doc":"<p>Get the folder path for a specific loaded resource.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.plugins-method-getPath\" rel=\"CKEDITOR.plugins-method-getPath\" class=\"docClass\">CKEDITOR.plugins.getPath</a>( 'sample' ) ); // '&lt;editor path&gt;/plugins/sample/'\n</code></pre>\n"},"load":{"!type":"fn(name: ?, callback: ?, scope?: ?)","!doc":"<p>Loads one or more resources.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-load\" rel=\"CKEDITOR.plugins-method-load\" class=\"docClass\">CKEDITOR.plugins.load</a>( 'myplugin', function( plugins ) {\n    alert( plugins[ 'myplugin' ] ); // object\n} );\n</code></pre>\n"},"!doc":"<p>Base class for resource managers, like plugins. This class is not\nintended to be used out of the CKEditor core code.</p>\n"},"scriptLoader":{"!doc":"<p>Load scripts asynchronously.</p>\n","load":{"!type":"fn(scriptUrl: ?, callback?: ?, scope?: ?, showBusy?: bool)","!doc":"<p>Loads one or more external script checking if not already loaded\npreviously by this function.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.scriptLoader-method-load\" rel=\"CKEDITOR.scriptLoader-method-load\" class=\"docClass\">CKEDITOR.scriptLoader.load</a>( '/myscript.js' );\n\n<a href=\"#!/api/CKEDITOR.scriptLoader-method-load\" rel=\"CKEDITOR.scriptLoader-method-load\" class=\"docClass\">CKEDITOR.scriptLoader.load</a>( '/myscript.js', function( success ) {\n    // Alerts true if the script has been properly loaded.\n    // HTTP error 404 should return false.\n    alert( success );\n} );\n\n<a href=\"#!/api/CKEDITOR.scriptLoader-method-load\" rel=\"CKEDITOR.scriptLoader-method-load\" class=\"docClass\">CKEDITOR.scriptLoader.load</a>( [ '/myscript1.js', '/myscript2.js' ], function( completed, failed ) {\n    alert( 'Number of scripts loaded: ' + completed.length );\n    alert( 'Number of failures: ' + failed.length );\n} );\n</code></pre>\n"},"queue":{"!type":"fn(scriptUrl: string, callback?: ?)","!doc":"<p>Loads a script in a queue, so only one is loaded at the same time.</p>\n"}},"skin":{"!doc":"<p>Manages the loading of skin parts among all editor instances.</p>\n","icons":{"!doc":"<p>The list of registered icons. To add new icons to this list, use <a href=\"#!/api/CKEDITOR.skin-method-addIcon\" rel=\"CKEDITOR.skin-method-addIcon\" class=\"docClass\">addIcon</a>.</p>\n"},"prototype":{"name":{"!type":"string","!doc":"<p>The name of the skin that is currently used.@todo</p>\n"},"ua":{"!doc":"<p>The list of file names matching the browser user agent string from\n<a href=\"#!/api/CKEDITOR.env\" rel=\"CKEDITOR.env\" class=\"docClass\">CKEDITOR.env</a>. This is used to load the skin part file in addition\nto the \"main\" skin file for a particular browser.</p>\n\n<p><strong>Note:</strong> For each of the defined skin parts the corresponding\nCSS file with the same name as the user agent must exist inside\nthe skin directory.@todo type?</p>\n"},"chameleon":{"!type":"fn(editor: string, part: string)","!doc":"<p>A function that supports the chameleon (skin color switch) feature, providing\nthe skin color style updates to be applied in runtime.</p>\n\n<p><strong>Note:</strong> The embedded <code>$color</code> variable is to be substituted with a specific UI color.</p>\n"}},"addIcon":{"!type":"fn(name: string, path: string, offset?: number, bgsize?: string)","!doc":"<p>Registers an icon.</p>\n"},"getIconStyle":{"!type":"fn(name: string, rtl?: bool, overridePath?: string, overrideOffset?: number, overrideBgsize?: string)","!doc":"<p>Gets the CSS background styles to be used to render a specific icon.</p>\n"},"getPath":{"!type":"fn(part: string)","!doc":"<p>Retrieves the real URL of a (CSS) skin part.</p>\n"},"loadPart":{"!type":"fn(part: string, fn: ?)","!doc":"<p>Loads a skin part into the page. Does nothing if the part has already been loaded.</p>\n\n<p><strong>Note:</strong> The \"editor\" part is always auto loaded upon instance creation,\nthus this function is mainly used to <strong>lazy load</strong> other parts of the skin\nthat do not have to be displayed until requested.</p>\n\n<pre><code>// Load the dialog part.\neditor.skin.loadPart( 'dialog' );\n</code></pre>\n"},"path":{"!type":"fn()","!doc":"<p>Returns the root path to the skin directory.</p>\n\n<p>@todo</p>\n"}},"style":{"customHandlers":{"!doc":"<p>Namespace containing custom style handlers added with <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">CKEDITOR.style.addCustomHandler</a>.</p>\n","widget":{"!doc":"<p>The class representing a widget style. It is an <a href=\"#!/api/CKEDITOR-property-STYLE_OBJECT\" rel=\"CKEDITOR-property-STYLE_OBJECT\" class=\"docClass\">object</a> like\nthe styles handler for widgets.</p>\n\n<p><strong>Note:</strong> This custom style handler does not support all methods of the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class.\nNot supported methods: <a href=\"#!/api/CKEDITOR.style.customHandlers.widget-method-applyToRange\" rel=\"CKEDITOR.style.customHandlers.widget-method-applyToRange\" class=\"docClass\">applyToRange</a>, <a href=\"#!/api/CKEDITOR.style.customHandlers.widget-method-removeFromRange\" rel=\"CKEDITOR.style.customHandlers.widget-method-removeFromRange\" class=\"docClass\">removeFromRange</a>, <a href=\"#!/api/CKEDITOR.style.customHandlers.widget-method-applyToObject\" rel=\"CKEDITOR.style.customHandlers.widget-method-applyToObject\" class=\"docClass\">applyToObject</a>.</p>\n","widget":{"!type":"string","!doc":"<p>The name of widget to which this style can be applied.\nIt is extracted from style definition's <code>widget</code> property.</p>\n"},"applyToObject":{"!type":"fn()","!doc":"<p>Not implemented.</p>\n"},"applyToRange":{"!type":"fn()","!doc":"<p>Not implemented.</p>\n"},"checkElement":{"!type":"fn(element: ?, editor: ?)","!doc":"<p>Checks if an element is a <a href=\"#!/api/CKEDITOR.plugins.widget-property-wrapper\" rel=\"CKEDITOR.plugins.widget-property-wrapper\" class=\"docClass\">wrapper</a> of a\nwidget whose name matches the <a href=\"#!/api/CKEDITOR.style.customHandlers.widget-property-widget\" rel=\"CKEDITOR.style.customHandlers.widget-property-widget\" class=\"docClass\">widget name</a> specified in the style definition.</p>\n"},"getClassesArray":{"!type":"fn()","!doc":"<p>Returns classes defined in the style in form of an array.</p>\n"},"removeFromRange":{"!type":"fn()","!doc":"<p>Not implemented.</p>\n"},"toAllowedContentRules":{"!type":"fn(The: ?)","!doc":"<p>Returns allowed content rules which should be registered for this style.\nUses widget's <a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleableElements\" rel=\"CKEDITOR.plugins.widget.definition-property-styleableElements\" class=\"docClass\">CKEDITOR.plugins.widget.definition.styleableElements</a> to make a rule\nallowing classes on specified elements or use widget's\n<a href=\"#!/api/CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" rel=\"CKEDITOR.plugins.widget.definition-property-styleToAllowedContentRules\" class=\"docClass\">CKEDITOR.plugins.widget.definition.styleToAllowedContentRules</a> method to transform a style\ninto allowed content rules.</p>\n"}}},"prototype":{"alwaysRemoveElement":{"!type":"bool","!doc":"<p>Indicates that any matches element of this style will be eventually removed\nwhen calling <a href=\"#!/api/CKEDITOR.editor-method-removeStyle\" rel=\"CKEDITOR.editor-method-removeStyle\" class=\"docClass\">CKEDITOR.editor.removeStyle</a>.</p>\n"},"includeReadonly":{"!type":"bool","!doc":"<p>Indicates that fully selected read-only elements will be included when\napplying the style (for inline styles only).</p>\n"},"constructor":{"!type":"fn(styleDefinition: ?, variablesValues: ?)","!doc":"<p>Creates a style class instance.</p>\n"},"toAllowedContentRules":{"!type":"fn(editor?: ?)","!doc":"<p>If defined (for example by <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">custom style handler</a>), it returns\nthe <a href=\"#!/api/CKEDITOR.filter.allowedContentRules\" rel=\"CKEDITOR.filter.allowedContentRules\" class=\"docClass\">allowed content rules</a> which should be added to the\n<a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> when enabling this style.</p>\n\n<p><strong>Note:</strong> This method is not defined in the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class.</p>\n"}},"apply":{"!type":"fn(editor: ?)","!doc":"<p>Applies the style on the editor's current selection.</p>\n\n<p>Before the style is applied, the method checks if the <a href=\"#!/api/CKEDITOR.style-method-checkApplicable\" rel=\"CKEDITOR.style-method-checkApplicable\" class=\"docClass\">style is applicable</a>.</p>\n\n<p><strong>Note:</strong> The recommended way of applying the style is by using the\n<a href=\"#!/api/CKEDITOR.editor-method-applyStyle\" rel=\"CKEDITOR.editor-method-applyStyle\" class=\"docClass\">CKEDITOR.editor.applyStyle</a> method, which is a shorthand for this method.</p>\n"},"buildPreview":{"!type":"fn(label?: string)","!doc":"<p>Builds the preview HTML based on the styles definition.</p>\n"},"checkActive":{"!type":"fn(elementPath: ?, editor: ?)","!doc":"<p>Gets the style state inside the elements path.</p>\n"},"checkApplicable":{"!type":"fn(elementPath: ?, editor: ?, filter?: ?)","!doc":"<p>Whether this style can be applied at the specified elements path.</p>\n"},"checkElementMatch":{"!type":"fn(element: ?, fullMatch: bool, editor: ?)","!doc":"<p>Checks if the element matches the current style definition.</p>\n"},"checkElementRemovable":{"!type":"fn(element: ?, fullMatch: bool, editor: ?)","!doc":"<p>Checks if an element, or any of its attributes, is removable by the\ncurrent style definition.</p>\n"},"getDefinition":{"!type":"fn()","!doc":"<p>Returns the style definition.</p>\n"},"remove":{"!type":"fn(editor: ?)","!doc":"<p>Removes the style from the editor's current selection.</p>\n\n<p>Before the style is applied, the method checks if <a href=\"#!/api/CKEDITOR.style-method-checkApplicable\" rel=\"CKEDITOR.style-method-checkApplicable\" class=\"docClass\">style could be applied</a>.</p>\n\n<p><strong>Note:</strong> The recommended way of removing the style is by using the\n<a href=\"#!/api/CKEDITOR.editor-method-removeStyle\" rel=\"CKEDITOR.editor-method-removeStyle\" class=\"docClass\">CKEDITOR.editor.removeStyle</a> method, which is a shorthand for this method.</p>\n"},"!doc":"<p>A class representing a style instance for the specific style definition.\nIn this approach, a style is a set of properties, like attributes and styles,\nwhich can be applied to and removed from a <a href=\"#!/api/CKEDITOR.dom.selection\" rel=\"CKEDITOR.dom.selection\" class=\"docClass\">selection</a> through\n<a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">editor</a> methods: <a href=\"#!/api/CKEDITOR.editor-method-applyStyle\" rel=\"CKEDITOR.editor-method-applyStyle\" class=\"docClass\">CKEDITOR.editor.applyStyle</a> and <a href=\"#!/api/CKEDITOR.editor-method-removeStyle\" rel=\"CKEDITOR.editor-method-removeStyle\" class=\"docClass\">CKEDITOR.editor.removeStyle</a>,\nrespectively.</p>\n\n<p>Three default style types are available: <a href=\"#!/api/CKEDITOR-property-STYLE_BLOCK\" rel=\"CKEDITOR-property-STYLE_BLOCK\" class=\"docClass\">STYLE_BLOCK</a>, <a href=\"#!/api/CKEDITOR-property-STYLE_INLINE\" rel=\"CKEDITOR-property-STYLE_INLINE\" class=\"docClass\">STYLE_INLINE</a>,\nand <a href=\"#!/api/CKEDITOR-property-STYLE_OBJECT\" rel=\"CKEDITOR-property-STYLE_OBJECT\" class=\"docClass\">STYLE_OBJECT</a>. Based on its type, a style heavily changes its behavior.\nYou can read more about style types in the <a href=\"#!/guide/dev_styles-section-style-types\">Style Types section of the Styles guide</a>.</p>\n\n<p>It is possible to define a custom style type by subclassing this class by using the <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">addCustomHandler</a> method.\nHowever, because of great complexity of the styles handling job, it is only possible in very specific cases.</p>\n\n<h3>Usage</h3>\n\n<p>Basic usage:</p>\n\n<pre><code>// Define a block style.\nvar style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'h1' } );\n\n// Considering the following selection:\n// &lt;p&gt;Foo&lt;/p&gt;&lt;p&gt;Bar^&lt;/p&gt;\n// Executing:\neditor.applyStyle( style );\n// Will give:\n// &lt;p&gt;Foo&lt;/p&gt;&lt;h1&gt;Bar^&lt;/h1&gt;\nstyle.checkActive( editor.elementPath(), editor ); // -&gt; true\n\neditor.removeStyle( style );\n// Will give:\n// &lt;p&gt;Foo&lt;/p&gt;&lt;p&gt;Bar^&lt;/p&gt;\n\nstyle.checkActive( editor.elementPath(), editor ); // -&gt; false\n</code></pre>\n\n<p>Object style:</p>\n\n<pre><code>// Define an object style.\nvar style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'img', attributes: { 'class': 'foo' } } );\n\n// Considering the following selection:\n// &lt;p&gt;&lt;img src=\"bar.png\" alt=\"\" /&gt;Foo^&lt;/p&gt;\n// Executing:\neditor.applyStyle( style );\n// Will not apply the style, because the image is not selected.\n// You can check if a style can be applied on the current selection with:\nstyle.checkApplicable( editor.elementPath(), editor ); // -&gt; false\n\n// Considering the following selection:\n// &lt;p&gt;[&lt;img src=\"bar.png\" alt=\"\" /&gt;]Foo&lt;/p&gt;\n// Executing\neditor.applyStyle( style );\n// Will give:\n// &lt;p&gt;[&lt;img src=\"bar.png\" alt=\"\" class=\"foo\" /&gt;]Foo&lt;/p&gt;\n</code></pre>\n\n<h3>API changes introduced in CKEditor 4.4</h3>\n\n<p>Before CKEditor 4.4 all style instances had no access at all to the <a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">editor instance</a>\nwithin which the style is used. Neither the style constructor, nor style methods were requiring\npassing the editor instance which made styles independent of the editor and hence its settings and state.\nThis design decision came from CKEditor 3; it started causing problems and became an unsolvable obstacle for\nthe <a href=\"#!/api/CKEDITOR.style.customHandlers.widget\" rel=\"CKEDITOR.style.customHandlers.widget\" class=\"docClass\">widget style handler</a> which we introduced in CKEditor 4.4.</p>\n\n<p>There were two possible solutions. Passing an editor instance to the style constructor or to every method.\nThe first approach would be clean, however, having in mind the backward compatibility, we did not decide\nto go for it. It would bind the style to one editor instance, making it unusable with other editor instances.\nThat could break many implementations reusing styles between editors. Therefore, we decided to take the longer\nbut safer path &mdash; the editor instance became an argument for nearly all style methods, however,\nfor backward compatibility reasons, all these methods will work without it. Even the newly\nimplemented <a href=\"#!/api/CKEDITOR.style.customHandlers.widget\" rel=\"CKEDITOR.style.customHandlers.widget\" class=\"docClass\">widget style handler</a>'s methods will not fail,\nalthough they will also not work by aborting at an early stage.</p>\n\n<p>Therefore, you can safely upgrade to CKEditor 4.4 even if you use style methods without providing\nthe editor instance. You must only align your code if your implementation should handle widget styles\nor any other custom style handler. Of course, we recommend doing this in any case to avoid potential\nproblems in the future.</p>\n","applyToObject":{"!type":"fn(element: ?, editor: ?)","!doc":"<p>Applies the style to the element. This method bypasses all checks\nand applies the style attributes directly on the provided element. Use with caution.</p>\n\n<p>See <a href=\"#!/api/CKEDITOR.editor-method-applyStyle\" rel=\"CKEDITOR.editor-method-applyStyle\" class=\"docClass\">CKEDITOR.editor.applyStyle</a>.</p>\n"},"applyToRange":{"!type":"fn(range: ?, editor: ?)","!doc":"<p>Applies the style on the provided range. Unlike <a href=\"#!/api/CKEDITOR.style-method-apply\" rel=\"CKEDITOR.style-method-apply\" class=\"docClass\">apply</a> this\nmethod does not take care of setting the selection, however, the range\nis updated to the correct place.</p>\n\n<p><strong>Note:</strong> If you want to apply the style on the editor selection,\nyou probably want to use <a href=\"#!/api/CKEDITOR.editor-method-applyStyle\" rel=\"CKEDITOR.editor-method-applyStyle\" class=\"docClass\">CKEDITOR.editor.applyStyle</a>.</p>\n"},"removeFromRange":{"!type":"fn(range: ?, editor: ?)","!doc":"<p>Removes the style from the provided range. Unlike <a href=\"#!/api/CKEDITOR.style-method-remove\" rel=\"CKEDITOR.style-method-remove\" class=\"docClass\">remove</a> this\nmethod does not take care of setting the selection, however, the range\nis updated to the correct place.</p>\n\n<p><strong>Note:</strong> If you want to remove the style from the editor selection,\nyou probably want to use <a href=\"#!/api/CKEDITOR.editor-method-removeStyle\" rel=\"CKEDITOR.editor-method-removeStyle\" class=\"docClass\">CKEDITOR.editor.removeStyle</a>.</p>\n"},"addCustomHandler":{"!type":"fn(definition: ?)","!doc":"<p>Creates a <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> subclass and registers it in the style system.\nRegistered class will be used as a handler for a style of this type. This allows\nto extend the styles system, which by default uses only the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>, with\nnew functionality. Registered classes are accessible in the <a href=\"#!/api/CKEDITOR.style.customHandlers\" rel=\"CKEDITOR.style.customHandlers\" class=\"docClass\">CKEDITOR.style.customHandlers</a>.</p>\n\n<h3>The Style Class Definition</h3>\n\n<p>The definition object is used to override properties in a prototype inherited\nfrom the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class. It must contain a <code>type</code> property which is\na name of the new type and therefore it must be unique. The default style types\n(<a href=\"#!/api/CKEDITOR-property-STYLE_BLOCK\" rel=\"CKEDITOR-property-STYLE_BLOCK\" class=\"docClass\">STYLE_BLOCK</a>, <a href=\"#!/api/CKEDITOR-property-STYLE_INLINE\" rel=\"CKEDITOR-property-STYLE_INLINE\" class=\"docClass\">STYLE_INLINE</a>,\nand <a href=\"#!/api/CKEDITOR-property-STYLE_OBJECT\" rel=\"CKEDITOR-property-STYLE_OBJECT\" class=\"docClass\">STYLE_OBJECT</a>) are integers, but for easier identification\nit is recommended to use strings as custom type names.</p>\n\n<p>Besides <code>type</code>, the definition may contain two more special properties:</p>\n\n<ul>\n<li><code>setup {Function}</code> &ndash; An optional callback executed when a style instance is created.\nLike the style constructor, it is executed in style context and with the style definition as an argument.</li>\n<li><code>assignedTo {Number}</code> &ndash; Can be set to one of the default style types. Some editor\nfeatures like the Styles drop-down assign styles to one of the default groups based on\nthe style type. By using this property it is possible to notify them to which group this\ncustom style should be assigned. It defaults to the <a href=\"#!/api/CKEDITOR-property-STYLE_OBJECT\" rel=\"CKEDITOR-property-STYLE_OBJECT\" class=\"docClass\">CKEDITOR.STYLE_OBJECT</a>.</li>\n</ul>\n\n\n<p>Other properties of the definition object will just be used to extend the prototype inherited\nfrom the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> class. So if the definition contains an <code>apply</code> method, it will\noverride the <a href=\"#!/api/CKEDITOR.style-method-apply\" rel=\"CKEDITOR.style-method-apply\" class=\"docClass\">apply</a> method.</p>\n\n<h3>Usage</h3>\n\n<p>Registering a basic handler:</p>\n\n<pre><code>var styleClass = <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">CKEDITOR.style.addCustomHandler</a>( {\n    type: 'custom'\n} );\n\nvar style = new styleClass( { ... } );\nstyle instanceof styleClass; // -&gt; true\nstyle instanceof <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>; // -&gt; true\nstyle.type; // -&gt; 'custom'\n</code></pre>\n\n<p>The <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> constructor used as a factory:</p>\n\n<pre><code>var styleClass = <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">CKEDITOR.style.addCustomHandler</a>( {\n    type: 'custom'\n} );\n\n// Style constructor accepts style definition (do not confuse with style class definition).\nvar style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { type: 'custom', attributes: ... } );\nstyle instanceof styleClass; // -&gt; true\n</code></pre>\n\n<p>Thanks to that, integration code using styles does not need to know\nwhich style handler it should use. It is determined by the <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> constructor.</p>\n\n<p>Overriding existing <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a> methods:</p>\n\n<pre><code>var styleClass = <a href=\"#!/api/CKEDITOR.style-static-method-addCustomHandler\" rel=\"CKEDITOR.style-static-method-addCustomHandler\" class=\"docClass\">CKEDITOR.style.addCustomHandler</a>( {\n    type: 'custom',\n    apply: function( editor ) {\n        console.log( 'apply' );\n    },\n    remove: function( editor ) {\n        console.log( 'remove' );\n    }\n} );\n\nvar style = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { type: 'custom', attributes: ... } );\neditor.applyStyle( style ); // logged 'apply'\n\nstyle = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'img', attributes: { 'class': 'foo' } } );\neditor.applyStyle( style ); // style is really applied if image was selected\n</code></pre>\n\n<h3>Practical Recommendations</h3>\n\n<p>The style handling job, which includes such tasks as applying, removing, checking state, and\nchecking if a style can be applied, is very complex. Therefore without deep knowledge\nabout DOM and especially <a href=\"#!/api/CKEDITOR.dom.range\" rel=\"CKEDITOR.dom.range\" class=\"docClass\">ranges</a> and <a href=\"#!/api/CKEDITOR.dom.walker\" rel=\"CKEDITOR.dom.walker\" class=\"docClass\">DOM walker</a> it is impossible\nto implement a completely custom style handler able to handle block, inline, and object type styles.\nHowever, it is possible to customize the default implementation by overriding default methods and\nreusing them.</p>\n\n<p>The only style handler which can be implemented from scratch without huge effort is a style\napplicable to objects (<a href=\"http://docs.ckeditor.com/#!/guide/dev_styles-section-style-types\">read more about types</a>).\nSuch style can only be applied when a specific object is selected. An example implementation can\nbe found in the <a href=\"https://github.com/ckeditor/ckeditor-dev/blob/master/plugins/widget/plugin.js\">widget plugin</a>.</p>\n\n<p>When implementing a style handler from scratch at least the following methods must be defined:</p>\n\n<ul>\n<li><a href=\"#!/api/CKEDITOR.style-method-apply\" rel=\"CKEDITOR.style-method-apply\" class=\"docClass\">apply</a> and <a href=\"#!/api/CKEDITOR.style-method-remove\" rel=\"CKEDITOR.style-method-remove\" class=\"docClass\">remove</a>,</li>\n<li><a href=\"#!/api/CKEDITOR.style-method-checkElementRemovable\" rel=\"CKEDITOR.style-method-checkElementRemovable\" class=\"docClass\">checkElementRemovable</a> and\n<a href=\"#!/api/CKEDITOR.style-method-checkElementMatch\" rel=\"CKEDITOR.style-method-checkElementMatch\" class=\"docClass\">checkElementMatch</a> &ndash; Note that both methods reuse the same logic,</li>\n<li><a href=\"#!/api/CKEDITOR.style-method-checkActive\" rel=\"CKEDITOR.style-method-checkActive\" class=\"docClass\">checkActive</a> &ndash; Reuses\n<a href=\"#!/api/CKEDITOR.style-method-checkElementMatch\" rel=\"CKEDITOR.style-method-checkElementMatch\" class=\"docClass\">checkElementMatch</a>,</li>\n<li><a href=\"#!/api/CKEDITOR.style-method-toAllowedContentRules\" rel=\"CKEDITOR.style-method-toAllowedContentRules\" class=\"docClass\">toAllowedContentRules</a> &ndash; Not required, but very useful in\ncase of a custom style that has to notify the <a href=\"#!/api/CKEDITOR.filter\" rel=\"CKEDITOR.filter\" class=\"docClass\">CKEDITOR.filter</a> which rules it allows when registered.</li>\n</ul>\n\n"},"getStyleText":{"!type":"fn(styleDefinition: ?)","!doc":"<p>Builds the inline style text based on the style definition.</p>\n"}},"styleCommand":{"!doc":"<p>Generic style command. It applies a specific style when executed.</p>\n\n<pre><code>var boldStyle = new <a href=\"#!/api/CKEDITOR.style\" rel=\"CKEDITOR.style\" class=\"docClass\">CKEDITOR.style</a>( { element: 'strong' } );\n// Register the \"bold\" command, which applies the bold style.\neditor.addCommand( 'bold', new <a href=\"#!/api/CKEDITOR.dialogCommand\" rel=\"CKEDITOR.dialogCommand\" class=\"docClass\">CKEDITOR.dialogCommand</a>( boldStyle ) );\n</code></pre>\n","prototype":{"constructor":{"!type":"fn(style: ?, ext?: ?)","!doc":"<p>Creates a styleCommand class instance.</p>\n"}},"exec":{"!type":"fn(editor: ?)","!doc":"\n"}},"stylesSet":{"!doc":"<p>Manages styles registration and loading. See also <a href=\"#!/api/CKEDITOR.config-cfg-stylesSet\" rel=\"CKEDITOR.config-cfg-stylesSet\" class=\"docClass\">CKEDITOR.config.stylesSet</a>.</p>\n\n<pre><code>// The set of styles for the &lt;b&gt;Styles&lt;/b&gt; drop-down list.\n<a href=\"#!/api/CKEDITOR.stylesSet-method-add\" rel=\"CKEDITOR.stylesSet-method-add\" class=\"docClass\">CKEDITOR.stylesSet.add</a>( 'default', [\n    // Block Styles\n    { name: 'Blue Title',       element: 'h3',      styles: { 'color': 'Blue' } },\n    { name: 'Red Title',        element: 'h3',      styles: { 'color': 'Red' } },\n\n    // Inline Styles\n    { name: 'Marker: Yellow',   element: 'span',    styles: { 'background-color': 'Yellow' } },\n    { name: 'Marker: Green',    element: 'span',    styles: { 'background-color': 'Lime' } },\n\n    // Object Styles\n    {\n        name: 'Image on Left',\n        element: 'img',\n        attributes: {\n            style: 'padding: 5px; margin-right: 5px',\n            border: '2',\n            align: 'left'\n        }\n    }\n] );\n</code></pre>\n"},"template":{"!doc":"<p>Lightweight template used to build the output string from variables.</p>\n\n<pre><code>// HTML template for presenting a label UI.\nvar tpl = new <a href=\"#!/api/CKEDITOR.template\" rel=\"CKEDITOR.template\" class=\"docClass\">CKEDITOR.template</a>( '&lt;div class=\"{cls}\"&gt;{label}&lt;/div&gt;' );\nalert( tpl.output( { cls: 'cke-label', label: 'foo'} ) ); // '&lt;div class=\"cke-label\"&gt;foo&lt;/div&gt;'\n</code></pre>\n","prototype":{"constructor":{"!type":"fn(source: string)","!doc":"<p>Creates a template class instance.</p>\n"},"output":{"!type":"fn(data: ?, buffer?: ?)","!doc":"<p>Processes the template, filling its variables with the provided data.</p>\n"}}},"tools":{"!doc":"<p>Utility functions.</p>\n","transparentImageData":{"!type":"string","!doc":"<p>The data URI of a transparent image. May be used e.g. in HTML as an image source or in CSS in <code>url()</code>.</p>\n"},"addFunction":{"!type":"fn(fn: ?, scope?: ?)","!doc":"<p>Creates a function reference that can be called later using\n<a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">callFunction</a>. This approach is especially useful to\nmake DOM attribute function calls to JavaScript-defined functions.</p>\n\n<pre><code>var ref = <a href=\"#!/api/CKEDITOR.tools-method-addFunction\" rel=\"CKEDITOR.tools-method-addFunction\" class=\"docClass\">CKEDITOR.tools.addFunction</a>( function() {\n    alert( 'Hello!');\n} );\n<a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( ref ); // 'Hello!'\n</code></pre>\n"},"arrayCompare":{"!type":"fn(arrayA: ?, arrayB: ?)","!doc":"<p>Compares the elements of two arrays.</p>\n\n<pre><code>var a = [ 1, 'a', 3 ];\nvar b = [ 1, 3, 'a' ];\nvar c = [ 1, 'a', 3 ];\nvar d = [ 1, 'a', 3, 4 ];\n\nalert( <a href=\"#!/api/CKEDITOR.tools-method-arrayCompare\" rel=\"CKEDITOR.tools-method-arrayCompare\" class=\"docClass\">CKEDITOR.tools.arrayCompare</a>( a, b ) );  // false\nalert( <a href=\"#!/api/CKEDITOR.tools-method-arrayCompare\" rel=\"CKEDITOR.tools-method-arrayCompare\" class=\"docClass\">CKEDITOR.tools.arrayCompare</a>( a, c ) );  // true\nalert( <a href=\"#!/api/CKEDITOR.tools-method-arrayCompare\" rel=\"CKEDITOR.tools-method-arrayCompare\" class=\"docClass\">CKEDITOR.tools.arrayCompare</a>( a, d ) );  // false\n</code></pre>\n"},"bind":{"!type":"fn(func: ?, obj: ?)","!doc":"<p>Creates a function that will always execute in the context of a\nspecified object.</p>\n\n<pre><code>var obj = { text: 'My Object' };\n\nfunction alertText() {\n    alert( this.text );\n}\n\nvar newFunc = <a href=\"#!/api/CKEDITOR.tools-method-bind\" rel=\"CKEDITOR.tools-method-bind\" class=\"docClass\">CKEDITOR.tools.bind</a>( alertText, obj );\nnewFunc(); // Alerts 'My Object'.\n</code></pre>\n"},"buildStyleHtml":{"!type":"fn(css: ?)","!doc":"<p>Builds a HTML snippet from a set of <code>&lt;style&gt;/&lt;link&gt;</code>.</p>\n"},"buildTableMap":{"!type":"fn(table: ?)","!doc":"<p>Create a two-dimension array that reflects the actual layout of table cells,\nwith cell spans, with mappings to the original td elements.</p>\n"},"callFunction":{"!type":"fn(ref: number, params: ?)","!doc":"<p>Executes a function based on the reference created with <a href=\"#!/api/CKEDITOR.tools-method-addFunction\" rel=\"CKEDITOR.tools-method-addFunction\" class=\"docClass\">addFunction</a>.</p>\n\n<pre><code>var ref = <a href=\"#!/api/CKEDITOR.tools-method-addFunction\" rel=\"CKEDITOR.tools-method-addFunction\" class=\"docClass\">CKEDITOR.tools.addFunction</a>( function() {\n    alert( 'Hello!');\n} );\n<a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( ref ); // 'Hello!'\n</code></pre>\n"},"capitalize":{"!type":"fn(str: string, keepCase?: bool)","!doc":"<p>Turns the first letter of a string to upper-case.</p>\n"},"checkIfAnyArrayItemMatches":{"!type":"fn(arr: ?, regexp: ?)","!doc":"<p>Checks if any of the <code>arr</code> items match the provided regular expression.</p>\n"},"checkIfAnyObjectPropertyMatches":{"!type":"fn(obj: ?, regexp: ?)","!doc":"<p>Checks if any of the <code>obj</code> properties match the provided regular expression.</p>\n"},"clone":{"!type":"fn(object: ?)","!doc":"<p>Creates a deep copy of an object.</p>\n\n<p><strong>Note</strong>: Recursive references are not supported.</p>\n\n<pre><code>var obj = {\n    name: 'John',\n    cars: {\n        Mercedes: { color: 'blue' },\n        Porsche: { color: 'red' }\n    }\n};\nvar clone = <a href=\"#!/api/CKEDITOR.tools-method-clone\" rel=\"CKEDITOR.tools-method-clone\" class=\"docClass\">CKEDITOR.tools.clone</a>( obj );\nclone.name = 'Paul';\nclone.cars.Porsche.color = 'silver';\n\nalert( obj.name );                  // 'John'\nalert( clone.name );                // 'Paul'\nalert( obj.cars.Porsche.color );    // 'red'\nalert( clone.cars.Porsche.color );  // 'silver'\n</code></pre>\n"},"convertArrayToObject":{"!type":"fn(arr: ?, fillWith?: ?)","!doc":"<p>Converts an array to an object by rewriting array items\nto object properties.</p>\n\n<pre><code>var arr = [ 'foo', 'bar', 'foo' ];\nconsole.log( <a href=\"#!/api/CKEDITOR.tools-method-convertArrayToObject\" rel=\"CKEDITOR.tools-method-convertArrayToObject\" class=\"docClass\">CKEDITOR.tools.convertArrayToObject</a>( arr ) );\n// -&gt; { foo: true, bar: true }\nconsole.log( <a href=\"#!/api/CKEDITOR.tools-method-convertArrayToObject\" rel=\"CKEDITOR.tools-method-convertArrayToObject\" class=\"docClass\">CKEDITOR.tools.convertArrayToObject</a>( arr, 1 ) );\n// -&gt; { foo: 1, bar: 1 }\n</code></pre>\n"},"convertRgbToHex":{"!type":"fn(styleText: string)","!doc":"<p>Finds and converts <code>rgb(x,x,x)</code> color definition to hexadecimal notation.</p>\n"},"convertToPx":{"!type":"fn(cssLength: string)","!doc":"<p>Converts the specified CSS length value to the calculated pixel length inside this page.</p>\n\n<p><strong>Note:</strong> Percentage-based value is left intact.</p>\n"},"copy":{"!type":"fn(source: ?)","!doc":"<p>Makes fast (shallow) copy of an object.\nThis method is faster than <a href=\"#!/api/CKEDITOR.tools-method-clone\" rel=\"CKEDITOR.tools-method-clone\" class=\"docClass\">clone</a> which does\na deep copy of an object (including arrays).</p>\n"},"createClass":{"!type":"fn(definition: ?)","!doc":"<p>Class creation based on prototype inheritance which supports of the\nfollowing features:</p>\n\n<ul>\n<li>Static fields</li>\n<li>Private fields</li>\n<li>Public (prototype) fields</li>\n<li>Chainable base class constructor</li>\n</ul>\n\n"},"cssLength":{"!type":"fn(length: ?)","!doc":"<p>Appends the <code>px</code> length unit to the size value if it is missing.</p>\n\n<pre><code>var cssLength = <a href=\"#!/api/CKEDITOR.tools-method-cssLength\" rel=\"CKEDITOR.tools-method-cssLength\" class=\"docClass\">CKEDITOR.tools.cssLength</a>;\ncssLength( 42 );        // '42px'\ncssLength( '42' );      // '42px'\ncssLength( '42px' );    // '42px'\ncssLength( '42%' );     // '42%'\ncssLength( 'bold' );    // 'bold'\ncssLength( false );     // ''\ncssLength( NaN );       // ''\n</code></pre>\n"},"cssStyleToDomStyle":{"!type":"fn(cssName: string)","!doc":"<p>Transforms a CSS property name to its relative DOM style name.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-cssStyleToDomStyle\" rel=\"CKEDITOR.tools-method-cssStyleToDomStyle\" class=\"docClass\">CKEDITOR.tools.cssStyleToDomStyle</a>( 'background-color' ) );   // 'backgroundColor'\nalert( <a href=\"#!/api/CKEDITOR.tools-method-cssStyleToDomStyle\" rel=\"CKEDITOR.tools-method-cssStyleToDomStyle\" class=\"docClass\">CKEDITOR.tools.cssStyleToDomStyle</a>( 'float' ) );              // 'cssFloat'\n</code></pre>\n"},"cssVendorPrefix":{"!type":"fn(property: string, value: string, asString?: bool)","!doc":"<p>Generates an object or a string containing vendor-specific and vendor-free CSS properties.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.tools-method-cssVendorPrefix\" rel=\"CKEDITOR.tools-method-cssVendorPrefix\" class=\"docClass\">CKEDITOR.tools.cssVendorPrefix</a>( 'border-radius', '0', true );\n// On Firefox: '-moz-border-radius:0;border-radius:0'\n// On Chrome: '-webkit-border-radius:0;border-radius:0'\n</code></pre>\n"},"defer":{"!type":"fn(fn: ?)","!doc":"<p>Creates a \"deferred\" function which will not run immediately,\nbut rather runs as soon as the interpreter’s call stack is empty.\nBehaves much like <code>window.setTimeout</code> with a delay.</p>\n\n<p><strong>Note:</strong> The return value of the original function will be lost.</p>\n"},"enableHtml5Elements":{"!type":"fn(doc: ?, withAppend?: bool)","!doc":"<p>Enables HTML5 elements for older browsers (IE8) in the passed document.</p>\n\n<p>In IE8 this method can also be executed on a document fragment.</p>\n\n<p><strong>Note:</strong> This method has to be used in the <code>&lt;head&gt;</code> section of the document.</p>\n"},"eventsBuffer":{"!type":"fn(minInterval: number, output: ?)","!doc":"<p>Buffers <code>input</code> events (or any <code>input</code> calls)\nand triggers <code>output</code> not more often than once per <code>minInterval</code>.</p>\n\n<pre><code>var buffer = <a href=\"#!/api/CKEDITOR.tools-method-eventsBuffer\" rel=\"CKEDITOR.tools-method-eventsBuffer\" class=\"docClass\">CKEDITOR.tools.eventsBuffer</a>( 200, function() {\n    console.log( 'foo!' );\n} );\n\nbuffer.input();\n// 'foo!' logged immediately.\nbuffer.input();\n// Nothing logged.\nbuffer.input();\n// Nothing logged.\n// ... after 200ms a single 'foo!' will be logged.\n</code></pre>\n\n<p>Can be easily used with events:</p>\n\n<pre><code>var buffer = <a href=\"#!/api/CKEDITOR.tools-method-eventsBuffer\" rel=\"CKEDITOR.tools-method-eventsBuffer\" class=\"docClass\">CKEDITOR.tools.eventsBuffer</a>( 200, function() {\n    console.log( 'foo!' );\n} );\n\neditor.on( 'key', buffer.input );\n// Note: There is no need to bind buffer as a context.\n</code></pre>\n"},"extend":{"!type":"fn(target: ?, source: ?, overwrite?: bool, properties?: ?)","!doc":"<p>Copies the properties from one object to another. By default, properties\nalready present in the target object <strong>are not</strong> overwritten.</p>\n\n<pre><code>// Create the sample object.\nvar myObject = {\n    prop1: true\n};\n\n// Extend the above object with two properties.\n<a href=\"#!/api/CKEDITOR.tools-method-extend\" rel=\"CKEDITOR.tools-method-extend\" class=\"docClass\">CKEDITOR.tools.extend</a>( myObject, {\n    prop2: true,\n    prop3: true\n} );\n\n// Alert 'prop1', 'prop2' and 'prop3'.\nfor ( var p in myObject )\n    alert( p );\n</code></pre>\n"},"fixDomain":{"!type":"fn()","!doc":"<p>Tries to fix the <code>document.domain</code> of the current document to match the\nparent window domain, avoiding \"Same Origin\" policy issues.\nThis is an Internet Explorer only requirement.</p>\n"},"genKey":{"!type":"fn(subKey: string)","!doc":"<p>Generates a combined key from a series of params.</p>\n\n<pre><code>var key = <a href=\"#!/api/CKEDITOR.tools-method-genKey\" rel=\"CKEDITOR.tools-method-genKey\" class=\"docClass\">CKEDITOR.tools.genKey</a>( 'key1', 'key2', 'key3' );\nalert( key ); // 'key1-key2-key3'.\n</code></pre>\n"},"getNextId":{"!type":"fn()","!doc":"<p>Gets a unique ID for CKEditor interface elements. It returns a\nstring with the \"cke_\" prefix and a consecutive number.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-getNextId\" rel=\"CKEDITOR.tools-method-getNextId\" class=\"docClass\">CKEDITOR.tools.getNextId</a>() ); // (e.g.) 'cke_1'\nalert( <a href=\"#!/api/CKEDITOR.tools-method-getNextId\" rel=\"CKEDITOR.tools-method-getNextId\" class=\"docClass\">CKEDITOR.tools.getNextId</a>() ); // 'cke_2'\n</code></pre>\n"},"getNextNumber":{"!type":"fn()","!doc":"<p>Gets a unique number for this CKEDITOR execution session. It returns\nconsecutive numbers starting from 1.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-getNextNumber\" rel=\"CKEDITOR.tools-method-getNextNumber\" class=\"docClass\">CKEDITOR.tools.getNextNumber</a>() ); // (e.g.) 1\nalert( <a href=\"#!/api/CKEDITOR.tools-method-getNextNumber\" rel=\"CKEDITOR.tools-method-getNextNumber\" class=\"docClass\">CKEDITOR.tools.getNextNumber</a>() ); // 2\n</code></pre>\n"},"htmlDecode":{"!type":"fn(The: string)","!doc":"<p>Decodes HTML entities.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-htmlDecode\" rel=\"CKEDITOR.tools-method-htmlDecode\" class=\"docClass\">CKEDITOR.tools.htmlDecode</a>( '&amp;lt;a &amp;amp; b &amp;gt;' ) ); // '&lt;a &amp; b &gt;'\n</code></pre>\n"},"htmlDecodeAttr":{"!type":"fn(text: string)","!doc":"<p>Replace HTML entities previously encoded by\n<a href=\"#!/api/CKEDITOR.tools-method-htmlEncodeAttr\" rel=\"CKEDITOR.tools-method-htmlEncodeAttr\" class=\"docClass\">htmlEncodeAttr</a> back to their plain character\nrepresentation.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-htmlDecodeAttr\" rel=\"CKEDITOR.tools-method-htmlDecodeAttr\" class=\"docClass\">CKEDITOR.tools.htmlDecodeAttr</a>( '&amp;lt;a &amp;quot; b&amp;gt;' ) ); // '&lt;a \" b&gt;'\n</code></pre>\n"},"htmlEncode":{"!type":"fn(text: string)","!doc":"<p>Replaces special HTML characters in a string with their relative HTML\nentity values.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-htmlEncode\" rel=\"CKEDITOR.tools-method-htmlEncode\" class=\"docClass\">CKEDITOR.tools.htmlEncode</a>( 'A &gt; B &amp; C &lt; D' ) ); // 'A &amp;gt; B &amp;amp; C &amp;lt; D'\n</code></pre>\n"},"htmlEncodeAttr":{"!type":"fn(The: string)","!doc":"<p>Replaces special HTML characters in HTMLElement attribute with their relative HTML entity values.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-htmlEncodeAttr\" rel=\"CKEDITOR.tools-method-htmlEncodeAttr\" class=\"docClass\">CKEDITOR.tools.htmlEncodeAttr</a>( '&lt;a \" b &gt;' ) ); // '&amp;lt;a &amp;quot; b &amp;gt;'\n</code></pre>\n"},"indexOf":{"!type":"fn(array: ?, value: ?)","!doc":"<p>Returns the index of an element in an array.</p>\n\n<pre><code>var letters = [ 'a', 'b', 0, 'c', false ];\nalert( <a href=\"#!/api/CKEDITOR.tools-method-indexOf\" rel=\"CKEDITOR.tools-method-indexOf\" class=\"docClass\">CKEDITOR.tools.indexOf</a>( letters, '0' ) );        // -1 because 0 !== '0'\nalert( <a href=\"#!/api/CKEDITOR.tools-method-indexOf\" rel=\"CKEDITOR.tools-method-indexOf\" class=\"docClass\">CKEDITOR.tools.indexOf</a>( letters, false ) );      // 4 because 0 !== false\n</code></pre>\n"},"isArray":{"!type":"fn(object: ?)","!doc":"<p>Checks if an object is an Array.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-isArray\" rel=\"CKEDITOR.tools-method-isArray\" class=\"docClass\">CKEDITOR.tools.isArray</a>( [] ) );      // true\nalert( <a href=\"#!/api/CKEDITOR.tools-method-isArray\" rel=\"CKEDITOR.tools-method-isArray\" class=\"docClass\">CKEDITOR.tools.isArray</a>( 'Test' ) );  // false\n</code></pre>\n"},"isEmpty":{"!type":"fn(object: ?)","!doc":"<p>Whether the object contains no properties of its own.</p>\n"},"ltrim":{"!type":"fn(str: string)","!doc":"<p>Removes spaces from the start (left) of a string. The following\ncharacters are removed: space, tab, line break, line feed.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-ltrim\" rel=\"CKEDITOR.tools-method-ltrim\" class=\"docClass\">CKEDITOR.tools.ltrim</a>( '  example ' ); // 'example '\n</code></pre>\n"},"normalizeCssText":{"!type":"fn(styleText: string, nativeNormalize?: bool)","!doc":"<p>Normalizes CSS data in order to avoid differences in the style attribute.</p>\n"},"objectCompare":{"!type":"fn(left: ?, right: ?, onlyLeft?: bool)","!doc":"<p>Compares two objects.</p>\n\n<p><strong>Note:</strong> This method performs shallow, non-strict comparison.</p>\n"},"objectKeys":{"!type":"fn(obj: ?)","!doc":"<p>Returns an array of passed object's keys.</p>\n\n<pre><code>console.log( <a href=\"#!/api/CKEDITOR.tools-method-objectKeys\" rel=\"CKEDITOR.tools-method-objectKeys\" class=\"docClass\">CKEDITOR.tools.objectKeys</a>( { foo: 1, bar: false } );\n// -&gt; [ 'foo', 'bar' ]\n</code></pre>\n"},"override":{"!type":"fn(originalFunction: ?, functionBuilder: ?)","!doc":"<p>Creates a function override.</p>\n\n<pre><code>var obj = {\n    myFunction: function( name ) {\n        alert( 'Name: ' + name );\n    }\n};\n\nobj.myFunction = <a href=\"#!/api/CKEDITOR.tools-method-override\" rel=\"CKEDITOR.tools-method-override\" class=\"docClass\">CKEDITOR.tools.override</a>( obj.myFunction, function( myFunctionOriginal ) {\n    return function( name ) {\n        alert( 'Overriden name: ' + name );\n        myFunctionOriginal.call( this, name );\n    };\n} );\n</code></pre>\n"},"parseCssText":{"!type":"fn(styleText: string, normalize?: bool, nativeNormalize?: bool)","!doc":"<p>Turns inline style text properties into one hash.</p>\n"},"prototypedCopy":{"!type":"fn(source: ?)","!doc":"<p>Creates an object which is an instance of a class whose prototype is a\npredefined object. All properties defined in the source object are\nautomatically inherited by the resulting object, including future\nchanges to it.</p>\n"},"removeFunction":{"!type":"fn(ref: number)","!doc":"<p>Removes the function reference created with <a href=\"#!/api/CKEDITOR.tools-method-addFunction\" rel=\"CKEDITOR.tools-method-addFunction\" class=\"docClass\">addFunction</a>.</p>\n"},"repeat":{"!type":"fn(str: string, times: number)","!doc":"<p>String specified by <code>str</code> repeats <code>times</code> times.</p>\n"},"rtrim":{"!type":"fn(str: string)","!doc":"<p>Removes spaces from the end (right) of a string. The following\ncharacters are removed: space, tab, line break, line feed.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-ltrim\" rel=\"CKEDITOR.tools-method-ltrim\" class=\"docClass\">CKEDITOR.tools.ltrim</a>( '  example ' ); // '  example'\n</code></pre>\n"},"search":{"!type":"fn(array: ?, value: ?)","!doc":"<p>Returns the index of an element in an array.</p>\n\n<pre><code>var obj = { prop: true };\nvar letters = [ 'a', 'b', 0, obj, false ];\n\nalert( <a href=\"#!/api/CKEDITOR.tools-method-indexOf\" rel=\"CKEDITOR.tools-method-indexOf\" class=\"docClass\">CKEDITOR.tools.indexOf</a>( letters, '0' ) ); // null\nalert( <a href=\"#!/api/CKEDITOR.tools-method-indexOf\" rel=\"CKEDITOR.tools-method-indexOf\" class=\"docClass\">CKEDITOR.tools.indexOf</a>( letters, function( value ) {\n    // Return true when passed value has property 'prop'.\n    return value &amp;&amp; 'prop' in value;\n} ) );                                          // obj\n</code></pre>\n"},"setTimeout":{"!type":"fn(func: ?, milliseconds?: number, scope?: ?, args?: ?, ownerWindow?: ?)","!doc":"<p>Executes a function after specified delay.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.tools-method-setTimeout\" rel=\"CKEDITOR.tools-method-setTimeout\" class=\"docClass\">CKEDITOR.tools.setTimeout</a>( function() {\n    alert( 'Executed after 2 seconds' );\n}, 2000 );\n</code></pre>\n"},"trim":{"!type":"fn(str: string)","!doc":"<p>Removes spaces from the start and the end of a string. The following\ncharacters are removed: space, tab, line break, line feed.</p>\n\n<pre><code>alert( <a href=\"#!/api/CKEDITOR.tools-method-trim\" rel=\"CKEDITOR.tools-method-trim\" class=\"docClass\">CKEDITOR.tools.trim</a>( '  example ' ); // 'example'\n</code></pre>\n"},"tryThese":{"!type":"fn(fn: ?)","!doc":"<p>Returns the first successfully executed return value of a function that\ndoes not throw any exception.</p>\n"},"writeCssText":{"!type":"fn(styles: ?, sort?: bool)","!doc":"<p>Serializes the <code>style name =&gt; value</code> hash to a style text.</p>\n\n<pre><code>var styleObj = <a href=\"#!/api/CKEDITOR.tools-method-parseCssText\" rel=\"CKEDITOR.tools-method-parseCssText\" class=\"docClass\">CKEDITOR.tools.parseCssText</a>( 'color: red; border: none' );\nconsole.log( styleObj.color ); // -&gt; 'red'\n<a href=\"#!/api/CKEDITOR.tools-method-writeCssText\" rel=\"CKEDITOR.tools-method-writeCssText\" class=\"docClass\">CKEDITOR.tools.writeCssText</a>( styleObj ); // -&gt; 'color:red; border:none'\n<a href=\"#!/api/CKEDITOR.tools-method-writeCssText\" rel=\"CKEDITOR.tools-method-writeCssText\" class=\"docClass\">CKEDITOR.tools.writeCssText</a>( styleObj, true ); // -&gt; 'border:none; color:red'\n</code></pre>\n"}},"ui":{"button":{"handler":{"!doc":"<p>Represents button handler object.</p>\n","create":{"!type":"fn(definition: ?)","!doc":"<p>Transforms a button definition in a <a href=\"#!/api/CKEDITOR.ui.button\" rel=\"CKEDITOR.ui.button\" class=\"docClass\">CKEDITOR.ui.button</a> instance.</p>\n"}},"!doc":"<p>Represents a button UI element. This class should not be called directly. To\ncreate new buttons use <a href=\"#!/api/CKEDITOR.ui-method-addButton\" rel=\"CKEDITOR.ui-method-addButton\" class=\"docClass\">CKEDITOR.ui.addButton</a> instead.</p>\n","prototype":{"constructor":{"!type":"fn(definition: ?)","!doc":"<p>Creates a button class instance.</p>\n"}},"getState":{"!type":"fn(state: ?)","!doc":"<p>@todo</p>\n"},"render":{"!type":"fn(editor: ?, output: ?)","!doc":"<p>Renders the button.</p>\n"},"setState":{"!type":"fn(state: ?)","!doc":"<p>@todo</p>\n"},"toFeature":{"!type":"fn(Editor: ?)","!doc":"<p>Returns this button's <a href=\"#!/api/CKEDITOR.feature\" rel=\"CKEDITOR.feature\" class=\"docClass\">CKEDITOR.feature</a> instance.</p>\n\n<p>It may be this button instance if it has at least one of\n<code>allowedContent</code> and <code>requiredContent</code> properties. Otherwise,\nif command is bound to this button by <code>command</code> property, then\nthat command will be returned.</p>\n\n<p>This method implements <a href=\"#!/api/CKEDITOR.feature-method-toFeature\" rel=\"CKEDITOR.feature-method-toFeature\" class=\"docClass\">CKEDITOR.feature.toFeature</a> interface method.</p>\n"}},"dialog":{"button":{"!doc":"<p>A button with a label inside.</p>\n","eventProcessors":{"!doc":"<p>Defines the onChange event and onClick for button element definitions.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a button class instance.</p>\n"}},"accessKeyDown":{"!type":"fn()","!doc":"<p>Handler for the element's access key down event. Simulates a mouse\ndown to the button.</p>\n"},"accessKeyUp":{"!type":"fn()","!doc":"<p>Handler for the element's access key up event. Simulates a click to\nthe button.</p>\n"},"click":{"!type":"fn()","!doc":"<p>Simulates a click to the button.</p>\n"},"disable":{"!type":"fn()","!doc":"<p>Disables the button.</p>\n"},"enable":{"!type":"fn()","!doc":"<p>Enables the button.</p>\n"},"isEnabled":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"isVisible":{"!type":"fn()","!doc":"<p>@todo</p>\n"}},"uiElement":{"focus":{"!type":"fn()","!doc":"<p>Puts the focus to the UI object. Switches tabs if the UI object isn't in the active tab page.</p>\n\n<pre><code>uiElement.focus();\n</code></pre>\n"},"getDialog":{"!type":"fn()","!doc":"<p>Gets the parent dialog object containing this UI element.</p>\n\n<pre><code>var dialog = uiElement.getDialog();\n</code></pre>\n"},"getElement":{"!type":"fn()","!doc":"<p>Gets the root DOM element of this dialog UI object.</p>\n\n<pre><code>uiElement.getElement().hide();\n</code></pre>\n"},"getInputElement":{"!type":"fn()","!doc":"<p>Gets the DOM element that the user inputs values.</p>\n\n<p>This function is used by <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement-method-setValue\" rel=\"CKEDITOR.ui.dialog.uiElement-method-setValue\" class=\"docClass\">setValue</a>, <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement-method-getValue\" rel=\"CKEDITOR.ui.dialog.uiElement-method-getValue\" class=\"docClass\">getValue</a> and <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement-method-focus\" rel=\"CKEDITOR.ui.dialog.uiElement-method-focus\" class=\"docClass\">focus</a>. It should\nbe overrided in child classes where the input element isn't the root\nelement.</p>\n\n<pre><code>var rawValue = textInput.getInputElement().$.value;\n</code></pre>\n"},"getValue":{"!type":"fn()","!doc":"<p>Gets the current value of this dialog UI object.</p>\n\n<pre><code>var myValue = uiElement.getValue();\n</code></pre>\n"},"isChanged":{"!type":"fn()","!doc":"<p>Tells whether the UI object's value has changed.</p>\n\n<pre><code>if ( uiElement.isChanged() )\n    confirm( 'Value changed! Continue?' );\n</code></pre>\n"},"isFocusable":{"!type":"fn()","!doc":"<p>Determines whether an UI element is focus-able or not.\nFocus-able is defined as being both visible and enabled.</p>\n"},"registerEvents":{"!type":"fn(definition: ?)","!doc":"<p>Registers the <code>on*</code> event handlers defined in the element definition.</p>\n\n<p>The default behavior of this function is:</p>\n\n<ol>\n<li>If the on* event is defined in the class's eventProcesors list,\n then the registration is delegated to the corresponding function\n in the eventProcessors list.</li>\n<li>If the on* event is not defined in the eventProcessors list, then\n register the event handler under the corresponding DOM event of\n the UI element's input DOM element (as defined by the return value\n of <a href=\"#!/api/CKEDITOR.ui.dialog.uiElement-method-getInputElement\" rel=\"CKEDITOR.ui.dialog.uiElement-method-getInputElement\" class=\"docClass\">getInputElement</a>).</li>\n</ol>\n\n\n<p>This function is only called at UI element instantiation, but can\nbe overridded in child classes if they require more flexibility.</p>\n"},"selectParentTab":{"!type":"fn()","!doc":"<p>Selects the parent tab of this element. Usually called by focus() or overridden focus() methods.</p>\n\n<pre><code>focus : function() {\n    this.selectParentTab();\n    // do something else.\n}\n</code></pre>\n"},"setValue":{"!type":"fn(value: ?, noChangeEvent: bool)","!doc":"<p>Sets the value of this dialog UI object.</p>\n\n<pre><code>uiElement.setValue( 'Dingo' );\n</code></pre>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?, nodeNameArg?: ?, stylesArg?: ?, attributesArg?: ?, contentsArg?: ?)","!doc":"<p>Creates a uiElement class instance.</p>\n"}},"accessKeyDown":{"!type":"fn(dialog: ?, key: string)","!doc":"<p>The default handler for a UI element's access key down event, which\ntries to put focus to the UI element.</p>\n\n<p>Can be overridded in child classes for more sophisticaed behavior.</p>\n"},"disable":{"!type":"fn()","!doc":"<p>Disables a UI element.</p>\n"},"enable":{"!type":"fn()","!doc":"<p>Enables a UI element.</p>\n"},"isEnabled":{"!type":"fn()","!doc":"<p>Determines whether an UI element is enabled or not.</p>\n"},"isVisible":{"!type":"fn()","!doc":"<p>Determines whether an UI element is visible or not.</p>\n"},"eventProcessors":{"!doc":"<p>The event processor list used by\n<a href=\"#!/api/CKEDITOR.ui.dialog.uiElement-method-getInputElement\" rel=\"CKEDITOR.ui.dialog.uiElement-method-getInputElement\" class=\"docClass\">getInputElement</a> at UI element\ninstantiation. The default list defines three <code>on*</code> events:</p>\n\n<ol>\n<li><code>onLoad</code> - Called when the element's parent dialog opens for the\n first time.</li>\n<li><code>onShow</code> - Called whenever the element's parent dialog opens.</li>\n<li><p><code>onHide</code> - Called whenever the element's parent dialog closes.</p>\n\n<p> // This connects the 'click' event in <a href=\"#!/api/CKEDITOR.ui.dialog.button\" rel=\"CKEDITOR.ui.dialog.button\" class=\"docClass\">CKEDITOR.ui.dialog.button</a> to onClick\n // handlers in the UI element's definitions.\n <a href=\"#!/api/CKEDITOR.ui.dialog.button-property-eventProcessors\" rel=\"CKEDITOR.ui.dialog.button-property-eventProcessors\" class=\"docClass\">CKEDITOR.ui.dialog.button.eventProcessors</a> = <a href=\"#!/api/CKEDITOR.tools-method-extend\" rel=\"CKEDITOR.tools-method-extend\" class=\"docClass\">CKEDITOR.tools.extend</a>( {},\n     CKEDITOR.ui.dialog.uiElement.prototype.eventProcessors,\n     { onClick : function( dialog, func ) { this.on( 'click', func ); } },\n     true\n );</p></li>\n</ol>\n\n"},"accessKeyUp":{"!type":"fn(dialog: ?, key: string)","!doc":"<p>The default handler for a UI element's access key up event, which\ndoes nothing.</p>\n\n<p>Can be overridded in child classes for more sophisticated behavior.</p>\n"},"!doc":"<p>The base class of all dialog UI elements.</p>\n"},"checkbox":{"!doc":"<p>A single checkbox with a label on the right.</p>\n","eventProcessors":{"!doc":"<p>Defines the onChange event for UI element definitions.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a checkbox class instance.</p>\n"}},"accessKeyUp":{"!type":"fn()","!doc":"<p>Handler for the access key up event. Toggles the checkbox.</p>\n"},"getInputElement":{"!type":"fn()","!doc":"<p>Gets the checkbox DOM element.</p>\n"},"getValue":{"!type":"fn()","!doc":"<p>Gets the state of the checkbox.</p>\n"},"setValue":{"!type":"fn(checked: bool, noChangeEvent: bool)","!doc":"<p>Sets the state of the checkbox.</p>\n"}},"fieldset":{"!doc":"<p>Form fieldset for grouping dialog UI elements.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, childObjList: ?, childHtmlList: ?, htmlList: ?, elementDefinition: ?)","!doc":"<p>Creates a fieldset class instance.</p>\n"}}},"file":{"!doc":"<p>A file upload input.</p>\n","eventProcessors":{"!doc":"<p>Defines the onChange event for UI element definitions.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a file class instance.</p>\n"}},"getAction":{"!type":"fn()","!doc":"<p>Get the action assigned to the form.</p>\n"},"getInputElement":{"!type":"fn()","!doc":"<p>Gets the <code>&lt;input&gt;</code> element of this file input.</p>\n"},"registerEvents":{"!type":"fn(definition: ?)","!doc":"<p>The events must be applied on the inner input element, and\nthat must be done when the iframe &amp; form has been loaded.</p>\n"},"reset":{"!type":"fn()","!doc":"<p>Redraws the file input and resets the file path in the file input.\nThe redraw logic is necessary because non-IE browsers tend to clear\nthe <code>&lt;iframe&gt;</code> containing the file input after closing the dialog.</p>\n"},"setInitValue":{"!type":"fn()","!doc":"<p>The default value of input <code>type=\"file\"</code> is an empty string, but during initialization\nof this UI element, the iframe still isn't ready so it can't be read from that object\nSetting it manually prevents later issues about the current value (<code>''</code>) being different\nof the initial value (undefined as it asked for <code>.value</code> of a div).</p>\n"},"submit":{"!type":"fn()","!doc":"<p>Uploads the file in the file input.</p>\n"}},"labeledElement":{"getLabel":{"!type":"fn()","!doc":"<p>Retrieves the current label text of the elment.</p>\n"},"setLabel":{"!type":"fn(label: string)","!doc":"<p>Sets the label text of the element.</p>\n"},"!doc":"<p>Base class for all dialog elements with a textual label on the left.</p>\n","eventProcessors":{"!doc":"<p>Defines the onChange event for UI element definitions.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?, contentHtml: ?)","!doc":"<p>Creates a labeledElement class instance.</p>\n"}}},"fileButton":{"!doc":"<p>A button for submitting the file in a file upload input.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a fileButton class instance.</p>\n"}}},"hbox":{"!doc":"<p>Horizontal layout box for dialog UI elements, auto-expends to available width of container.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, childObjList: ?, childHtmlList: ?, htmlList: ?, elementDefinition: ?)","!doc":"<p>Creates a hbox class instance.</p>\n"}},"getChild":{"!type":"fn(indices: ?)","!doc":"<p>Gets a child UI element inside this container.</p>\n\n<pre><code>var checkbox = hbox.getChild( [0,1] );\ncheckbox.setValue( true );\n</code></pre>\n"}},"html":{"!doc":"<p>A dialog element made from raw HTML code.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a html class instance.</p>\n"}}},"iframeElement":{"!doc":"<p>An iframe element.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"\n"}}},"radio":{"!doc":"<p>A group of radio buttons.</p>\n","eventProcessors":{"!doc":"<p>Defines the onChange event for UI element definitions.</p>\n"},"prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a radio class instance.</p>\n"}},"accessKeyUp":{"!type":"fn()","!doc":"<p>Handler for the access key up event. Focuses the currently\nselected radio button, or the first radio button if none is selected.</p>\n"},"getValue":{"!type":"fn()","!doc":"<p>Gets the value of the currently checked radio button.</p>\n"},"setValue":{"!type":"fn(value: string, noChangeEvent: bool)","!doc":"<p>Checks one of the radio buttons in this button group.</p>\n"}},"select":{"!doc":"<p>A select box.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a button class instance.</p>\n"}},"add":{"!type":"fn(label: string, value?: string, index?: number)","!doc":"<p>Adds an option to the select box.</p>\n"},"clear":{"!type":"fn()","!doc":"<p>Clears all options out of the selection list.</p>\n"},"getInputElement":{"!type":"fn()","!doc":"<p>Gets the DOM element of the select box.</p>\n"},"remove":{"!type":"fn(index: number)","!doc":"<p>Removes an option from the selection list.</p>\n"}},"textarea":{"!doc":"<p>A text area with a label on the top or left.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a textarea class instance.</p>\n"}}},"textInput":{"!doc":"<p>A text input with a label. This UI element class represents both the\nsingle-line text inputs and password inputs in dialog boxes.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, elementDefinition: ?, htmlList: ?)","!doc":"<p>Creates a textInput class instance.</p>\n"}},"accessKeyUp":{"!type":"fn()","!doc":"<p>Handler for the text input's access key up event. Makes a <code>select()</code>\ncall to the text input.</p>\n"},"focus":{"!type":"fn()","!doc":"<p>Puts focus into the text input.</p>\n"},"getInputElement":{"!type":"fn()","!doc":"<p>Gets the text input DOM element under this UI object.</p>\n"},"select":{"!type":"fn()","!doc":"<p>Selects all the text in the text input.</p>\n"},"setValue":{"!type":"fn(value: ?)","!doc":"<p>Sets the value of this text input object.</p>\n\n<pre><code>uiElement.setValue( 'Blamo' );\n</code></pre>\n"}},"vbox":{"!doc":"<p>Vertical layout box for dialog UI elements.</p>\n","prototype":{"constructor":{"!type":"fn(dialog: ?, childObjList: ?, childHtmlList: ?, htmlList: ?, elementDefinition: ?)","!doc":"<p>Creates a vbox class instance.</p>\n"}}}},"floatPanel":{"!doc":"<p>Represents a floating panel UI element.</p>\n\n<p>It's reused by rich combos, color combos, menus, etc.\nand it renders its content using <a href=\"#!/api/CKEDITOR.ui.panel\" rel=\"CKEDITOR.ui.panel\" class=\"docClass\">CKEDITOR.ui.panel</a>.</p>\n\n<p>@todo</p>\n","prototype":{"constructor":{"!type":"fn(editor: ?, parentElement: ?, definition: ?, level: number)","!doc":"<p>Creates a floatPanel class instance.</p>\n"}},"addBlock":{"!type":"fn(name: ?, block: ?)","!doc":"<p>@todo</p>\n"},"addListBlock":{"!type":"fn(name: ?, multiSelect: ?)","!doc":"<p>@todo</p>\n"},"allowBlur":{"!type":"fn(allow: ?)","!doc":"<p>@todo</p>\n"},"blur":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"focus":{"!type":"fn()","!doc":"<p>Restores last focused element or simply focus panel window.</p>\n"},"getBlock":{"!type":"fn(name: ?)","!doc":"<p>@todo</p>\n"},"hide":{"!type":"fn(returnFocus: ?)","!doc":"<p>Hides panel.</p>\n\n<p>@todo</p>\n"},"hideChild":{"!type":"fn(restoreFocus: ?)","!doc":"<p>@todo</p>\n"},"showAsChild":{"!type":"fn(panel: ?, blockName: string, offsetParent: ?, corner: number, offsetX?: number, offsetY?: number)","!doc":"<p>Shows specified panel as a child of one block of this one.</p>\n"},"showBlock":{"!type":"fn(name: string, offsetParent: ?, corner: number, offsetX?: number, offsetY?: number, callback?: ?)","!doc":"<p>Shows panel block.</p>\n"}},"handlerDefinition":{"!doc":"<p>Virtual class which just illustrates the features of handler objects to be\npassed to the <a href=\"#!/api/CKEDITOR.ui-method-addHandler\" rel=\"CKEDITOR.ui-method-addHandler\" class=\"docClass\">CKEDITOR.ui.addHandler</a> function.\nThis class is not really part of the API, so don't call its constructor.</p>\n","prototype":{"create":{"!type":"fn(definition: ?)","!doc":"<p>Transforms an item definition into an UI item object.</p>\n\n<pre><code>editorInstance.ui.addHandler( <a href=\"#!/api/CKEDITOR-property-UI_BUTTON\" rel=\"CKEDITOR-property-UI_BUTTON\" class=\"docClass\">CKEDITOR.UI_BUTTON</a>, {\n    create: function( definition ) {\n        return new <a href=\"#!/api/CKEDITOR.ui.button\" rel=\"CKEDITOR.ui.button\" class=\"docClass\">CKEDITOR.ui.button</a>( definition );\n    }\n} );\n</code></pre>\n"}}},"!doc":"<p>Contains UI features related to an editor instance.</p>\n","_":{"!doc":"<p>Object used to hold private stuff.</p>\n"},"prototype":{"constructor":{"!type":"fn(editor: ?)","!doc":"<p>Creates an ui class instance.</p>\n"}},"add":{"!type":"fn(name: string, type: ?, definition: ?)","!doc":"<p>Adds a UI item to the items collection. These items can be later used in\nthe interface.</p>\n\n<pre><code>// Add a new button named 'MyBold'.\neditorInstance.ui.add( 'MyBold', <a href=\"#!/api/CKEDITOR-property-UI_BUTTON\" rel=\"CKEDITOR-property-UI_BUTTON\" class=\"docClass\">CKEDITOR.UI_BUTTON</a>, {\n    label: 'My Bold',\n    command: 'bold'\n} );\n</code></pre>\n"},"addButton":{"!type":"fn(name: string, definition: ?)","!doc":"<p>Adds a button definition to the UI elements list.</p>\n\n<pre><code>editorInstance.ui.addButton( 'MyBold', {\n    label: 'My Bold',\n    command: 'bold',\n    toolbar: 'basicstyles,1'\n} );\n</code></pre>\n"},"addHandler":{"!type":"fn(type: ?, handler: ?)","!doc":"<p>Adds a handler for a UI item type. The handler is responsible for\ntransforming UI item definitions in UI objects.</p>\n"},"addRichCombo":{"!type":"fn(name: string, definition: ?)","!doc":"\n"},"addToolbarGroup":{"!type":"fn(name: string, previous: ?, subgroupOf?: string)","!doc":"<p>Add toolbar group. See <a href=\"#!/api/CKEDITOR.config-cfg-toolbarGroups\" rel=\"CKEDITOR.config-cfg-toolbarGroups\" class=\"docClass\">CKEDITOR.config.toolbarGroups</a> for more details.</p>\n\n<p><strong>Note:</strong> This method won't modify toolbar groups set explicitly by\n<a href=\"#!/api/CKEDITOR.config-cfg-toolbarGroups\" rel=\"CKEDITOR.config-cfg-toolbarGroups\" class=\"docClass\">CKEDITOR.config.toolbarGroups</a>. It will extend only default setting.</p>\n"},"create":{"!type":"fn(name: string)","!doc":"<p>Gets a UI object.</p>\n"},"get":{"!type":"fn(name: string)","!doc":"<p>Retrieve the created ui objects by name.</p>\n"},"space":{"!type":"fn(name: string)","!doc":"<p>Returns the unique DOM element that represents one editor's UI part, as\nthe editor UI is made completely decoupled from DOM (no DOM reference hold),\nthis method is mainly used to retrieve the rendered DOM part by name.</p>\n\n<pre><code>// Hide the bottom space in the UI.\nvar bottom = editor.ui.getSpace( 'bottom' );\nbottom.setStyle( 'display', 'none' );\n</code></pre>\n"},"spaceId":{"!type":"fn(name: ?)","!doc":"<p>Generate the HTML ID from a specific UI space name.</p>\n"},"menuButton":{"!doc":"<p>@todo</p>\n","prototype":{"constructor":{"!type":"fn(Object: ?)","!doc":"<p>Creates a menuButton class instance.</p>\n"}}},"panel":{"block":{"!doc":"<p>@todo class and all methods</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a block class instances.@todo</p>\n"}},"markItem":{"!type":"fn(index: ?)","!doc":"<p>Mark the item specified by the index as current activated.</p>\n"}},"handler":{"!doc":"<p>Represents panel handler object.</p>\n","create":{"!type":"fn(definition: ?)","!doc":"<p>Transforms a panel definition in a <a href=\"#!/api/CKEDITOR.ui.panel\" rel=\"CKEDITOR.ui.panel\" class=\"docClass\">CKEDITOR.ui.panel</a> instance.</p>\n"}},"!doc":"\n","prototype":{"constructor":{"!type":"fn(document: ?, definition: ?)","!doc":"<p>Creates a panel class instance.</p>\n"}},"addBlock":{"!type":"fn(name: ?, block: ?)","!doc":"<p>@todo</p>\n"},"destroy":{"!type":"fn()","!doc":"<p>@todo</p>\n"},"getBlock":{"!type":"fn(name: ?)","!doc":"<p>@todo</p>\n"},"render":{"!type":"fn(editor: ?, output?: ?)","!doc":"<p>Renders the combo.</p>\n"},"showBlock":{"!type":"fn(name: ?)","!doc":"<p>@todo</p>\n"}},"panelButton":{"!doc":"<p>@todo class and methods</p>\n","prototype":{"constructor":{"!type":"fn()","!doc":"<p>Creates a panelButton class instance.</p>\n"}}},"richCombo":{"handler":{"!doc":"<p>Represents richCombo handler object.</p>\n","create":{"!type":"fn(definition: ?)","!doc":"<p>Transforms a richCombo definition in a <a href=\"#!/api/CKEDITOR.ui.richCombo\" rel=\"CKEDITOR.ui.richCombo\" class=\"docClass\">CKEDITOR.ui.richCombo</a> instance.</p>\n"}},"!doc":"<p>@todo</p>\n","render":{"!type":"fn(editor: ?, output: ?)","!doc":"<p>Renders the combo.</p>\n"}}},"xml":{"!doc":"<p>Represents a loaded XML document.</p>\n\n<pre><code>var xml = new <a href=\"#!/api/CKEDITOR.xml\" rel=\"CKEDITOR.xml\" class=\"docClass\">CKEDITOR.xml</a>( '&lt;books&gt;&lt;book title=\"My Book\" /&gt;&lt;/books&gt;' );\n</code></pre>\n","baseXml":{"!doc":"<p>The native XML (DOM document) used by the class instance.</p>\n"},"prototype":{"constructor":{"!type":"fn(xmlObjectOrData: ?)","!doc":"<p>Creates xml class instance.</p>\n"}},"getInnerXml":{"!type":"fn(xpath: string, contextNode?: ?)","!doc":"<p>Gets the string representation of hte inner contents of a XML node,\nbased on a XPath query.</p>\n\n<pre><code>// Create the XML instance.\nvar xml = new <a href=\"#!/api/CKEDITOR.xml\" rel=\"CKEDITOR.xml\" class=\"docClass\">CKEDITOR.xml</a>( '&lt;list&gt;&lt;item id=\"test1\" /&gt;&lt;item id=\"test2\" /&gt;&lt;/list&gt;' );\n// Alert \"&lt;item id=\"test1\" /&gt;&lt;item id=\"test2\" /&gt;\".\nalert( xml.getInnerXml( 'list' ) );\n</code></pre>\n"},"selectNodes":{"!type":"fn(xpath: string, contextNode?: ?)","!doc":"<p>Gets a list node from the XML document, based on a XPath query.</p>\n\n<pre><code>// Create the XML instance.\nvar xml = new <a href=\"#!/api/CKEDITOR.xml\" rel=\"CKEDITOR.xml\" class=\"docClass\">CKEDITOR.xml</a>( '&lt;list&gt;&lt;item id=\"test1\" /&gt;&lt;item id=\"test2\" /&gt;&lt;/list&gt;' );\n// Get all &lt;item&gt; nodes.\nvar itemNodes = xml.selectNodes( 'list/item' );\n// Alert \"item\" twice, one for each &lt;item&gt;.\nfor ( var i = 0; i &lt; itemNodes.length; i++ )\n    alert( itemNodes[i].nodeName );\n</code></pre>\n"},"selectSingleNode":{"!type":"fn(xpath: string, contextNode?: ?)","!doc":"<p>Get a single node from the XML document, based on a XPath query.</p>\n\n<pre><code>// Create the XML instance.\nvar xml = new <a href=\"#!/api/CKEDITOR.xml\" rel=\"CKEDITOR.xml\" class=\"docClass\">CKEDITOR.xml</a>( '&lt;list&gt;&lt;item id=\"test1\" /&gt;&lt;item id=\"test2\" /&gt;&lt;/list&gt;' );\n// Get the first &lt;item&gt; node.\nvar itemNode = &lt;b&gt;xml.selectSingleNode( 'list/item' )&lt;/b&gt;;\n// Alert \"item\".\nalert( itemNode.nodeName );\n</code></pre>\n"}}},"CKEDITOR_Adapters":{"jQuery":{"!doc":"<p>The jQuery Adapter allows for easy use of basic CKEditor functions and access to the internal API.\nTo find more information about the jQuery Adapter, go to the <a href=\"#!/guide/dev_jquery\">jQuery Adapter section</a>\nof the Developer's Guide or see the \"Create Editors with jQuery\" sample.</p>\n","editor":{"!doc":"<p>Existing CKEditor instance. Allows to easily use the internal API.</p>\n\n<p><strong>Note</strong>: This is not a jQuery object.</p>\n\n<pre><code>var editor = $( 'textarea' ).ckeditor().editor;\n</code></pre>\n"},"prototype":{"promise":{"!doc":"<p>The <a href=\"(http://api.jquery.com/promise/\">jQuery Promise object</a>) that handles the asynchronous constructor.\nThis promise will be resolved after <strong>all</strong> of the constructors.</p>\n"},"val":{"!type":"fn()","!doc":"<p>Overwritten jQuery <code>val()</code> method for <code>&lt;textarea&gt;</code> elements that have bound CKEditor instances.\nThis method gets or sets editor content by using the <a href=\"#!/api/CKEDITOR.editor-method-getData\" rel=\"CKEDITOR.editor-method-getData\" class=\"docClass\">editor.getData()</a>\nor <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">editor.setData()</a> methods. To handle\nthe <a href=\"#!/api/CKEDITOR.editor-method-setData\" rel=\"CKEDITOR.editor-method-setData\" class=\"docClass\">editor.setData()</a> callback (as <code>setData</code> is asynchronous),\n<code>val( 'some data' )</code> will return a <a href=\"http://api.jquery.com/promise/\">jQuery Promise object</a>.</p>\n"}},"ckeditor":{"!type":"fn(callback: ?, config: ?)","!doc":"<p>A jQuery function which triggers the creation of CKEditor with <code>&lt;textarea&gt;</code> and\n<a href=\"#!/api/CKEDITOR.dtd-property-S-editable\" rel=\"CKEDITOR.dtd-property-S-editable\" class=\"docClass\">editable</a> elements.\nEvery <code>&lt;textarea&gt;</code> element will be converted to a classic (<code>iframe</code>-based) editor,\nwhile any other supported element will be converted to an inline editor.\nThis method binds the callback to the <code>instanceReady</code> event of all instances.\nIf the editor has already been created, the callback is fired straightaway.\nYou can also create multiple editors at once by using <code>$( '.className' ).ckeditor();</code>.</p>\n\n<p><strong>Note</strong>: jQuery chaining and mixed parameter order is allowed.</p>\n"},"ckeditorGet":{"!type":"fn()","!doc":"<p>Returns an existing CKEditor instance for the first matched element.\nAllows to easily use the internal API. Does not return a jQuery object.</p>\n\n<p>Raises an exception if the editor does not exist or is not ready yet.</p>\n"}}},"CKEDITOR_LANGS":{"!doc":"<p>@license Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license</p>\n"}}

});  
